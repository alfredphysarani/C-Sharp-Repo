#define CORECLR_RUNTIME
#include <xamarin/xamarin.h>
#include "registrar.h"
extern "C" {
static id native_to_managed_trampoline_1 (id self, SEL _cmd, MonoMethod **managed_method_ptr, bool* call_super, uint32_t token_ref)
{
	MonoClass *declaring_type = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	bool has_nsobject = xamarin_has_nsobject (self, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	if (has_nsobject) {
		*call_super = true;
		goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	declaring_type = mono_method_get_class (managed_method);
	mthis = xamarin_new_nsobject (self, declaring_type, &exception_gchandle);
	xamarin_mono_object_release (&declaring_type);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return self;
}


static void native_to_managed_trampoline_2 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_3 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_4 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_5 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, bool* call_super, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoClass *declaring_type = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	bool has_nsobject = xamarin_has_nsobject (self, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	if (has_nsobject) {
		*call_super = true;
		goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;

	declaring_type = mono_method_get_class (managed_method);
	mthis = xamarin_new_nsobject (self, declaring_type, &exception_gchandle);
	xamarin_mono_object_release (&declaring_type);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return self;
}


static id native_to_managed_trampoline_6 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id* p2, bool* call_super, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *mobj2 = NULL;
	MonoObject *mobj_out2 = NULL;
	void * handle2 = NULL;
	MonoClass *declaring_type = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	bool has_nsobject = xamarin_has_nsobject (self, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	if (has_nsobject) {
		*call_super = true;
		goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	mobj_out2 = mobj2;
	arg_ptrs [2] = (int *) &mobj_out2;

	declaring_type = mono_method_get_class (managed_method);
	mthis = xamarin_new_nsobject (self, declaring_type, &exception_gchandle);
	xamarin_mono_object_release (&declaring_type);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (mobj_out2 != NULL) {
		handle2 = xamarin_get_nsobject_handle (mobj_out2);
		xamarin_mono_object_release (&mobj_out2);
	}
	if (p2 != NULL)
		*p2 = (id) handle2;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return self;
}


static float native_to_managed_trampoline_7 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	float res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(float *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_8 (id self, SEL _cmd, MonoMethod **managed_method_ptr, float p0, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = &p0;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static CGAffineTransform native_to_managed_trampoline_9 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGAffineTransform res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGAffineTransform *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_10 (id self, SEL _cmd, MonoMethod **managed_method_ptr, CGAffineTransform p0, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = &p0;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void * native_to_managed_trampoline_11 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	void * res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(void * *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_12 (id self, SEL _cmd, MonoMethod **managed_method_ptr, void * p0, uint32_t token_ref)
{
	void * a0 = p0;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = &a0;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static CGRect native_to_managed_trampoline_13 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGRect res = {{0}};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGRect *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_14 (id self, SEL _cmd, MonoMethod **managed_method_ptr, CGRect p0, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = &p0;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static CGPoint native_to_managed_trampoline_15 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGPoint res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGPoint *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_16 (id self, SEL _cmd, MonoMethod **managed_method_ptr, CGPoint p0, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = &p0;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static BOOL native_to_managed_trampoline_17 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_18 (id self, SEL _cmd, MonoMethod **managed_method_ptr, BOOL p0, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = &p0;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_19 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_handle_for_inativeobject ((MonoObject *) retval, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		xamarin_framework_peer_waypoint ();
		if (retobj != NULL) {
			bool retained = xamarin_attempt_retain_nsobject (retval, &exception_gchandle);
			if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
			if (retained) {
				[retobj autorelease];
			}
			mt_dummy_use (retval);
			res = retobj;
		} else {
			res = NULL;
		}
	}

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_20 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	MonoType *type0;
	MonoObject *inobj0 = NULL;
	MonoReflectionType *reflectiontype0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	type0 = xamarin_get_parameter_type (managed_method, 0);
	reflectiontype0 = mono_type_get_object (mono_domain_get (), type0);
	inobj0 = xamarin_get_inative_object_dynamic (p0, false, reflectiontype0, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = inobj0;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&type0);
	xamarin_mono_object_release (&inobj0);
	xamarin_mono_object_release (&reflectiontype0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_21 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_nsobject_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_22 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	MonoArray *marr0 = NULL;
	NSArray *arr0 = NULL;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arr0 = p0;
	paramtype0 = xamarin_get_parameter_type (managed_method, 0);
	marr0 = xamarin_nsarray_to_managed_nsobject_array (arr0, paramtype0, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = marr0;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&marr0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_23 (id self, SEL _cmd, MonoMethod **managed_method_ptr, void * p0, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = &p0;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_24 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		res = xamarin_string_to_nsstring ((MonoString *) retval, false);
	}

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_25 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	MonoString *a0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	a0 = xamarin_nsstring_to_string (NULL, p0);
	arg_ptrs [0] = a0;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&a0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static BOOL native_to_managed_trampoline_26 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_27 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a1 = p1;
	void * a2 = p2;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &a1;
	arg_ptrs [2] = &a2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_28 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, BOOL p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_29 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_30 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_31 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;
	arg_ptrs [2] = &p2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_32 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_33 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_34 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	arg_ptrs [2] = &p2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_35 (id self, SEL _cmd, MonoMethod **managed_method_ptr, void * p0, id p1, uint32_t token_ref)
{
	void * a0 = p0;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = &a0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static Class native_to_managed_trampoline_36 (id self, SEL _cmd, MonoMethod **managed_method_ptr, Class p0, uint32_t token_ref)
{
	MonoObject *a0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	Class res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	a0 = p0 ? xamarin_get_class (p0, &exception_gchandle) : NULL;
	arg_ptrs [0] = a0;
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		res = (Class) xamarin_get_handle_for_inativeobject (retval, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}

exception_handling:
	xamarin_mono_object_release (&a0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static Class native_to_managed_trampoline_37 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	MonoString *a0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	Class res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	a0 = xamarin_nsstring_to_string (NULL, p0);
	arg_ptrs [0] = a0;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		res = (Class) xamarin_get_handle_for_inativeobject (retval, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}

exception_handling:
	xamarin_mono_object_release (&a0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_38 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		res = xamarin_string_to_nsstring ((MonoString *) retval, false);
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static CGFloat native_to_managed_trampoline_39 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, CGFloat p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGFloat res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGFloat *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_40 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *del2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	if (p2) {
		del2 = xamarin_get_delegate_for_block_parameter (managed_method, 0x36A9 /* System.Action`1<PassKit.PKPaymentAuthorizationResult> ObjCRuntime.Trampolines/NIDActionArity1V78::Create(System.IntPtr) */ , 2, p2, &exception_gchandle);
		arg_ptrs [2] = del2;
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	} else {
		arg_ptrs [2] = NULL;
	}

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&del2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_41 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoObject *del2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	if (p2) {
		del2 = xamarin_get_delegate_for_block_parameter (managed_method, 0x36AD /* System.Action`1<PassKit.PKPaymentRequestCouponCodeUpdate> ObjCRuntime.Trampolines/NIDActionArity1V82::Create(System.IntPtr) */ , 2, p2, &exception_gchandle);
		arg_ptrs [2] = del2;
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	} else {
		arg_ptrs [2] = NULL;
	}

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&del2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_42 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *del1 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	if (p1) {
		del1 = xamarin_get_delegate_for_block_parameter (managed_method, 0x36B1 /* System.Action`1<PassKit.PKPaymentRequestMerchantSessionUpdate> ObjCRuntime.Trampolines/NIDActionArity1V81::Create(System.IntPtr) */ , 1, p1, &exception_gchandle);
		arg_ptrs [1] = del1;
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	} else {
		arg_ptrs [1] = NULL;
	}

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&del1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_43 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *del2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	if (p2) {
		del2 = xamarin_get_delegate_for_block_parameter (managed_method, 0x36B5 /* System.Action`1<PassKit.PKPaymentRequestPaymentMethodUpdate> ObjCRuntime.Trampolines/NIDActionArity1V79::Create(System.IntPtr) */ , 2, p2, &exception_gchandle);
		arg_ptrs [2] = del2;
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	} else {
		arg_ptrs [2] = NULL;
	}

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&del2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_44 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *del2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	if (p2) {
		del2 = xamarin_get_delegate_for_block_parameter (managed_method, 0x36B9 /* System.Action`1<PassKit.PKPaymentRequestShippingContactUpdate> ObjCRuntime.Trampolines/NIDActionArity1V80::Create(System.IntPtr) */ , 2, p2, &exception_gchandle);
		arg_ptrs [2] = del2;
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	} else {
		arg_ptrs [2] = NULL;
	}

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&del2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_45 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *del2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	if (p2) {
		del2 = xamarin_get_delegate_for_block_parameter (managed_method, 0x36BD /* System.Action`1<PassKit.PKPaymentRequestShippingMethodUpdate> ObjCRuntime.Trampolines/NIDActionArity1V83::Create(System.IntPtr) */ , 2, p2, &exception_gchandle);
		arg_ptrs [2] = del2;
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	} else {
		arg_ptrs [2] = NULL;
	}

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&del2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_46 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, NSUInteger p2, NSUInteger p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	unsigned long long nativeEnum2 = p2;
	unsigned long long nativeEnum3 = p3;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &nativeEnum2;
	arg_ptrs [3] = &nativeEnum3;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_47 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSArray * p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoArray *marr1 = NULL;
	NSArray *arr1 = NULL;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arr1 = p1;
	paramtype1 = xamarin_get_parameter_type (managed_method, 1);
	marr1 = xamarin_nsarray_to_managed_inativeobject_array_static (arr1, paramtype1, NULL, 0xD97 /* MapKit.IMKAnnotation */ , 0xD99 /* MapKit.MKAnnotationWrapper */ , &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = marr1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&marr1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_48 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoArray *marr1 = NULL;
	NSArray *arr1 = NULL;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arr1 = p1;
	paramtype1 = xamarin_get_parameter_type (managed_method, 1);
	marr1 = xamarin_nsarray_to_managed_nsobject_array (arr1, paramtype1, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = marr1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&marr1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_49 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSUInteger p1, BOOL p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	unsigned long long nativeEnum1 = p1;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &nativeEnum1;
	arg_ptrs [2] = &p2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_50 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *inobj1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	inobj1 = xamarin_get_inative_object_static (p1, false, 0xD97 /* MapKit.IMKAnnotation */, 0xD99 /* MapKit.MKAnnotationWrapper */, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = inobj1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&inobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_51 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *inobj1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	inobj1 = xamarin_get_inative_object_static (p1, false, 0xDA3 /* MapKit.IMKOverlay */, 0xDA5 /* MapKit.MKOverlayWrapper */, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = inobj1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&inobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_52 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, id p4, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	NSObject *nsobj4 = NULL;
	MonoObject *mobj4 = NULL;
	int32_t created4 = false;
	MonoType *paramtype4 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [5];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;
	nsobj4 = (NSObject *) p4;
	if (nsobj4) {
		paramtype4 = xamarin_get_parameter_type (managed_method, 4);
		mobj4 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj4, false, paramtype4, &created4, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype4, 4, true);
			goto exception_handling;
		}
	}
	arg_ptrs [4] = mobj4;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&paramtype4);
	xamarin_mono_object_release (&mobj4);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_53 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a1 = p1;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &a1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_54 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a1 = p1;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &a1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static BOOL native_to_managed_trampoline_55 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_56 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_57 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_58 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, void * p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	void * a3 = p3;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	arg_ptrs [3] = &a3;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_59 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, void * p4, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	void * a4 = p4;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [5];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;
	arg_ptrs [4] = &a4;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_60 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoString *a2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	a2 = xamarin_nsstring_to_string (NULL, p2);
	arg_ptrs [2] = a2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&a2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static BOOL native_to_managed_trampoline_61 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_62 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, NSInteger p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	long long nativeEnum2 = p2;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	arg_ptrs [2] = &nativeEnum2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_63 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, NSInteger p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	long long nativeEnum2 = p2;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &nativeEnum2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_64 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSArray * p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoArray *marr1 = NULL;
	NSArray *arr1 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arr1 = p1;
	marr1 = xamarin_nsarray_to_managed_string_array (arr1, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = marr1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&marr1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_65 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_66 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_67 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, double p2, id p3, id p4, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	NSObject *nsobj4 = NULL;
	MonoObject *mobj4 = NULL;
	int32_t created4 = false;
	MonoType *paramtype4 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [5];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &p2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;
	nsobj4 = (NSObject *) p4;
	if (nsobj4) {
		paramtype4 = xamarin_get_parameter_type (managed_method, 4);
		mobj4 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj4, false, paramtype4, &created4, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype4, 4, true);
			goto exception_handling;
		}
	}
	arg_ptrs [4] = mobj4;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&paramtype4);
	xamarin_mono_object_release (&mobj4);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_68 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_69 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_70 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, void * p2, id p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	void * a2 = p2;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &a2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_71 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, id p4, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	NSObject *nsobj4 = NULL;
	MonoObject *mobj4 = NULL;
	int32_t created4 = false;
	MonoType *paramtype4 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [5];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;
	nsobj4 = (NSObject *) p4;
	if (nsobj4) {
		paramtype4 = xamarin_get_parameter_type (managed_method, 4);
		mobj4 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj4, false, paramtype4, &created4, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype4, 4, true);
			goto exception_handling;
		}
	}
	arg_ptrs [4] = mobj4;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&paramtype4);
	xamarin_mono_object_release (&mobj4);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_72 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static unsigned long long native_to_managed_trampoline_73 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, CGPoint p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	unsigned long long res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(unsigned long long *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_74 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, CGRect p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static CGRect native_to_managed_trampoline_75 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGRect res = {{0}};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGRect *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_76 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoArray *marr2 = NULL;
	NSArray *arr2 = NULL;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arr2 = p2;
	paramtype2 = xamarin_get_parameter_type (managed_method, 2);
	marr2 = xamarin_nsarray_to_managed_nsobject_array (arr2, paramtype2, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [2] = marr2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_nsobject_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&marr2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static unsigned long long native_to_managed_trampoline_77 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *inobj1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	unsigned long long res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	inobj1 = xamarin_get_inative_object_static (p1, false, 0x2FFB /* AppKit.INSDraggingInfo */, 0x2FFD /* AppKit.NSDraggingInfoWrapper */, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = inobj1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(unsigned long long *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&inobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static float native_to_managed_trampoline_78 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	float res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(float *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_79 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, NSUInteger p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	unsigned long long nativeEnum2 = p2;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &nativeEnum2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static BOOL native_to_managed_trampoline_80 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_81 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoString *a2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	a2 = xamarin_nsstring_to_string (NULL, p2);
	arg_ptrs [2] = a2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		res = xamarin_string_to_nsstring ((MonoString *) retval, false);
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&a2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_82 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoString *a2 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	a2 = xamarin_nsstring_to_string (NULL, p2);
	arg_ptrs [2] = a2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		res = xamarin_string_to_nsstring ((MonoString *) retval, false);
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&a2);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_83 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *inobj1 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	inobj1 = xamarin_get_inative_object_static (p1, false, 0x1387 /* WebKit.IWebOpenPanelResultListener */, 0x1389 /* WebKit.WebOpenPanelResultListenerWrapper */, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = inobj1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&inobj1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static BOOL native_to_managed_trampoline_84 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, SEL p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *a1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = p1 ? xamarin_get_selector (p1, &exception_gchandle) : NULL;
	arg_ptrs [1] = a1;
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_85 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, BOOL p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_86 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, unsigned long long p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *inobj2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;
	inobj2 = xamarin_get_inative_object_static (p2, false, 0x2FFB /* AppKit.INSDraggingInfo */, 0x2FFD /* AppKit.NSDraggingInfoWrapper */, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [2] = inobj2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&inobj2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_87 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, unsigned long long p1, CGPoint p2, id p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;
	arg_ptrs [2] = &p2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_88 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, id p4, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	NSObject *nsobj4 = NULL;
	MonoObject *mobj4 = NULL;
	int32_t created4 = false;
	MonoType *paramtype4 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [5];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;
	nsobj4 = (NSObject *) p4;
	if (nsobj4) {
		paramtype4 = xamarin_get_parameter_type (managed_method, 4);
		mobj4 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj4, false, paramtype4, &created4, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype4, 4, true);
			goto exception_handling;
		}
	}
	arg_ptrs [4] = mobj4;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&paramtype4);
	xamarin_mono_object_release (&mobj4);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_89 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, id p4, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoString *a3 = NULL;
	NSObject *nsobj4 = NULL;
	MonoObject *mobj4 = NULL;
	int32_t created4 = false;
	MonoType *paramtype4 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [5];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	a3 = xamarin_nsstring_to_string (NULL, p3);
	arg_ptrs [3] = a3;
	nsobj4 = (NSObject *) p4;
	if (nsobj4) {
		paramtype4 = xamarin_get_parameter_type (managed_method, 4);
		mobj4 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj4, false, paramtype4, &created4, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype4, 4, true);
			goto exception_handling;
		}
	}
	arg_ptrs [4] = mobj4;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&a3);
	xamarin_mono_object_release (&paramtype4);
	xamarin_mono_object_release (&mobj4);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static Class native_to_managed_trampoline_90 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, NSArray * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoArray *marr2 = NULL;
	NSArray *arr2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	Class res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	arr2 = p2;
	marr2 = xamarin_nsarray_to_managed_string_array (arr2, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [2] = marr2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		res = (Class) xamarin_get_handle_for_inativeobject (retval, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&marr2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_91 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;

	mono_runtime_invoke (managed_method, NULL, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_92 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSUInteger p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	unsigned long long nativeEnum1 = p1;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &nativeEnum1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static NSUInteger native_to_managed_trampoline_93 (id self, SEL _cmd, MonoMethod **managed_method_ptr, uint32_t token_ref)
{
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	NSUInteger res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [0];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(NSUInteger *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void * native_to_managed_trampoline_94 (id self, SEL _cmd, MonoMethod **managed_method_ptr, void * p0, void * p1, uint32_t token_ref)
{
	void * a0 = p0;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	void * res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = &a0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(void * *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_95 (id self, SEL _cmd, MonoMethod **managed_method_ptr, void ** p0, void ** p1, uint32_t token_ref)
{
	void ** a0 = 0;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = &a0;
	arg_ptrs [1] = p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	*p0 = a0;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_96 (id self, SEL _cmd, MonoMethod **managed_method_ptr, NSUInteger p0, void * p1, void * p2, uint32_t token_ref)
{
	unsigned long long nativeEnum0 = p0;
	void * a1 = p1;
	void * a2 = p2;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [0] = &nativeEnum0;
	arg_ptrs [1] = &a1;
	arg_ptrs [2] = &a2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_97 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_98 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, BOOL p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	arg_ptrs [2] = &p2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_99 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, BOOL p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &p2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_100 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, unsigned int p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_101 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSInteger p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	long long nativeEnum1 = p1;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &nativeEnum1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_102 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoArray *marr1 = NULL;
	NSArray *arr1 = NULL;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arr1 = p1;
	paramtype1 = xamarin_get_parameter_type (managed_method, 1);
	marr1 = xamarin_nsarray_to_managed_nsobject_array (arr1, paramtype1, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = marr1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&marr1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_103 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, unsigned short p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static BOOL native_to_managed_trampoline_104 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, BOOL p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static NSUInteger native_to_managed_trampoline_105 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	NSUInteger res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(NSUInteger *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_106 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *del2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	if (p2) {
		del2 = xamarin_get_delegate_for_block_parameter (managed_method, 0x3AA5 /* AppKit.ContinueUserActivityRestorationHandler ObjCRuntime.Trampolines/NIDContinueUserActivityRestorationHandler::Create(System.IntPtr) */ , 2, p2, &exception_gchandle);
		arg_ptrs [2] = del2;
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	} else {
		arg_ptrs [2] = NULL;
	}

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&del2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static NSUInteger native_to_managed_trampoline_107 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSArray * p1, id p2, BOOL p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoArray *marr1 = NULL;
	NSArray *arr1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	NSUInteger res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arr1 = p1;
	marr1 = xamarin_nsarray_to_managed_string_array (arr1, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = marr1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	arg_ptrs [3] = &p3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(NSUInteger *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&marr1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_108 (id self, SEL _cmd, MonoMethod **managed_method_ptr, SEL p0, uint32_t token_ref)
{
	MonoObject *a0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	a0 = p0 ? xamarin_get_selector (p0, &exception_gchandle) : NULL;
	arg_ptrs [0] = a0;
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&a0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_109 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a1 = p1;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &a1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_110 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	void * a2 = p2;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &a2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_111 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	void * a2 = p2;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &a2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void * native_to_managed_trampoline_112 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, void * p2, id p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a1 = p1;
	void * a2 = p2;
	MonoString *a3 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	void * res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &a1;
	arg_ptrs [2] = &a2;
	a3 = xamarin_nsstring_to_string (NULL, p3);
	arg_ptrs [3] = a3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(void * *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a3);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static CGFloat native_to_managed_trampoline_113 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a1 = p1;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGFloat res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &a1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGFloat *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_114 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	void * a2 = p2;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &a2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		res = xamarin_string_to_nsstring ((MonoString *) retval, false);
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_115 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, CGRect* p2, id p3, void * p4, CGPoint p5, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	void * a4 = p4;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [6];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = p2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;
	arg_ptrs [4] = &a4;
	arg_ptrs [5] = &p5;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_116 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a1 = p1;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &a1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_117 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, NSInteger p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a1 = p1;
	long long nativeEnum2 = p2;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &a1;
	arg_ptrs [2] = &nativeEnum2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_nsobject_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_118 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	void * a2 = p2;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &a2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_119 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a1 = p1;
	void * a2 = p2;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &a1;
	arg_ptrs [2] = &a2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_120 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, void * p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	void * a3 = p3;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	arg_ptrs [3] = &a3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_121 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoString *a2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	a2 = xamarin_nsstring_to_string (NULL, p2);
	arg_ptrs [2] = a2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&a2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_122 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoString *a2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	a2 = xamarin_nsstring_to_string (NULL, p2);
	arg_ptrs [2] = a2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&a2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_123 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoString *a2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	a2 = xamarin_nsstring_to_string (NULL, p2);
	arg_ptrs [2] = a2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&a2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static BOOL native_to_managed_trampoline_124 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, SEL p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *a2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	a2 = p2 ? xamarin_get_selector (p2, &exception_gchandle) : NULL;
	arg_ptrs [2] = a2;
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&a2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_125 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, NSRange p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_nsobject_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static NSArray * native_to_managed_trampoline_126 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, NSArray * p2, NSRange p3, void ** p4, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoArray *marr2 = NULL;
	NSArray *arr2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	NSArray * res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [5];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arr2 = p2;
	marr2 = xamarin_nsarray_to_managed_string_array (arr2, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [2] = marr2;
	arg_ptrs [3] = &p3;
	arg_ptrs [4] = p4;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_string_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&marr2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_127 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, NSRange p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoArray *marr2 = NULL;
	NSArray *arr2 = NULL;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arr2 = p2;
	paramtype2 = xamarin_get_parameter_type (managed_method, 2);
	marr2 = xamarin_nsarray_to_managed_nsobject_array (arr2, paramtype2, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [2] = marr2;
	arg_ptrs [3] = &p3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_nsobject_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&marr2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_128 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_129 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, BOOL p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a2 = p2;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;
	arg_ptrs [2] = &a2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_130 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, CGRect p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_131 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, CGRect* p1, NSUInteger* p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = p1;
	arg_ptrs [2] = p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static CGRect native_to_managed_trampoline_132 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *inobj1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGRect res = {{0}};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	inobj1 = xamarin_get_inative_object_static (p1, false, 0x144D /* AppKit.INSPasteboardWriting */, 0x144F /* AppKit.NSPasteboardWritingWrapper */, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = inobj1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGRect *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&inobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_133 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, NSInteger p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoArray *marr1 = NULL;
	NSArray *arr1 = NULL;
	MonoType *paramtype1 = NULL;
	long long nativeEnum2 = p2;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arr1 = p1;
	paramtype1 = xamarin_get_parameter_type (managed_method, 1);
	marr1 = xamarin_nsarray_to_managed_nsobject_array (arr1, paramtype1, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = marr1;
	arg_ptrs [2] = &nativeEnum2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&marr1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_134 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, CGRect p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *inobj1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	inobj1 = xamarin_get_inative_object_static (p1, false, 0x144D /* AppKit.INSPasteboardWriting */, 0x144F /* AppKit.NSPasteboardWritingWrapper */, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = inobj1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&inobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_135 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSUInteger p1, NSRange p2, void * p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	unsigned long long nativeEnum1 = p1;
	void * a3 = p3;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &nativeEnum1;
	arg_ptrs [2] = &p2;
	arg_ptrs [3] = &a3;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_136 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_nsobject_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_137 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, CGPoint p2, id p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &p2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_138 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, CGRect p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_139 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, double p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static CGRect native_to_managed_trampoline_140 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, CGRect p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGRect res = {{0}};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGRect *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static CGSize native_to_managed_trampoline_141 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, CGSize p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGSize res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGSize *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static CGSize native_to_managed_trampoline_142 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, CGSize p1, CGSize p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGSize res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGSize *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static NSUInteger native_to_managed_trampoline_143 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSUInteger p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	unsigned long long nativeEnum1 = p1;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	NSUInteger res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &nativeEnum1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(NSUInteger *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static CGRect native_to_managed_trampoline_144 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, CGRect p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGRect res = {{0}};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGRect *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_145 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, float p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static float native_to_managed_trampoline_146 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, float p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	float res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(float *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_147 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id* p1, double p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *mobj1 = NULL;
	MonoObject *mobj_out1 = NULL;
	NSObject *nsobj1 = NULL;
	MonoType *paramtype1 = NULL;
	void * handle1 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	if (p1 != NULL)
		nsobj1 = *(NSObject **) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr (nsobj1, false, paramtype1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the byref parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	mobj_out1 = mobj1;
	arg_ptrs [1] = (int *) &mobj_out1;
	arg_ptrs [2] = &p2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (mobj_out1 != NULL) {
		handle1 = xamarin_get_nsobject_handle (mobj_out1);
		xamarin_mono_object_release (&mobj_out1);
	}
	if (p1 != NULL)
		*p1 = (id) handle1;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static CGRect native_to_managed_trampoline_148 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	CGRect res = {{0}};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(CGRect *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_149 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		res = xamarin_string_to_nsstring ((MonoString *) retval, false);
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_150 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_151 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, id p2, NSUInteger p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a1 = p1;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	unsigned long long nativeEnum3 = p3;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &a1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	arg_ptrs [3] = &nativeEnum3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void * native_to_managed_trampoline_152 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, NSUInteger p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	unsigned long long nativeEnum2 = p2;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	void * res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &nativeEnum2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(void * *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_153 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, void * p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	void * a3 = p3;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	arg_ptrs [3] = &a3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static NSInteger native_to_managed_trampoline_154 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, BOOL p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoString *a2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	NSInteger res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	a2 = xamarin_nsstring_to_string (NULL, p2);
	arg_ptrs [2] = a2;
	arg_ptrs [3] = &p3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(NSInteger *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&a2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_155 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, BOOL p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		res = xamarin_string_to_nsstring ((MonoString *) retval, false);
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_156 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id* p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *mobj2 = NULL;
	MonoObject *mobj_out2 = NULL;
	void * handle2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	mobj_out2 = mobj2;
	arg_ptrs [2] = (int *) &mobj_out2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (mobj_out2 != NULL) {
		handle2 = xamarin_get_nsobject_handle (mobj_out2);
		xamarin_mono_object_release (&mobj_out2);
	}
	if (p2 != NULL)
		*p2 = (id) handle2;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_157 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_handle_for_inativeobject ((MonoObject *) retval, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		xamarin_framework_peer_waypoint ();
		if (retobj != NULL) {
			bool retained = xamarin_attempt_retain_nsobject (retval, &exception_gchandle);
			if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
			if (retained) {
				[retobj autorelease];
			}
			mt_dummy_use (retval);
			res = retobj;
		} else {
			res = NULL;
		}
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_158 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoArray *marr1 = NULL;
	NSArray *arr1 = NULL;
	MonoType *paramtype1 = NULL;
	MonoArray *marr2 = NULL;
	NSArray *arr2 = NULL;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arr1 = p1;
	paramtype1 = xamarin_get_parameter_type (managed_method, 1);
	marr1 = xamarin_nsarray_to_managed_nsobject_array (arr1, paramtype1, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = marr1;
	arr2 = p2;
	paramtype2 = xamarin_get_parameter_type (managed_method, 2);
	marr2 = xamarin_nsarray_to_managed_nsobject_array (arr2, paramtype2, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [2] = marr2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_nsobject_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&marr1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&marr2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_159 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, CGRect p2, void * p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &p2;
	arg_ptrs [3] = &p3;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_160 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSRange p1, unsigned long long p2, id p3, id p4, id p5, void * p6, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	MonoArray *marr4 = NULL;
	NSArray *arr4 = NULL;
	MonoType *paramtype4 = NULL;
	NSObject *nsobj5 = NULL;
	MonoObject *mobj5 = NULL;
	int32_t created5 = false;
	MonoType *paramtype5 = NULL;
	void * a6 = p6;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [7];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;
	arg_ptrs [2] = &p2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;
	arr4 = p4;
	paramtype4 = xamarin_get_parameter_type (managed_method, 4);
	marr4 = xamarin_nsarray_to_managed_nsobject_array (arr4, paramtype4, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [4] = marr4;
	nsobj5 = (NSObject *) p5;
	if (nsobj5) {
		paramtype5 = xamarin_get_parameter_type (managed_method, 5);
		mobj5 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj5, false, paramtype5, &created5, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype5, 5, true);
			goto exception_handling;
		}
	}
	arg_ptrs [5] = mobj5;
	arg_ptrs [6] = &a6;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_nsobject_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&paramtype4);
	xamarin_mono_object_release (&marr4);
	xamarin_mono_object_release (&paramtype5);
	xamarin_mono_object_release (&mobj5);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_161 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, SEL p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *a1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = p1 ? xamarin_get_selector (p1, &exception_gchandle) : NULL;
	arg_ptrs [1] = a1;
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_162 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, CGRect p2, id p3, void * p4, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [5];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &p2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;
	arg_ptrs [4] = &p4;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static id native_to_managed_trampoline_163 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSRange p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_nsobject_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static NSArray * native_to_managed_trampoline_164 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSArray * p1, NSRange p2, void ** p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoArray *marr1 = NULL;
	NSArray *arr1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	NSArray * res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arr1 = p1;
	marr1 = xamarin_nsarray_to_managed_string_array (arr1, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = marr1;
	arg_ptrs [2] = &p2;
	arg_ptrs [3] = p3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_string_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&marr1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_165 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, NSRange p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoArray *marr1 = NULL;
	NSArray *arr1 = NULL;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arr1 = p1;
	paramtype1 = xamarin_get_parameter_type (managed_method, 1);
	marr1 = xamarin_nsarray_to_managed_nsobject_array (arr1, paramtype1, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = marr1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_nsobject_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&marr1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static NSArray * native_to_managed_trampoline_166 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	NSArray * res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_string_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_167 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, void * p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	arg_ptrs [3] = &p3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_168 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSRange p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;
	a2 = xamarin_nsstring_to_string (NULL, p2);
	arg_ptrs [2] = a2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_169 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, NSArray * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoArray *marr1 = NULL;
	NSArray *arr1 = NULL;
	MonoType *paramtype1 = NULL;
	MonoArray *marr2 = NULL;
	NSArray *arr2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arr1 = p1;
	paramtype1 = xamarin_get_parameter_type (managed_method, 1);
	marr1 = xamarin_nsarray_to_managed_nsobject_array (arr1, paramtype1, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = marr1;
	arr2 = p2;
	marr2 = xamarin_nsarray_to_managed_string_array (arr2, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [2] = marr2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&marr1);
	xamarin_mono_object_release (&marr2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void * native_to_managed_trampoline_170 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, void * p1, NSRange p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	void * a1 = p1;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	void * res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &a1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(void * *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static NSArray * native_to_managed_trampoline_171 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSArray * p1, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoArray *marr1 = NULL;
	NSArray *arr1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	NSArray * res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [2];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arr1 = p1;
	marr1 = xamarin_nsarray_to_managed_string_array (arr1, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [1] = marr1;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_string_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&marr1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static NSRange native_to_managed_trampoline_172 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSRange p1, NSRange p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	NSRange res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(NSRange *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_173 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSRange p1, id p2, unsigned long long p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	arg_ptrs [3] = &p3;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_174 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		res = xamarin_string_to_nsstring ((MonoString *) retval, false);
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_175 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, void * p2, id p3, id p4, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	MonoString *a4 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [5];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arg_ptrs [2] = &p2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;
	a4 = xamarin_nsstring_to_string (NULL, p4);
	arg_ptrs [4] = a4;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&a4);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static NSArray * native_to_managed_trampoline_176 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	NSArray * res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [1];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = xamarin_managed_string_array_to_nsarray ((MonoArray *) retval, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	xamarin_framework_peer_waypoint ();
	mt_dummy_use (retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static BOOL native_to_managed_trampoline_177 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, void * p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	void * a2 = p2;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	BOOL res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	arg_ptrs [2] = &a2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	res = *(BOOL *) mono_object_unbox ((MonoObject *) retval);

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static id native_to_managed_trampoline_178 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, BOOL p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	MonoString *a1 = NULL;
	MonoObject *exception = NULL;
	MonoObject *retval = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	id res = {0};
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	a1 = xamarin_nsstring_to_string (NULL, p1);
	arg_ptrs [1] = a1;
	arg_ptrs [2] = &p2;

	retval = mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

	if (!retval) {
		res = NULL;
	} else {
		id retobj;
		retobj = xamarin_get_nsobject_handle (retval);
		xamarin_framework_peer_waypoint ();
		[retobj retain];
		[retobj autorelease];
		mt_dummy_use (retval);
		res = retobj;
	}

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&a1);
	xamarin_mono_object_release (&retval);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return res;
}


static void native_to_managed_trampoline_179 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoArray *marr2 = NULL;
	NSArray *arr2 = NULL;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arr2 = p2;
	paramtype2 = xamarin_get_parameter_type (managed_method, 2);
	marr2 = xamarin_nsarray_to_managed_nsobject_array (arr2, paramtype2, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [2] = marr2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&marr2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_180 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	MonoArray *marr2 = NULL;
	NSArray *arr2 = NULL;
	MonoType *paramtype2 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	arr2 = p2;
	paramtype2 = xamarin_get_parameter_type (managed_method, 2);
	marr2 = xamarin_nsarray_to_managed_nsobject_array (arr2, paramtype2, NULL, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	arg_ptrs [2] = marr2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&marr2);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_181 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, NSRange p1, id p2, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [3];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	arg_ptrs [1] = &p1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_182 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *del3 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	if (p3) {
		del3 = xamarin_get_delegate_for_block_parameter (managed_method, 0x3DE7 /* System.Action`1<Foundation.NSUrlSessionResponseDisposition> ObjCRuntime.Trampolines/NIDActionArity1V51::Create(System.IntPtr) */ , 3, p3, &exception_gchandle);
		arg_ptrs [3] = del3;
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	} else {
		arg_ptrs [3] = NULL;
	}

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&del3);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_183 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *del3 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	if (p3) {
		del3 = xamarin_get_delegate_for_block_parameter (managed_method, 0x3DEF /* System.Action`1<Foundation.NSCachedUrlResponse> ObjCRuntime.Trampolines/NIDActionArity1V48::Create(System.IntPtr) */ , 3, p3, &exception_gchandle);
		arg_ptrs [3] = del3;
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	} else {
		arg_ptrs [3] = NULL;
	}

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&del3);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_184 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, id p4, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	NSObject *nsobj3 = NULL;
	MonoObject *mobj3 = NULL;
	int32_t created3 = false;
	MonoType *paramtype3 = NULL;
	MonoObject *del4 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [5];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	nsobj3 = (NSObject *) p3;
	if (nsobj3) {
		paramtype3 = xamarin_get_parameter_type (managed_method, 3);
		mobj3 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj3, false, paramtype3, &created3, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype3, 3, true);
			goto exception_handling;
		}
	}
	arg_ptrs [3] = mobj3;
	if (p4) {
		del4 = xamarin_get_delegate_for_block_parameter (managed_method, 0x3DF3 /* System.Action`1<Foundation.NSUrlRequest> ObjCRuntime.Trampolines/NIDActionArity1V1::Create(System.IntPtr) */ , 4, p4, &exception_gchandle);
		arg_ptrs [4] = del4;
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	} else {
		arg_ptrs [4] = NULL;
	}

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&paramtype3);
	xamarin_mono_object_release (&mobj3);
	xamarin_mono_object_release (&del4);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}


static void native_to_managed_trampoline_185 (id self, SEL _cmd, MonoMethod **managed_method_ptr, id p0, id p1, id p2, id p3, uint32_t token_ref)
{
	NSObject *nsobj0 = NULL;
	MonoObject *mobj0 = NULL;
	int32_t created0 = false;
	MonoType *paramtype0 = NULL;
	NSObject *nsobj1 = NULL;
	MonoObject *mobj1 = NULL;
	int32_t created1 = false;
	MonoType *paramtype1 = NULL;
	NSObject *nsobj2 = NULL;
	MonoObject *mobj2 = NULL;
	int32_t created2 = false;
	MonoType *paramtype2 = NULL;
	MonoObject *del3 = NULL;
	MonoObject *exception = NULL;
	GCHandle exception_gchandle = INVALID_GCHANDLE;
	MonoMethod *managed_method = *managed_method_ptr;
	void *arg_ptrs [4];
	MonoReflectionMethod *reflection_method = NULL;
	MONO_ASSERT_GC_SAFE_OR_DETACHED;
	MONO_THREAD_ATTACH;

	MonoObject *mthis = NULL;
	if (self) {
		mthis = xamarin_get_managed_object_for_ptr_fast (self, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	}
	if (!managed_method) {
		GCHandle reflection_method_handle = xamarin_get_method_from_token (token_ref, &exception_gchandle);
		reflection_method = (MonoReflectionMethod *) xamarin_gchandle_unwrap (reflection_method_handle);
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
		managed_method = xamarin_get_reflection_method_method (reflection_method);
		*managed_method_ptr = managed_method;
		xamarin_mono_object_release_at_process_exit (managed_method);
	}
	xamarin_check_for_gced_object (mthis, _cmd, self, managed_method, &exception_gchandle);
	if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	nsobj0 = (NSObject *) p0;
	if (nsobj0) {
		paramtype0 = xamarin_get_parameter_type (managed_method, 0);
		mobj0 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj0, false, paramtype0, &created0, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype0, 0, true);
			goto exception_handling;
		}
	}
	arg_ptrs [0] = mobj0;
	nsobj1 = (NSObject *) p1;
	if (nsobj1) {
		paramtype1 = xamarin_get_parameter_type (managed_method, 1);
		mobj1 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj1, false, paramtype1, &created1, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype1, 1, true);
			goto exception_handling;
		}
	}
	arg_ptrs [1] = mobj1;
	nsobj2 = (NSObject *) p2;
	if (nsobj2) {
		paramtype2 = xamarin_get_parameter_type (managed_method, 2);
		mobj2 = xamarin_get_nsobject_with_type_for_ptr_created (nsobj2, false, paramtype2, &created2, &exception_gchandle);
		if (exception_gchandle != INVALID_GCHANDLE) {
			exception_gchandle = xamarin_get_exception_for_parameter (8029, exception_gchandle, "Unable to marshal the parameter", _cmd, managed_method, paramtype2, 2, true);
			goto exception_handling;
		}
	}
	arg_ptrs [2] = mobj2;
	if (p3) {
		del3 = xamarin_get_delegate_for_block_parameter (managed_method, 0x3DF7 /* System.Action`2<Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential> ObjCRuntime.Trampolines/NIDActionArity2V7::Create(System.IntPtr) */ , 3, p3, &exception_gchandle);
		arg_ptrs [3] = del3;
		if (exception_gchandle != INVALID_GCHANDLE) goto exception_handling;
	} else {
		arg_ptrs [3] = NULL;
	}

	mono_runtime_invoke (managed_method, mthis, arg_ptrs, &exception);
	if (exception != NULL) goto exception_handling;

exception_handling:
	xamarin_mono_object_release (&paramtype0);
	xamarin_mono_object_release (&mobj0);
	xamarin_mono_object_release (&paramtype1);
	xamarin_mono_object_release (&mobj1);
	xamarin_mono_object_release (&paramtype2);
	xamarin_mono_object_release (&mobj2);
	xamarin_mono_object_release (&del3);
	xamarin_mono_object_release (&mthis);
	xamarin_mono_object_release (&reflection_method);

	MONO_THREAD_DETACH;
	if (exception_gchandle != INVALID_GCHANDLE)
		xamarin_process_managed_exception_gchandle (exception_gchandle);
	xamarin_process_managed_exception (exception);
	return;
}




#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSApplicationDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@implementation AppDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) applicationDidFinishLaunching:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x800);
	}

	-(void) applicationWillTerminate:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x900);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xA00);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation ViewController {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) viewDidLoad
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_3 (self, _cmd, &managed_method, 0xC00);
	}

	-(NSObject *) representedObject
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0xD00);
	}

	-(void) setRepresentedObject:(NSObject *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0xE00);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Speech_SFSpeechRecognitionTaskDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x4D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Speech_SFSpeechRecognizerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x57);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ShazamKit_SHSessionDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x89);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SharedWithYou_SWCollaborationViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xAD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SharedWithYou_SWHighlightCenterDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xB5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ReplayKit_RPBroadcastActivityControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xE3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ReplayKit_RPBroadcastControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xEB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ReplayKit_RPPreviewViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xF9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ReplayKit_RPScreenRecorderDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x101);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__PushKit_PKPushRegistryDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x127);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__PhotosUI_PHLivePhotoViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x135);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__PhotosUI_PHPickerViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x145);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__PhotosUI_PHProjectTypeDescriptionDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x169);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__NotificationCenter_NCWidgetListViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x211);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__NotificationCenter_NCWidgetProviding {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x219);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__NotificationCenter_NCWidgetSearchViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x221);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__IntentsUI_INUIAddVoiceShortcutButtonDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x28D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__IntentsUI_INUIAddVoiceShortcutViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x297);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__IntentsUI_INUIEditVoiceShortcutViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2A1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ExternalAccessory_EAAccessoryDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2AD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ExtensionKit_EXHostViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2BB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ContactsUI_CNContactPickerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2DF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AutomaticAssessmentConfiguration_AEAssessmentSessionDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2F3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__VideoSubscriberAccount_VSAccountManagerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3CB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__UserNotifications_UNUserNotificationCenterDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x40B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__StoreKit_SKPaymentQueueDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x423);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__StoreKit_SKPaymentTransactionObserver {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x42D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__StoreKit_SKRequestDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x43D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__StoreKit_SKProductsRequestDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x441);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__StoreKit_SKStoreProductViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x44F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SpriteKit_SKPhysicsContactDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x48D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SpriteKit_SKSceneDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x4B1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SpriteKit_SKViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x4CD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ScriptingBridge_SBApplicationDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x4FB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ScreenCaptureKit_SCStreamDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x517);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNAnimatable {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x531);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNActionable {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x54D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNAvoidOccluderConstraintDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x565);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNBoundingVolume {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x56B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNCameraControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x585);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNNodeRendererDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x5AB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNPhysicsContactDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x5BF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNProgramDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x5D5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNSceneExportDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x5E5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNSceneRenderer {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x5ED);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNSceneRendererDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x5F5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNShadable {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x5F9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__SceneKit_SCNTechniqueSupport {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x603);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__QuickLookUI_QLPreviewItem {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x625);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__QuickLookUI_QLPreviewPanelDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x62D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__QuickLookUI_QLPreviewPanelDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x639);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Photos_PHPhotoLibraryChangeObserver {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x695);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__PdfKit_PdfDocumentDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x6D1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__PdfKit_PdfViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x6E3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__PassKit_PKPaymentAuthorizationControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x71B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__PassKit_PKPaymentAuthorizationViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x725);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__PassKit_PKVehicleConnectionDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x75F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__NetworkExtension_NWTcpConnectionAuthenticationDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x7D1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MultipeerConnectivity_MCAdvertiserAssistantDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x7E5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MultipeerConnectivity_MCBrowserViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x7F3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MultipeerConnectivity_MCNearbyServiceAdvertiserDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x7FD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MultipeerConnectivity_MCNearbyServiceBrowserDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x803);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MultipeerConnectivity_MCSessionDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x80D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ModelIO_MDLLightProbeIrradianceDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x85D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MetalPerformanceShaders_MPSCnnBatchNormalizationDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x953);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x955);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MetalPerformanceShaders_MPSCnnConvolutionDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x971);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MetalPerformanceShaders_MPSCnnInstanceNormalizationDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x9BD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x9BF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MetalKit_MTKViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xBFD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Metal_MTLCaptureScope {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xC63);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Metal_MTLDrawable {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xC9F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MapKit_MKAnnotation {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xDB3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MapKit_MKLocalSearchCompleterDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xDDF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MapKit_MKLookAroundViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xDF5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MapKit_MKMapViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xE07);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__MapKit_MKOverlay {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xE15);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__JavaScriptCore_JSExport {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xE91);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageKit_IKCameraDeviceViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xF51);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageKit_IKDeviceBrowserViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xF59);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageKit_IKFilterCustomUIProvider {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xF63);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageKit_IKImageBrowserDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xF6B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageKit_IKImageBrowserDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xF6F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageKit_IKImageBrowserItem {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xF73);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageKit_IKImageEditPanelDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xF7D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageKit_IKSaveOptionsDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xF85);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageKit_IKScannerDeviceViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xF8D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageKit_IKSlideshowDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xF97);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageCaptureCore_ICCameraDeviceDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xFA3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageCaptureCore_ICCameraDeviceDownloadDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xFAB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageCaptureCore_ICDeviceBrowserDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xFBD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageCaptureCore_ICDeviceDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xFC1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ImageCaptureCore_ICScannerDeviceDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0xFCD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__HealthKit_HKLiveWorkoutBuilderDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x105B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__HealthKit_HKWorkoutSessionDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1099);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameplayKit_GKAgentDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x10C3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKAchievementViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x113D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKChallengeEventHandlerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1147);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKChallengeListener {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x114F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKChallengesViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x115D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKFriendRequestComposeViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1169);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKGameCenterControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1171);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKInviteEventListener {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x117F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKLeaderboardViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1189);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKLocalPlayerListener {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1199);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKMatchDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x11A1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKMatchmakerViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x11A9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKSavedGameListener {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x11AF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKSessionDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x11BB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKTurnBasedEventHandlerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x11C5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKTurnBasedEventListener {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x11C9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GameKit_GKTurnBasedMatchmakerViewControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x11D3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__GLKit_GLKNamedEffect {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1269);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WebPolicyDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x129F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_DomEventListener {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x12D3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_DomEventTarget {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x12D7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_DomNodeFilter {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1353);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WebDocumentRepresentation {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x136D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WebDownloadDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1379);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WebFrameLoadDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1381);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WebOpenPanelResultListener {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x138D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WebPolicyDecisionListener {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1395);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WebResourceLoadDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x13A1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WebUIDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x13A9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WKDownloadDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x13B9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WKNavigationDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x13CF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WKScriptMessageHandler {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x13E1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__WebKit_WKUIDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x13F1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Foundation_NSDispatcher : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) xamarinApplySelector;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Foundation_NSDispatcher {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) xamarinApplySelector
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_3 (self, _cmd, &managed_method, 0x1407);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1409);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __MonoMac_NSActionDispatcher : Foundation_NSDispatcher {
}
	-(void) xamarinApplySelector;
@end

@implementation __MonoMac_NSActionDispatcher {
}

	-(void) xamarinApplySelector
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_3 (self, _cmd, &managed_method, 0x140D);
	}
@end

@interface __MonoMac_NSSynchronizationContextDispatcher : Foundation_NSDispatcher {
}
	-(void) xamarinApplySelector;
@end

@implementation __MonoMac_NSSynchronizationContextDispatcher {
}

	-(void) xamarinApplySelector
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_3 (self, _cmd, &managed_method, 0x1411);
	}
@end

@interface __Xamarin_NSTimerActionDispatcher : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) xamarinFireSelector:(NSTimer *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation __Xamarin_NSTimerActionDispatcher {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) xamarinFireSelector:(NSTimer *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1415);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Foundation_NSAsyncDispatcher : Foundation_NSDispatcher {
}
	-(void) xamarinApplySelector;
	-(id) init;
@end

@implementation Foundation_NSAsyncDispatcher {
}

	-(void) xamarinApplySelector
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_3 (self, _cmd, &managed_method, 0x1419);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x141B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [Foundation_NSDispatcher class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __MonoMac_NSAsyncActionDispatcher : Foundation_NSAsyncDispatcher {
}
	-(void) xamarinApplySelector;
@end

@implementation __MonoMac_NSAsyncActionDispatcher {
}

	-(void) xamarinApplySelector
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_3 (self, _cmd, &managed_method, 0x141F);
	}
@end

@interface __MonoMac_NSAsyncSynchronizationContextDispatcher : Foundation_NSAsyncDispatcher {
}
	-(void) xamarinApplySelector;
@end

@implementation __MonoMac_NSAsyncSynchronizationContextDispatcher {
}

	-(void) xamarinApplySelector
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_3 (self, _cmd, &managed_method, 0x1423);
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSFileManagerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x143F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface Foundation_InternalNSNotificationHandler : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) post:(NSNotification *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Foundation_InternalNSNotificationHandler {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) post:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x146F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSCacheDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x14B9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSCoding {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x14C3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x14C5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSConnectionDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x14D9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSCopying {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x14DD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSExtensionRequestHandling {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1501);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSFilePresenter {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x150D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSKeyedArchiverDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1527);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSKeyedUnarchiverDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x152F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSPortDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1547);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSMachPortDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x154B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSMetadataQueryDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x155B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSMutableCopying {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1569);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSNetServiceBrowserDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1575);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSNetServiceDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x157D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSStreamDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x15B1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUrlConnectionDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x15F5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUrlConnectionDataDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x15F9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUrlConnectionDownloadDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1601);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUrlDownloadDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1609);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUrlSessionDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x161F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUrlSessionTaskDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1623);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUrlSessionDataDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1627);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUrlSessionDownloadDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1633);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUrlSessionStreamDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x163D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUrlSessionWebSocketDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x164B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUserActivityDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1655);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSUserNotificationCenterDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1661);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__Foundation_NSXpcListenerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x166D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CoreWlan_CWEventDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1703);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CoreSpotlight_CSSearchableIndexDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1723);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CoreMidi_MidiCIProfileResponderDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x174D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CoreML_MLCustomModel {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1771);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithModelDescription:(MLModelDescription *)p0 parameterDictionary:(NSDictionary <NSString *, NSObject *>*)p1 error:(NSError **)p2
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_6 (self, _cmd, &managed_method, p0, p1, p2, &call_super, 0x1773);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL, MLModelDescription *, NSDictionary <NSString *, NSObject *>*, NSError **)) objc_msgSendSuper) (&super, @selector (initWithModelDescription:parameterDictionary:error:), p0, p1, p2);
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CoreLocation_CLLocationManagerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x17BD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@implementation CoreImage_CIAccordionFoldTransition {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(float) bottomHeight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x17DF);
	}

	-(void) setBottomHeight:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x17E1);
	}

	-(float) numberOfFolds
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x17E3);
	}

	-(void) setNumberOfFolds:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x17E5);
	}

	-(float) foldShadowAmount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x17E7);
	}

	-(void) setFoldShadowAmount:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x17E9);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x17EB);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x17ED);
	}

	-(CIImage *) targetImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x17EF);
	}

	-(void) setTargetImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x17F1);
	}

	-(float) time
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x17F3);
	}

	-(void) setTime:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x17F5);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x17F7);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x17F9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x17FB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICompositingFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x17FF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAdditionCompositing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1803);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1805);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAffineFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1809);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x180B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAffineClamp {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1813);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1815);
	}

	-(CGAffineTransform) transform
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_9 (self, _cmd, &managed_method, 0x1817);
	}

	-(void) setTransform:(CGAffineTransform)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_10 (self, _cmd, &managed_method, p0, 0x1819);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x181B);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x181D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIAffineFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x181F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIAffineFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAffineTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1827);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1829);
	}

	-(CGAffineTransform) transform
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_9 (self, _cmd, &managed_method, 0x182B);
	}

	-(void) setTransform:(CGAffineTransform)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_10 (self, _cmd, &managed_method, p0, 0x182D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x182F);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1831);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIAffineFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1833);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIAffineFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAffineTransform {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1837);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIAffineFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1839);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIAffineFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIReductionFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x183D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAreaAverage {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1841);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1843);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAreaHistogram {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1853);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1855);
	}

	-(void *) count
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_11 (self, _cmd, &managed_method, 0x1857);
	}

	-(void) setCount:(void *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_12 (self, _cmd, &managed_method, p0, 0x1859);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x185B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x185D);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x185F);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x1861);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1863);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1865);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1867);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAreaLogarithmicHistogram {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x186F);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1871);
	}

	-(void *) count
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_11 (self, _cmd, &managed_method, 0x1873);
	}

	-(void) setCount:(void *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_12 (self, _cmd, &managed_method, p0, 0x1875);
	}

	-(float) minimumStop
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1877);
	}

	-(void) setMinimumStop:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1879);
	}

	-(float) maximumStop
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x187B);
	}

	-(void) setMaximumStop:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x187D);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x187F);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1881);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x1883);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x1885);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1887);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1889);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x188B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAreaMaximum {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1893);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1895);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x1897);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x1899);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x189B);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x189D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x189F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAreaMaximumAlpha {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x18A7);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x18A9);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x18AB);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x18AD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x18AF);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x18B1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x18B3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAreaMinimum {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x18B7);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x18B9);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x18BB);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x18BD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x18BF);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x18C1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x18C3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAreaMinimumAlpha {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x18C7);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x18C9);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x18CB);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x18CD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x18CF);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x18D1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x18D3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAreaMinMax {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x18DF);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x18E1);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x18E3);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x18E5);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x18E7);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x18E9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x18EB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAreaMinMaxRed {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x18F7);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x18F9);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x18FB);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x18FD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x18FF);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1901);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIAreaMaximum class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1903);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIAreaMaximum class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIImageGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1907);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAttributedTextImageGenerator {
}

	-(NSAttributedString *) text
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x190F);
	}

	-(void) setText:(NSAttributedString *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1911);
	}

	-(float) scaleFactor
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1913);
	}

	-(void) setScaleFactor:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1915);
	}

	-(float) padding
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1917);
	}

	-(void) setPadding:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1919);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x191B);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x191D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIImageGenerator class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x191F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIImageGenerator class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICodeGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1927);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIAztecCodeGenerator {
}

	-(NSData *) message
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x192F);
	}

	-(void) setMessage:(NSData *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1931);
	}

	-(float) correctionLevel
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1933);
	}

	-(void) setCorrectionLevel:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1935);
	}

	-(float) layers
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1937);
	}

	-(void) setLayers:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1939);
	}

	-(float) compactStyle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x193B);
	}

	-(void) setCompactStyle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x193D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x193F);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1941);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICodeGenerator class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1943);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICodeGenerator class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBarcodeGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIBarcodeDescriptor *) barcodeDescriptor
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x194B);
	}

	-(void) setBarcodeDescriptor:(CIBarcodeDescriptor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x194D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x194F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1951);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1953);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CITransitionFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1957);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1959);
	}

	-(CIImage *) targetImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x195B);
	}

	-(void) setTargetImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x195D);
	}

	-(float) time
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x195F);
	}

	-(void) setTime:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1961);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1963);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1965);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBarsSwipeTransition {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1969);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x196B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBicubicScaleTransform {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1977);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1979);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x197B);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x197D);
	}

	-(float) aspectRatio
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x197F);
	}

	-(void) setAspectRatio:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1981);
	}

	-(float) parameterB
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1983);
	}

	-(void) setParameterB:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1985);
	}

	-(float) parameterC
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1987);
	}

	-(void) setParameterC:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1989);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x198B);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x198D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x198F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBlendFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1993);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBlendWithMask {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x19A1);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x19A3);
	}

	-(CIImage *) backgroundImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x19A5);
	}

	-(void) setBackgroundImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x19A7);
	}

	-(CIImage *) maskImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x19A9);
	}

	-(void) setMaskImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x19AB);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x19AD);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x19AF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x19B1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBlendWithAlphaMask {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x19B5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendWithMask class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x19B7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendWithMask class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBlendWithBlueMask {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x19BB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendWithMask class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x19BD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendWithMask class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBlendWithRedMask {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x19C1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendWithMask class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x19C3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendWithMask class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBloom {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x19CB);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x19CD);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x19CF);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x19D1);
	}

	-(float) intensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x19D3);
	}

	-(void) setIntensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x19D5);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x19D7);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x19D9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x19DB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILinearBlur {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x19DF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBokehBlur {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x19E7);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x19E9);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x19EB);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x19ED);
	}

	-(float) ringAmount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x19EF);
	}

	-(void) setRingAmount:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x19F1);
	}

	-(float) ringSize
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x19F3);
	}

	-(void) setRingSize:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x19F5);
	}

	-(float) softness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x19F7);
	}

	-(void) setSoftness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x19F9);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x19FB);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x19FD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CILinearBlur class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x19FF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CILinearBlur class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBoxBlur {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A07);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1A09);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1A0B);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1A0D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A0F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1A11);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1A13);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDistortionFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1A17);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBumpDistortion {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A1F);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1A21);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1A23);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1A25);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1A27);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1A29);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1A2B);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1A2D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A2F);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1A31);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1A33);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIBumpDistortionLinear {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A3B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1A3D);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1A3F);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1A41);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1A43);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1A45);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1A47);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1A49);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1A4B);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1A4D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A4F);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1A51);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1A53);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICameraCalibrationLensCorrection {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1A57);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1A59);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICheckerboardGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1A61);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1A63);
	}

	-(CIColor *) color0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A65);
	}

	-(void) setColor0:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1A67);
	}

	-(CIColor *) color1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A69);
	}

	-(void) setColor1:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1A6B);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1A6D);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1A6F);
	}

	-(float) sharpness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1A71);
	}

	-(void) setSharpness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1A73);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A75);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1A77);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1A79);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICircleSplashDistortion {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A81);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1A83);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1A85);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1A87);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1A89);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1A8B);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A8D);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1A8F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1A91);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIScreenFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1A95);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICircularScreen {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1A9D);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1A9F);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1AA1);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1AA3);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1AA5);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1AA7);
	}

	-(float) sharpness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1AA9);
	}

	-(void) setSharpness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1AAB);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1AAD);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1AAF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIScreenFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1AB1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIScreenFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICircularWrap {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1AB9);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1ABB);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1ABD);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1ABF);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1AC1);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1AC3);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1AC5);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1AC7);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1AC9);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1ACB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1ACD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIClamp {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1AD1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1AD3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICmykHalftone {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1ADB);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1ADD);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1ADF);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1AE1);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1AE3);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1AE5);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1AE7);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1AE9);
	}

	-(float) sharpness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1AEB);
	}

	-(void) setSharpness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1AED);
	}

	-(float) grayComponentReplacement
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1AEF);
	}

	-(void) setGrayComponentReplacement:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1AF1);
	}

	-(float) underColorRemoval
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1AF3);
	}

	-(void) setUnderColorRemoval:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1AF5);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1AF7);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1AF9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1AFB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICode128BarcodeGenerator {
}

	-(NSData *) message
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B03);
	}

	-(void) setMessage:(NSData *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B05);
	}

	-(float) quietSpace
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1B07);
	}

	-(void) setQuietSpace:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1B09);
	}

	-(float) barcodeHeight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1B0B);
	}

	-(void) setBarcodeHeight:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1B0D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B0F);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1B11);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICodeGenerator class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1B13);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICodeGenerator class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorAbsoluteDifference {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B1B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B1D);
	}

	-(CIImage *) inputImage2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B1F);
	}

	-(void) setInputImage2:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B21);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B23);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1B25);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1B27);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1B2B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1B2D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorBurnBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1B31);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1B33);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorClamp {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B3B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B3D);
	}

	-(CIVector *) minComponents
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B3F);
	}

	-(void) setMinComponents:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B41);
	}

	-(CIVector *) maxComponents
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B43);
	}

	-(void) setMaxComponents:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B45);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B47);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1B49);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1B4B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorControls {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B53);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B55);
	}

	-(float) saturation
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1B57);
	}

	-(void) setSaturation:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1B59);
	}

	-(float) brightness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1B5B);
	}

	-(void) setBrightness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1B5D);
	}

	-(float) contrast
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1B5F);
	}

	-(void) setContrast:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1B61);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B63);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1B65);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1B67);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorCrossPolynomial {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B6F);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B71);
	}

	-(CIVector *) redCoefficients
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B73);
	}

	-(void) setRedCoefficients:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B75);
	}

	-(CIVector *) greenCoefficients
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B77);
	}

	-(void) setGreenCoefficients:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B79);
	}

	-(CIVector *) blueCoefficients
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B7B);
	}

	-(void) setBlueCoefficients:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B7D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B7F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1B81);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1B83);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorCube {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B8B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B8D);
	}

	-(float) cubeDimension
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1B8F);
	}

	-(void) setCubeDimension:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1B91);
	}

	-(NSData *) cubeData
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B93);
	}

	-(void) setCubeData:(NSData *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1B95);
	}

	-(BOOL) extrapolate
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_17 (self, _cmd, &managed_method, 0x1B97);
	}

	-(void) setExtrapolate:(BOOL)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_18 (self, _cmd, &managed_method, p0, 0x1B99);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1B9B);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1B9D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1B9F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorCubesMixedWithMask {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BA7);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1BA9);
	}

	-(CIImage *) maskImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BAB);
	}

	-(void) setMaskImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1BAD);
	}

	-(float) cubeDimension
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1BAF);
	}

	-(void) setCubeDimension:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1BB1);
	}

	-(NSData *) cube0Data
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BB3);
	}

	-(void) setCube0Data:(NSData *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1BB5);
	}

	-(NSData *) cube1Data
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BB7);
	}

	-(void) setCube1Data:(NSData *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1BB9);
	}

	-(id) colorSpace
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_19 (self, _cmd, &managed_method, 0x1BBB);
	}

	-(void) setColorSpace:(id)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_20 (self, _cmd, &managed_method, p0, 0x1BBD);
	}

	-(BOOL) extrapolate
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_17 (self, _cmd, &managed_method, 0x1BBF);
	}

	-(void) setExtrapolate:(BOOL)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_18 (self, _cmd, &managed_method, p0, 0x1BC1);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BC3);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1BC5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1BC7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorCubeWithColorSpace {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BCF);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1BD1);
	}

	-(float) cubeDimension
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1BD3);
	}

	-(void) setCubeDimension:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1BD5);
	}

	-(NSData *) cubeData
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BD7);
	}

	-(void) setCubeData:(NSData *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1BD9);
	}

	-(id) colorSpace
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_19 (self, _cmd, &managed_method, 0x1BDB);
	}

	-(void) setColorSpace:(id)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_20 (self, _cmd, &managed_method, p0, 0x1BDD);
	}

	-(BOOL) extrapolate
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_17 (self, _cmd, &managed_method, 0x1BDF);
	}

	-(void) setExtrapolate:(BOOL)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_18 (self, _cmd, &managed_method, p0, 0x1BE1);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BE3);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1BE5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIColorCube class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1BE7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIColorCube class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorCurves {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BEF);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1BF1);
	}

	-(NSData *) curvesData
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BF3);
	}

	-(void) setCurvesData:(NSData *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1BF5);
	}

	-(CIVector *) curvesDomain
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BF7);
	}

	-(void) setCurvesDomain:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1BF9);
	}

	-(id) colorSpace
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_19 (self, _cmd, &managed_method, 0x1BFB);
	}

	-(void) setColorSpace:(id)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_20 (self, _cmd, &managed_method, p0, 0x1BFD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1BFF);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1C01);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1C03);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorDodgeBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1C07);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1C09);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorInvert {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C11);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C13);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C15);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1C17);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1C19);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorMap {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C21);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C23);
	}

	-(CIImage *) gradientImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C25);
	}

	-(void) setGradientImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C27);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C29);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1C2B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1C2D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorMatrix {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C35);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C37);
	}

	-(CIVector *) RVector
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C39);
	}

	-(void) setRVector:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C3B);
	}

	-(CIVector *) GVector
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C3D);
	}

	-(void) setGVector:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C3F);
	}

	-(CIVector *) BVector
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C41);
	}

	-(void) setBVector:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C43);
	}

	-(CIVector *) AVector
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C45);
	}

	-(void) setAVector:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C47);
	}

	-(CIVector *) biasVector
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C49);
	}

	-(void) setBiasVector:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C4B);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C4D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1C4F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1C51);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorMonochrome {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C59);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C5B);
	}

	-(CIColor *) color
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C5D);
	}

	-(void) setColor:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C5F);
	}

	-(float) intensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1C61);
	}

	-(void) setIntensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1C63);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C65);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1C67);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1C69);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorPolynomial {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C71);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C73);
	}

	-(CIVector *) redCoefficients
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C75);
	}

	-(void) setRedCoefficients:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C77);
	}

	-(CIVector *) greenCoefficients
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C79);
	}

	-(void) setGreenCoefficients:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C7B);
	}

	-(CIVector *) blueCoefficients
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C7D);
	}

	-(void) setBlueCoefficients:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C7F);
	}

	-(CIVector *) alphaCoefficients
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C81);
	}

	-(void) setAlphaCoefficients:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C83);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C85);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1C87);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIColorCrossPolynomial class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1C89);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIColorCrossPolynomial class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorPosterize {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C91);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1C93);
	}

	-(float) levels
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1C95);
	}

	-(void) setLevels:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1C97);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1C99);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1C9B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1C9D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorThreshold {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1CA5);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1CA7);
	}

	-(float) threshold
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1CA9);
	}

	-(void) setThreshold:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1CAB);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1CAD);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1CAF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1CB1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColorThresholdOtsu {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1CB9);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1CBB);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1CBD);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1CBF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1CC1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIColumnAverage {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1CC9);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1CCB);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x1CCD);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x1CCF);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1CD1);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1CD3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1CD5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIComicEffect {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1CDD);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1CDF);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1CE1);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1CE3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1CE5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConstantColorGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1CED);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1CEF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConvolutionCore {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1CF7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConvolution3X3 {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1CFB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIConvolutionCore class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1CFD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIConvolutionCore class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConvolution5X5 {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D01);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIConvolutionCore class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D03);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIConvolutionCore class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConvolution7X7 {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D07);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIConvolutionCore class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D09);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIConvolutionCore class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConvolution9Horizontal {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D0D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIConvolutionCore class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D0F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIConvolutionCore class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConvolution9Vertical {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D13);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIConvolutionCore class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D15);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIConvolutionCore class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConvolutionRGB3X3 {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1D1D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D1F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D21);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConvolutionRGB5X5 {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1D25);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D27);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D29);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConvolutionRGB7X7 {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1D2D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D2F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D31);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConvolutionRGB9Horizontal {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1D35);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D37);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D39);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIConvolutionRGB9Vertical {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1D3D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D3F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D41);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICopyMachineTransition {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D45);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D47);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICoreMLModelFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D4F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D51);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICrop {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D59);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D5B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CICrystallize {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1D63);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1D65);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1D67);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1D69);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1D6B);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1D6D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1D6F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D71);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D73);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDarkenBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D77);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D79);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDepthBlurEffect {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1D7F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D81);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDepthDisparityConverter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1D85);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDepthOfField {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1D8D);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1D8F);
	}

	-(CGPoint) point0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1D91);
	}

	-(void) setPoint0:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1D93);
	}

	-(CGPoint) point1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1D95);
	}

	-(void) setPoint1:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1D97);
	}

	-(float) saturation
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1D99);
	}

	-(void) setSaturation:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1D9B);
	}

	-(float) unsharpMaskRadius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1D9D);
	}

	-(void) setUnsharpMaskRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1D9F);
	}

	-(float) unsharpMaskIntensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1DA1);
	}

	-(void) setUnsharpMaskIntensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1DA3);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1DA5);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1DA7);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1DA9);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1DAB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1DAD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDepthToDisparity {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1DB5);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1DB7);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1DB9);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1DBB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDepthDisparityConverter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1DBD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDepthDisparityConverter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDifferenceBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1DC1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1DC3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDiscBlur {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1DCB);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1DCD);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1DCF);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1DD1);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1DD3);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1DD5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1DD7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDisintegrateWithMaskTransition {
}

	-(CIImage *) maskImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1DDF);
	}

	-(void) setMaskImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1DE1);
	}

	-(float) shadowRadius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1DE3);
	}

	-(void) setShadowRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1DE5);
	}

	-(float) shadowDensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1DE7);
	}

	-(void) setShadowDensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1DE9);
	}

	-(CGPoint) shadowOffset
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1DEB);
	}

	-(void) setShadowOffset:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1DED);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1DEF);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1DF1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1DF3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDisparityToDepth {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1DFB);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1DFD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1DFF);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1E01);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDepthDisparityConverter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1E03);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDepthDisparityConverter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDisplacementDistortion {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1E0B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1E0D);
	}

	-(CIImage *) displacementImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1E0F);
	}

	-(void) setDisplacementImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1E11);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1E13);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1E15);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1E17);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1E19);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1E1B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDissolveTransition {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1E1F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1E21);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDither {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1E2D);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1E2F);
	}

	-(float) intensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1E31);
	}

	-(void) setIntensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1E33);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1E35);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1E37);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1E39);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDivideBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1E3D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1E3F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDocumentEnhancer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1E47);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1E49);
	}

	-(float) amount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1E4B);
	}

	-(void) setAmount:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1E4D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1E4F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1E51);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1E53);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDotScreen {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1E5B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1E5D);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1E5F);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1E61);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1E63);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1E65);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1E67);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1E69);
	}

	-(float) sharpness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1E6B);
	}

	-(void) setSharpness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1E6D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1E6F);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1E71);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIScreenFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1E73);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIScreenFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIDroste {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1E7B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1E7D);
	}

	-(CGPoint) insetPoint0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1E7F);
	}

	-(void) setInsetPoint0:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1E81);
	}

	-(CGPoint) insetPoint1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1E83);
	}

	-(void) setInsetPoint1:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1E85);
	}

	-(float) strands
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1E87);
	}

	-(void) setStrands:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1E89);
	}

	-(float) periodicity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1E8B);
	}

	-(void) setPeriodicity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1E8D);
	}

	-(float) rotation
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1E8F);
	}

	-(void) setRotation:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1E91);
	}

	-(float) zoom
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1E93);
	}

	-(void) setZoom:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1E95);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1E97);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1E99);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1E9B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIEdgePreserveUpsampleFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1EA3);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1EA5);
	}

	-(CIImage *) smallImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1EA7);
	}

	-(void) setSmallImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1EA9);
	}

	-(float) spatialSigma
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1EAB);
	}

	-(void) setSpatialSigma:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1EAD);
	}

	-(float) lumaSigma
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1EAF);
	}

	-(void) setLumaSigma:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1EB1);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1EB3);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1EB5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1EB7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIEdges {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1EBF);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1EC1);
	}

	-(float) intensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1EC3);
	}

	-(void) setIntensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1EC5);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1EC7);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1EC9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1ECB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIEdgeWork {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1ED3);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1ED5);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1ED7);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1ED9);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1EDB);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1EDD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1EDF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CITileFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1EE3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIEightfoldReflectedTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1EEB);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1EED);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1EEF);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1EF1);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1EF3);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1EF5);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1EF7);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1EF9);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1EFB);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1EFD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1EFF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIExclusionBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1F03);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1F05);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIExposureAdjust {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F0D);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1F0F);
	}

	-(float) EV
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1F11);
	}

	-(void) setEV:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1F13);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F15);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1F17);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1F19);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIFaceBalance {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1F1D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIFalseColor {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F29);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1F2B);
	}

	-(CIColor *) color0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F2D);
	}

	-(void) setColor0:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1F2F);
	}

	-(CIColor *) color1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F31);
	}

	-(void) setColor1:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1F33);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F35);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1F37);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1F39);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIFlashTransition {
}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1F49);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1F4B);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x1F4D);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x1F4F);
	}

	-(CIColor *) color
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F51);
	}

	-(void) setColor:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1F53);
	}

	-(float) maxStriationRadius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1F55);
	}

	-(void) setMaxStriationRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1F57);
	}

	-(float) striationStrength
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1F59);
	}

	-(void) setStriationStrength:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1F5B);
	}

	-(float) striationContrast
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1F5D);
	}

	-(void) setStriationContrast:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1F5F);
	}

	-(float) fadeThreshold
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1F61);
	}

	-(void) setFadeThreshold:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1F63);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F65);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1F67);
	}

	-(CIImage *) targetImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F69);
	}

	-(void) setTargetImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1F6B);
	}

	-(float) time
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1F6D);
	}

	-(void) setTime:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1F6F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F71);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1F73);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1F75);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIFourfoldReflectedTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F81);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1F83);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1F85);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1F87);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1F89);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1F8B);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1F8D);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1F8F);
	}

	-(float) acuteAngle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1F91);
	}

	-(void) setAcuteAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1F93);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1F95);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1F97);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1F99);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIFourfoldRotatedTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1FA1);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1FA3);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1FA5);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1FA7);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1FA9);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1FAB);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1FAD);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1FAF);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1FB1);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1FB3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1FB5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIFourfoldTranslatedTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1FBD);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1FBF);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x1FC1);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x1FC3);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1FC5);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1FC7);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1FC9);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1FCB);
	}

	-(float) acuteAngle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1FCD);
	}

	-(void) setAcuteAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1FCF);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1FD1);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1FD3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1FD5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIGaborGradients {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1FDD);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1FDF);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1FE1);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1FE3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1FE5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIGammaAdjust {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1FED);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x1FEF);
	}

	-(float) power
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x1FF1);
	}

	-(void) setPower:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x1FF3);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x1FF5);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x1FF7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x1FF9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIGaussianBlur {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2001);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2003);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2005);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2007);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2009);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x200B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x200D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIGaussianGradient {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2015);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2017);
	}

	-(CIColor *) color0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2019);
	}

	-(void) setColor0:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x201B);
	}

	-(CIColor *) color1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x201D);
	}

	-(void) setColor1:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x201F);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2021);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2023);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2025);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2027);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2029);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIGlassDistortion {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2031);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2033);
	}

	-(CIImage *) textureImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2035);
	}

	-(void) setTextureImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2037);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2039);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x203B);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x203D);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x203F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2041);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2043);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2045);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIGlassLozenge {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x204D);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x204F);
	}

	-(CGPoint) point0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2051);
	}

	-(void) setPoint0:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2053);
	}

	-(CGPoint) point1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2055);
	}

	-(void) setPoint1:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2057);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2059);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x205B);
	}

	-(float) refraction
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x205D);
	}

	-(void) setRefraction:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x205F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2061);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2063);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2065);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIGlideReflectedTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x206D);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x206F);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2071);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2073);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2075);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2077);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2079);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x207B);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x207D);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x207F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2081);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIGloom {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2089);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x208B);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x208D);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x208F);
	}

	-(float) intensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2091);
	}

	-(void) setIntensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2093);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2095);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2097);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2099);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIGuidedFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x209D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x209F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIHardLightBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x20A3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x20A5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIHatchedScreen {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x20AD);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x20AF);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x20B1);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x20B3);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x20B5);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x20B7);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x20B9);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x20BB);
	}

	-(float) sharpness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x20BD);
	}

	-(void) setSharpness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x20BF);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x20C1);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x20C3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIScreenFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x20C5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIScreenFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIHeightFieldFromMask {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x20CD);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x20CF);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x20D1);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x20D3);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x20D5);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x20D7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x20D9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIHexagonalPixellate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x20E1);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x20E3);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x20E5);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x20E7);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x20E9);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x20EB);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x20ED);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x20EF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x20F1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIHighlightShadowAdjust {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x20F9);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x20FB);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x20FD);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x20FF);
	}

	-(float) shadowAmount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2101);
	}

	-(void) setShadowAmount:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2103);
	}

	-(float) highlightAmount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2105);
	}

	-(void) setHighlightAmount:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2107);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2109);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x210B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x210D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIHistogramDisplayFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2115);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2117);
	}

	-(float) height
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2119);
	}

	-(void) setHeight:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x211B);
	}

	-(float) highLimit
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x211D);
	}

	-(void) setHighLimit:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x211F);
	}

	-(float) lowLimit
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2121);
	}

	-(void) setLowLimit:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2123);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2125);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2127);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2129);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIHoleDistortion {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2131);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2133);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2135);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2137);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2139);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x213B);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x213D);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x213F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2141);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIHueAdjust {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2149);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x214B);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x214D);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x214F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2151);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2153);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2155);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIHueBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2159);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x215B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIHueSaturationValueGradient {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(float) value
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2163);
	}

	-(void) setValue:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2165);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2167);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2169);
	}

	-(float) softness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x216B);
	}

	-(void) setSoftness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x216D);
	}

	-(float) dither
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x216F);
	}

	-(void) setDither:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2171);
	}

	-(id) colorSpace
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_19 (self, _cmd, &managed_method, 0x2173);
	}

	-(void) setColorSpace:(id)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_20 (self, _cmd, &managed_method, p0, 0x2175);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2177);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2179);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x217B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end


@implementation CoreImage_CIKaleidoscope {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x218F);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2191);
	}

	-(void *) count
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_11 (self, _cmd, &managed_method, 0x2193);
	}

	-(void) setCount:(void *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_12 (self, _cmd, &managed_method, p0, 0x2195);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2197);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2199);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x219B);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x219D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x219F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x21A1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x21A3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIKeystoneCorrection {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x21A7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIKeystoneCorrectionCombined {
}

	-(float) focalLength
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x21AF);
	}

	-(void) setFocalLength:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x21B1);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x21B3);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x21B5);
	}

	-(CGPoint) topLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x21B7);
	}

	-(void) setTopLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x21B9);
	}

	-(CGPoint) topRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x21BB);
	}

	-(void) setTopRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x21BD);
	}

	-(CGPoint) bottomRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x21BF);
	}

	-(void) setBottomRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x21C1);
	}

	-(CGPoint) bottomLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x21C3);
	}

	-(void) setBottomLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x21C5);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x21C7);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x21C9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIKeystoneCorrection class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x21CB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIKeystoneCorrection class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIKeystoneCorrectionHorizontal {
}

	-(float) focalLength
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x21D3);
	}

	-(void) setFocalLength:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x21D5);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x21D7);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x21D9);
	}

	-(CGPoint) topLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x21DB);
	}

	-(void) setTopLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x21DD);
	}

	-(CGPoint) topRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x21DF);
	}

	-(void) setTopRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x21E1);
	}

	-(CGPoint) bottomRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x21E3);
	}

	-(void) setBottomRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x21E5);
	}

	-(CGPoint) bottomLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x21E7);
	}

	-(void) setBottomLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x21E9);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x21EB);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x21ED);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIKeystoneCorrection class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x21EF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIKeystoneCorrection class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIKeystoneCorrectionVertical {
}

	-(float) focalLength
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x21F7);
	}

	-(void) setFocalLength:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x21F9);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x21FB);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x21FD);
	}

	-(CGPoint) topLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x21FF);
	}

	-(void) setTopLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2201);
	}

	-(CGPoint) topRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2203);
	}

	-(void) setTopRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2205);
	}

	-(CGPoint) bottomRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2207);
	}

	-(void) setBottomRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2209);
	}

	-(CGPoint) bottomLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x220B);
	}

	-(void) setBottomLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x220D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x220F);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2211);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIKeystoneCorrection class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2213);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIKeystoneCorrection class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIKMeans {
}

	-(CIImage *) inputMeans
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x221B);
	}

	-(void) setInputMeans:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x221D);
	}

	-(void *) count
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_11 (self, _cmd, &managed_method, 0x221F);
	}

	-(void) setCount:(void *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_12 (self, _cmd, &managed_method, p0, 0x2221);
	}

	-(float) passes
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2223);
	}

	-(void) setPasses:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2225);
	}

	-(BOOL) perceptual
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_17 (self, _cmd, &managed_method, 0x2227);
	}

	-(void) setPerceptual:(BOOL)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_18 (self, _cmd, &managed_method, p0, 0x2229);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x222B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x222D);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x222F);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x2231);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2233);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2235);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2237);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIReductionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILabDeltaE {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x223F);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2241);
	}

	-(CIImage *) image2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2243);
	}

	-(void) setImage2:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2245);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2247);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2249);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x224B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILanczosScaleTransform {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2253);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2255);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2257);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2259);
	}

	-(float) aspectRatio
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x225B);
	}

	-(void) setAspectRatio:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x225D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x225F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2261);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2263);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILenticularHaloGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x226B);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x226D);
	}

	-(CIColor *) color
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x226F);
	}

	-(void) setColor:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2271);
	}

	-(float) haloRadius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2273);
	}

	-(void) setHaloRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2275);
	}

	-(float) haloWidth
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2277);
	}

	-(void) setHaloWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2279);
	}

	-(float) haloOverlap
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x227B);
	}

	-(void) setHaloOverlap:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x227D);
	}

	-(float) striationStrength
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x227F);
	}

	-(void) setStriationStrength:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2281);
	}

	-(float) striationContrast
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2283);
	}

	-(void) setStriationContrast:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2285);
	}

	-(float) time
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2287);
	}

	-(void) setTime:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2289);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x228B);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x228D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x228F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILightenBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2293);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2295);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILightTunnel {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x229D);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x229F);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x22A1);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x22A3);
	}

	-(float) rotation
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x22A5);
	}

	-(void) setRotation:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x22A7);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x22A9);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x22AB);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x22AD);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x22AF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x22B1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILinearBurnBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x22B5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x22B7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILinearDodgeBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x22BB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x22BD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILinearGradient {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CGPoint) point0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x22C5);
	}

	-(void) setPoint0:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x22C7);
	}

	-(CGPoint) point1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x22C9);
	}

	-(void) setPoint1:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x22CB);
	}

	-(CIColor *) color0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x22CD);
	}

	-(void) setColor0:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x22CF);
	}

	-(CIColor *) color1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x22D1);
	}

	-(void) setColor1:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x22D3);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x22D5);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x22D7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x22D9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILinearLightBlendMode {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x22DD);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x22DF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x22E1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILinearToSRGBToneCurve {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x22E9);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x22EB);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x22ED);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x22EF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x22F1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILineOverlay {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x22F9);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x22FB);
	}

	-(float) NRNoiseLevel
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x22FD);
	}

	-(void) setNRNoiseLevel:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x22FF);
	}

	-(float) NRSharpness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2301);
	}

	-(void) setNRSharpness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2303);
	}

	-(float) edgeIntensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2305);
	}

	-(void) setEdgeIntensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2307);
	}

	-(float) threshold
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2309);
	}

	-(void) setThreshold:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x230B);
	}

	-(float) contrast
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x230D);
	}

	-(void) setContrast:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x230F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2311);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2313);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2315);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILineScreen {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x231D);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x231F);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2321);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2323);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2325);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2327);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2329);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x232B);
	}

	-(float) sharpness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x232D);
	}

	-(void) setSharpness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x232F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2331);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2333);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIScreenFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2335);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIScreenFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CILuminosityBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2339);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x233B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMaskedVariableBlur {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2343);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2345);
	}

	-(CIImage *) mask
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2347);
	}

	-(void) setMask:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2349);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x234B);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x234D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x234F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2351);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2353);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMaskToAlpha {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x235B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x235D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x235F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2361);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2363);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMaximumComponent {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x236B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x236D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x236F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2371);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2373);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMaximumCompositing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2377);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2379);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMedianFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2381);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2383);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2385);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2387);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2389);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMeshGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2391);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2393);
	}

	-(CIColor *) color
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2395);
	}

	-(void) setColor:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2397);
	}

	-(NSArray *) mesh
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_21 (self, _cmd, &managed_method, 0x2399);
	}

	-(void) setMesh:(NSArray *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_22 (self, _cmd, &managed_method, p0, 0x239B);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x239D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x239F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x23A1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMinimumComponent {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x23A9);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x23AB);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x23AD);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x23AF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x23B1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMinimumCompositing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x23B5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x23B7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMix {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x23BF);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x23C1);
	}

	-(CIImage *) backgroundImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x23C3);
	}

	-(void) setBackgroundImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x23C5);
	}

	-(float) amount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x23C7);
	}

	-(void) setAmount:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x23C9);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x23CB);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x23CD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x23CF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIModTransition {
}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x23D7);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x23D9);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x23DB);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x23DD);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x23DF);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x23E1);
	}

	-(float) compression
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x23E3);
	}

	-(void) setCompression:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x23E5);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x23E7);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x23E9);
	}

	-(CIImage *) targetImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x23EB);
	}

	-(void) setTargetImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x23ED);
	}

	-(float) time
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x23EF);
	}

	-(void) setTime:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x23F1);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x23F3);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x23F5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x23F7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMorphology {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x23FB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMorphologyGradient {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2403);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2405);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2407);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2409);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x240B);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x240D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIMorphology class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x240F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIMorphology class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMorphologyMaximum {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2417);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2419);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x241B);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x241D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x241F);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2421);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIMorphology class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2423);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIMorphology class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMorphologyMinimum {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x242B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x242D);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x242F);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2431);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2433);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2435);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIMorphology class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2437);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIMorphology class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMorphologyRectangle {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x243B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMorphologyRectangleMaximum {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2443);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2445);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2447);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2449);
	}

	-(float) height
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x244B);
	}

	-(void) setHeight:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x244D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x244F);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2451);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIMorphologyRectangle class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2453);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIMorphologyRectangle class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMorphologyRectangleMinimum {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x245B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x245D);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x245F);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2461);
	}

	-(float) height
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2463);
	}

	-(void) setHeight:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2465);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2467);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2469);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIMorphologyRectangle class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x246B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIMorphologyRectangle class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMotionBlur {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2473);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2475);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2477);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2479);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x247B);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x247D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x247F);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2481);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CILinearBlur class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2483);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CILinearBlur class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMultiplyBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2487);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2489);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIMultiplyCompositing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x248D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x248F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CINinePartStretched {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2497);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2499);
	}

	-(CGPoint) breakpoint0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x249B);
	}

	-(void) setBreakpoint0:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x249D);
	}

	-(CGPoint) breakpoint1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x249F);
	}

	-(void) setBreakpoint1:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x24A1);
	}

	-(CGPoint) growAmount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x24A3);
	}

	-(void) setGrowAmount:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x24A5);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x24A7);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x24A9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x24AB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CINinePartTiled {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x24B3);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x24B5);
	}

	-(CGPoint) breakpoint0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x24B7);
	}

	-(void) setBreakpoint0:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x24B9);
	}

	-(CGPoint) breakpoint1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x24BB);
	}

	-(void) setBreakpoint1:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x24BD);
	}

	-(CGPoint) growAmount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x24BF);
	}

	-(void) setGrowAmount:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x24C1);
	}

	-(BOOL) flipYTiles
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_17 (self, _cmd, &managed_method, 0x24C3);
	}

	-(void) setFlipYTiles:(BOOL)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_18 (self, _cmd, &managed_method, p0, 0x24C5);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x24C7);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x24C9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x24CB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CINoiseReduction {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x24D3);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x24D5);
	}

	-(float) noiseLevel
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x24D7);
	}

	-(void) setNoiseLevel:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x24D9);
	}

	-(float) sharpness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x24DB);
	}

	-(void) setSharpness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x24DD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x24DF);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x24E1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x24E3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIOpTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x24EB);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x24ED);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x24EF);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x24F1);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x24F3);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x24F5);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x24F7);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x24F9);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x24FB);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x24FD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x24FF);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2501);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2503);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIOverlayBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2507);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2509);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPageCurlTransition {
}

	-(CIImage *) backsideImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2511);
	}

	-(void) setBacksideImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2513);
	}

	-(CIImage *) shadingImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2515);
	}

	-(void) setShadingImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2517);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x2519);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x251B);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x251D);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x251F);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2521);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2523);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2525);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2527);
	}

	-(CIImage *) targetImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2529);
	}

	-(void) setTargetImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x252B);
	}

	-(float) time
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x252D);
	}

	-(void) setTime:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x252F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2531);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2533);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2535);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPageCurlWithShadowTransition {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) backsideImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x253D);
	}

	-(void) setBacksideImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x253F);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x2541);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x2543);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2545);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2547);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2549);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x254B);
	}

	-(float) shadowSize
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x254D);
	}

	-(void) setShadowSize:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x254F);
	}

	-(float) shadowAmount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2551);
	}

	-(void) setShadowAmount:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2553);
	}

	-(CGRect) shadowExtent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x2555);
	}

	-(void) setShadowExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x2557);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2559);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x255B);
	}

	-(CIImage *) targetImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x255D);
	}

	-(void) setTargetImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x255F);
	}

	-(float) time
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2561);
	}

	-(void) setTime:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2563);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2565);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2567);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2569);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPaletteCentroid {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2571);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2573);
	}

	-(CIImage *) paletteImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2575);
	}

	-(void) setPaletteImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2577);
	}

	-(BOOL) perceptual
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_17 (self, _cmd, &managed_method, 0x2579);
	}

	-(void) setPerceptual:(BOOL)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_18 (self, _cmd, &managed_method, p0, 0x257B);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x257D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x257F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2581);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPalettize {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2589);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x258B);
	}

	-(CIImage *) paletteImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x258D);
	}

	-(void) setPaletteImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x258F);
	}

	-(BOOL) perceptual
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_17 (self, _cmd, &managed_method, 0x2591);
	}

	-(void) setPerceptual:(BOOL)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_18 (self, _cmd, &managed_method, p0, 0x2593);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2595);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2597);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2599);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIParallelogramTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x25A1);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x25A3);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x25A5);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x25A7);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25A9);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25AB);
	}

	-(float) acuteAngle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25AD);
	}

	-(void) setAcuteAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25AF);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25B1);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25B3);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x25B5);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x25B7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x25B9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPdf417BarcodeGenerator {
}

	-(NSData *) message
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x25C1);
	}

	-(void) setMessage:(NSData *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x25C3);
	}

	-(float) minWidth
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25C5);
	}

	-(void) setMinWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25C7);
	}

	-(float) maxWidth
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25C9);
	}

	-(void) setMaxWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25CB);
	}

	-(float) minHeight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25CD);
	}

	-(void) setMinHeight:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25CF);
	}

	-(float) maxHeight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25D1);
	}

	-(void) setMaxHeight:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25D3);
	}

	-(float) dataColumns
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25D5);
	}

	-(void) setDataColumns:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25D7);
	}

	-(float) rows
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25D9);
	}

	-(void) setRows:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25DB);
	}

	-(float) preferredAspectRatio
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25DD);
	}

	-(void) setPreferredAspectRatio:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25DF);
	}

	-(float) compactionMode
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25E1);
	}

	-(void) setCompactionMode:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25E3);
	}

	-(float) compactStyle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25E5);
	}

	-(void) setCompactStyle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25E7);
	}

	-(float) correctionLevel
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25E9);
	}

	-(void) setCorrectionLevel:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25EB);
	}

	-(float) alwaysSpecifyCompaction
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x25ED);
	}

	-(void) setAlwaysSpecifyCompaction:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x25EF);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x25F1);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x25F3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICodeGenerator class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x25F5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICodeGenerator class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPersonSegmentation {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x25FF);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2601);
	}

	-(void *) qualityLevel
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_11 (self, _cmd, &managed_method, 0x2603);
	}

	-(void) setQualityLevel:(void *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_23 (self, _cmd, &managed_method, p0, 0x2605);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2607);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2609);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x260B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPerspectiveTransform {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2613);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2615);
	}

	-(CGPoint) topLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2617);
	}

	-(void) setTopLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2619);
	}

	-(CGPoint) topRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x261B);
	}

	-(void) setTopRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x261D);
	}

	-(CGPoint) bottomRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x261F);
	}

	-(void) setBottomRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2621);
	}

	-(CGPoint) bottomLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2623);
	}

	-(void) setBottomLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2625);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2627);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2629);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x262B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPerspectiveCorrection {
}

	-(BOOL) crop
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_17 (self, _cmd, &managed_method, 0x2633);
	}

	-(void) setCrop:(BOOL)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_18 (self, _cmd, &managed_method, p0, 0x2635);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2637);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2639);
	}

	-(CGPoint) topLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x263B);
	}

	-(void) setTopLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x263D);
	}

	-(CGPoint) topRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x263F);
	}

	-(void) setTopRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2641);
	}

	-(CGPoint) bottomRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2643);
	}

	-(void) setBottomRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2645);
	}

	-(CGPoint) bottomLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2647);
	}

	-(void) setBottomLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2649);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x264B);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x264D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPerspectiveTransform class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x264F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPerspectiveTransform class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPerspectiveRotate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2657);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2659);
	}

	-(float) focalLength
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x265B);
	}

	-(void) setFocalLength:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x265D);
	}

	-(float) pitch
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x265F);
	}

	-(void) setPitch:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2661);
	}

	-(float) yaw
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2663);
	}

	-(void) setYaw:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2665);
	}

	-(float) roll
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2667);
	}

	-(void) setRoll:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2669);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x266B);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x266D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x266F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPerspectiveTile {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2677);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2679);
	}

	-(CGPoint) topLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x267B);
	}

	-(void) setTopLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x267D);
	}

	-(CGPoint) topRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x267F);
	}

	-(void) setTopRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2681);
	}

	-(CGPoint) bottomRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2683);
	}

	-(void) setBottomRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2685);
	}

	-(CGPoint) bottomLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2687);
	}

	-(void) setBottomLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2689);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x268B);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x268D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x268F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPerspectiveTransformWithExtent {
}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x2697);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x2699);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x269B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x269D);
	}

	-(CGPoint) topLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x269F);
	}

	-(void) setTopLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x26A1);
	}

	-(CGPoint) topRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x26A3);
	}

	-(void) setTopRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x26A5);
	}

	-(CGPoint) bottomRight
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x26A7);
	}

	-(void) setBottomRight:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x26A9);
	}

	-(CGPoint) bottomLeft
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x26AB);
	}

	-(void) setBottomLeft:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x26AD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x26AF);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x26B1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPerspectiveTransform class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x26B3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPerspectiveTransform class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPhotoEffect {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x26BB);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x26BD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x26BF);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x26C1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPhotoEffectChrome {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x26C5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x26C7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPhotoEffectFade {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x26CB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x26CD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPhotoEffectInstant {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x26D1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x26D3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPhotoEffectMono {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x26D7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x26D9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPhotoEffectNoir {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x26DD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x26DF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPhotoEffectProcess {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x26E3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x26E5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPhotoEffectTonal {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x26E9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x26EB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPhotoEffectTransfer {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x26EF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x26F1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIPhotoEffect class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPinchDistortion {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x26F9);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x26FB);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x26FD);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x26FF);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2701);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2703);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2705);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2707);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2709);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x270B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x270D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPinLightBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2711);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2713);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPixellate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x271B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x271D);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x271F);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2721);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2723);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2725);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2727);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2729);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x272B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIPointillize {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2735);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2737);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2739);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x273B);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x273D);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x273F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2741);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2743);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2745);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIQRCodeGenerator {
}

	-(NSData *) message
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2751);
	}

	-(void) setMessage:(NSData *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2753);
	}

	-(NSString *) correctionLevel
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_24 (self, _cmd, &managed_method, 0x2755);
	}

	-(void) setCorrectionLevel:(NSString *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_25 (self, _cmd, &managed_method, p0, 0x2757);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2759);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x275B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICodeGenerator class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x275D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICodeGenerator class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIRadialGradient {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2765);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2767);
	}

	-(float) radius0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2769);
	}

	-(void) setRadius0:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x276B);
	}

	-(float) radius1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x276D);
	}

	-(void) setRadius1:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x276F);
	}

	-(CIColor *) color0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2771);
	}

	-(void) setColor0:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2773);
	}

	-(CIColor *) color1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2775);
	}

	-(void) setColor1:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2777);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2779);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x277B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x277D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIRandomGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2785);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2787);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2789);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIRippleTransition {
}

	-(CIImage *) shadingImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x279B);
	}

	-(void) setShadingImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x279D);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x279F);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x27A1);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x27A3);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x27A5);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x27A7);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x27A9);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x27AB);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x27AD);
	}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x27AF);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x27B1);
	}

	-(CIImage *) targetImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x27B3);
	}

	-(void) setTargetImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x27B5);
	}

	-(float) time
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x27B7);
	}

	-(void) setTime:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x27B9);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x27BB);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x27BD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x27BF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIRoundedRectangleGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x27C7);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x27C9);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x27CB);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x27CD);
	}

	-(CIColor *) color
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x27CF);
	}

	-(void) setColor:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x27D1);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x27D3);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x27D5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x27D7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIRowAverage {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x27DF);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x27E1);
	}

	-(CGRect) extent
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_13 (self, _cmd, &managed_method, 0x27E3);
	}

	-(void) setExtent:(CGRect)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_14 (self, _cmd, &managed_method, p0, 0x27E5);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x27E7);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x27E9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x27EB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISaliencyMapFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x27F3);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x27F5);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x27F7);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x27F9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x27FB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISampleNearest {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x27FF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2801);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISaturationBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2805);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2807);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIScreenBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x280B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x280D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISepiaTone {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2815);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2817);
	}

	-(float) intensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2819);
	}

	-(void) setIntensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x281B);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x281D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x281F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2821);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIShadedMaterial {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2829);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x282B);
	}

	-(CIImage *) shadingImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x282D);
	}

	-(void) setShadingImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x282F);
	}

	-(float) scale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2831);
	}

	-(void) setScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2833);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2835);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2837);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2839);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISharpenLuminance {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2841);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2843);
	}

	-(float) sharpness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2845);
	}

	-(void) setSharpness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2847);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2849);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x284B);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x284D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x284F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2851);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISixfoldReflectedTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2859);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x285B);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x285D);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x285F);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2861);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2863);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2865);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2867);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2869);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x286B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x286D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISixfoldRotatedTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2875);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2877);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2879);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x287B);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x287D);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x287F);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2881);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2883);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2885);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2887);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2889);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISmoothLinearGradient {
}

	-(CGPoint) point0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2891);
	}

	-(void) setPoint0:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2893);
	}

	-(CGPoint) point1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2895);
	}

	-(void) setPoint1:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2897);
	}

	-(CIColor *) color0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2899);
	}

	-(void) setColor0:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x289B);
	}

	-(CIColor *) color1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x289D);
	}

	-(void) setColor1:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x289F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x28A1);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x28A3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CILinearGradient class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x28A5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CILinearGradient class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISoftLightBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x28A9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x28AB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISourceAtopCompositing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x28AF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x28B1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISourceInCompositing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x28B5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x28B7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISourceOutCompositing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x28BB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x28BD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISourceOverCompositing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x28C1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x28C3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CICompositingFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISpotColor {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x28CB);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x28CD);
	}

	-(CIColor *) centerColor1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x28CF);
	}

	-(void) setCenterColor1:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x28D1);
	}

	-(CIColor *) replacementColor1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x28D3);
	}

	-(void) setReplacementColor1:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x28D5);
	}

	-(float) closeness1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x28D7);
	}

	-(void) setCloseness1:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x28D9);
	}

	-(float) contrast1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x28DB);
	}

	-(void) setContrast1:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x28DD);
	}

	-(CIColor *) centerColor2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x28DF);
	}

	-(void) setCenterColor2:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x28E1);
	}

	-(CIColor *) replacementColor2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x28E3);
	}

	-(void) setReplacementColor2:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x28E5);
	}

	-(float) closeness2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x28E7);
	}

	-(void) setCloseness2:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x28E9);
	}

	-(float) contrast2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x28EB);
	}

	-(void) setContrast2:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x28ED);
	}

	-(CIColor *) centerColor3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x28EF);
	}

	-(void) setCenterColor3:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x28F1);
	}

	-(CIColor *) replacementColor3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x28F3);
	}

	-(void) setReplacementColor3:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x28F5);
	}

	-(float) closeness3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x28F7);
	}

	-(void) setCloseness3:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x28F9);
	}

	-(float) contrast3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x28FB);
	}

	-(void) setContrast3:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x28FD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x28FF);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2901);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2903);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISpotLight {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x290B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x290D);
	}

	-(CIVector *) lightPosition
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x290F);
	}

	-(void) setLightPosition:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2911);
	}

	-(CIVector *) lightPointsAt
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2913);
	}

	-(void) setLightPointsAt:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2915);
	}

	-(float) brightness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2917);
	}

	-(void) setBrightness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2919);
	}

	-(float) concentration
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x291B);
	}

	-(void) setConcentration:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x291D);
	}

	-(CIColor *) color
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x291F);
	}

	-(void) setColor:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2921);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2923);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2925);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2927);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISRGBToneCurveToLinear {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x292F);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2931);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2933);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2935);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2937);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIStarShineGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x293F);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2941);
	}

	-(CIColor *) color
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2943);
	}

	-(void) setColor:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2945);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2947);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2949);
	}

	-(float) crossScale
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x294B);
	}

	-(void) setCrossScale:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x294D);
	}

	-(float) crossAngle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x294F);
	}

	-(void) setCrossAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2951);
	}

	-(float) crossOpacity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2953);
	}

	-(void) setCrossOpacity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2955);
	}

	-(float) crossWidth
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2957);
	}

	-(void) setCrossWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2959);
	}

	-(float) epsilon
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x295B);
	}

	-(void) setEpsilon:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x295D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x295F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2961);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2963);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIStraightenFilter {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x296B);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x296D);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x296F);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2971);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2973);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2975);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2977);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIStretchCrop {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x297F);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2981);
	}

	-(CGPoint) size
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2983);
	}

	-(void) setSize:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2985);
	}

	-(float) cropAmount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2987);
	}

	-(void) setCropAmount:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2989);
	}

	-(float) centerStretchAmount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x298B);
	}

	-(void) setCenterStretchAmount:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x298D);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x298F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2991);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2993);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIStripesGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x299B);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x299D);
	}

	-(CIColor *) color0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x299F);
	}

	-(void) setColor0:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x29A1);
	}

	-(CIColor *) color1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x29A3);
	}

	-(void) setColor1:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x29A5);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x29A7);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x29A9);
	}

	-(float) sharpness
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x29AB);
	}

	-(void) setSharpness:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x29AD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x29AF);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x29B1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x29B3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISubtractBlendMode {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x29B7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x29B9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIBlendFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISunbeamsGenerator {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x29C1);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x29C3);
	}

	-(CIColor *) color
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x29C5);
	}

	-(void) setColor:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x29C7);
	}

	-(float) sunRadius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x29C9);
	}

	-(void) setSunRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x29CB);
	}

	-(float) maxStriationRadius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x29CD);
	}

	-(void) setMaxStriationRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x29CF);
	}

	-(float) striationStrength
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x29D1);
	}

	-(void) setStriationStrength:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x29D3);
	}

	-(float) striationContrast
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x29D5);
	}

	-(void) setStriationContrast:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x29D7);
	}

	-(float) time
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x29D9);
	}

	-(void) setTime:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x29DB);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x29DD);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x29DF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x29E1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CISwipeTransition {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x29E5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x29E7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITransitionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CITemperatureAndTint {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x29F3);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x29F5);
	}

	-(CIVector *) neutral
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x29F7);
	}

	-(void) setNeutral:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x29F9);
	}

	-(CIVector *) targetNeutral
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x29FB);
	}

	-(void) setTargetNeutral:(CIVector *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x29FD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x29FF);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2A01);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2A03);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CITextImageGenerator {
}

	-(NSString *) text
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_24 (self, _cmd, &managed_method, 0x2A0D);
	}

	-(void) setText:(NSString *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_25 (self, _cmd, &managed_method, p0, 0x2A0F);
	}

	-(NSString *) fontName
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_24 (self, _cmd, &managed_method, 0x2A11);
	}

	-(void) setFontName:(NSString *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_25 (self, _cmd, &managed_method, p0, 0x2A13);
	}

	-(float) fontSize
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2A15);
	}

	-(void) setFontSize:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2A17);
	}

	-(float) scaleFactor
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2A19);
	}

	-(void) setScaleFactor:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2A1B);
	}

	-(float) padding
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2A1D);
	}

	-(void) setPadding:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2A1F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2A21);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2A23);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIImageGenerator class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2A25);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIImageGenerator class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIThermal {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2A2D);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2A2F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2A31);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2A33);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2A35);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIToneCurve {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2A3D);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2A3F);
	}

	-(CGPoint) point0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2A41);
	}

	-(void) setPoint0:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2A43);
	}

	-(CGPoint) point1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2A45);
	}

	-(void) setPoint1:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2A47);
	}

	-(CGPoint) point2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2A49);
	}

	-(void) setPoint2:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2A4B);
	}

	-(CGPoint) point3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2A4D);
	}

	-(void) setPoint3:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2A4F);
	}

	-(CGPoint) point4
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2A51);
	}

	-(void) setPoint4:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2A53);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2A55);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2A57);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2A59);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CITorusLensDistortion {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2A61);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2A63);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2A65);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2A67);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2A69);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2A6B);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2A6D);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2A6F);
	}

	-(float) refraction
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2A71);
	}

	-(void) setRefraction:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2A73);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2A75);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2A77);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2A79);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CITriangleKaleidoscope {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2A81);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2A83);
	}

	-(CGPoint) point
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2A85);
	}

	-(void) setPoint:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2A87);
	}

	-(float) size
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2A89);
	}

	-(void) setSize:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2A8B);
	}

	-(float) rotation
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2A8D);
	}

	-(void) setRotation:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2A8F);
	}

	-(float) decay
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2A91);
	}

	-(void) setDecay:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2A93);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2A95);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2A97);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2A99);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CITriangleTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2AA1);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2AA3);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2AA5);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2AA7);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2AA9);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2AAB);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2AAD);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2AAF);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2AB1);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2AB3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2AB5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CITwelvefoldReflectedTile {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2ABD);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2ABF);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2AC1);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2AC3);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2AC5);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2AC7);
	}

	-(float) width
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2AC9);
	}

	-(void) setWidth:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2ACB);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2ACD);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2ACF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2AD1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CITileFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CITwirlDistortion {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2AD9);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2ADB);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2ADD);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2ADF);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2AE1);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2AE3);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2AE5);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2AE7);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2AE9);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2AEB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2AED);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIUnsharpMask {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2AF5);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2AF7);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2AF9);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2AFB);
	}

	-(float) intensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2AFD);
	}

	-(void) setIntensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2AFF);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B01);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2B03);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2B05);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIVibrance {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B0D);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2B0F);
	}

	-(float) amount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2B11);
	}

	-(void) setAmount:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2B13);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B15);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2B17);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2B19);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIVignette {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B21);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2B23);
	}

	-(float) intensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2B25);
	}

	-(void) setIntensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2B27);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2B29);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2B2B);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B2D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2B2F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2B31);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIVignetteEffect {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B39);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2B3B);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2B3D);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2B3F);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2B41);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2B43);
	}

	-(float) intensity
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2B45);
	}

	-(void) setIntensity:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2B47);
	}

	-(float) falloff
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2B49);
	}

	-(void) setFalloff:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2B4B);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B4D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2B4F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2B51);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIVividLightBlendMode {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B55);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2B57);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2B59);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIVortexDistortion {
}

	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B61);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2B63);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2B65);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2B67);
	}

	-(float) radius
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2B69);
	}

	-(void) setRadius:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2B6B);
	}

	-(float) angle
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2B6D);
	}

	-(void) setAngle:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2B6F);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B71);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2B73);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2B75);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CoreImage_CIDistortionFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIWhitePointAdjust {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B7F);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2B81);
	}

	-(CIColor *) color
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B83);
	}

	-(void) setColor:(CIColor *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2B85);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B87);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2B89);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2B8B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIXRay {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B93);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2B95);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2B97);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2B99);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2B9B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

@implementation CoreImage_CIZoomBlur {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(CIImage *) inputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2BA3);
	}

	-(void) setInputImage:(CIImage *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2BA5);
	}

	-(CGPoint) center
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_15 (self, _cmd, &managed_method, 0x2BA7);
	}

	-(void) setCenter:(CGPoint)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_16 (self, _cmd, &managed_method, p0, 0x2BA9);
	}

	-(float) amount
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_7 (self, _cmd, &managed_method, 0x2BAB);
	}

	-(void) setAmount:(float)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_8 (self, _cmd, &managed_method, p0, 0x2BAD);
	}

	-(CIImage *) outputImage
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_4 (self, _cmd, &managed_method, 0x2BAF);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2BB1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}

	-(id) initWithCoder:(NSCoder *)p0
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_5 (self, _cmd, &managed_method, p0, &call_super, 0x2BB3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [CIFilter class] };
			rv = ((id (*)(objc_super*, SEL, NSCoder *)) objc_msgSendSuper) (&super, @selector (initWithCoder:), p0);
		}
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CoreBluetooth_CBCentralManagerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2C27);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CoreBluetooth_CBPeripheralDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2C3F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CoreBluetooth_CBPeripheralManagerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2C47);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CoreAnimation_CALayerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2C55);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CoreAnimation_CAAnimationDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2C63);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CoreAnimation_CAMediaTiming {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2C73);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__CloudKit_CKRecordValue {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2D31);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__ClassKit_CLSDataStoreDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2D59);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__BackgroundAssets_BADownloadManagerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2D73);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AuthenticationServices_ASAuthorizationControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2D8F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AuthenticationServices_ASWebAuthenticationSessionRequestDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2DFD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop


@interface __monomac_internal_ActionDispatcher : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) __monomac_internal_ActionDispatcher_activated:(NSObject *)p0;
	-(void) __monomac_internal_ActionDispatcher_doubleActivated:(NSObject *)p0;
	-(BOOL) validateMenuItem:(NSMenuItem *)p0;
	-(BOOL) worksWhenModal;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation __monomac_internal_ActionDispatcher {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) __monomac_internal_ActionDispatcher_activated:(NSObject *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2E19);
	}

	-(void) __monomac_internal_ActionDispatcher_doubleActivated:(NSObject *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x2E1B);
	}

	-(BOOL) validateMenuItem:(NSMenuItem *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x2E1D);
	}

	-(BOOL) worksWhenModal
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_17 (self, _cmd, &managed_method, 0x2E1F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2E21);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __MonoMac_NSAlertDidEndDispatcher : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) alertDidEnd:(NSAlert *)p0 returnCode:(void *)p1 contextInfo:(void *)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation __MonoMac_NSAlertDidEndDispatcher {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) alertDidEnd:(NSAlert *)p0 returnCode:(void *)p1 contextInfo:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_27 (self, _cmd, &managed_method, p0, p1, p2, 0x2E33);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSAccessibilityCustomRotorItemSearchDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2E99);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSAlertDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2EDF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSAlignmentFeedbackToken {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2EE9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSAnimationDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2EF3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSAppearanceCustomization {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2EF9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSBrowserDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2F09);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSCandidateListTouchBarItemDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2F19);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSSharingServiceDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2F29);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSCloudSharingServiceDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2F2D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSCollectionViewDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2F5F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSCollectionViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2F67);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSCollectionViewDelegateFlowLayout {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2F6F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSCollectionViewElement {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2F79);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSComboBoxCellDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2FAB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSComboBoxDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2FB3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextFieldDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2FBF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSComboBoxDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2FC3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSControlTextEditingDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2FCD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSDatePickerCellDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2FDD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSDockTilePlugIn {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2FED);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSDraggingDestination {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x2FF7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSDraggingSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3003);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSDrawerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x300B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSFilePromiseProviderDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3017);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSGestureRecognizerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3037);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSHapticFeedbackPerformer {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x304F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSImageDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3059);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSLayoutManagerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x306B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSMatrixDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3079);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSMenuDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3081);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSOpenSavePanelDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x309D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSOutlineViewDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x30A5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSOutlineViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x30AD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSPageControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x30B5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSPasteboardItemDataProvider {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x30BF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSPathCellDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x30CB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSPathControlDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x30D5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSPopoverDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x30E1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSPrintPanelAccessorizing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x30FD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSRuleEditorDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3109);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSScrubberDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x311B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSScrubberDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3123);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSScrubberFlowLayoutDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x312F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSSearchFieldDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3147);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSSeguePerforming {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3159);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSSharingServicePickerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3167);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSSharingServicePickerToolbarItemDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3171);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSSharingServicePickerTouchBarItemDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x317B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSSoundDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3187);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSSpeechRecognizerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3191);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSSpeechSynthesizerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3199);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSSplitViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x31A3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSSpringLoadingDestination {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x31AD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSStackViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x31B7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTableViewDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x31DD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTableViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x31E5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTableViewSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x31EB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTabViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x31F9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextAttachmentContainer {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x320F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextContentManagerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3229);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextContentStorageDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x323D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3241);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextFinderBarContainer {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x324D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextInputClient {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3259);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextLayoutManagerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3269);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextSelectionDataSource {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x327D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextStorageDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3287);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3291);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTextViewportLayoutControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x329B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTokenFieldCellDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x32AB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTokenFieldDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x32B3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSToolbarDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x32B7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSTouchBarDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x32C5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSViewControllerPresentationAnimator {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x32DB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSWindowDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x32E1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AppKit_NSWindowRestoration {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x32E5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVKit_AVCaptureViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x32FD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVKit_AVPictureInPictureControllerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3309);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVKit_AVPictureInPictureSampleBufferPlaybackDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3311);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVKit_AVPlayerViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x331D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVKit_AVPlayerViewPictureInPictureDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3325);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVKit_AVRoutePickerViewDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x332F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVAudioPlayerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3353);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface AVFoundation_InternalAVAudioPlayerDelegate : NSObject<AVAudioPlayerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) audioPlayerDidFinishPlaying:(AVAudioPlayer *)p0 successfully:(BOOL)p1;
	-(void) audioPlayerDecodeErrorDidOccur:(AVAudioPlayer *)p0 error:(NSError *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AVFoundation_InternalAVAudioPlayerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) audioPlayerDidFinishPlaying:(AVAudioPlayer *)p0 successfully:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_28 (self, _cmd, &managed_method, p0, p1, 0x3357);
	}

	-(void) audioPlayerDecodeErrorDidOccur:(AVAudioPlayer *)p0 error:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3359);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x335B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVAudioRecorderDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3363);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface AVFoundation_InternalAVAudioRecorderDelegate : NSObject<AVAudioRecorderDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) audioRecorderDidFinishRecording:(AVAudioRecorder *)p0 successfully:(BOOL)p1;
	-(void) audioRecorderEncodeErrorDidOccur:(AVAudioRecorder *)p0 error:(NSError *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AVFoundation_InternalAVAudioRecorderDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) audioRecorderDidFinishRecording:(AVAudioRecorder *)p0 successfully:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_28 (self, _cmd, &managed_method, p0, p1, 0x3367);
	}

	-(void) audioRecorderEncodeErrorDidOccur:(AVAudioRecorder *)p0 error:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3369);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x336B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVAssetDownloadDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x337B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVAssetResourceLoaderDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x33A5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVAssetWriterDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x33C9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVAsynchronousKeyValueLoading {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x33E1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVAudio3DMixing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x33E9);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVAudioStereoMixing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x341D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVCaptureAudioDataOutputSampleBufferDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3461);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVCaptureFileOutputDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3473);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVCaptureFileOutputRecordingDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x347B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVCapturePhotoCaptureDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3489);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVCaptureVideoDataOutputSampleBufferDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3497);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVContentKeySessionDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x34B1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVPlaybackCoordinatorPlaybackControlDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3527);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVPlayerItemOutputPushDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3545);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVPlayerItemLegibleOutputPushDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3549);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVPlayerItemMetadataCollectorPushDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3555);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVPlayerItemMetadataOutputPushDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x355F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVPlayerItemOutputPullDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3567);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVPlayerPlaybackCoordinatorDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3573);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVSpeechSynthesizerDelegate {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x358D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wobjc-protocol-property-synthesis"
#pragma clang diagnostic ignored "-Wobjc-property-implementation"
@implementation Microsoft_macOS__AVFoundation_AVVideoCompositing {
}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3599);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end
#pragma clang diagnostic pop

@interface NotificationCenter_NCWidgetListViewController__NCWidgetListViewDelegate : NSObject<NCWidgetListViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) widgetList:(NCWidgetListViewController *)p0 didRemoveRow:(void *)p1;
	-(void) widgetList:(NCWidgetListViewController *)p0 didReorderRow:(void *)p1 toRow:(void *)p2;
	-(NSViewController *) widgetList:(NCWidgetListViewController *)p0 viewControllerForRow:(void *)p1;
	-(void) widgetListPerformAddAction:(NCWidgetListViewController *)p0;
	-(BOOL) widgetList:(NCWidgetListViewController *)p0 shouldRemoveRow:(void *)p1;
	-(BOOL) widgetList:(NCWidgetListViewController *)p0 shouldReorderRow:(void *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation NotificationCenter_NCWidgetListViewController__NCWidgetListViewDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) widgetList:(NCWidgetListViewController *)p0 didRemoveRow:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_30 (self, _cmd, &managed_method, p0, p1, 0x35CF);
	}

	-(void) widgetList:(NCWidgetListViewController *)p0 didReorderRow:(void *)p1 toRow:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_31 (self, _cmd, &managed_method, p0, p1, p2, 0x35D1);
	}

	-(NSViewController *) widgetList:(NCWidgetListViewController *)p0 viewControllerForRow:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_32 (self, _cmd, &managed_method, p0, p1, 0x35D3);
	}

	-(void) widgetListPerformAddAction:(NCWidgetListViewController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x35D5);
	}

	-(BOOL) widgetList:(NCWidgetListViewController *)p0 shouldRemoveRow:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_33 (self, _cmd, &managed_method, p0, p1, 0x35D7);
	}

	-(BOOL) widgetList:(NCWidgetListViewController *)p0 shouldReorderRow:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_33 (self, _cmd, &managed_method, p0, p1, 0x35D9);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x35DB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface NotificationCenter_NCWidgetSearchViewController__NCWidgetSearchViewDelegate : NSObject<NCWidgetSearchViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) widgetSearch:(NCWidgetSearchViewController *)p0 resultSelected:(NSObject *)p1;
	-(void) widgetSearch:(NCWidgetSearchViewController *)p0 searchForTerm:(NSString *)p1 maxResults:(void *)p2;
	-(void) widgetSearchTermCleared:(NCWidgetSearchViewController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation NotificationCenter_NCWidgetSearchViewController__NCWidgetSearchViewDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) widgetSearch:(NCWidgetSearchViewController *)p0 resultSelected:(NSObject *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x35E1);
	}

	-(void) widgetSearch:(NCWidgetSearchViewController *)p0 searchForTerm:(NSString *)p1 maxResults:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_34 (self, _cmd, &managed_method, p0, p1, p2, 0x35E3);
	}

	-(void) widgetSearchTermCleared:(NCWidgetSearchViewController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x35E5);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x35E7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface ExternalAccessory_EAAccessory__EAAccessoryDelegate : NSObject<EAAccessoryDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) accessoryDidDisconnect:(EAAccessory *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation ExternalAccessory_EAAccessory__EAAccessoryDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) accessoryDidDisconnect:(EAAccessory *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x35F9);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x35FB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface StoreKit_SKRequest__SKRequestDelegate : NSObject<SKRequestDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) request:(SKRequest *)p0 didFailWithError:(NSError *)p1;
	-(void) requestDidFinish:(SKRequest *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation StoreKit_SKRequest__SKRequestDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) request:(SKRequest *)p0 didFailWithError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x361D);
	}

	-(void) requestDidFinish:(SKRequest *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x361F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3621);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface StoreKit_SKProductsRequest__SKProductsRequestDelegate : StoreKit_SKRequest__SKRequestDelegate<SKProductsRequestDelegate, SKRequestDelegate> {
}
	-(void) productsRequest:(SKProductsRequest *)p0 didReceiveResponse:(SKProductsResponse *)p1;
	-(id) init;
@end

@implementation StoreKit_SKProductsRequest__SKProductsRequestDelegate {
}

	-(void) productsRequest:(SKProductsRequest *)p0 didReceiveResponse:(SKProductsResponse *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3625);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3627);
		if (call_super && rv) {
			struct objc_super super = {  rv, [StoreKit_SKRequest__SKRequestDelegate class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface StoreKit_SKStoreProductViewController__SKStoreProductViewControllerDelegate : NSObject<SKStoreProductViewControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) productViewControllerDidFinish:(SKStoreProductViewController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation StoreKit_SKStoreProductViewController__SKStoreProductViewControllerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) productViewControllerDidFinish:(SKStoreProductViewController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x362F);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3631);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface SpriteKit_SKPhysicsWorld__SKPhysicsContactDelegate : NSObject<SKPhysicsContactDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) didBeginContact:(SKPhysicsContact *)p0;
	-(void) didEndContact:(SKPhysicsContact *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation SpriteKit_SKPhysicsWorld__SKPhysicsContactDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) didBeginContact:(SKPhysicsContact *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3637);
	}

	-(void) didEndContact:(SKPhysicsContact *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3639);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x363B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface ScriptingBridge_SBApplication__SBApplicationDelegate : NSObject<SBApplicationDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSObject *) eventDidFail:(void *)p0 withError:(NSError *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation ScriptingBridge_SBApplication__SBApplicationDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(NSObject *) eventDidFail:(void *)p0 withError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_35 (self, _cmd, &managed_method, p0, p1, 0x3647);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3649);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface SceneKit_SCNPhysicsWorld__SCNPhysicsContactDelegate : NSObject<SCNPhysicsContactDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) physicsWorld:(SCNPhysicsWorld *)p0 didBeginContact:(SCNPhysicsContact *)p1;
	-(void) physicsWorld:(SCNPhysicsWorld *)p0 didEndContact:(SCNPhysicsContact *)p1;
	-(void) physicsWorld:(SCNPhysicsWorld *)p0 didUpdateContact:(SCNPhysicsContact *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation SceneKit_SCNPhysicsWorld__SCNPhysicsContactDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) physicsWorld:(SCNPhysicsWorld *)p0 didBeginContact:(SCNPhysicsContact *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3655);
	}

	-(void) physicsWorld:(SCNPhysicsWorld *)p0 didEndContact:(SCNPhysicsContact *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3657);
	}

	-(void) physicsWorld:(SCNPhysicsWorld *)p0 didUpdateContact:(SCNPhysicsContact *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3659);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x365B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Photos_PHPhotoLibrary___phlib_observer : NSObject<PHPhotoLibraryChangeObserver> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) photoLibraryDidChange:(PHChange *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Photos_PHPhotoLibrary___phlib_observer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) photoLibraryDidChange:(PHChange *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3667);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface PdfKit_PdfDocument__PdfDocumentDelegate : NSObject<PDFDocumentDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) documentDidBeginDocumentFind:(NSNotification *)p0;
	-(void) didMatchString:(PDFSelection *)p0;
	-(void) documentDidUnlock:(NSNotification *)p0;
	-(void) documentDidEndDocumentFind:(NSNotification *)p0;
	-(Class) classForAnnotationClass:(Class)p0;
	-(Class) classForAnnotationType:(NSString *)p0;
	-(void) documentDidFindMatch:(NSNotification *)p0;
	-(void) documentDidEndPageFind:(NSNotification *)p0;
	-(void) documentDidBeginPageFind:(NSNotification *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation PdfKit_PdfDocument__PdfDocumentDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) documentDidBeginDocumentFind:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3671);
	}

	-(void) didMatchString:(PDFSelection *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3673);
	}

	-(void) documentDidUnlock:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3675);
	}

	-(void) documentDidEndDocumentFind:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3677);
	}

	-(Class) classForAnnotationClass:(Class)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_36 (self, _cmd, &managed_method, p0, 0x3679);
	}

	-(Class) classForAnnotationType:(NSString *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_37 (self, _cmd, &managed_method, p0, 0x367B);
	}

	-(void) documentDidFindMatch:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x367D);
	}

	-(void) documentDidEndPageFind:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x367F);
	}

	-(void) documentDidBeginPageFind:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3681);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3683);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface PdfKit_PdfView__PdfViewDelegate : NSObject<PDFViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) PDFViewOpenPDF:(PDFView *)p0 forRemoteGoToAction:(PDFActionRemoteGoTo *)p1;
	-(void) PDFViewPerformFind:(PDFView *)p0;
	-(void) PDFViewPerformGoToPage:(PDFView *)p0;
	-(void) PDFViewPerformPrint:(PDFView *)p0;
	-(NSString *) PDFViewPrintJobTitle:(PDFView *)p0;
	-(CGFloat) PDFViewWillChangeScaleFactor:(PDFView *)p0 toScale:(CGFloat)p1;
	-(void) PDFViewWillClickOnLink:(PDFView *)p0 withURL:(NSURL *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation PdfKit_PdfView__PdfViewDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) PDFViewOpenPDF:(PDFView *)p0 forRemoteGoToAction:(PDFActionRemoteGoTo *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x368B);
	}

	-(void) PDFViewPerformFind:(PDFView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x368D);
	}

	-(void) PDFViewPerformGoToPage:(PDFView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x368F);
	}

	-(void) PDFViewPerformPrint:(PDFView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3691);
	}

	-(NSString *) PDFViewPrintJobTitle:(PDFView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_38 (self, _cmd, &managed_method, p0, 0x3693);
	}

	-(CGFloat) PDFViewWillChangeScaleFactor:(PDFView *)p0 toScale:(CGFloat)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_39 (self, _cmd, &managed_method, p0, p1, 0x3695);
	}

	-(void) PDFViewWillClickOnLink:(PDFView *)p0 withURL:(NSURL *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3697);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3699);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface PassKit_PKPaymentAuthorizationViewController__PKPaymentAuthorizationViewControllerDelegate : NSObject<PKPaymentAuthorizationViewControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didAuthorizePayment:(PKPayment *)p1 handler:(void (^)(void *))p2;
	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didChangeCouponCode:(NSString *)p1 handler:(void (^)(void *))p2;
	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didRequestMerchantSessionUpdate:(void (^)(void *))p1;
	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didSelectPaymentMethod:(PKPaymentMethod *)p1 handler:(void (^)(void *))p2;
	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didSelectShippingContact:(PKContact *)p1 handler:(void (^)(void *))p2;
	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didSelectShippingMethod:(PKShippingMethod *)p1 handler:(void (^)(void *))p2;
	-(void) paymentAuthorizationViewControllerDidFinish:(PKPaymentAuthorizationViewController *)p0;
	-(void) paymentAuthorizationViewControllerWillAuthorizePayment:(PKPaymentAuthorizationViewController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation PassKit_PKPaymentAuthorizationViewController__PKPaymentAuthorizationViewControllerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didAuthorizePayment:(PKPayment *)p1 handler:(void (^)(void *))p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_40 (self, _cmd, &managed_method, p0, p1, p2, 0x36A7);
	}

	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didChangeCouponCode:(NSString *)p1 handler:(void (^)(void *))p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_41 (self, _cmd, &managed_method, p0, p1, p2, 0x36AB);
	}

	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didRequestMerchantSessionUpdate:(void (^)(void *))p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_42 (self, _cmd, &managed_method, p0, p1, 0x36AF);
	}

	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didSelectPaymentMethod:(PKPaymentMethod *)p1 handler:(void (^)(void *))p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_43 (self, _cmd, &managed_method, p0, p1, p2, 0x36B3);
	}

	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didSelectShippingContact:(PKContact *)p1 handler:(void (^)(void *))p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_44 (self, _cmd, &managed_method, p0, p1, p2, 0x36B7);
	}

	-(void) paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)p0 didSelectShippingMethod:(PKShippingMethod *)p1 handler:(void (^)(void *))p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_45 (self, _cmd, &managed_method, p0, p1, p2, 0x36BB);
	}

	-(void) paymentAuthorizationViewControllerDidFinish:(PKPaymentAuthorizationViewController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x36BF);
	}

	-(void) paymentAuthorizationViewControllerWillAuthorizePayment:(PKPaymentAuthorizationViewController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x36C1);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x36C3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface MapKit_MKMapView__MKMapViewDelegate : NSObject<MKMapViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) mapView:(MKMapView *)p0 annotationView:(MKAnnotationView *)p1 didChangeDragState:(NSUInteger)p2 fromOldState:(NSUInteger)p3;
	-(MKClusterAnnotation *) mapView:(MKMapView *)p0 clusterAnnotationForMemberAnnotations:(NSArray *)p1;
	-(void) mapView:(MKMapView *)p0 didAddAnnotationViews:(NSArray *)p1;
	-(void) mapView:(MKMapView *)p0 didAddOverlayRenderers:(NSArray *)p1;
	-(void) mapView:(MKMapView *)p0 didChangeUserTrackingMode:(NSUInteger)p1 animated:(BOOL)p2;
	-(void) mapViewDidChangeVisibleRegion:(MKMapView *)p0;
	-(void) mapView:(MKMapView *)p0 didDeselectAnnotationView:(MKAnnotationView *)p1;
	-(void) mapView:(MKMapView *)p0 didFailToLocateUserWithError:(NSError *)p1;
	-(void) mapViewDidFinishRenderingMap:(MKMapView *)p0 fullyRendered:(BOOL)p1;
	-(void) mapView:(MKMapView *)p0 didSelectAnnotationView:(MKAnnotationView *)p1;
	-(void) mapViewDidStopLocatingUser:(MKMapView *)p0;
	-(void) mapView:(MKMapView *)p0 didUpdateUserLocation:(MKUserLocation *)p1;
	-(MKAnnotationView *) mapView:(MKMapView *)p0 viewForAnnotation:(id)p1;
	-(void) mapViewDidFailLoadingMap:(MKMapView *)p0 withError:(NSError *)p1;
	-(void) mapViewDidFinishLoadingMap:(MKMapView *)p0;
	-(MKOverlayRenderer *) mapView:(MKMapView *)p0 rendererForOverlay:(id)p1;
	-(void) mapView:(MKMapView *)p0 regionDidChangeAnimated:(BOOL)p1;
	-(void) mapView:(MKMapView *)p0 regionWillChangeAnimated:(BOOL)p1;
	-(void) mapViewWillStartLoadingMap:(MKMapView *)p0;
	-(void) mapViewWillStartLocatingUser:(MKMapView *)p0;
	-(void) mapViewWillStartRenderingMap:(MKMapView *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation MapKit_MKMapView__MKMapViewDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) mapView:(MKMapView *)p0 annotationView:(MKAnnotationView *)p1 didChangeDragState:(NSUInteger)p2 fromOldState:(NSUInteger)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_46 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3715);
	}

	-(MKClusterAnnotation *) mapView:(MKMapView *)p0 clusterAnnotationForMemberAnnotations:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_47 (self, _cmd, &managed_method, p0, p1, 0x3717);
	}

	-(void) mapView:(MKMapView *)p0 didAddAnnotationViews:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_48 (self, _cmd, &managed_method, p0, p1, 0x3719);
	}

	-(void) mapView:(MKMapView *)p0 didAddOverlayRenderers:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_48 (self, _cmd, &managed_method, p0, p1, 0x371B);
	}

	-(void) mapView:(MKMapView *)p0 didChangeUserTrackingMode:(NSUInteger)p1 animated:(BOOL)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_49 (self, _cmd, &managed_method, p0, p1, p2, 0x371D);
	}

	-(void) mapViewDidChangeVisibleRegion:(MKMapView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x371F);
	}

	-(void) mapView:(MKMapView *)p0 didDeselectAnnotationView:(MKAnnotationView *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3721);
	}

	-(void) mapView:(MKMapView *)p0 didFailToLocateUserWithError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3723);
	}

	-(void) mapViewDidFinishRenderingMap:(MKMapView *)p0 fullyRendered:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_28 (self, _cmd, &managed_method, p0, p1, 0x3725);
	}

	-(void) mapView:(MKMapView *)p0 didSelectAnnotationView:(MKAnnotationView *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3727);
	}

	-(void) mapViewDidStopLocatingUser:(MKMapView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3729);
	}

	-(void) mapView:(MKMapView *)p0 didUpdateUserLocation:(MKUserLocation *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x372B);
	}

	-(MKAnnotationView *) mapView:(MKMapView *)p0 viewForAnnotation:(id)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_50 (self, _cmd, &managed_method, p0, p1, 0x372D);
	}

	-(void) mapViewDidFailLoadingMap:(MKMapView *)p0 withError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x372F);
	}

	-(void) mapViewDidFinishLoadingMap:(MKMapView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3731);
	}

	-(MKOverlayRenderer *) mapView:(MKMapView *)p0 rendererForOverlay:(id)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_51 (self, _cmd, &managed_method, p0, p1, 0x3733);
	}

	-(void) mapView:(MKMapView *)p0 regionDidChangeAnimated:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_28 (self, _cmd, &managed_method, p0, p1, 0x3735);
	}

	-(void) mapView:(MKMapView *)p0 regionWillChangeAnimated:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_28 (self, _cmd, &managed_method, p0, p1, 0x3737);
	}

	-(void) mapViewWillStartLoadingMap:(MKMapView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3739);
	}

	-(void) mapViewWillStartLocatingUser:(MKMapView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x373B);
	}

	-(void) mapViewWillStartRenderingMap:(MKMapView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x373D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x373F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface ImageKit_IKCameraDeviceView__IKCameraDeviceViewDelegate : NSObject<IKCameraDeviceViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) cameraDeviceView:(IKCameraDeviceView *)p0 didDownloadFile:(ICCameraFile *)p1 location:(NSURL *)p2 fileData:(NSData *)p3 error:(NSError *)p4;
	-(void) cameraDeviceView:(IKCameraDeviceView *)p0 didEncounterError:(NSError *)p1;
	-(void) cameraDeviceViewSelectionDidChange:(IKCameraDeviceView *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation ImageKit_IKCameraDeviceView__IKCameraDeviceViewDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) cameraDeviceView:(IKCameraDeviceView *)p0 didDownloadFile:(ICCameraFile *)p1 location:(NSURL *)p2 fileData:(NSData *)p3 error:(NSError *)p4
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_52 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, 0x376D);
	}

	-(void) cameraDeviceView:(IKCameraDeviceView *)p0 didEncounterError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x376F);
	}

	-(void) cameraDeviceViewSelectionDidChange:(IKCameraDeviceView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3771);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3773);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface ImageKit_IKDeviceBrowserView__IKDeviceBrowserViewDelegate : NSObject<IKDeviceBrowserViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) deviceBrowserView:(IKDeviceBrowserView *)p0 didEncounterError:(NSError *)p1;
	-(void) deviceBrowserView:(IKDeviceBrowserView *)p0 selectionDidChange:(ICDevice *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation ImageKit_IKDeviceBrowserView__IKDeviceBrowserViewDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) deviceBrowserView:(IKDeviceBrowserView *)p0 didEncounterError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3779);
	}

	-(void) deviceBrowserView:(IKDeviceBrowserView *)p0 selectionDidChange:(ICDevice *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x377B);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x377D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface ImageKit_IKImageBrowserView__IKImageBrowserDelegate : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) imageBrowser:(IKImageBrowserView *)p0 backgroundWasRightClickedWithEvent:(NSEvent *)p1;
	-(void) imageBrowser:(IKImageBrowserView *)p0 cellWasDoubleClickedAtIndex:(void *)p1;
	-(void) imageBrowser:(IKImageBrowserView *)p0 cellWasRightClickedAtIndex:(void *)p1 withEvent:(NSEvent *)p2;
	-(void) imageBrowserSelectionDidChange:(IKImageBrowserView *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation ImageKit_IKImageBrowserView__IKImageBrowserDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) imageBrowser:(IKImageBrowserView *)p0 backgroundWasRightClickedWithEvent:(NSEvent *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3785);
	}

	-(void) imageBrowser:(IKImageBrowserView *)p0 cellWasDoubleClickedAtIndex:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_53 (self, _cmd, &managed_method, p0, p1, 0x3787);
	}

	-(void) imageBrowser:(IKImageBrowserView *)p0 cellWasRightClickedAtIndex:(void *)p1 withEvent:(NSEvent *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_54 (self, _cmd, &managed_method, p0, p1, p2, 0x3789);
	}

	-(void) imageBrowserSelectionDidChange:(IKImageBrowserView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x378B);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x378D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface ImageKit_IKSaveOptions__IKSaveOptionsDelegate : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) saveOptions:(IKSaveOptions *)p0 shouldShowUTType:(NSString *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation ImageKit_IKSaveOptions__IKSaveOptionsDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(BOOL) saveOptions:(IKSaveOptions *)p0 shouldShowUTType:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_55 (self, _cmd, &managed_method, p0, p1, 0x3793);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3795);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface ImageKit_IKScannerDeviceView__IKScannerDeviceViewDelegate : NSObject<IKScannerDeviceViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) scannerDeviceView:(IKScannerDeviceView *)p0 didEncounterError:(NSError *)p1;
	-(void) scannerDeviceView:(IKScannerDeviceView *)p0 didScanToURL:(NSURL *)p1 fileData:(NSData *)p2 error:(NSError *)p3;
	-(void) scannerDeviceView:(IKScannerDeviceView *)p0 didScanToBandData:(ICScannerBandData *)p1 scanInfo:(NSDictionary *)p2 error:(NSError *)p3;
	-(void) scannerDeviceView:(IKScannerDeviceView *)p0 didScanToURL:(NSURL *)p1 error:(NSError *)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation ImageKit_IKScannerDeviceView__IKScannerDeviceViewDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) scannerDeviceView:(IKScannerDeviceView *)p0 didEncounterError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x379B);
	}

	-(void) scannerDeviceView:(IKScannerDeviceView *)p0 didScanToURL:(NSURL *)p1 fileData:(NSData *)p2 error:(NSError *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_56 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x379D);
	}

	-(void) scannerDeviceView:(IKScannerDeviceView *)p0 didScanToBandData:(ICScannerBandData *)p1 scanInfo:(NSDictionary *)p2 error:(NSError *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_56 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x379F);
	}

	-(void) scannerDeviceView:(IKScannerDeviceView *)p0 didScanToURL:(NSURL *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x37A1);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x37A3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface ImageCaptureCore_ICCameraDevice_DidReadDataFromFileAction : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) didReadData:(NSData *)p0 fromFile:(ICCameraFile *)p1 error:(NSError *)p2 contextInfo:(void *)p3;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation ImageCaptureCore_ICCameraDevice_DidReadDataFromFileAction {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) didReadData:(NSData *)p0 fromFile:(ICCameraFile *)p1 error:(NSError *)p2 contextInfo:(void *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_58 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x37A9);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface ImageCaptureCore_ICCameraDevice_DidDownloadDataFromFileAction : NSObject<ICCameraDeviceDownloadDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) didDownloadFile:(ICCameraFile *)p0 error:(NSError *)p1 options:(NSDictionary <NSString *, NSObject *>*)p2 contextInfo:(void *)p3;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation ImageCaptureCore_ICCameraDevice_DidDownloadDataFromFileAction {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) didDownloadFile:(ICCameraFile *)p0 error:(NSError *)p1 options:(NSDictionary <NSString *, NSObject *>*)p2 contextInfo:(void *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_58 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x37AD);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface ImageCaptureCore_ICCameraDevice_DidSendPtpAction : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) didSendPTPCommand:(NSData *)p0 inData:(NSData *)p1 response:(NSData *)p2 error:(NSError *)p3 contextInfo:(void *)p4;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation ImageCaptureCore_ICCameraDevice_DidSendPtpAction {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) didSendPTPCommand:(NSData *)p0 inData:(NSData *)p1 response:(NSData *)p2 error:(NSError *)p3 contextInfo:(void *)p4
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_59 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, 0x37B1);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface GameKit_GKMatch__GKMatchDelegate : NSObject<GKMatchDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) match:(GKMatch *)p0 didReceiveData:(NSData *)p1 fromPlayer:(NSString *)p2;
	-(void) match:(GKMatch *)p0 didReceiveData:(NSData *)p1 forRecipient:(GKPlayer *)p2 fromRemotePlayer:(GKPlayer *)p3;
	-(void) match:(GKMatch *)p0 didReceiveData:(NSData *)p1 fromRemotePlayer:(GKPlayer *)p2;
	-(void) match:(GKMatch *)p0 didFailWithError:(NSError *)p1;
	-(BOOL) match:(GKMatch *)p0 shouldReinviteDisconnectedPlayer:(GKPlayer *)p1;
	-(BOOL) match:(GKMatch *)p0 shouldReinvitePlayer:(NSString *)p1;
	-(void) match:(GKMatch *)p0 player:(NSString *)p1 didChangeState:(NSInteger)p2;
	-(void) match:(GKMatch *)p0 player:(GKPlayer *)p1 didChangeConnectionState:(NSInteger)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation GameKit_GKMatch__GKMatchDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) match:(GKMatch *)p0 didReceiveData:(NSData *)p1 fromPlayer:(NSString *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_60 (self, _cmd, &managed_method, p0, p1, p2, 0x37C5);
	}

	-(void) match:(GKMatch *)p0 didReceiveData:(NSData *)p1 forRecipient:(GKPlayer *)p2 fromRemotePlayer:(GKPlayer *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_56 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x37C7);
	}

	-(void) match:(GKMatch *)p0 didReceiveData:(NSData *)p1 fromRemotePlayer:(GKPlayer *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x37C9);
	}

	-(void) match:(GKMatch *)p0 didFailWithError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x37CB);
	}

	-(BOOL) match:(GKMatch *)p0 shouldReinviteDisconnectedPlayer:(GKPlayer *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x37CD);
	}

	-(BOOL) match:(GKMatch *)p0 shouldReinvitePlayer:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_55 (self, _cmd, &managed_method, p0, p1, 0x37CF);
	}

	-(void) match:(GKMatch *)p0 player:(NSString *)p1 didChangeState:(NSInteger)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_62 (self, _cmd, &managed_method, p0, p1, p2, 0x37D1);
	}

	-(void) match:(GKMatch *)p0 player:(GKPlayer *)p1 didChangeConnectionState:(NSInteger)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_63 (self, _cmd, &managed_method, p0, p1, p2, 0x37D3);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x37D5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface GameKit_GKGameCenterViewController__GKGameCenterControllerDelegate : NSObject<GKGameCenterControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) gameCenterViewControllerDidFinish:(GKGameCenterViewController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation GameKit_GKGameCenterViewController__GKGameCenterControllerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) gameCenterViewControllerDidFinish:(GKGameCenterViewController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x37DF);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x37E1);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface GameKit_GKAchievementViewController__GKAchievementViewControllerDelegate : GameKit_GKGameCenterViewController__GKGameCenterControllerDelegate<GKAchievementViewControllerDelegate, GKGameCenterControllerDelegate> {
}
	-(void) achievementViewControllerDidFinish:(GKAchievementViewController *)p0;
	-(id) init;
@end

@implementation GameKit_GKAchievementViewController__GKAchievementViewControllerDelegate {
}

	-(void) achievementViewControllerDidFinish:(GKAchievementViewController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x37E5);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x37E7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [GameKit_GKGameCenterViewController__GKGameCenterControllerDelegate class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface GameKit_GKChallengeEventHandler__GKChallengeEventHandlerDelegate : NSObject<GKChallengeEventHandlerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) localPlayerDidCompleteChallenge:(GKChallenge *)p0;
	-(void) localPlayerDidReceiveChallenge:(GKChallenge *)p0;
	-(void) localPlayerDidSelectChallenge:(GKChallenge *)p0;
	-(void) remotePlayerDidCompleteChallenge:(GKChallenge *)p0;
	-(BOOL) shouldShowBannerForLocallyCompletedChallenge:(GKChallenge *)p0;
	-(BOOL) shouldShowBannerForLocallyReceivedChallenge:(GKChallenge *)p0;
	-(BOOL) shouldShowBannerForRemotelyCompletedChallenge:(GKChallenge *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation GameKit_GKChallengeEventHandler__GKChallengeEventHandlerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) localPlayerDidCompleteChallenge:(GKChallenge *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x37EF);
	}

	-(void) localPlayerDidReceiveChallenge:(GKChallenge *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x37F1);
	}

	-(void) localPlayerDidSelectChallenge:(GKChallenge *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x37F3);
	}

	-(void) remotePlayerDidCompleteChallenge:(GKChallenge *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x37F5);
	}

	-(BOOL) shouldShowBannerForLocallyCompletedChallenge:(GKChallenge *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x37F7);
	}

	-(BOOL) shouldShowBannerForLocallyReceivedChallenge:(GKChallenge *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x37F9);
	}

	-(BOOL) shouldShowBannerForRemotelyCompletedChallenge:(GKChallenge *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x37FB);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x37FD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface GameKit_GKFriendRequestComposeViewController__GKFriendRequestComposeViewControllerDelegate : NSObject<GKFriendRequestComposeViewControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) friendRequestComposeViewControllerDidFinish:(GKFriendRequestComposeViewController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation GameKit_GKFriendRequestComposeViewController__GKFriendRequestComposeViewControllerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) friendRequestComposeViewControllerDidFinish:(GKFriendRequestComposeViewController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3803);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3805);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface GameKit_GKLeaderboardViewController__GKLeaderboardViewControllerDelegate : GameKit_GKGameCenterViewController__GKGameCenterControllerDelegate<GKLeaderboardViewControllerDelegate, GKGameCenterControllerDelegate> {
}
	-(void) leaderboardViewControllerDidFinish:(GKLeaderboardViewController *)p0;
	-(id) init;
@end

@implementation GameKit_GKLeaderboardViewController__GKLeaderboardViewControllerDelegate {
}

	-(void) leaderboardViewControllerDidFinish:(GKLeaderboardViewController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3813);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3815);
		if (call_super && rv) {
			struct objc_super super = {  rv, [GameKit_GKGameCenterViewController__GKGameCenterControllerDelegate class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface GameKit_GKMatchmakerViewController__GKMatchmakerViewControllerDelegate : NSObject<GKMatchmakerViewControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 didFailWithError:(NSError *)p1;
	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 didFindHostedPlayers:(NSArray *)p1;
	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 didFindMatch:(GKMatch *)p1;
	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 didFindPlayers:(NSArray *)p1;
	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 hostedPlayerDidAccept:(GKPlayer *)p1;
	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 didReceiveAcceptFromHostedPlayer:(NSString *)p1;
	-(void) matchmakerViewControllerWasCancelled:(GKMatchmakerViewController *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation GameKit_GKMatchmakerViewController__GKMatchmakerViewControllerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 didFailWithError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3821);
	}

	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 didFindHostedPlayers:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_48 (self, _cmd, &managed_method, p0, p1, 0x3823);
	}

	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 didFindMatch:(GKMatch *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3825);
	}

	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 didFindPlayers:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_64 (self, _cmd, &managed_method, p0, p1, 0x3827);
	}

	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 hostedPlayerDidAccept:(GKPlayer *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3829);
	}

	-(void) matchmakerViewController:(GKMatchmakerViewController *)p0 didReceiveAcceptFromHostedPlayer:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_65 (self, _cmd, &managed_method, p0, p1, 0x382B);
	}

	-(void) matchmakerViewControllerWasCancelled:(GKMatchmakerViewController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x382D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x382F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface WebKit_DomNode_DomNodeEventProxy : NSObject<DOMEventListener> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) handleEvent:(DOMEvent *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation WebKit_DomNode_DomNodeEventProxy {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) handleEvent:(DOMEvent *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3849);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface WebKit_DomNode_DomNodeEventProxy2 : NSObject<DOMEventListener> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) handleEvent:(DOMEvent *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation WebKit_DomNode_DomNodeEventProxy2 {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) handleEvent:(DOMEvent *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x384D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface WebKit_WebView__WebFrameLoadDelegate : NSObject<WebFrameLoadDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) webView:(WebView *)p0 didCancelClientRedirectForFrame:(WebFrame *)p1;
	-(void) webView:(WebView *)p0 didChangeLocationWithinPageForFrame:(WebFrame *)p1;
	-(void) webView:(WebView *)p0 didClearWindowObject:(WebScriptObject *)p1 forFrame:(WebFrame *)p2;
	-(void) webView:(WebView *)p0 didCommitLoadForFrame:(WebFrame *)p1;
	-(void) webView:(WebView *)p0 didCreateJavaScriptContext:(JSContext *)p1 forFrame:(WebFrame *)p2;
	-(void) webView:(WebView *)p0 didFailLoadWithError:(NSError *)p1 forFrame:(WebFrame *)p2;
	-(void) webView:(WebView *)p0 didFailProvisionalLoadWithError:(NSError *)p1 forFrame:(WebFrame *)p2;
	-(void) webView:(WebView *)p0 didFinishLoadForFrame:(WebFrame *)p1;
	-(void) webView:(WebView *)p0 didReceiveIcon:(NSImage *)p1 forFrame:(WebFrame *)p2;
	-(void) webView:(WebView *)p0 didReceiveServerRedirectForProvisionalLoadForFrame:(WebFrame *)p1;
	-(void) webView:(WebView *)p0 didReceiveTitle:(NSString *)p1 forFrame:(WebFrame *)p2;
	-(void) webView:(WebView *)p0 didStartProvisionalLoadForFrame:(WebFrame *)p1;
	-(void) webView:(WebView *)p0 willCloseFrame:(WebFrame *)p1;
	-(void) webView:(WebView *)p0 willPerformClientRedirectToURL:(NSURL *)p1 delay:(double)p2 fireDate:(NSDate *)p3 forFrame:(WebFrame *)p4;
	-(void) webView:(WebView *)p0 windowScriptObjectAvailable:(WebScriptObject *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation WebKit_WebView__WebFrameLoadDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) webView:(WebView *)p0 didCancelClientRedirectForFrame:(WebFrame *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3851);
	}

	-(void) webView:(WebView *)p0 didChangeLocationWithinPageForFrame:(WebFrame *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3853);
	}

	-(void) webView:(WebView *)p0 didClearWindowObject:(WebScriptObject *)p1 forFrame:(WebFrame *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3855);
	}

	-(void) webView:(WebView *)p0 didCommitLoadForFrame:(WebFrame *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3857);
	}

	-(void) webView:(WebView *)p0 didCreateJavaScriptContext:(JSContext *)p1 forFrame:(WebFrame *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3859);
	}

	-(void) webView:(WebView *)p0 didFailLoadWithError:(NSError *)p1 forFrame:(WebFrame *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x385B);
	}

	-(void) webView:(WebView *)p0 didFailProvisionalLoadWithError:(NSError *)p1 forFrame:(WebFrame *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x385D);
	}

	-(void) webView:(WebView *)p0 didFinishLoadForFrame:(WebFrame *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x385F);
	}

	-(void) webView:(WebView *)p0 didReceiveIcon:(NSImage *)p1 forFrame:(WebFrame *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3861);
	}

	-(void) webView:(WebView *)p0 didReceiveServerRedirectForProvisionalLoadForFrame:(WebFrame *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3863);
	}

	-(void) webView:(WebView *)p0 didReceiveTitle:(NSString *)p1 forFrame:(WebFrame *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_66 (self, _cmd, &managed_method, p0, p1, p2, 0x3865);
	}

	-(void) webView:(WebView *)p0 didStartProvisionalLoadForFrame:(WebFrame *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3867);
	}

	-(void) webView:(WebView *)p0 willCloseFrame:(WebFrame *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3869);
	}

	-(void) webView:(WebView *)p0 willPerformClientRedirectToURL:(NSURL *)p1 delay:(double)p2 fireDate:(NSDate *)p3 forFrame:(WebFrame *)p4
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_67 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, 0x386B);
	}

	-(void) webView:(WebView *)p0 windowScriptObjectAvailable:(WebScriptObject *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x386D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x386F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface WebKit_WebView__WebDownloadDelegate : NSObject<WebDownloadDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSWindow *) downloadWindowForAuthenticationSheet:(WebDownload *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation WebKit_WebView__WebDownloadDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(NSWindow *) downloadWindowForAuthenticationSheet:(WebDownload *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_68 (self, _cmd, &managed_method, p0, 0x3873);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3875);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface WebKit_WebView__WebResourceLoadDelegate : NSObject<WebResourceLoadDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)p2 fromDataSource:(WebDataSource *)p3;
	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didFailLoadingWithError:(NSError *)p2 fromDataSource:(WebDataSource *)p3;
	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didFinishLoadingFromDataSource:(WebDataSource *)p2;
	-(NSObject *) webView:(WebView *)p0 identifierForInitialRequest:(NSURLRequest *)p1 fromDataSource:(WebDataSource *)p2;
	-(void) webView:(WebView *)p0 plugInFailedWithError:(NSError *)p1 dataSource:(WebDataSource *)p2;
	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)p2 fromDataSource:(WebDataSource *)p3;
	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didReceiveContentLength:(void *)p2 fromDataSource:(WebDataSource *)p3;
	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didReceiveResponse:(NSURLResponse *)p2 fromDataSource:(WebDataSource *)p3;
	-(NSURLRequest *) webView:(WebView *)p0 resource:(NSObject *)p1 willSendRequest:(NSURLRequest *)p2 redirectResponse:(NSURLResponse *)p3 fromDataSource:(WebDataSource *)p4;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation WebKit_WebView__WebResourceLoadDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)p2 fromDataSource:(WebDataSource *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_56 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3879);
	}

	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didFailLoadingWithError:(NSError *)p2 fromDataSource:(WebDataSource *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_56 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x387B);
	}

	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didFinishLoadingFromDataSource:(WebDataSource *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x387D);
	}

	-(NSObject *) webView:(WebView *)p0 identifierForInitialRequest:(NSURLRequest *)p1 fromDataSource:(WebDataSource *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_69 (self, _cmd, &managed_method, p0, p1, p2, 0x387F);
	}

	-(void) webView:(WebView *)p0 plugInFailedWithError:(NSError *)p1 dataSource:(WebDataSource *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3881);
	}

	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)p2 fromDataSource:(WebDataSource *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_56 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3883);
	}

	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didReceiveContentLength:(void *)p2 fromDataSource:(WebDataSource *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_70 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3885);
	}

	-(void) webView:(WebView *)p0 resource:(NSObject *)p1 didReceiveResponse:(NSURLResponse *)p2 fromDataSource:(WebDataSource *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_56 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3887);
	}

	-(NSURLRequest *) webView:(WebView *)p0 resource:(NSObject *)p1 willSendRequest:(NSURLRequest *)p2 redirectResponse:(NSURLResponse *)p3 fromDataSource:(WebDataSource *)p4
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_71 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, 0x3889);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x388B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface WebKit_WebView__WebUIDelegate : NSObject<WebUIDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) webViewAreToolbarsVisible:(WebView *)p0;
	-(void) webViewClose:(WebView *)p0;
	-(WebView *) webView:(WebView *)p0 createWebViewModalDialogWithRequest:(NSURLRequest *)p1;
	-(WebView *) webView:(WebView *)p0 createWebViewWithRequest:(NSURLRequest *)p1;
	-(unsigned long long) webView:(WebView *)p0 dragSourceActionMaskForPoint:(CGPoint)p1;
	-(void) webView:(WebView *)p0 drawFooterInRect:(CGRect)p1;
	-(void) webView:(WebView *)p0 drawHeaderInRect:(CGRect)p1;
	-(void) webViewFocus:(WebView *)p0;
	-(CGRect) webViewContentRect:(WebView *)p0;
	-(NSArray *) webView:(WebView *)p0 contextMenuItemsForElement:(NSDictionary *)p1 defaultMenuItems:(NSArray *)p2;
	-(unsigned long long) webView:(WebView *)p0 dragDestinationActionMaskForDraggingInfo:(id)p1;
	-(NSResponder *) webViewFirstResponder:(WebView *)p0;
	-(float) webViewFooterHeight:(WebView *)p0;
	-(CGRect) webViewFrame:(WebView *)p0;
	-(float) webViewHeaderHeight:(WebView *)p0;
	-(NSString *) webViewStatusText:(WebView *)p0;
	-(BOOL) webViewIsResizable:(WebView *)p0;
	-(BOOL) webViewIsStatusBarVisible:(WebView *)p0;
	-(void) webView:(WebView *)p0 makeFirstResponder:(NSResponder *)p1;
	-(void) webView:(WebView *)p0 mouseDidMoveOverElement:(NSDictionary *)p1 modifierFlags:(NSUInteger)p2;
	-(void) webView:(WebView *)p0 printFrameView:(WebFrameView *)p1;
	-(BOOL) webView:(WebView *)p0 runBeforeUnloadConfirmPanelWithMessage:(NSString *)p1 initiatedByFrame:(WebFrame *)p2;
	-(void) webView:(WebView *)p0 runJavaScriptAlertPanelWithMessage:(NSString *)p1;
	-(void) webView:(WebView *)p0 runJavaScriptAlertPanelWithMessage:(NSString *)p1 initiatedByFrame:(WebFrame *)p2;
	-(BOOL) webView:(WebView *)p0 runJavaScriptConfirmPanelWithMessage:(NSString *)p1;
	-(BOOL) webView:(WebView *)p0 runJavaScriptConfirmPanelWithMessage:(NSString *)p1 initiatedByFrame:(WebFrame *)p2;
	-(NSString *) webView:(WebView *)p0 runJavaScriptTextInputPanelWithPrompt:(NSString *)p1 defaultText:(NSString *)p2;
	-(NSString *) webView:(WebView *)p0 runJavaScriptTextInputPanelWithPrompt:(NSString *)p1 defaultText:(NSString *)p2 initiatedByFrame:(WebFrame *)p3;
	-(void) webViewRunModal:(WebView *)p0;
	-(void) webView:(WebView *)p0 runOpenPanelForFileButtonWithResultListener:(id)p1;
	-(void) webView:(WebView *)p0 setContentRect:(CGRect)p1;
	-(void) webView:(WebView *)p0 setFrame:(CGRect)p1;
	-(void) webView:(WebView *)p0 setResizable:(BOOL)p1;
	-(void) webView:(WebView *)p0 setStatusBarVisible:(BOOL)p1;
	-(void) webView:(WebView *)p0 setStatusText:(NSString *)p1;
	-(void) webView:(WebView *)p0 setToolbarsVisible:(BOOL)p1;
	-(BOOL) webView:(WebView *)p0 shouldPerformAction:(SEL)p1 fromSender:(NSObject *)p2;
	-(void) webViewShow:(WebView *)p0;
	-(void) webViewUnfocus:(WebView *)p0;
	-(BOOL) webView:(WebView *)p0 validateUserInterfaceItem:(NSObject *)p1 defaultValidation:(BOOL)p2;
	-(void) webView:(WebView *)p0 willPerformDragDestinationAction:(unsigned long long)p1 forDraggingInfo:(id)p2;
	-(void) webView:(WebView *)p0 willPerformDragSourceAction:(unsigned long long)p1 fromPoint:(CGPoint)p2 withPasteboard:(NSPasteboard *)p3;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation WebKit_WebView__WebUIDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(BOOL) webViewAreToolbarsVisible:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x388F);
	}

	-(void) webViewClose:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3891);
	}

	-(WebView *) webView:(WebView *)p0 createWebViewModalDialogWithRequest:(NSURLRequest *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_72 (self, _cmd, &managed_method, p0, p1, 0x3893);
	}

	-(WebView *) webView:(WebView *)p0 createWebViewWithRequest:(NSURLRequest *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_72 (self, _cmd, &managed_method, p0, p1, 0x3895);
	}

	-(unsigned long long) webView:(WebView *)p0 dragSourceActionMaskForPoint:(CGPoint)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_73 (self, _cmd, &managed_method, p0, p1, 0x3897);
	}

	-(void) webView:(WebView *)p0 drawFooterInRect:(CGRect)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_74 (self, _cmd, &managed_method, p0, p1, 0x3899);
	}

	-(void) webView:(WebView *)p0 drawHeaderInRect:(CGRect)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_74 (self, _cmd, &managed_method, p0, p1, 0x389B);
	}

	-(void) webViewFocus:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x389D);
	}

	-(CGRect) webViewContentRect:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_75 (self, _cmd, &managed_method, p0, 0x389F);
	}

	-(NSArray *) webView:(WebView *)p0 contextMenuItemsForElement:(NSDictionary *)p1 defaultMenuItems:(NSArray *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_76 (self, _cmd, &managed_method, p0, p1, p2, 0x38A1);
	}

	-(unsigned long long) webView:(WebView *)p0 dragDestinationActionMaskForDraggingInfo:(id)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_77 (self, _cmd, &managed_method, p0, p1, 0x38A3);
	}

	-(NSResponder *) webViewFirstResponder:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_68 (self, _cmd, &managed_method, p0, 0x38A5);
	}

	-(float) webViewFooterHeight:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_78 (self, _cmd, &managed_method, p0, 0x38A7);
	}

	-(CGRect) webViewFrame:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_75 (self, _cmd, &managed_method, p0, 0x38A9);
	}

	-(float) webViewHeaderHeight:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_78 (self, _cmd, &managed_method, p0, 0x38AB);
	}

	-(NSString *) webViewStatusText:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_38 (self, _cmd, &managed_method, p0, 0x38AD);
	}

	-(BOOL) webViewIsResizable:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x38AF);
	}

	-(BOOL) webViewIsStatusBarVisible:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x38B1);
	}

	-(void) webView:(WebView *)p0 makeFirstResponder:(NSResponder *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x38B3);
	}

	-(void) webView:(WebView *)p0 mouseDidMoveOverElement:(NSDictionary *)p1 modifierFlags:(NSUInteger)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_79 (self, _cmd, &managed_method, p0, p1, p2, 0x38B5);
	}

	-(void) webView:(WebView *)p0 printFrameView:(WebFrameView *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x38B7);
	}

	-(BOOL) webView:(WebView *)p0 runBeforeUnloadConfirmPanelWithMessage:(NSString *)p1 initiatedByFrame:(WebFrame *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_80 (self, _cmd, &managed_method, p0, p1, p2, 0x38B9);
	}

	-(void) webView:(WebView *)p0 runJavaScriptAlertPanelWithMessage:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_65 (self, _cmd, &managed_method, p0, p1, 0x38BB);
	}

	-(void) webView:(WebView *)p0 runJavaScriptAlertPanelWithMessage:(NSString *)p1 initiatedByFrame:(WebFrame *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_66 (self, _cmd, &managed_method, p0, p1, p2, 0x38BD);
	}

	-(BOOL) webView:(WebView *)p0 runJavaScriptConfirmPanelWithMessage:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_55 (self, _cmd, &managed_method, p0, p1, 0x38BF);
	}

	-(BOOL) webView:(WebView *)p0 runJavaScriptConfirmPanelWithMessage:(NSString *)p1 initiatedByFrame:(WebFrame *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_80 (self, _cmd, &managed_method, p0, p1, p2, 0x38C1);
	}

	-(NSString *) webView:(WebView *)p0 runJavaScriptTextInputPanelWithPrompt:(NSString *)p1 defaultText:(NSString *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_81 (self, _cmd, &managed_method, p0, p1, p2, 0x38C3);
	}

	-(NSString *) webView:(WebView *)p0 runJavaScriptTextInputPanelWithPrompt:(NSString *)p1 defaultText:(NSString *)p2 initiatedByFrame:(WebFrame *)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_82 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x38C5);
	}

	-(void) webViewRunModal:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x38C7);
	}

	-(void) webView:(WebView *)p0 runOpenPanelForFileButtonWithResultListener:(id)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_83 (self, _cmd, &managed_method, p0, p1, 0x38C9);
	}

	-(void) webView:(WebView *)p0 setContentRect:(CGRect)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_74 (self, _cmd, &managed_method, p0, p1, 0x38CB);
	}

	-(void) webView:(WebView *)p0 setFrame:(CGRect)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_74 (self, _cmd, &managed_method, p0, p1, 0x38CD);
	}

	-(void) webView:(WebView *)p0 setResizable:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_28 (self, _cmd, &managed_method, p0, p1, 0x38CF);
	}

	-(void) webView:(WebView *)p0 setStatusBarVisible:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_28 (self, _cmd, &managed_method, p0, p1, 0x38D1);
	}

	-(void) webView:(WebView *)p0 setStatusText:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_65 (self, _cmd, &managed_method, p0, p1, 0x38D3);
	}

	-(void) webView:(WebView *)p0 setToolbarsVisible:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_28 (self, _cmd, &managed_method, p0, p1, 0x38D5);
	}

	-(BOOL) webView:(WebView *)p0 shouldPerformAction:(SEL)p1 fromSender:(NSObject *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_84 (self, _cmd, &managed_method, p0, p1, p2, 0x38D7);
	}

	-(void) webViewShow:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x38D9);
	}

	-(void) webViewUnfocus:(WebView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x38DB);
	}

	-(BOOL) webView:(WebView *)p0 validateUserInterfaceItem:(NSObject *)p1 defaultValidation:(BOOL)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_85 (self, _cmd, &managed_method, p0, p1, p2, 0x38DD);
	}

	-(void) webView:(WebView *)p0 willPerformDragDestinationAction:(unsigned long long)p1 forDraggingInfo:(id)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_86 (self, _cmd, &managed_method, p0, p1, p2, 0x38DF);
	}

	-(void) webView:(WebView *)p0 willPerformDragSourceAction:(unsigned long long)p1 fromPoint:(CGPoint)p2 withPasteboard:(NSPasteboard *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_87 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x38E1);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x38E3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface WebKit_WebView__WebPolicyDelegate : NSObject<WebPolicyDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) webView:(WebView *)p0 decidePolicyForMIMEType:(NSString *)p1 request:(NSURLRequest *)p2 frame:(WebFrame *)p3 decisionListener:(NSObject *)p4;
	-(void) webView:(WebView *)p0 decidePolicyForNavigationAction:(NSDictionary *)p1 request:(NSURLRequest *)p2 frame:(WebFrame *)p3 decisionListener:(NSObject *)p4;
	-(void) webView:(WebView *)p0 decidePolicyForNewWindowAction:(NSDictionary *)p1 request:(NSURLRequest *)p2 newFrameName:(NSString *)p3 decisionListener:(NSObject *)p4;
	-(void) webView:(WebView *)p0 unableToImplementPolicyWithError:(NSError *)p1 frame:(WebFrame *)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation WebKit_WebView__WebPolicyDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) webView:(WebView *)p0 decidePolicyForMIMEType:(NSString *)p1 request:(NSURLRequest *)p2 frame:(WebFrame *)p3 decisionListener:(NSObject *)p4
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_88 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, 0x38E7);
	}

	-(void) webView:(WebView *)p0 decidePolicyForNavigationAction:(NSDictionary *)p1 request:(NSURLRequest *)p2 frame:(WebFrame *)p3 decisionListener:(NSObject *)p4
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_52 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, 0x38E9);
	}

	-(void) webView:(WebView *)p0 decidePolicyForNewWindowAction:(NSDictionary *)p1 request:(NSURLRequest *)p2 newFrameName:(NSString *)p3 decisionListener:(NSObject *)p4
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_89 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, 0x38EB);
	}

	-(void) webView:(WebView *)p0 unableToImplementPolicyWithError:(NSError *)p1 frame:(WebFrame *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x38ED);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x38EF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Foundation_NSKeyedArchiver__NSKeyedArchiverDelegate : NSObject<NSKeyedArchiverDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) archiver:(NSKeyedArchiver *)p0 didEncodeObject:(NSObject *)p1;
	-(void) archiverDidFinish:(NSKeyedArchiver *)p0;
	-(void) archiverWillFinish:(NSKeyedArchiver *)p0;
	-(void) archiver:(NSKeyedArchiver *)p0 willReplaceObject:(NSObject *)p1 withObject:(NSObject *)p2;
	-(NSObject *) archiver:(NSKeyedArchiver *)p0 willEncodeObject:(NSObject *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Foundation_NSKeyedArchiver__NSKeyedArchiverDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) archiver:(NSKeyedArchiver *)p0 didEncodeObject:(NSObject *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x390B);
	}

	-(void) archiverDidFinish:(NSKeyedArchiver *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x390D);
	}

	-(void) archiverWillFinish:(NSKeyedArchiver *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x390F);
	}

	-(void) archiver:(NSKeyedArchiver *)p0 willReplaceObject:(NSObject *)p1 withObject:(NSObject *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3911);
	}

	-(NSObject *) archiver:(NSKeyedArchiver *)p0 willEncodeObject:(NSObject *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_72 (self, _cmd, &managed_method, p0, p1, 0x3913);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3915);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Foundation_NSKeyedUnarchiver__NSKeyedUnarchiverDelegate : NSObject<NSKeyedUnarchiverDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(Class) unarchiver:(NSKeyedUnarchiver *)p0 cannotDecodeObjectOfClassName:(NSString *)p1 originalClasses:(NSArray *)p2;
	-(NSObject *) unarchiver:(NSKeyedUnarchiver *)p0 didDecodeObject:(NSObject *)p1;
	-(void) unarchiverDidFinish:(NSKeyedUnarchiver *)p0;
	-(void) unarchiverWillFinish:(NSKeyedUnarchiver *)p0;
	-(void) unarchiver:(NSKeyedUnarchiver *)p0 willReplaceObject:(NSObject *)p1 withObject:(NSObject *)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Foundation_NSKeyedUnarchiver__NSKeyedUnarchiverDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(Class) unarchiver:(NSKeyedUnarchiver *)p0 cannotDecodeObjectOfClassName:(NSString *)p1 originalClasses:(NSArray *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_90 (self, _cmd, &managed_method, p0, p1, p2, 0x391B);
	}

	-(NSObject *) unarchiver:(NSKeyedUnarchiver *)p0 didDecodeObject:(NSObject *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_72 (self, _cmd, &managed_method, p0, p1, 0x391D);
	}

	-(void) unarchiverDidFinish:(NSKeyedUnarchiver *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x391F);
	}

	-(void) unarchiverWillFinish:(NSKeyedUnarchiver *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3921);
	}

	-(void) unarchiver:(NSKeyedUnarchiver *)p0 willReplaceObject:(NSObject *)p1 withObject:(NSObject *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3923);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3925);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Foundation_NSNetService__NSNetServiceDelegate : NSObject<NSNetServiceDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) netServiceDidResolveAddress:(NSNetService *)p0;
	-(void) netService:(NSNetService *)p0 didAcceptConnectionWithInputStream:(NSInputStream *)p1 outputStream:(NSOutputStream *)p2;
	-(void) netService:(NSNetService *)p0 didNotPublish:(NSDictionary *)p1;
	-(void) netServiceDidPublish:(NSNetService *)p0;
	-(void) netService:(NSNetService *)p0 didNotResolve:(NSDictionary *)p1;
	-(void) netServiceDidStop:(NSNetService *)p0;
	-(void) netService:(NSNetService *)p0 didUpdateTXTRecordData:(NSData *)p1;
	-(void) netServiceWillPublish:(NSNetService *)p0;
	-(void) netServiceWillResolve:(NSNetService *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Foundation_NSNetService__NSNetServiceDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) netServiceDidResolveAddress:(NSNetService *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x392D);
	}

	-(void) netService:(NSNetService *)p0 didAcceptConnectionWithInputStream:(NSInputStream *)p1 outputStream:(NSOutputStream *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x392F);
	}

	-(void) netService:(NSNetService *)p0 didNotPublish:(NSDictionary *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3931);
	}

	-(void) netServiceDidPublish:(NSNetService *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3933);
	}

	-(void) netService:(NSNetService *)p0 didNotResolve:(NSDictionary *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3935);
	}

	-(void) netServiceDidStop:(NSNetService *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3937);
	}

	-(void) netService:(NSNetService *)p0 didUpdateTXTRecordData:(NSData *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3939);
	}

	-(void) netServiceWillPublish:(NSNetService *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x393B);
	}

	-(void) netServiceWillResolve:(NSNetService *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x393D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x393F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __NSObject_Disposer : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	+(void) drain:(NSObject *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation __NSObject_Disposer {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	+(void) drain:(NSObject *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_91 (self, _cmd, &managed_method, p0, 0x3945);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3947);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __XamarinObjectObserver : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) observeValueForKeyPath:(NSString *)p0 ofObject:(NSObject *)p1 change:(NSDictionary *)p2 context:(void *)p3;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation __XamarinObjectObserver {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) observeValueForKeyPath:(NSString *)p0 ofObject:(NSObject *)p1 change:(NSDictionary *)p2 context:(void *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_58 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x394B);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Foundation_NSStream__NSStreamDelegate : NSObject<NSStreamDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) stream:(NSStream *)p0 handleEvent:(NSUInteger)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Foundation_NSStream__NSStreamDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) stream:(NSStream *)p0 handleEvent:(NSUInteger)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_92 (self, _cmd, &managed_method, p0, p1, 0x3951);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3953);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Foundation_NSThread_ActionThread : NSThread {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) main;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Foundation_NSThread_ActionThread {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) main
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_3 (self, _cmd, &managed_method, 0x3959);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Foundation_NSUrlSessionHandler_WrappedNSInputStream : NSInputStream {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSUInteger) streamStatus;
	-(void) open;
	-(void) close;
	-(void *) read:(void *)p0 maxLength:(void *)p1;
	-(BOOL) hasBytesAvailable;
	-(BOOL) getBuffer:(void **)p0 length:(void **)p1;
	-(NSObject *) propertyForKey:(NSString *)p0;
	-(BOOL) setProperty:(NSObject *)p0 forKey:(NSString *)p1;
	-(BOOL) _setCFClientFlags:(NSUInteger)p0 callback:(void *)p1 context:(void *)p2;
	-(void) scheduleInRunLoop:(NSRunLoop *)p0 forMode:(NSString *)p1;
	-(void) removeFromRunLoop:(NSRunLoop *)p0 forMode:(NSString *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Foundation_NSUrlSessionHandler_WrappedNSInputStream {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(NSUInteger) streamStatus
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_93 (self, _cmd, &managed_method, 0x3969);
	}

	-(void) open
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_3 (self, _cmd, &managed_method, 0x396B);
	}

	-(void) close
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_3 (self, _cmd, &managed_method, 0x396D);
	}

	-(void *) read:(void *)p0 maxLength:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_94 (self, _cmd, &managed_method, p0, p1, 0x396F);
	}

	-(BOOL) hasBytesAvailable
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_17 (self, _cmd, &managed_method, 0x3971);
	}

	-(BOOL) getBuffer:(void **)p0 length:(void **)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_95 (self, _cmd, &managed_method, p0, p1, 0x3973);
	}

	-(NSObject *) propertyForKey:(NSString *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_68 (self, _cmd, &managed_method, p0, 0x3975);
	}

	-(BOOL) setProperty:(NSObject *)p0 forKey:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3977);
	}

	-(BOOL) _setCFClientFlags:(NSUInteger)p0 callback:(void *)p1 context:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_96 (self, _cmd, &managed_method, p0, p1, p2, 0x3979);
	}

	-(void) scheduleInRunLoop:(NSRunLoop *)p0 forMode:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x397B);
	}

	-(void) removeFromRunLoop:(NSRunLoop *)p0 forMode:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x397D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface Foundation_NSCache__NSCacheDelegate : NSObject<NSCacheDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) cache:(NSCache *)p0 willEvictObject:(NSObject *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Foundation_NSCache__NSCacheDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) cache:(NSCache *)p0 willEvictObject:(NSObject *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3981);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3983);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Foundation_NSMetadataQuery__NSMetadataQueryDelegate : NSObject<NSMetadataQueryDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSObject *) metadataQuery:(NSMetadataQuery *)p0 replacementObjectForResultObject:(NSMetadataItem *)p1;
	-(NSObject *) metadataQuery:(NSMetadataQuery *)p0 replacementValueForAttribute:(NSString *)p1 value:(NSObject *)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Foundation_NSMetadataQuery__NSMetadataQueryDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(NSObject *) metadataQuery:(NSMetadataQuery *)p0 replacementObjectForResultObject:(NSMetadataItem *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_72 (self, _cmd, &managed_method, p0, p1, 0x398F);
	}

	-(NSObject *) metadataQuery:(NSMetadataQuery *)p0 replacementValueForAttribute:(NSString *)p1 value:(NSObject *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_97 (self, _cmd, &managed_method, p0, p1, p2, 0x3991);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3993);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Foundation_NSNetServiceBrowser__NSNetServiceBrowserDelegate : NSObject<NSNetServiceBrowserDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) netServiceBrowser:(NSNetServiceBrowser *)p0 didRemoveDomain:(NSString *)p1 moreComing:(BOOL)p2;
	-(void) netServiceBrowser:(NSNetServiceBrowser *)p0 didFindDomain:(NSString *)p1 moreComing:(BOOL)p2;
	-(void) netServiceBrowser:(NSNetServiceBrowser *)p0 didFindService:(NSNetService *)p1 moreComing:(BOOL)p2;
	-(void) netServiceBrowser:(NSNetServiceBrowser *)p0 didNotSearch:(NSDictionary *)p1;
	-(void) netServiceBrowserWillSearch:(NSNetServiceBrowser *)p0;
	-(void) netServiceBrowserDidStopSearch:(NSNetServiceBrowser *)p0;
	-(void) netServiceBrowser:(NSNetServiceBrowser *)p0 didRemoveService:(NSNetService *)p1 moreComing:(BOOL)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Foundation_NSNetServiceBrowser__NSNetServiceBrowserDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) netServiceBrowser:(NSNetServiceBrowser *)p0 didRemoveDomain:(NSString *)p1 moreComing:(BOOL)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_98 (self, _cmd, &managed_method, p0, p1, p2, 0x3999);
	}

	-(void) netServiceBrowser:(NSNetServiceBrowser *)p0 didFindDomain:(NSString *)p1 moreComing:(BOOL)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_98 (self, _cmd, &managed_method, p0, p1, p2, 0x399B);
	}

	-(void) netServiceBrowser:(NSNetServiceBrowser *)p0 didFindService:(NSNetService *)p1 moreComing:(BOOL)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_99 (self, _cmd, &managed_method, p0, p1, p2, 0x399D);
	}

	-(void) netServiceBrowser:(NSNetServiceBrowser *)p0 didNotSearch:(NSDictionary *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x399F);
	}

	-(void) netServiceBrowserWillSearch:(NSNetServiceBrowser *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x39A1);
	}

	-(void) netServiceBrowserDidStopSearch:(NSNetServiceBrowser *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x39A3);
	}

	-(void) netServiceBrowser:(NSNetServiceBrowser *)p0 didRemoveService:(NSNetService *)p1 moreComing:(BOOL)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_99 (self, _cmd, &managed_method, p0, p1, p2, 0x39A5);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x39A7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Foundation_NSUserNotificationCenter__NSUserNotificationCenterDelegate : NSObject<NSUserNotificationCenterDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) userNotificationCenter:(NSUserNotificationCenter *)p0 didActivateNotification:(NSUserNotification *)p1;
	-(void) userNotificationCenter:(NSUserNotificationCenter *)p0 didDeliverNotification:(NSUserNotification *)p1;
	-(BOOL) userNotificationCenter:(NSUserNotificationCenter *)p0 shouldPresentNotification:(NSUserNotification *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation Foundation_NSUserNotificationCenter__NSUserNotificationCenterDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) userNotificationCenter:(NSUserNotificationCenter *)p0 didActivateNotification:(NSUserNotification *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x39BD);
	}

	-(void) userNotificationCenter:(NSUserNotificationCenter *)p0 didDeliverNotification:(NSUserNotification *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x39BF);
	}

	-(BOOL) userNotificationCenter:(NSUserNotificationCenter *)p0 shouldPresentNotification:(NSUserNotification *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x39C1);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x39C3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface CoreLocation_CLLocationManager__CLLocationManagerDelegate : NSObject<CLLocationManagerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) locationManager:(CLLocationManager *)p0 didChangeAuthorizationStatus:(unsigned int)p1;
	-(void) locationManager:(CLLocationManager *)p0 didFinishDeferredUpdatesWithError:(NSError *)p1;
	-(void) locationManagerDidChangeAuthorization:(CLLocationManager *)p0;
	-(void) locationManager:(CLLocationManager *)p0 didDetermineState:(NSInteger)p1 forRegion:(CLRegion *)p2;
	-(void) locationManager:(CLLocationManager *)p0 didFailRangingBeaconsForConstraint:(CLBeaconIdentityConstraint *)p1 error:(NSError *)p2;
	-(void) locationManager:(CLLocationManager *)p0 didRangeBeacons:(NSArray *)p1 satisfyingConstraint:(CLBeaconIdentityConstraint *)p2;
	-(void) locationManager:(CLLocationManager *)p0 didStartMonitoringForRegion:(CLRegion *)p1;
	-(void) locationManager:(CLLocationManager *)p0 didVisit:(CLVisit *)p1;
	-(void) locationManager:(CLLocationManager *)p0 didFailWithError:(NSError *)p1;
	-(void) locationManagerDidPauseLocationUpdates:(CLLocationManager *)p0;
	-(void) locationManagerDidResumeLocationUpdates:(CLLocationManager *)p0;
	-(void) locationManager:(CLLocationManager *)p0 didUpdateLocations:(NSArray *)p1;
	-(void) locationManager:(CLLocationManager *)p0 monitoringDidFailForRegion:(CLRegion *)p1 withError:(NSError *)p2;
	-(void) locationManager:(CLLocationManager *)p0 didEnterRegion:(CLRegion *)p1;
	-(void) locationManager:(CLLocationManager *)p0 didExitRegion:(CLRegion *)p1;
	-(BOOL) locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)p0;
	-(void) locationManager:(CLLocationManager *)p0 didUpdateHeading:(CLHeading *)p1;
	-(void) locationManager:(CLLocationManager *)p0 didUpdateToLocation:(CLLocation *)p1 fromLocation:(CLLocation *)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation CoreLocation_CLLocationManager__CLLocationManagerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) locationManager:(CLLocationManager *)p0 didChangeAuthorizationStatus:(unsigned int)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_100 (self, _cmd, &managed_method, p0, p1, 0x39E3);
	}

	-(void) locationManager:(CLLocationManager *)p0 didFinishDeferredUpdatesWithError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x39E5);
	}

	-(void) locationManagerDidChangeAuthorization:(CLLocationManager *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x39E7);
	}

	-(void) locationManager:(CLLocationManager *)p0 didDetermineState:(NSInteger)p1 forRegion:(CLRegion *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_101 (self, _cmd, &managed_method, p0, p1, p2, 0x39E9);
	}

	-(void) locationManager:(CLLocationManager *)p0 didFailRangingBeaconsForConstraint:(CLBeaconIdentityConstraint *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x39EB);
	}

	-(void) locationManager:(CLLocationManager *)p0 didRangeBeacons:(NSArray *)p1 satisfyingConstraint:(CLBeaconIdentityConstraint *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_102 (self, _cmd, &managed_method, p0, p1, p2, 0x39ED);
	}

	-(void) locationManager:(CLLocationManager *)p0 didStartMonitoringForRegion:(CLRegion *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x39EF);
	}

	-(void) locationManager:(CLLocationManager *)p0 didVisit:(CLVisit *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x39F1);
	}

	-(void) locationManager:(CLLocationManager *)p0 didFailWithError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x39F3);
	}

	-(void) locationManagerDidPauseLocationUpdates:(CLLocationManager *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x39F5);
	}

	-(void) locationManagerDidResumeLocationUpdates:(CLLocationManager *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x39F7);
	}

	-(void) locationManager:(CLLocationManager *)p0 didUpdateLocations:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_48 (self, _cmd, &managed_method, p0, p1, 0x39F9);
	}

	-(void) locationManager:(CLLocationManager *)p0 monitoringDidFailForRegion:(CLRegion *)p1 withError:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x39FB);
	}

	-(void) locationManager:(CLLocationManager *)p0 didEnterRegion:(CLRegion *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x39FD);
	}

	-(void) locationManager:(CLLocationManager *)p0 didExitRegion:(CLRegion *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x39FF);
	}

	-(BOOL) locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3A01);
	}

	-(void) locationManager:(CLLocationManager *)p0 didUpdateHeading:(CLHeading *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3A03);
	}

	-(void) locationManager:(CLLocationManager *)p0 didUpdateToLocation:(CLLocation *)p1 fromLocation:(CLLocation *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A05);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3A07);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface CoreBluetooth_CBCentralManager__CBCentralManagerDelegate : NSObject<CBCentralManagerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) centralManager:(CBCentralManager *)p0 didConnectPeripheral:(CBPeripheral *)p1;
	-(void) centralManager:(CBCentralManager *)p0 didDisconnectPeripheral:(CBPeripheral *)p1 error:(NSError *)p2;
	-(void) centralManager:(CBCentralManager *)p0 didDiscoverPeripheral:(CBPeripheral *)p1 advertisementData:(NSDictionary *)p2 RSSI:(NSNumber *)p3;
	-(void) centralManager:(CBCentralManager *)p0 didFailToConnectPeripheral:(CBPeripheral *)p1 error:(NSError *)p2;
	-(void) centralManagerDidUpdateState:(CBCentralManager *)p0;
	-(void) centralManager:(CBCentralManager *)p0 willRestoreState:(NSDictionary *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation CoreBluetooth_CBCentralManager__CBCentralManagerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) centralManager:(CBCentralManager *)p0 didConnectPeripheral:(CBPeripheral *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3A1B);
	}

	-(void) centralManager:(CBCentralManager *)p0 didDisconnectPeripheral:(CBPeripheral *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A1D);
	}

	-(void) centralManager:(CBCentralManager *)p0 didDiscoverPeripheral:(CBPeripheral *)p1 advertisementData:(NSDictionary *)p2 RSSI:(NSNumber *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_56 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3A1F);
	}

	-(void) centralManager:(CBCentralManager *)p0 didFailToConnectPeripheral:(CBPeripheral *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A21);
	}

	-(void) centralManagerDidUpdateState:(CBCentralManager *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3A23);
	}

	-(void) centralManager:(CBCentralManager *)p0 willRestoreState:(NSDictionary *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3A25);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3A27);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface CoreBluetooth_CBPeripheral__CBPeripheralDelegate : NSObject<CBPeripheralDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) peripheral:(CBPeripheral *)p0 didOpenL2CAPChannel:(CBL2CAPChannel *)p1 error:(NSError *)p2;
	-(void) peripheral:(CBPeripheral *)p0 didDiscoverCharacteristicsForService:(CBService *)p1 error:(NSError *)p2;
	-(void) peripheral:(CBPeripheral *)p0 didDiscoverDescriptorsForCharacteristic:(CBCharacteristic *)p1 error:(NSError *)p2;
	-(void) peripheral:(CBPeripheral *)p0 didDiscoverIncludedServicesForService:(CBService *)p1 error:(NSError *)p2;
	-(void) peripheral:(CBPeripheral *)p0 didDiscoverServices:(NSError *)p1;
	-(void) peripheralIsReadyToSendWriteWithoutResponse:(CBPeripheral *)p0;
	-(void) peripheral:(CBPeripheral *)p0 didModifyServices:(NSArray *)p1;
	-(void) peripheral:(CBPeripheral *)p0 didReadRSSI:(NSNumber *)p1 error:(NSError *)p2;
	-(void) peripheralDidUpdateRSSI:(CBPeripheral *)p0 error:(NSError *)p1;
	-(void) peripheral:(CBPeripheral *)p0 didUpdateValueForCharacteristic:(CBCharacteristic *)p1 error:(NSError *)p2;
	-(void) peripheralDidUpdateName:(CBPeripheral *)p0;
	-(void) peripheral:(CBPeripheral *)p0 didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)p1 error:(NSError *)p2;
	-(void) peripheral:(CBPeripheral *)p0 didUpdateValueForDescriptor:(CBDescriptor *)p1 error:(NSError *)p2;
	-(void) peripheral:(CBPeripheral *)p0 didWriteValueForCharacteristic:(CBCharacteristic *)p1 error:(NSError *)p2;
	-(void) peripheral:(CBPeripheral *)p0 didWriteValueForDescriptor:(CBDescriptor *)p1 error:(NSError *)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation CoreBluetooth_CBPeripheral__CBPeripheralDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) peripheral:(CBPeripheral *)p0 didOpenL2CAPChannel:(CBL2CAPChannel *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A2D);
	}

	-(void) peripheral:(CBPeripheral *)p0 didDiscoverCharacteristicsForService:(CBService *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A2F);
	}

	-(void) peripheral:(CBPeripheral *)p0 didDiscoverDescriptorsForCharacteristic:(CBCharacteristic *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A31);
	}

	-(void) peripheral:(CBPeripheral *)p0 didDiscoverIncludedServicesForService:(CBService *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A33);
	}

	-(void) peripheral:(CBPeripheral *)p0 didDiscoverServices:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3A35);
	}

	-(void) peripheralIsReadyToSendWriteWithoutResponse:(CBPeripheral *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3A37);
	}

	-(void) peripheral:(CBPeripheral *)p0 didModifyServices:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_48 (self, _cmd, &managed_method, p0, p1, 0x3A39);
	}

	-(void) peripheral:(CBPeripheral *)p0 didReadRSSI:(NSNumber *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A3B);
	}

	-(void) peripheralDidUpdateRSSI:(CBPeripheral *)p0 error:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3A3D);
	}

	-(void) peripheral:(CBPeripheral *)p0 didUpdateValueForCharacteristic:(CBCharacteristic *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A3F);
	}

	-(void) peripheralDidUpdateName:(CBPeripheral *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3A41);
	}

	-(void) peripheral:(CBPeripheral *)p0 didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A43);
	}

	-(void) peripheral:(CBPeripheral *)p0 didUpdateValueForDescriptor:(CBDescriptor *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A45);
	}

	-(void) peripheral:(CBPeripheral *)p0 didWriteValueForCharacteristic:(CBCharacteristic *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A47);
	}

	-(void) peripheral:(CBPeripheral *)p0 didWriteValueForDescriptor:(CBDescriptor *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A49);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3A4B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface CoreBluetooth_CBPeripheralManager__CBPeripheralManagerDelegate : NSObject<CBPeripheralManagerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) peripheralManagerDidStartAdvertising:(CBPeripheralManager *)p0 error:(NSError *)p1;
	-(void) peripheralManager:(CBPeripheralManager *)p0 central:(CBCentral *)p1 didSubscribeToCharacteristic:(CBCharacteristic *)p2;
	-(void) peripheralManager:(CBPeripheralManager *)p0 central:(CBCentral *)p1 didUnsubscribeFromCharacteristic:(CBCharacteristic *)p2;
	-(void) peripheralManager:(CBPeripheralManager *)p0 didOpenL2CAPChannel:(CBL2CAPChannel *)p1 error:(NSError *)p2;
	-(void) peripheralManager:(CBPeripheralManager *)p0 didPublishL2CAPChannel:(unsigned short)p1 error:(NSError *)p2;
	-(void) peripheralManager:(CBPeripheralManager *)p0 didUnpublishL2CAPChannel:(unsigned short)p1 error:(NSError *)p2;
	-(void) peripheralManager:(CBPeripheralManager *)p0 didReceiveReadRequest:(CBATTRequest *)p1;
	-(void) peripheralManagerIsReadyToUpdateSubscribers:(CBPeripheralManager *)p0;
	-(void) peripheralManager:(CBPeripheralManager *)p0 didAddService:(CBService *)p1 error:(NSError *)p2;
	-(void) peripheralManagerDidUpdateState:(CBPeripheralManager *)p0;
	-(void) peripheralManager:(CBPeripheralManager *)p0 willRestoreState:(NSDictionary *)p1;
	-(void) peripheralManager:(CBPeripheralManager *)p0 didReceiveWriteRequests:(NSArray *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation CoreBluetooth_CBPeripheralManager__CBPeripheralManagerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) peripheralManagerDidStartAdvertising:(CBPeripheralManager *)p0 error:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3A51);
	}

	-(void) peripheralManager:(CBPeripheralManager *)p0 central:(CBCentral *)p1 didSubscribeToCharacteristic:(CBCharacteristic *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A53);
	}

	-(void) peripheralManager:(CBPeripheralManager *)p0 central:(CBCentral *)p1 didUnsubscribeFromCharacteristic:(CBCharacteristic *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A55);
	}

	-(void) peripheralManager:(CBPeripheralManager *)p0 didOpenL2CAPChannel:(CBL2CAPChannel *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A57);
	}

	-(void) peripheralManager:(CBPeripheralManager *)p0 didPublishL2CAPChannel:(unsigned short)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_103 (self, _cmd, &managed_method, p0, p1, p2, 0x3A59);
	}

	-(void) peripheralManager:(CBPeripheralManager *)p0 didUnpublishL2CAPChannel:(unsigned short)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_103 (self, _cmd, &managed_method, p0, p1, p2, 0x3A5B);
	}

	-(void) peripheralManager:(CBPeripheralManager *)p0 didReceiveReadRequest:(CBATTRequest *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3A5D);
	}

	-(void) peripheralManagerIsReadyToUpdateSubscribers:(CBPeripheralManager *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3A5F);
	}

	-(void) peripheralManager:(CBPeripheralManager *)p0 didAddService:(CBService *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3A61);
	}

	-(void) peripheralManagerDidUpdateState:(CBPeripheralManager *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3A63);
	}

	-(void) peripheralManager:(CBPeripheralManager *)p0 willRestoreState:(NSDictionary *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3A65);
	}

	-(void) peripheralManager:(CBPeripheralManager *)p0 didReceiveWriteRequests:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_48 (self, _cmd, &managed_method, p0, p1, 0x3A67);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3A69);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface CoreAnimation_CAAnimation__CAAnimationDelegate : NSObject<CAAnimationDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) animationDidStart:(CAAnimation *)p0;
	-(void) animationDidStop:(CAAnimation *)p0 finished:(BOOL)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation CoreAnimation_CAAnimation__CAAnimationDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) animationDidStart:(CAAnimation *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3A6F);
	}

	-(void) animationDidStop:(CAAnimation *)p0 finished:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_28 (self, _cmd, &managed_method, p0, p1, 0x3A71);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3A73);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSApplication__NSApplicationDelegate : NSObject<NSApplicationDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSMenu *) applicationDockMenu:(NSApplication *)p0;
	-(BOOL) applicationOpenUntitledFile:(NSApplication *)p0;
	-(BOOL) applicationShouldHandleReopen:(NSApplication *)p0 hasVisibleWindows:(BOOL)p1;
	-(BOOL) applicationShouldOpenUntitledFile:(NSApplication *)p0;
	-(NSUInteger) applicationShouldTerminate:(NSApplication *)p0;
	-(BOOL) applicationShouldTerminateAfterLastWindowClosed:(NSApplication *)p0;
	-(BOOL) application:(NSApplication *)p0 continueUserActivity:(NSUserActivity *)p1 restorationHandler:(void (^)(id *))p2;
	-(void) application:(NSApplication *)p0 didDecodeRestorableState:(NSCoder *)p1;
	-(void) applicationDidBecomeActive:(NSNotification *)p0;
	-(void) applicationDidFinishLaunching:(NSNotification *)p0;
	-(void) applicationDidHide:(NSNotification *)p0;
	-(void) applicationDidResignActive:(NSNotification *)p0;
	-(void) applicationDidUnhide:(NSNotification *)p0;
	-(void) applicationDidUpdate:(NSNotification *)p0;
	-(void) application:(NSApplication *)p0 didFailToContinueUserActivityWithType:(NSString *)p1 error:(NSError *)p2;
	-(void) application:(NSApplication *)p0 didFailToRegisterForRemoteNotificationsWithError:(NSError *)p1;
	-(BOOL) application:(NSApplication *)p0 delegateHandlesKey:(NSString *)p1;
	-(BOOL) application:(NSApplication *)p0 openFile:(NSString *)p1;
	-(BOOL) application:(NSObject *)p0 openFileWithoutUI:(NSString *)p1;
	-(void) application:(NSApplication *)p0 openFiles:(NSArray *)p1;
	-(BOOL) application:(NSApplication *)p0 openTempFile:(NSString *)p1;
	-(void) application:(NSApplication *)p0 openURLs:(NSArray *)p1;
	-(BOOL) application:(NSApplication *)p0 printFile:(NSString *)p1;
	-(NSUInteger) application:(NSApplication *)p0 printFiles:(NSArray *)p1 withSettings:(NSDictionary *)p2 showPrintPanels:(BOOL)p3;
	-(void) applicationProtectedDataDidBecomeAvailable:(NSNotification *)p0;
	-(void) applicationProtectedDataWillBecomeUnavailable:(NSNotification *)p0;
	-(void) application:(NSApplication *)p0 didReceiveRemoteNotification:(NSDictionary *)p1;
	-(void) application:(NSApplication *)p0 didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)p1;
	-(void) applicationDidChangeScreenParameters:(NSNotification *)p0;
	-(void) application:(NSApplication *)p0 didUpdateUserActivity:(NSUserActivity *)p1;
	-(void) application:(NSApplication *)p0 userDidAcceptCloudKitShareWithMetadata:(CKShareMetadata *)p1;
	-(void) applicationWillBecomeActive:(NSNotification *)p0;
	-(BOOL) application:(NSApplication *)p0 willContinueUserActivityWithType:(NSString *)p1;
	-(void) application:(NSApplication *)p0 willEncodeRestorableState:(NSCoder *)p1;
	-(void) applicationWillFinishLaunching:(NSNotification *)p0;
	-(void) applicationWillHide:(NSNotification *)p0;
	-(NSError *) application:(NSApplication *)p0 willPresentError:(NSError *)p1;
	-(void) applicationWillResignActive:(NSNotification *)p0;
	-(void) applicationWillTerminate:(NSNotification *)p0;
	-(void) applicationWillUnhide:(NSNotification *)p0;
	-(void) applicationWillUpdate:(NSNotification *)p0;
	-(BOOL) respondsToSelector:(SEL)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSApplication__NSApplicationDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(NSMenu *) applicationDockMenu:(NSApplication *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_68 (self, _cmd, &managed_method, p0, 0x3A97);
	}

	-(BOOL) applicationOpenUntitledFile:(NSApplication *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3A99);
	}

	-(BOOL) applicationShouldHandleReopen:(NSApplication *)p0 hasVisibleWindows:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_104 (self, _cmd, &managed_method, p0, p1, 0x3A9B);
	}

	-(BOOL) applicationShouldOpenUntitledFile:(NSApplication *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3A9D);
	}

	-(NSUInteger) applicationShouldTerminate:(NSApplication *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_105 (self, _cmd, &managed_method, p0, 0x3A9F);
	}

	-(BOOL) applicationShouldTerminateAfterLastWindowClosed:(NSApplication *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3AA1);
	}

	-(BOOL) application:(NSApplication *)p0 continueUserActivity:(NSUserActivity *)p1 restorationHandler:(void (^)(id *))p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_106 (self, _cmd, &managed_method, p0, p1, p2, 0x3AA3);
	}

	-(void) application:(NSApplication *)p0 didDecodeRestorableState:(NSCoder *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3AA7);
	}

	-(void) applicationDidBecomeActive:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AA9);
	}

	-(void) applicationDidFinishLaunching:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AAB);
	}

	-(void) applicationDidHide:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AAD);
	}

	-(void) applicationDidResignActive:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AAF);
	}

	-(void) applicationDidUnhide:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AB1);
	}

	-(void) applicationDidUpdate:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AB3);
	}

	-(void) application:(NSApplication *)p0 didFailToContinueUserActivityWithType:(NSString *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_66 (self, _cmd, &managed_method, p0, p1, p2, 0x3AB5);
	}

	-(void) application:(NSApplication *)p0 didFailToRegisterForRemoteNotificationsWithError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3AB7);
	}

	-(BOOL) application:(NSApplication *)p0 delegateHandlesKey:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_55 (self, _cmd, &managed_method, p0, p1, 0x3AB9);
	}

	-(BOOL) application:(NSApplication *)p0 openFile:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_55 (self, _cmd, &managed_method, p0, p1, 0x3ABB);
	}

	-(BOOL) application:(NSObject *)p0 openFileWithoutUI:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_55 (self, _cmd, &managed_method, p0, p1, 0x3ABD);
	}

	-(void) application:(NSApplication *)p0 openFiles:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_64 (self, _cmd, &managed_method, p0, p1, 0x3ABF);
	}

	-(BOOL) application:(NSApplication *)p0 openTempFile:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_55 (self, _cmd, &managed_method, p0, p1, 0x3AC1);
	}

	-(void) application:(NSApplication *)p0 openURLs:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_48 (self, _cmd, &managed_method, p0, p1, 0x3AC3);
	}

	-(BOOL) application:(NSApplication *)p0 printFile:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_55 (self, _cmd, &managed_method, p0, p1, 0x3AC5);
	}

	-(NSUInteger) application:(NSApplication *)p0 printFiles:(NSArray *)p1 withSettings:(NSDictionary *)p2 showPrintPanels:(BOOL)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_107 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3AC7);
	}

	-(void) applicationProtectedDataDidBecomeAvailable:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AC9);
	}

	-(void) applicationProtectedDataWillBecomeUnavailable:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3ACB);
	}

	-(void) application:(NSApplication *)p0 didReceiveRemoteNotification:(NSDictionary *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3ACD);
	}

	-(void) application:(NSApplication *)p0 didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3ACF);
	}

	-(void) applicationDidChangeScreenParameters:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AD1);
	}

	-(void) application:(NSApplication *)p0 didUpdateUserActivity:(NSUserActivity *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3AD3);
	}

	-(void) application:(NSApplication *)p0 userDidAcceptCloudKitShareWithMetadata:(CKShareMetadata *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3AD5);
	}

	-(void) applicationWillBecomeActive:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AD7);
	}

	-(BOOL) application:(NSApplication *)p0 willContinueUserActivityWithType:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_55 (self, _cmd, &managed_method, p0, p1, 0x3AD9);
	}

	-(void) application:(NSApplication *)p0 willEncodeRestorableState:(NSCoder *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3ADB);
	}

	-(void) applicationWillFinishLaunching:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3ADD);
	}

	-(void) applicationWillHide:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3ADF);
	}

	-(NSError *) application:(NSApplication *)p0 willPresentError:(NSError *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_72 (self, _cmd, &managed_method, p0, p1, 0x3AE1);
	}

	-(void) applicationWillResignActive:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AE3);
	}

	-(void) applicationWillTerminate:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AE5);
	}

	-(void) applicationWillUnhide:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AE7);
	}

	-(void) applicationWillUpdate:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3AE9);
	}

	-(BOOL) respondsToSelector:(SEL)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_108 (self, _cmd, &managed_method, p0, 0x3AEB);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3AED);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSMatrix__NSMatrixDelegate : NSObject<NSMatrixDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSMatrix__NSMatrixDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3AF5);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSPathCell__NSPathCellDelegate : NSObject<NSPathCellDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) pathCell:(NSPathCell *)p0 willDisplayOpenPanel:(NSOpenPanel *)p1;
	-(void) pathCell:(NSPathCell *)p0 willPopUpMenu:(NSMenu *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSPathCell__NSPathCellDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) pathCell:(NSPathCell *)p0 willDisplayOpenPanel:(NSOpenPanel *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3AF9);
	}

	-(void) pathCell:(NSPathCell *)p0 willPopUpMenu:(NSMenu *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3AFB);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3AFD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSTableView__NSTableViewDelegate : NSObject<NSTableViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) tableViewColumnDidMove:(NSNotification *)p0;
	-(void) tableViewColumnDidResize:(NSNotification *)p0;
	-(NSTableRowView *) tableView:(NSTableView *)p0 rowViewForRow:(void *)p1;
	-(void) tableView:(NSTableView *)p0 didAddRowView:(NSTableRowView *)p1 forRow:(void *)p2;
	-(void) tableView:(NSTableView *)p0 didClickTableColumn:(NSTableColumn *)p1;
	-(void) tableView:(NSTableView *)p0 didDragTableColumn:(NSTableColumn *)p1;
	-(void) tableView:(NSTableView *)p0 didRemoveRowView:(NSTableRowView *)p1 forRow:(void *)p2;
	-(NSCell *) tableView:(NSTableView *)p0 dataCellForTableColumn:(NSTableColumn *)p1 row:(void *)p2;
	-(void *) tableView:(NSTableView *)p0 nextTypeSelectMatchFromRow:(void *)p1 toRow:(void *)p2 forString:(NSString *)p3;
	-(CGFloat) tableView:(NSTableView *)p0 heightOfRow:(void *)p1;
	-(NSString *) tableView:(NSTableView *)p0 typeSelectStringForTableColumn:(NSTableColumn *)p1 row:(void *)p2;
	-(NSIndexSet *) tableView:(NSTableView *)p0 selectionIndexesForProposedSelection:(NSIndexSet *)p1;
	-(CGFloat) tableView:(NSTableView *)p0 sizeToFitWidthOfColumn:(void *)p1;
	-(NSString *) tableView:(NSTableView *)p0 toolTipForCell:(NSCell *)p1 rect:(CGRect*)p2 tableColumn:(NSTableColumn *)p3 row:(void *)p4 mouseLocation:(CGPoint)p5;
	-(NSView *) tableView:(NSTableView *)p0 viewForTableColumn:(NSTableColumn *)p1 row:(void *)p2;
	-(BOOL) tableView:(NSTableView *)p0 isGroupRow:(void *)p1;
	-(void) tableView:(NSTableView *)p0 mouseDownInHeaderOfTableColumn:(NSTableColumn *)p1;
	-(NSArray *) tableView:(NSTableView *)p0 rowActionsForRow:(void *)p1 edge:(NSInteger)p2;
	-(void) tableViewSelectionDidChange:(NSNotification *)p0;
	-(void) tableViewSelectionIsChanging:(NSNotification *)p0;
	-(BOOL) selectionShouldChangeInTableView:(NSTableView *)p0;
	-(BOOL) tableView:(NSTableView *)p0 shouldEditTableColumn:(NSTableColumn *)p1 row:(void *)p2;
	-(BOOL) tableView:(NSTableView *)p0 shouldReorderColumn:(void *)p1 toColumn:(void *)p2;
	-(BOOL) tableView:(NSTableView *)p0 shouldSelectRow:(void *)p1;
	-(BOOL) tableView:(NSTableView *)p0 shouldSelectTableColumn:(NSTableColumn *)p1;
	-(BOOL) tableView:(NSTableView *)p0 shouldShowCellExpansionForTableColumn:(NSTableColumn *)p1 row:(void *)p2;
	-(BOOL) tableView:(NSTableView *)p0 shouldTrackCell:(NSCell *)p1 forTableColumn:(NSTableColumn *)p2 row:(void *)p3;
	-(BOOL) tableView:(NSTableView *)p0 shouldTypeSelectForEvent:(NSEvent *)p1 withCurrentSearchString:(NSString *)p2;
	-(void) tableView:(NSTableView *)p0 willDisplayCell:(NSObject *)p1 forTableColumn:(NSTableColumn *)p2 row:(void *)p3;
	-(BOOL) respondsToSelector:(SEL)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSTableView__NSTableViewDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) tableViewColumnDidMove:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B03);
	}

	-(void) tableViewColumnDidResize:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B05);
	}

	-(NSTableRowView *) tableView:(NSTableView *)p0 rowViewForRow:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_109 (self, _cmd, &managed_method, p0, p1, 0x3B07);
	}

	-(void) tableView:(NSTableView *)p0 didAddRowView:(NSTableRowView *)p1 forRow:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_110 (self, _cmd, &managed_method, p0, p1, p2, 0x3B09);
	}

	-(void) tableView:(NSTableView *)p0 didClickTableColumn:(NSTableColumn *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3B0B);
	}

	-(void) tableView:(NSTableView *)p0 didDragTableColumn:(NSTableColumn *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3B0D);
	}

	-(void) tableView:(NSTableView *)p0 didRemoveRowView:(NSTableRowView *)p1 forRow:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_110 (self, _cmd, &managed_method, p0, p1, p2, 0x3B0F);
	}

	-(NSCell *) tableView:(NSTableView *)p0 dataCellForTableColumn:(NSTableColumn *)p1 row:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_111 (self, _cmd, &managed_method, p0, p1, p2, 0x3B11);
	}

	-(void *) tableView:(NSTableView *)p0 nextTypeSelectMatchFromRow:(void *)p1 toRow:(void *)p2 forString:(NSString *)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_112 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3B13);
	}

	-(CGFloat) tableView:(NSTableView *)p0 heightOfRow:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_113 (self, _cmd, &managed_method, p0, p1, 0x3B15);
	}

	-(NSString *) tableView:(NSTableView *)p0 typeSelectStringForTableColumn:(NSTableColumn *)p1 row:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_114 (self, _cmd, &managed_method, p0, p1, p2, 0x3B17);
	}

	-(NSIndexSet *) tableView:(NSTableView *)p0 selectionIndexesForProposedSelection:(NSIndexSet *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_72 (self, _cmd, &managed_method, p0, p1, 0x3B19);
	}

	-(CGFloat) tableView:(NSTableView *)p0 sizeToFitWidthOfColumn:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_113 (self, _cmd, &managed_method, p0, p1, 0x3B1B);
	}

	-(NSString *) tableView:(NSTableView *)p0 toolTipForCell:(NSCell *)p1 rect:(CGRect*)p2 tableColumn:(NSTableColumn *)p3 row:(void *)p4 mouseLocation:(CGPoint)p5
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_115 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, p5, 0x3B1D);
	}

	-(NSView *) tableView:(NSTableView *)p0 viewForTableColumn:(NSTableColumn *)p1 row:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_111 (self, _cmd, &managed_method, p0, p1, p2, 0x3B1F);
	}

	-(BOOL) tableView:(NSTableView *)p0 isGroupRow:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_116 (self, _cmd, &managed_method, p0, p1, 0x3B21);
	}

	-(void) tableView:(NSTableView *)p0 mouseDownInHeaderOfTableColumn:(NSTableColumn *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3B23);
	}

	-(NSArray *) tableView:(NSTableView *)p0 rowActionsForRow:(void *)p1 edge:(NSInteger)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_117 (self, _cmd, &managed_method, p0, p1, p2, 0x3B25);
	}

	-(void) tableViewSelectionDidChange:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B27);
	}

	-(void) tableViewSelectionIsChanging:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B29);
	}

	-(BOOL) selectionShouldChangeInTableView:(NSTableView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3B2B);
	}

	-(BOOL) tableView:(NSTableView *)p0 shouldEditTableColumn:(NSTableColumn *)p1 row:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_118 (self, _cmd, &managed_method, p0, p1, p2, 0x3B2D);
	}

	-(BOOL) tableView:(NSTableView *)p0 shouldReorderColumn:(void *)p1 toColumn:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_119 (self, _cmd, &managed_method, p0, p1, p2, 0x3B2F);
	}

	-(BOOL) tableView:(NSTableView *)p0 shouldSelectRow:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_116 (self, _cmd, &managed_method, p0, p1, 0x3B31);
	}

	-(BOOL) tableView:(NSTableView *)p0 shouldSelectTableColumn:(NSTableColumn *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3B33);
	}

	-(BOOL) tableView:(NSTableView *)p0 shouldShowCellExpansionForTableColumn:(NSTableColumn *)p1 row:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_118 (self, _cmd, &managed_method, p0, p1, p2, 0x3B35);
	}

	-(BOOL) tableView:(NSTableView *)p0 shouldTrackCell:(NSCell *)p1 forTableColumn:(NSTableColumn *)p2 row:(void *)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_120 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3B37);
	}

	-(BOOL) tableView:(NSTableView *)p0 shouldTypeSelectForEvent:(NSEvent *)p1 withCurrentSearchString:(NSString *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_121 (self, _cmd, &managed_method, p0, p1, p2, 0x3B39);
	}

	-(void) tableView:(NSTableView *)p0 willDisplayCell:(NSObject *)p1 forTableColumn:(NSTableColumn *)p2 row:(void *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_58 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3B3B);
	}

	-(BOOL) respondsToSelector:(SEL)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_108 (self, _cmd, &managed_method, p0, 0x3B3D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3B3F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSAlert__NSAlertDelegate : NSObject<NSAlertDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) alertShowHelp:(NSAlert *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSAlert__NSAlertDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(BOOL) alertShowHelp:(NSAlert *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3B45);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3B47);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSTextField__NSTextFieldDelegate : NSObject<NSTextFieldDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) controlTextDidChange:(NSNotification *)p0;
	-(BOOL) control:(NSControl *)p0 didFailToFormatString:(NSString *)p1 errorDescription:(NSString *)p2;
	-(void) control:(NSControl *)p0 didFailToValidatePartialString:(NSString *)p1 errorDescription:(NSString *)p2;
	-(BOOL) control:(NSControl *)p0 textView:(NSTextView *)p1 doCommandBySelector:(SEL)p2;
	-(void) controlTextDidBeginEditing:(NSNotification *)p0;
	-(void) controlTextDidEndEditing:(NSNotification *)p0;
	-(NSArray *) textField:(NSTextField *)p0 textView:(NSTextView *)p1 candidatesForSelectedRange:(NSRange)p2;
	-(NSArray *) control:(NSControl *)p0 textView:(NSTextView *)p1 completions:(NSArray *)p2 forPartialWordRange:(NSRange)p3 indexOfSelectedItem:(void **)p4;
	-(NSArray *) textField:(NSTextField *)p0 textView:(NSTextView *)p1 candidates:(NSArray *)p2 forSelectedRange:(NSRange)p3;
	-(BOOL) control:(NSControl *)p0 isValidObject:(NSObject *)p1;
	-(BOOL) textField:(NSTextField *)p0 textView:(NSTextView *)p1 shouldSelectCandidateAtIndex:(void *)p2;
	-(BOOL) control:(NSControl *)p0 textShouldBeginEditing:(NSText *)p1;
	-(BOOL) control:(NSControl *)p0 textShouldEndEditing:(NSText *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSTextField__NSTextFieldDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) controlTextDidChange:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B4F);
	}

	-(BOOL) control:(NSControl *)p0 didFailToFormatString:(NSString *)p1 errorDescription:(NSString *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_122 (self, _cmd, &managed_method, p0, p1, p2, 0x3B51);
	}

	-(void) control:(NSControl *)p0 didFailToValidatePartialString:(NSString *)p1 errorDescription:(NSString *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_123 (self, _cmd, &managed_method, p0, p1, p2, 0x3B53);
	}

	-(BOOL) control:(NSControl *)p0 textView:(NSTextView *)p1 doCommandBySelector:(SEL)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_124 (self, _cmd, &managed_method, p0, p1, p2, 0x3B55);
	}

	-(void) controlTextDidBeginEditing:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B57);
	}

	-(void) controlTextDidEndEditing:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B59);
	}

	-(NSArray *) textField:(NSTextField *)p0 textView:(NSTextView *)p1 candidatesForSelectedRange:(NSRange)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_125 (self, _cmd, &managed_method, p0, p1, p2, 0x3B5B);
	}

	-(NSArray *) control:(NSControl *)p0 textView:(NSTextView *)p1 completions:(NSArray *)p2 forPartialWordRange:(NSRange)p3 indexOfSelectedItem:(void **)p4
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_126 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, 0x3B5D);
	}

	-(NSArray *) textField:(NSTextField *)p0 textView:(NSTextView *)p1 candidates:(NSArray *)p2 forSelectedRange:(NSRange)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_127 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3B5F);
	}

	-(BOOL) control:(NSControl *)p0 isValidObject:(NSObject *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3B61);
	}

	-(BOOL) textField:(NSTextField *)p0 textView:(NSTextView *)p1 shouldSelectCandidateAtIndex:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_128 (self, _cmd, &managed_method, p0, p1, p2, 0x3B63);
	}

	-(BOOL) control:(NSControl *)p0 textShouldBeginEditing:(NSText *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3B65);
	}

	-(BOOL) control:(NSControl *)p0 textShouldEndEditing:(NSText *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3B67);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3B69);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSComboBox__NSComboBoxDelegate : AppKit_NSTextField__NSTextFieldDelegate<NSComboBoxDelegate, NSTextFieldDelegate> {
}
	-(void) comboBoxSelectionDidChange:(NSNotification *)p0;
	-(void) comboBoxSelectionIsChanging:(NSNotification *)p0;
	-(void) comboBoxWillDismiss:(NSNotification *)p0;
	-(void) comboBoxWillPopUp:(NSNotification *)p0;
	-(id) init;
@end

@implementation AppKit_NSComboBox__NSComboBoxDelegate {
}

	-(void) comboBoxSelectionDidChange:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B6D);
	}

	-(void) comboBoxSelectionIsChanging:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B6F);
	}

	-(void) comboBoxWillDismiss:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B71);
	}

	-(void) comboBoxWillPopUp:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B73);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3B75);
		if (call_super && rv) {
			struct objc_super super = {  rv, [AppKit_NSTextField__NSTextFieldDelegate class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __NSDocumentDuplicateCallback : NSObject {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) document:(NSDocument *)p0 didDuplicate:(BOOL)p1 contextInfo:(void *)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation __NSDocumentDuplicateCallback {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) document:(NSDocument *)p0 didDuplicate:(BOOL)p1 contextInfo:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_129 (self, _cmd, &managed_method, p0, p1, p2, 0x3B7B);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@implementation __NSGestureRecognizerToken {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}

	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3B85);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@implementation __NSGestureRecognizerParameterlessToken {
}

	-(void) target
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_3 (self, _cmd, &managed_method, 0x3B89);
	}
@end

@implementation __NSGestureRecognizerParametrizedToken {
}

	-(void) target:(NSGestureRecognizer *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3B8D);
	}
@end

@interface AppKit_NSGestureRecognizer__NSGestureRecognizerDelegate : NSObject<NSGestureRecognizerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(BOOL) gestureRecognizer:(NSGestureRecognizer *)p0 shouldAttemptToRecognizeWithEvent:(NSEvent *)p1;
	-(BOOL) gestureRecognizer:(NSGestureRecognizer *)p0 shouldBeRequiredToFailByGestureRecognizer:(NSGestureRecognizer *)p1;
	-(BOOL) gestureRecognizerShouldBegin:(NSGestureRecognizer *)p0;
	-(BOOL) gestureRecognizer:(NSGestureRecognizer *)p0 shouldReceiveTouch:(NSTouch *)p1;
	-(BOOL) gestureRecognizer:(NSGestureRecognizer *)p0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(NSGestureRecognizer *)p1;
	-(BOOL) gestureRecognizer:(NSGestureRecognizer *)p0 shouldRequireFailureOfGestureRecognizer:(NSGestureRecognizer *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSGestureRecognizer__NSGestureRecognizerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(BOOL) gestureRecognizer:(NSGestureRecognizer *)p0 shouldAttemptToRecognizeWithEvent:(NSEvent *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3B91);
	}

	-(BOOL) gestureRecognizer:(NSGestureRecognizer *)p0 shouldBeRequiredToFailByGestureRecognizer:(NSGestureRecognizer *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3B93);
	}

	-(BOOL) gestureRecognizerShouldBegin:(NSGestureRecognizer *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3B95);
	}

	-(BOOL) gestureRecognizer:(NSGestureRecognizer *)p0 shouldReceiveTouch:(NSTouch *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3B97);
	}

	-(BOOL) gestureRecognizer:(NSGestureRecognizer *)p0 shouldRecognizeSimultaneouslyWithGestureRecognizer:(NSGestureRecognizer *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3B99);
	}

	-(BOOL) gestureRecognizer:(NSGestureRecognizer *)p0 shouldRequireFailureOfGestureRecognizer:(NSGestureRecognizer *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3B9B);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3B9D);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface __NSClickGestureRecognizer : __NSGestureRecognizerToken {
}
	-(void) target:(NSClickGestureRecognizer *)p0;
@end

@implementation __NSClickGestureRecognizer {
}

	-(void) target:(NSClickGestureRecognizer *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3BA3);
	}
@end

@interface __NSMagnificationGestureRecognizer : __NSGestureRecognizerToken {
}
	-(void) target:(NSMagnificationGestureRecognizer *)p0;
@end

@implementation __NSMagnificationGestureRecognizer {
}

	-(void) target:(NSMagnificationGestureRecognizer *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3BA9);
	}
@end

@interface __NSPanGestureRecognizer : __NSGestureRecognizerToken {
}
	-(void) target:(NSPanGestureRecognizer *)p0;
@end

@implementation __NSPanGestureRecognizer {
}

	-(void) target:(NSPanGestureRecognizer *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3BAF);
	}
@end

@interface __NSPressGestureRecognizer : __NSGestureRecognizerToken {
}
	-(void) target:(NSPressGestureRecognizer *)p0;
@end

@implementation __NSPressGestureRecognizer {
}

	-(void) target:(NSPressGestureRecognizer *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3BB5);
	}
@end

@interface __NSRotationGestureRecognizer : __NSGestureRecognizerToken {
}
	-(void) target:(NSRotationGestureRecognizer *)p0;
@end

@implementation __NSRotationGestureRecognizer {
}

	-(void) target:(NSRotationGestureRecognizer *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3BBB);
	}
@end

@interface AppKit_NSImage__NSImageDelegate : NSObject<NSImageDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) image:(NSImage *)p0 didLoadPartOfRepresentation:(NSImageRep *)p1 withValidRows:(void *)p2;
	-(void) image:(NSImage *)p0 didLoadRepresentation:(NSImageRep *)p1 withStatus:(NSUInteger)p2;
	-(void) image:(NSImage *)p0 didLoadRepresentationHeader:(NSImageRep *)p1;
	-(NSImage *) imageDidNotDraw:(NSObject *)p0 inRect:(CGRect)p1;
	-(void) image:(NSImage *)p0 willLoadRepresentation:(NSImageRep *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSImage__NSImageDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) image:(NSImage *)p0 didLoadPartOfRepresentation:(NSImageRep *)p1 withValidRows:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_110 (self, _cmd, &managed_method, p0, p1, p2, 0x3BC3);
	}

	-(void) image:(NSImage *)p0 didLoadRepresentation:(NSImageRep *)p1 withStatus:(NSUInteger)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_79 (self, _cmd, &managed_method, p0, p1, p2, 0x3BC5);
	}

	-(void) image:(NSImage *)p0 didLoadRepresentationHeader:(NSImageRep *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3BC7);
	}

	-(NSImage *) imageDidNotDraw:(NSObject *)p0 inRect:(CGRect)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_130 (self, _cmd, &managed_method, p0, p1, 0x3BC9);
	}

	-(void) image:(NSImage *)p0 willLoadRepresentation:(NSImageRep *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3BCB);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3BCD);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSSharingService__NSSharingServiceDelegate : NSObject<NSSharingServiceDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSView *) anchoringViewForSharingService:(NSSharingService *)p0 showRelativeToRect:(CGRect*)p1 preferredEdge:(NSUInteger*)p2;
	-(void) sharingService:(NSSharingService *)p0 didFailToShareItems:(NSArray *)p1 error:(NSError *)p2;
	-(void) sharingService:(NSSharingService *)p0 didShareItems:(NSArray *)p1;
	-(CGRect) sharingService:(NSSharingService *)p0 sourceFrameOnScreenForShareItem:(id)p1;
	-(NSWindow *) sharingService:(NSSharingService *)p0 sourceWindowForShareItems:(NSArray *)p1 sharingContentScope:(NSInteger)p2;
	-(NSImage *) sharingService:(NSSharingService *)p0 transitionImageForShareItem:(id)p1 contentRect:(CGRect)p2;
	-(void) sharingService:(NSSharingService *)p0 willShareItems:(NSArray *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSSharingService__NSSharingServiceDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(NSView *) anchoringViewForSharingService:(NSSharingService *)p0 showRelativeToRect:(CGRect*)p1 preferredEdge:(NSUInteger*)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_131 (self, _cmd, &managed_method, p0, p1, p2, 0x3BDD);
	}

	-(void) sharingService:(NSSharingService *)p0 didFailToShareItems:(NSArray *)p1 error:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_102 (self, _cmd, &managed_method, p0, p1, p2, 0x3BDF);
	}

	-(void) sharingService:(NSSharingService *)p0 didShareItems:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_48 (self, _cmd, &managed_method, p0, p1, 0x3BE1);
	}

	-(CGRect) sharingService:(NSSharingService *)p0 sourceFrameOnScreenForShareItem:(id)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_132 (self, _cmd, &managed_method, p0, p1, 0x3BE3);
	}

	-(NSWindow *) sharingService:(NSSharingService *)p0 sourceWindowForShareItems:(NSArray *)p1 sharingContentScope:(NSInteger)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_133 (self, _cmd, &managed_method, p0, p1, p2, 0x3BE5);
	}

	-(NSImage *) sharingService:(NSSharingService *)p0 transitionImageForShareItem:(id)p1 contentRect:(CGRect)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_134 (self, _cmd, &managed_method, p0, p1, p2, 0x3BE7);
	}

	-(void) sharingService:(NSSharingService *)p0 willShareItems:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_48 (self, _cmd, &managed_method, p0, p1, 0x3BE9);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3BEB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSSound__NSSoundDelegate : NSObject<NSSoundDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) sound:(NSSound *)p0 didFinishPlaying:(BOOL)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSSound__NSSoundDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) sound:(NSSound *)p0 didFinishPlaying:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_28 (self, _cmd, &managed_method, p0, p1, 0x3BF1);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3BF3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSTextStorage__NSTextStorageDelegate : NSObject<NSTextStorageDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) textStorage:(NSTextStorage *)p0 didProcessEditing:(NSUInteger)p1 range:(NSRange)p2 changeInLength:(void *)p3;
	-(void) textStorageDidProcessEditing:(NSNotification *)p0;
	-(void) textStorageWillProcessEditing:(NSNotification *)p0;
	-(void) textStorage:(NSTextStorage *)p0 willProcessEditing:(NSUInteger)p1 range:(NSRange)p2 changeInLength:(void *)p3;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSTextStorage__NSTextStorageDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) textStorage:(NSTextStorage *)p0 didProcessEditing:(NSUInteger)p1 range:(NSRange)p2 changeInLength:(void *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_135 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3BFB);
	}

	-(void) textStorageDidProcessEditing:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3BFD);
	}

	-(void) textStorageWillProcessEditing:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3BFF);
	}

	-(void) textStorage:(NSTextStorage *)p0 willProcessEditing:(NSUInteger)p1 range:(NSRange)p2 changeInLength:(void *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_135 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3C01);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3C03);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSWindow__NSWindowDelegate : NSObject<NSWindowDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSArray *) customWindowsToEnterFullScreenForWindow:(NSWindow *)p0;
	-(NSArray *) customWindowsToExitFullScreenForWindow:(NSWindow *)p0;
	-(void) windowDidBecomeKey:(NSNotification *)p0;
	-(void) windowDidBecomeMain:(NSNotification *)p0;
	-(void) windowDidChangeBackingProperties:(NSNotification *)p0;
	-(void) windowDidChangeScreen:(NSNotification *)p0;
	-(void) windowDidChangeScreenProfile:(NSNotification *)p0;
	-(void) window:(NSWindow *)p0 didDecodeRestorableState:(NSCoder *)p1;
	-(void) windowDidDeminiaturize:(NSNotification *)p0;
	-(void) windowDidEndLiveResize:(NSNotification *)p0;
	-(void) windowDidEndSheet:(NSNotification *)p0;
	-(void) windowDidEnterFullScreen:(NSNotification *)p0;
	-(void) windowDidEnterVersionBrowser:(NSNotification *)p0;
	-(void) windowDidExitFullScreen:(NSNotification *)p0;
	-(void) windowDidExitVersionBrowser:(NSNotification *)p0;
	-(void) windowDidExpose:(NSNotification *)p0;
	-(void) windowDidFailToEnterFullScreen:(NSWindow *)p0;
	-(void) windowDidFailToExitFullScreen:(NSWindow *)p0;
	-(void) windowDidMiniaturize:(NSNotification *)p0;
	-(void) windowDidMove:(NSNotification *)p0;
	-(void) windowDidResignKey:(NSNotification *)p0;
	-(void) windowDidResignMain:(NSNotification *)p0;
	-(void) windowDidResize:(NSNotification *)p0;
	-(void) windowDidUpdate:(NSNotification *)p0;
	-(BOOL) window:(NSWindow *)p0 shouldDragDocumentWithEvent:(NSEvent *)p1 from:(CGPoint)p2 withPasteboard:(NSPasteboard *)p3;
	-(BOOL) window:(NSWindow *)p0 shouldPopUpDocumentPathMenu:(NSMenu *)p1;
	-(BOOL) windowShouldZoom:(NSWindow *)p0 toFrame:(CGRect)p1;
	-(void) window:(NSWindow *)p0 startCustomAnimationToEnterFullScreenWithDuration:(double)p1;
	-(void) window:(NSWindow *)p0 startCustomAnimationToExitFullScreenWithDuration:(double)p1;
	-(void) windowWillBeginSheet:(NSNotification *)p0;
	-(void) windowWillClose:(NSNotification *)p0;
	-(void) window:(NSWindow *)p0 willEncodeRestorableState:(NSCoder *)p1;
	-(void) windowWillEnterFullScreen:(NSNotification *)p0;
	-(void) windowWillEnterVersionBrowser:(NSNotification *)p0;
	-(void) windowWillExitFullScreen:(NSNotification *)p0;
	-(void) windowWillExitVersionBrowser:(NSNotification *)p0;
	-(void) windowWillMiniaturize:(NSNotification *)p0;
	-(void) windowWillMove:(NSNotification *)p0;
	-(CGRect) window:(NSWindow *)p0 willPositionSheet:(NSWindow *)p1 usingRect:(CGRect)p2;
	-(CGSize) windowWillResize:(NSWindow *)p0 toSize:(CGSize)p1;
	-(CGSize) window:(NSWindow *)p0 willResizeForVersionBrowserWithMaxPreferredSize:(CGSize)p1 maxAllowedSize:(CGSize)p2;
	-(NSObject *) windowWillReturnFieldEditor:(NSWindow *)p0 toObject:(NSObject *)p1;
	-(NSUndoManager *) windowWillReturnUndoManager:(NSWindow *)p0;
	-(void) windowWillStartLiveResize:(NSNotification *)p0;
	-(CGSize) window:(NSWindow *)p0 willUseFullScreenContentSize:(CGSize)p1;
	-(NSUInteger) window:(NSWindow *)p0 willUseFullScreenPresentationOptions:(NSUInteger)p1;
	-(CGRect) windowWillUseStandardFrame:(NSWindow *)p0 defaultFrame:(CGRect)p1;
	-(BOOL) windowShouldClose:(NSObject *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSWindow__NSWindowDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(NSArray *) customWindowsToEnterFullScreenForWindow:(NSWindow *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_136 (self, _cmd, &managed_method, p0, 0x3C09);
	}

	-(NSArray *) customWindowsToExitFullScreenForWindow:(NSWindow *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_136 (self, _cmd, &managed_method, p0, 0x3C0B);
	}

	-(void) windowDidBecomeKey:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C0D);
	}

	-(void) windowDidBecomeMain:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C0F);
	}

	-(void) windowDidChangeBackingProperties:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C11);
	}

	-(void) windowDidChangeScreen:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C13);
	}

	-(void) windowDidChangeScreenProfile:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C15);
	}

	-(void) window:(NSWindow *)p0 didDecodeRestorableState:(NSCoder *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3C17);
	}

	-(void) windowDidDeminiaturize:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C19);
	}

	-(void) windowDidEndLiveResize:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C1B);
	}

	-(void) windowDidEndSheet:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C1D);
	}

	-(void) windowDidEnterFullScreen:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C1F);
	}

	-(void) windowDidEnterVersionBrowser:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C21);
	}

	-(void) windowDidExitFullScreen:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C23);
	}

	-(void) windowDidExitVersionBrowser:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C25);
	}

	-(void) windowDidExpose:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C27);
	}

	-(void) windowDidFailToEnterFullScreen:(NSWindow *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C29);
	}

	-(void) windowDidFailToExitFullScreen:(NSWindow *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C2B);
	}

	-(void) windowDidMiniaturize:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C2D);
	}

	-(void) windowDidMove:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C2F);
	}

	-(void) windowDidResignKey:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C31);
	}

	-(void) windowDidResignMain:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C33);
	}

	-(void) windowDidResize:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C35);
	}

	-(void) windowDidUpdate:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C37);
	}

	-(BOOL) window:(NSWindow *)p0 shouldDragDocumentWithEvent:(NSEvent *)p1 from:(CGPoint)p2 withPasteboard:(NSPasteboard *)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_137 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3C39);
	}

	-(BOOL) window:(NSWindow *)p0 shouldPopUpDocumentPathMenu:(NSMenu *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3C3B);
	}

	-(BOOL) windowShouldZoom:(NSWindow *)p0 toFrame:(CGRect)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_138 (self, _cmd, &managed_method, p0, p1, 0x3C3D);
	}

	-(void) window:(NSWindow *)p0 startCustomAnimationToEnterFullScreenWithDuration:(double)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_139 (self, _cmd, &managed_method, p0, p1, 0x3C3F);
	}

	-(void) window:(NSWindow *)p0 startCustomAnimationToExitFullScreenWithDuration:(double)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_139 (self, _cmd, &managed_method, p0, p1, 0x3C41);
	}

	-(void) windowWillBeginSheet:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C43);
	}

	-(void) windowWillClose:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C45);
	}

	-(void) window:(NSWindow *)p0 willEncodeRestorableState:(NSCoder *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3C47);
	}

	-(void) windowWillEnterFullScreen:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C49);
	}

	-(void) windowWillEnterVersionBrowser:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C4B);
	}

	-(void) windowWillExitFullScreen:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C4D);
	}

	-(void) windowWillExitVersionBrowser:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C4F);
	}

	-(void) windowWillMiniaturize:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C51);
	}

	-(void) windowWillMove:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C53);
	}

	-(CGRect) window:(NSWindow *)p0 willPositionSheet:(NSWindow *)p1 usingRect:(CGRect)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_140 (self, _cmd, &managed_method, p0, p1, p2, 0x3C55);
	}

	-(CGSize) windowWillResize:(NSWindow *)p0 toSize:(CGSize)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_141 (self, _cmd, &managed_method, p0, p1, 0x3C57);
	}

	-(CGSize) window:(NSWindow *)p0 willResizeForVersionBrowserWithMaxPreferredSize:(CGSize)p1 maxAllowedSize:(CGSize)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_142 (self, _cmd, &managed_method, p0, p1, p2, 0x3C59);
	}

	-(NSObject *) windowWillReturnFieldEditor:(NSWindow *)p0 toObject:(NSObject *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_72 (self, _cmd, &managed_method, p0, p1, 0x3C5B);
	}

	-(NSUndoManager *) windowWillReturnUndoManager:(NSWindow *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_68 (self, _cmd, &managed_method, p0, 0x3C5D);
	}

	-(void) windowWillStartLiveResize:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C5F);
	}

	-(CGSize) window:(NSWindow *)p0 willUseFullScreenContentSize:(CGSize)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_141 (self, _cmd, &managed_method, p0, p1, 0x3C61);
	}

	-(NSUInteger) window:(NSWindow *)p0 willUseFullScreenPresentationOptions:(NSUInteger)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_143 (self, _cmd, &managed_method, p0, p1, 0x3C63);
	}

	-(CGRect) windowWillUseStandardFrame:(NSWindow *)p0 defaultFrame:(CGRect)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_144 (self, _cmd, &managed_method, p0, p1, 0x3C65);
	}

	-(BOOL) windowShouldClose:(NSObject *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3C67);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3C69);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSAnimation__NSAnimationDelegate : NSObject<NSAnimationDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) animationDidEnd:(NSAnimation *)p0;
	-(void) animation:(NSAnimation *)p0 didReachProgressMark:(float)p1;
	-(void) animationDidStop:(NSAnimation *)p0;
	-(BOOL) animationShouldStart:(NSAnimation *)p0;
	-(float) animation:(NSAnimation *)p0 valueForProgress:(float)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSAnimation__NSAnimationDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) animationDidEnd:(NSAnimation *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C71);
	}

	-(void) animation:(NSAnimation *)p0 didReachProgressMark:(float)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_145 (self, _cmd, &managed_method, p0, p1, 0x3C73);
	}

	-(void) animationDidStop:(NSAnimation *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C75);
	}

	-(BOOL) animationShouldStart:(NSAnimation *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3C77);
	}

	-(float) animation:(NSAnimation *)p0 valueForProgress:(float)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_146 (self, _cmd, &managed_method, p0, p1, 0x3C79);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3C7B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSDatePicker__NSDatePickerCellDelegate : NSObject<NSDatePickerCellDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) datePickerCell:(NSDatePickerCell *)p0 validateProposedDateValue:(NSDate **)p1 timeInterval:(double)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSDatePicker__NSDatePickerCellDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) datePickerCell:(NSDatePickerCell *)p0 validateProposedDateValue:(NSDate **)p1 timeInterval:(double)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_147 (self, _cmd, &managed_method, p0, p1, p2, 0x3C81);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3C83);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSDatePickerCell__NSDatePickerCellDelegate : NSObject<NSDatePickerCellDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) datePickerCell:(NSDatePickerCell *)p0 validateProposedDateValue:(NSDate **)p1 timeInterval:(double)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSDatePickerCell__NSDatePickerCellDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) datePickerCell:(NSDatePickerCell *)p0 validateProposedDateValue:(NSDate **)p1 timeInterval:(double)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_147 (self, _cmd, &managed_method, p0, p1, p2, 0x3C89);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3C8B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSDrawer__NSDrawerDelegate : NSObject<NSDrawerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) drawerDidClose:(NSNotification *)p0;
	-(void) drawerDidOpen:(NSNotification *)p0;
	-(BOOL) drawerShouldClose:(NSDrawer *)p0;
	-(BOOL) drawerShouldOpen:(NSDrawer *)p0;
	-(void) drawerWillClose:(NSNotification *)p0;
	-(void) drawerWillOpen:(NSNotification *)p0;
	-(CGSize) drawerWillResizeContents:(NSDrawer *)p0 toSize:(CGSize)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSDrawer__NSDrawerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) drawerDidClose:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C91);
	}

	-(void) drawerDidOpen:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C93);
	}

	-(BOOL) drawerShouldClose:(NSDrawer *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3C95);
	}

	-(BOOL) drawerShouldOpen:(NSDrawer *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3C97);
	}

	-(void) drawerWillClose:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C99);
	}

	-(void) drawerWillOpen:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3C9B);
	}

	-(CGSize) drawerWillResizeContents:(NSDrawer *)p0 toSize:(CGSize)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_141 (self, _cmd, &managed_method, p0, p1, 0x3C9D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3C9F);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSPageController__NSPageControllerDelegate : NSObject<NSPageControllerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) pageControllerDidEndLiveTransition:(NSPageController *)p0;
	-(void) pageController:(NSPageController *)p0 didTransitionToObject:(NSObject *)p1;
	-(CGRect) pageController:(NSPageController *)p0 frameForObject:(NSObject *)p1;
	-(NSString *) pageController:(NSPageController *)p0 identifierForObject:(NSObject *)p1;
	-(NSViewController *) pageController:(NSPageController *)p0 viewControllerForIdentifier:(NSString *)p1;
	-(void) pageController:(NSPageController *)p0 prepareViewController:(NSViewController *)p1 withObject:(NSObject *)p2;
	-(void) pageControllerWillStartLiveTransition:(NSPageController *)p0;
	-(BOOL) respondsToSelector:(SEL)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSPageController__NSPageControllerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) pageControllerDidEndLiveTransition:(NSPageController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3CAB);
	}

	-(void) pageController:(NSPageController *)p0 didTransitionToObject:(NSObject *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3CAD);
	}

	-(CGRect) pageController:(NSPageController *)p0 frameForObject:(NSObject *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_148 (self, _cmd, &managed_method, p0, p1, 0x3CAF);
	}

	-(NSString *) pageController:(NSPageController *)p0 identifierForObject:(NSObject *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_149 (self, _cmd, &managed_method, p0, p1, 0x3CB1);
	}

	-(NSViewController *) pageController:(NSPageController *)p0 viewControllerForIdentifier:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_150 (self, _cmd, &managed_method, p0, p1, 0x3CB3);
	}

	-(void) pageController:(NSPageController *)p0 prepareViewController:(NSViewController *)p1 withObject:(NSObject *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3CB5);
	}

	-(void) pageControllerWillStartLiveTransition:(NSPageController *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3CB7);
	}

	-(BOOL) respondsToSelector:(SEL)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_108 (self, _cmd, &managed_method, p0, 0x3CB9);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3CBB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSRuleEditor__NSRuleEditorDelegate : NSObject<NSRuleEditorDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) controlTextDidChange:(NSNotification *)p0;
	-(NSObject *) ruleEditor:(NSRuleEditor *)p0 child:(void *)p1 forCriterion:(NSObject *)p2 withRowType:(NSUInteger)p3;
	-(NSObject *) ruleEditor:(NSRuleEditor *)p0 displayValueForCriterion:(NSObject *)p1 inRow:(void *)p2;
	-(void) controlTextDidBeginEditing:(NSNotification *)p0;
	-(void) controlTextDidEndEditing:(NSNotification *)p0;
	-(void *) ruleEditor:(NSRuleEditor *)p0 numberOfChildrenForCriterion:(NSObject *)p1 withRowType:(NSUInteger)p2;
	-(NSDictionary *) ruleEditor:(NSRuleEditor *)p0 predicatePartsForCriterion:(NSObject *)p1 withDisplayValue:(NSObject *)p2 inRow:(void *)p3;
	-(void) ruleEditorRowsDidChange:(NSNotification *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSRuleEditor__NSRuleEditorDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) controlTextDidChange:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3CC3);
	}

	-(NSObject *) ruleEditor:(NSRuleEditor *)p0 child:(void *)p1 forCriterion:(NSObject *)p2 withRowType:(NSUInteger)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_151 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3CC5);
	}

	-(NSObject *) ruleEditor:(NSRuleEditor *)p0 displayValueForCriterion:(NSObject *)p1 inRow:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_111 (self, _cmd, &managed_method, p0, p1, p2, 0x3CC7);
	}

	-(void) controlTextDidBeginEditing:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3CC9);
	}

	-(void) controlTextDidEndEditing:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3CCB);
	}

	-(void *) ruleEditor:(NSRuleEditor *)p0 numberOfChildrenForCriterion:(NSObject *)p1 withRowType:(NSUInteger)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_152 (self, _cmd, &managed_method, p0, p1, p2, 0x3CCD);
	}

	-(NSDictionary *) ruleEditor:(NSRuleEditor *)p0 predicatePartsForCriterion:(NSObject *)p1 withDisplayValue:(NSObject *)p2 inRow:(void *)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_153 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3CCF);
	}

	-(void) ruleEditorRowsDidChange:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3CD1);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3CD3);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSSavePanel__NSOpenSavePanelDelegate : NSObject<NSOpenSavePanelDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSInteger) panel:(NSSavePanel *)p0 compareFilename:(NSString *)p1 with:(NSString *)p2 caseSensitive:(BOOL)p3;
	-(void) panel:(NSSavePanel *)p0 didChangeToDirectoryURL:(NSURL *)p1;
	-(void) panel:(NSSavePanel *)p0 directoryDidChange:(NSString *)p1;
	-(BOOL) panel:(NSSavePanel *)p0 isValidFilename:(NSString *)p1;
	-(void) panelSelectionDidChange:(NSSavePanel *)p0;
	-(BOOL) panel:(NSSavePanel *)p0 shouldEnableURL:(NSURL *)p1;
	-(BOOL) panel:(NSSavePanel *)p0 shouldShowFilename:(NSString *)p1;
	-(NSString *) panel:(NSSavePanel *)p0 userEnteredFilename:(NSString *)p1 confirmed:(BOOL)p2;
	-(BOOL) panel:(NSSavePanel *)p0 validateURL:(NSURL *)p1 error:(NSError **)p2;
	-(void) panel:(NSSavePanel *)p0 willExpand:(BOOL)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSSavePanel__NSOpenSavePanelDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(NSInteger) panel:(NSSavePanel *)p0 compareFilename:(NSString *)p1 with:(NSString *)p2 caseSensitive:(BOOL)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_154 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3CD7);
	}

	-(void) panel:(NSSavePanel *)p0 didChangeToDirectoryURL:(NSURL *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3CD9);
	}

	-(void) panel:(NSSavePanel *)p0 directoryDidChange:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_65 (self, _cmd, &managed_method, p0, p1, 0x3CDB);
	}

	-(BOOL) panel:(NSSavePanel *)p0 isValidFilename:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_55 (self, _cmd, &managed_method, p0, p1, 0x3CDD);
	}

	-(void) panelSelectionDidChange:(NSSavePanel *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3CDF);
	}

	-(BOOL) panel:(NSSavePanel *)p0 shouldEnableURL:(NSURL *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3CE1);
	}

	-(BOOL) panel:(NSSavePanel *)p0 shouldShowFilename:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_55 (self, _cmd, &managed_method, p0, p1, 0x3CE3);
	}

	-(NSString *) panel:(NSSavePanel *)p0 userEnteredFilename:(NSString *)p1 confirmed:(BOOL)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_155 (self, _cmd, &managed_method, p0, p1, p2, 0x3CE5);
	}

	-(BOOL) panel:(NSSavePanel *)p0 validateURL:(NSURL *)p1 error:(NSError **)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_156 (self, _cmd, &managed_method, p0, p1, p2, 0x3CE7);
	}

	-(void) panel:(NSSavePanel *)p0 willExpand:(BOOL)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_28 (self, _cmd, &managed_method, p0, p1, 0x3CE9);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3CEB);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSSearchField__NSSearchFieldDelegate : AppKit_NSTextField__NSTextFieldDelegate<NSSearchFieldDelegate, NSTextFieldDelegate> {
}
	-(void) searchFieldDidEndSearching:(NSSearchField *)p0;
	-(void) searchFieldDidStartSearching:(NSSearchField *)p0;
	-(id) init;
@end

@implementation AppKit_NSSearchField__NSSearchFieldDelegate {
}

	-(void) searchFieldDidEndSearching:(NSSearchField *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3CF3);
	}

	-(void) searchFieldDidStartSearching:(NSSearchField *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3CF5);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3CF7);
		if (call_super && rv) {
			struct objc_super super = {  rv, [AppKit_NSTextField__NSTextFieldDelegate class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSSharingServicePicker__NSSharingServicePickerDelegate : NSObject<NSSharingServicePickerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(id) sharingServicePicker:(NSSharingServicePicker *)p0 delegateForSharingService:(NSSharingService *)p1;
	-(void) sharingServicePicker:(NSSharingServicePicker *)p0 didChooseSharingService:(NSSharingService *)p1;
	-(NSArray *) sharingServicePicker:(NSSharingServicePicker *)p0 sharingServicesForItems:(NSArray *)p1 proposedSharingServices:(NSArray *)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSSharingServicePicker__NSSharingServicePickerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(id) sharingServicePicker:(NSSharingServicePicker *)p0 delegateForSharingService:(NSSharingService *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_157 (self, _cmd, &managed_method, p0, p1, 0x3CFD);
	}

	-(void) sharingServicePicker:(NSSharingServicePicker *)p0 didChooseSharingService:(NSSharingService *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3CFF);
	}

	-(NSArray *) sharingServicePicker:(NSSharingServicePicker *)p0 sharingServicesForItems:(NSArray *)p1 proposedSharingServices:(NSArray *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_158 (self, _cmd, &managed_method, p0, p1, p2, 0x3D01);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3D03);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSTabView__NSTabViewDelegate : NSObject<NSTabViewDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) tabView:(NSTabView *)p0 didSelectTabViewItem:(NSTabViewItem *)p1;
	-(void) tabViewDidChangeNumberOfTabViewItems:(NSTabView *)p0;
	-(BOOL) tabView:(NSTabView *)p0 shouldSelectTabViewItem:(NSTabViewItem *)p1;
	-(void) tabView:(NSTabView *)p0 willSelectTabViewItem:(NSTabViewItem *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSTabView__NSTabViewDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) tabView:(NSTabView *)p0 didSelectTabViewItem:(NSTabViewItem *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3D0F);
	}

	-(void) tabViewDidChangeNumberOfTabViewItems:(NSTabView *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3D11);
	}

	-(BOOL) tabView:(NSTabView *)p0 shouldSelectTabViewItem:(NSTabViewItem *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_61 (self, _cmd, &managed_method, p0, p1, 0x3D13);
	}

	-(void) tabView:(NSTabView *)p0 willSelectTabViewItem:(NSTabViewItem *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3D15);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3D17);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSText__NSTextDelegate : NSObject<NSTextDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) textDidBeginEditing:(NSNotification *)p0;
	-(void) textDidChange:(NSNotification *)p0;
	-(void) textDidEndEditing:(NSNotification *)p0;
	-(BOOL) textShouldBeginEditing:(NSText *)p0;
	-(BOOL) textShouldEndEditing:(NSText *)p0;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSText__NSTextDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) textDidBeginEditing:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3D1D);
	}

	-(void) textDidChange:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3D1F);
	}

	-(void) textDidEndEditing:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3D21);
	}

	-(BOOL) textShouldBeginEditing:(NSText *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3D23);
	}

	-(BOOL) textShouldEndEditing:(NSText *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_26 (self, _cmd, &managed_method, p0, 0x3D25);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3D27);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSTextView__NSTextViewDelegate : AppKit_NSText__NSTextDelegate<NSTextViewDelegate, NSTextDelegate> {
}
	-(void) textView:(NSTextView *)p0 clickedOnCell:(NSTextAttachmentCell *)p1 inRect:(CGRect)p2 atIndex:(void *)p3;
	-(void) textView:(NSTextView *)p0 doubleClickedOnCell:(NSTextAttachmentCell *)p1 inRect:(CGRect)p2 atIndex:(void *)p3;
	-(void) textViewDidChangeSelection:(NSNotification *)p0;
	-(void) textViewDidChangeTypingAttributes:(NSNotification *)p0;
	-(NSArray *) textView:(NSTextView *)p0 didCheckTextInRange:(NSRange)p1 types:(unsigned long long)p2 options:(NSDictionary *)p3 results:(NSArray *)p4 orthography:(NSOrthography *)p5 wordCount:(void *)p6;
	-(BOOL) textView:(NSTextView *)p0 doCommandBySelector:(SEL)p1;
	-(void) textView:(NSTextView *)p0 draggedCell:(NSTextAttachmentCell *)p1 inRect:(CGRect)p2 event:(NSEvent *)p3 atIndex:(void *)p4;
	-(NSArray *) textView:(NSTextView *)p0 candidatesForSelectedRange:(NSRange)p1;
	-(NSArray *) textView:(NSTextView *)p0 completions:(NSArray *)p1 forPartialWordRange:(NSRange)p2 indexOfSelectedItem:(void **)p3;
	-(NSArray *) textView:(NSTextView *)p0 candidates:(NSArray *)p1 forSelectedRange:(NSRange)p2;
	-(NSUndoManager *) undoManagerForTextView:(NSTextView *)p0;
	-(NSArray *) textView:(NSTextView *)p0 writablePasteboardTypesForCell:(NSTextAttachmentCell *)p1 atIndex:(void *)p2;
	-(BOOL) textView:(NSTextView *)p0 clickedOnLink:(NSObject *)p1 atIndex:(void *)p2;
	-(NSMenu *) textView:(NSTextView *)p0 menu:(NSMenu *)p1 forEvent:(NSEvent *)p2 atIndex:(void *)p3;
	-(BOOL) textView:(NSTextView *)p0 shouldChangeTextInRange:(NSRange)p1 replacementString:(NSString *)p2;
	-(BOOL) textView:(NSTextView *)p0 shouldChangeTextInRanges:(NSArray *)p1 replacementStrings:(NSArray *)p2;
	-(NSDictionary *) textView:(NSTextView *)p0 shouldChangeTypingAttributes:(NSDictionary *)p1 toAttributes:(NSDictionary *)p2;
	-(BOOL) textView:(NSTextView *)p0 shouldSelectCandidateAtIndex:(void *)p1;
	-(void *) textView:(NSTextView *)p0 shouldSetSpellingState:(void *)p1 range:(NSRange)p2;
	-(NSArray *) textView:(NSTextView *)p0 shouldUpdateTouchBarItemIdentifiers:(NSArray *)p1;
	-(NSRange) textView:(NSTextView *)p0 willChangeSelectionFromCharacterRange:(NSRange)p1 toCharacterRange:(NSRange)p2;
	-(NSArray *) textView:(NSTextView *)p0 willChangeSelectionFromCharacterRanges:(NSArray *)p1 toCharacterRanges:(NSArray *)p2;
	-(NSDictionary *) textView:(NSTextView *)p0 willCheckTextInRange:(NSRange)p1 options:(NSDictionary *)p2 types:(unsigned long long)p3;
	-(NSString *) textView:(NSTextView *)p0 willDisplayToolTip:(NSString *)p1 forCharacterAtIndex:(void *)p2;
	-(BOOL) textView:(NSTextView *)p0 writeCell:(NSTextAttachmentCell *)p1 atIndex:(void *)p2 toPasteboard:(NSPasteboard *)p3 type:(NSString *)p4;
	-(BOOL) respondsToSelector:(SEL)p0;
	-(id) init;
@end

@implementation AppKit_NSTextView__NSTextViewDelegate {
}

	-(void) textView:(NSTextView *)p0 clickedOnCell:(NSTextAttachmentCell *)p1 inRect:(CGRect)p2 atIndex:(void *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_159 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3D31);
	}

	-(void) textView:(NSTextView *)p0 doubleClickedOnCell:(NSTextAttachmentCell *)p1 inRect:(CGRect)p2 atIndex:(void *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_159 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3D33);
	}

	-(void) textViewDidChangeSelection:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3D35);
	}

	-(void) textViewDidChangeTypingAttributes:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3D37);
	}

	-(NSArray *) textView:(NSTextView *)p0 didCheckTextInRange:(NSRange)p1 types:(unsigned long long)p2 options:(NSDictionary *)p3 results:(NSArray *)p4 orthography:(NSOrthography *)p5 wordCount:(void *)p6
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_160 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, p5, p6, 0x3D39);
	}

	-(BOOL) textView:(NSTextView *)p0 doCommandBySelector:(SEL)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_161 (self, _cmd, &managed_method, p0, p1, 0x3D3B);
	}

	-(void) textView:(NSTextView *)p0 draggedCell:(NSTextAttachmentCell *)p1 inRect:(CGRect)p2 event:(NSEvent *)p3 atIndex:(void *)p4
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_162 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, 0x3D3D);
	}

	-(NSArray *) textView:(NSTextView *)p0 candidatesForSelectedRange:(NSRange)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_163 (self, _cmd, &managed_method, p0, p1, 0x3D3F);
	}

	-(NSArray *) textView:(NSTextView *)p0 completions:(NSArray *)p1 forPartialWordRange:(NSRange)p2 indexOfSelectedItem:(void **)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_164 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3D41);
	}

	-(NSArray *) textView:(NSTextView *)p0 candidates:(NSArray *)p1 forSelectedRange:(NSRange)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_165 (self, _cmd, &managed_method, p0, p1, p2, 0x3D43);
	}

	-(NSUndoManager *) undoManagerForTextView:(NSTextView *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_68 (self, _cmd, &managed_method, p0, 0x3D45);
	}

	-(NSArray *) textView:(NSTextView *)p0 writablePasteboardTypesForCell:(NSTextAttachmentCell *)p1 atIndex:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_166 (self, _cmd, &managed_method, p0, p1, p2, 0x3D47);
	}

	-(BOOL) textView:(NSTextView *)p0 clickedOnLink:(NSObject *)p1 atIndex:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_128 (self, _cmd, &managed_method, p0, p1, p2, 0x3D49);
	}

	-(NSMenu *) textView:(NSTextView *)p0 menu:(NSMenu *)p1 forEvent:(NSEvent *)p2 atIndex:(void *)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_167 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3D4B);
	}

	-(BOOL) textView:(NSTextView *)p0 shouldChangeTextInRange:(NSRange)p1 replacementString:(NSString *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_168 (self, _cmd, &managed_method, p0, p1, p2, 0x3D4D);
	}

	-(BOOL) textView:(NSTextView *)p0 shouldChangeTextInRanges:(NSArray *)p1 replacementStrings:(NSArray *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_169 (self, _cmd, &managed_method, p0, p1, p2, 0x3D4F);
	}

	-(NSDictionary *) textView:(NSTextView *)p0 shouldChangeTypingAttributes:(NSDictionary *)p1 toAttributes:(NSDictionary *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_69 (self, _cmd, &managed_method, p0, p1, p2, 0x3D51);
	}

	-(BOOL) textView:(NSTextView *)p0 shouldSelectCandidateAtIndex:(void *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_33 (self, _cmd, &managed_method, p0, p1, 0x3D53);
	}

	-(void *) textView:(NSTextView *)p0 shouldSetSpellingState:(void *)p1 range:(NSRange)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_170 (self, _cmd, &managed_method, p0, p1, p2, 0x3D55);
	}

	-(NSArray *) textView:(NSTextView *)p0 shouldUpdateTouchBarItemIdentifiers:(NSArray *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_171 (self, _cmd, &managed_method, p0, p1, 0x3D57);
	}

	-(NSRange) textView:(NSTextView *)p0 willChangeSelectionFromCharacterRange:(NSRange)p1 toCharacterRange:(NSRange)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_172 (self, _cmd, &managed_method, p0, p1, p2, 0x3D59);
	}

	-(NSArray *) textView:(NSTextView *)p0 willChangeSelectionFromCharacterRanges:(NSArray *)p1 toCharacterRanges:(NSArray *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_158 (self, _cmd, &managed_method, p0, p1, p2, 0x3D5B);
	}

	-(NSDictionary *) textView:(NSTextView *)p0 willCheckTextInRange:(NSRange)p1 options:(NSDictionary *)p2 types:(unsigned long long)p3
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_173 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3D5D);
	}

	-(NSString *) textView:(NSTextView *)p0 willDisplayToolTip:(NSString *)p1 forCharacterAtIndex:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_174 (self, _cmd, &managed_method, p0, p1, p2, 0x3D5F);
	}

	-(BOOL) textView:(NSTextView *)p0 writeCell:(NSTextAttachmentCell *)p1 atIndex:(void *)p2 toPasteboard:(NSPasteboard *)p3 type:(NSString *)p4
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_175 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, 0x3D61);
	}

	-(BOOL) respondsToSelector:(SEL)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_108 (self, _cmd, &managed_method, p0, 0x3D63);
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3D65);
		if (call_super && rv) {
			struct objc_super super = {  rv, [AppKit_NSText__NSTextDelegate class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSToolbar__NSToolbarDelegate : NSObject<NSToolbarDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSArray *) toolbarAllowedItemIdentifiers:(NSToolbar *)p0;
	-(NSArray *) toolbarDefaultItemIdentifiers:(NSToolbar *)p0;
	-(void) toolbarDidRemoveItem:(NSNotification *)p0;
	-(BOOL) toolbar:(NSToolbar *)p0 itemIdentifier:(NSString *)p1 canBeInsertedAtIndex:(void *)p2;
	-(NSSet <NSString *>*) toolbarImmovableItemIdentifiers:(NSToolbar *)p0;
	-(NSArray *) toolbarSelectableItemIdentifiers:(NSToolbar *)p0;
	-(void) toolbarWillAddItem:(NSNotification *)p0;
	-(NSToolbarItem *) toolbar:(NSToolbar *)p0 itemForItemIdentifier:(NSString *)p1 willBeInsertedIntoToolbar:(BOOL)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSToolbar__NSToolbarDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(NSArray *) toolbarAllowedItemIdentifiers:(NSToolbar *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_176 (self, _cmd, &managed_method, p0, 0x3D6B);
	}

	-(NSArray *) toolbarDefaultItemIdentifiers:(NSToolbar *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_176 (self, _cmd, &managed_method, p0, 0x3D6D);
	}

	-(void) toolbarDidRemoveItem:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3D6F);
	}

	-(BOOL) toolbar:(NSToolbar *)p0 itemIdentifier:(NSString *)p1 canBeInsertedAtIndex:(void *)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_177 (self, _cmd, &managed_method, p0, p1, p2, 0x3D71);
	}

	-(NSSet <NSString *>*) toolbarImmovableItemIdentifiers:(NSToolbar *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_68 (self, _cmd, &managed_method, p0, 0x3D73);
	}

	-(NSArray *) toolbarSelectableItemIdentifiers:(NSToolbar *)p0
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_176 (self, _cmd, &managed_method, p0, 0x3D75);
	}

	-(void) toolbarWillAddItem:(NSNotification *)p0
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_2 (self, _cmd, &managed_method, p0, 0x3D77);
	}

	-(NSToolbarItem *) toolbar:(NSToolbar *)p0 itemForItemIdentifier:(NSString *)p1 willBeInsertedIntoToolbar:(BOOL)p2
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_178 (self, _cmd, &managed_method, p0, p1, p2, 0x3D79);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3D7B);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AppKit_NSTouchBar__NSTouchBarDelegate : NSObject<NSTouchBarDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(NSTouchBarItem *) touchBar:(NSTouchBar *)p0 makeItemForIdentifier:(NSString *)p1;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AppKit_NSTouchBar__NSTouchBarDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(NSTouchBarItem *) touchBar:(NSTouchBar *)p0 makeItemForIdentifier:(NSString *)p1
	{
		static MonoMethod *managed_method = NULL;
		return native_to_managed_trampoline_150 (self, _cmd, &managed_method, p0, p1, 0x3D81);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3D83);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface AVFoundation_AVCaptureFileOutput_recordingProxy : NSObject<AVCaptureFileOutputRecordingDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) captureOutput:(AVCaptureFileOutput *)p0 didStartRecordingToOutputFileAtURL:(NSURL *)p1 fromConnections:(NSArray *)p2;
	-(void) captureOutput:(AVCaptureFileOutput *)p0 didFinishRecordingToOutputFileAtURL:(NSURL *)p1 fromConnections:(NSArray *)p2 error:(NSError *)p3;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation AVFoundation_AVCaptureFileOutput_recordingProxy {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) captureOutput:(AVCaptureFileOutput *)p0 didStartRecordingToOutputFileAtURL:(NSURL *)p1 fromConnections:(NSArray *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_179 (self, _cmd, &managed_method, p0, p1, p2, 0x3D8B);
	}

	-(void) captureOutput:(AVCaptureFileOutput *)p0 didFinishRecordingToOutputFileAtURL:(NSURL *)p1 fromConnections:(NSArray *)p2 error:(NSError *)p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_180 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3D8D);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

@interface AVFoundation_AVSpeechSynthesizer__AVSpeechSynthesizerDelegate : NSObject<AVSpeechSynthesizerDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 didCancelSpeechUtterance:(AVSpeechUtterance *)p1;
	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 didContinueSpeechUtterance:(AVSpeechUtterance *)p1;
	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 didFinishSpeechUtterance:(AVSpeechUtterance *)p1;
	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 didPauseSpeechUtterance:(AVSpeechUtterance *)p1;
	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 didStartSpeechUtterance:(AVSpeechUtterance *)p1;
	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 willSpeakRangeOfSpeechString:(NSRange)p1 utterance:(AVSpeechUtterance *)p2;
	-(BOOL) conformsToProtocol:(void *)p0;
	-(id) init;
@end

@implementation AVFoundation_AVSpeechSynthesizer__AVSpeechSynthesizerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 didCancelSpeechUtterance:(AVSpeechUtterance *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3DD3);
	}

	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 didContinueSpeechUtterance:(AVSpeechUtterance *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3DD5);
	}

	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 didFinishSpeechUtterance:(AVSpeechUtterance *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3DD7);
	}

	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 didPauseSpeechUtterance:(AVSpeechUtterance *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3DD9);
	}

	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 didStartSpeechUtterance:(AVSpeechUtterance *)p1
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_29 (self, _cmd, &managed_method, p0, p1, 0x3DDB);
	}

	-(void) speechSynthesizer:(AVSpeechSynthesizer *)p0 willSpeakRangeOfSpeechString:(NSRange)p1 utterance:(AVSpeechUtterance *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_181 (self, _cmd, &managed_method, p0, p1, p2, 0x3DDD);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}

	-(id) init
	{
		static MonoMethod *managed_method = NULL;
		bool call_super = false;
		id rv = native_to_managed_trampoline_1 (self, _cmd, &managed_method, &call_super, 0x3DDF);
		if (call_super && rv) {
			struct objc_super super = {  rv, [NSObject class] };
			rv = ((id (*)(objc_super*, SEL)) objc_msgSendSuper) (&super, @selector (init));
		}
		return rv;
	}
@end

@interface Foundation_NSUrlSessionHandler_NSUrlSessionHandlerDelegate : NSObject<NSURLSessionDataDelegate, NSURLSessionTaskDelegate, NSURLSessionDelegate> {
}
	-(void) release;
	-(id) retain;
	-(GCHandle) xamarinGetGCHandle;
	-(bool) xamarinSetGCHandle: (GCHandle) gchandle flags: (enum XamarinGCHandleFlags) flags;
	-(enum XamarinGCHandleFlags) xamarinGetFlags;
	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags;
	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 didReceiveResponse:(NSURLResponse *)p2 completionHandler:(void (^)(void *))p3;
	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 didReceiveData:(NSData *)p2;
	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 didCompleteWithError:(NSError *)p2;
	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 willCacheResponse:(NSCachedURLResponse *)p2 completionHandler:(void (^)(void *))p3;
	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 willPerformHTTPRedirection:(NSHTTPURLResponse *)p2 newRequest:(NSURLRequest *)p3 completionHandler:(void (^)(void *))p4;
	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 didReceiveChallenge:(NSURLAuthenticationChallenge *)p2 completionHandler:(void (^)(void *, void *))p3;
	-(BOOL) conformsToProtocol:(void *)p0;
@end

@implementation Foundation_NSUrlSessionHandler_NSUrlSessionHandlerDelegate {
	XamarinObject __monoObjectGCHandle;
}
	-(void) release
	{
		xamarin_release_trampoline (self, _cmd);
	}

	-(id) retain
	{
		return xamarin_retain_trampoline (self, _cmd);
	}

	-(GCHandle) xamarinGetGCHandle
	{
		return __monoObjectGCHandle.gc_handle;
	}

	-(bool) xamarinSetGCHandle: (GCHandle) gc_handle flags: (enum XamarinGCHandleFlags) flags
	{
		if (((flags & XamarinGCHandleFlags_InitialSet) == XamarinGCHandleFlags_InitialSet) && __monoObjectGCHandle.gc_handle != INVALID_GCHANDLE) {
			return false;
		}
		flags = (enum XamarinGCHandleFlags) (flags & ~XamarinGCHandleFlags_InitialSet);
		__monoObjectGCHandle.gc_handle = gc_handle;
		__monoObjectGCHandle.flags = flags;
		__monoObjectGCHandle.native_object = self;
		return true;
	}

	-(enum XamarinGCHandleFlags) xamarinGetFlags
	{
		return __monoObjectGCHandle.flags;
	}

	-(void) xamarinSetFlags: (enum XamarinGCHandleFlags) flags
	{
		__monoObjectGCHandle.flags = flags;
	}


	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 didReceiveResponse:(NSURLResponse *)p2 completionHandler:(void (^)(void *))p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_182 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3DE5);
	}

	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 didReceiveData:(NSData *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3DE9);
	}

	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 didCompleteWithError:(NSError *)p2
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_57 (self, _cmd, &managed_method, p0, p1, p2, 0x3DEB);
	}

	-(void) URLSession:(NSURLSession *)p0 dataTask:(NSURLSessionDataTask *)p1 willCacheResponse:(NSCachedURLResponse *)p2 completionHandler:(void (^)(void *))p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_183 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3DED);
	}

	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 willPerformHTTPRedirection:(NSHTTPURLResponse *)p2 newRequest:(NSURLRequest *)p3 completionHandler:(void (^)(void *))p4
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_184 (self, _cmd, &managed_method, p0, p1, p2, p3, p4, 0x3DF1);
	}

	-(void) URLSession:(NSURLSession *)p0 task:(NSURLSessionTask *)p1 didReceiveChallenge:(NSURLAuthenticationChallenge *)p2 completionHandler:(void (^)(void *, void *))p3
	{
		static MonoMethod *managed_method = NULL;
		native_to_managed_trampoline_185 (self, _cmd, &managed_method, p0, p1, p2, p3, 0x3DF5);
	}
	-(BOOL) conformsToProtocol: (void *) protocol
	{
		GCHandle exception_gchandle;
		BOOL rv = xamarin_invoke_conforms_to_protocol (self, (Protocol *) protocol, &exception_gchandle);
		xamarin_process_managed_exception_gchandle (exception_gchandle);
		return rv;
	}
@end

	static MTClassMap __xamarin_class_map [] = {
		{ NULL, 0x1 /* #0 'NSObject' => 'Foundation.NSObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7 /* #1 'Microsoft_macOS__AppKit_NSApplicationDelegate' => 'AppKit.NSApplicationDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x700 /* #2 'AppDelegate' => 'CIS329_Exercise01.AppDelegate, CIS329_Exercise01' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x17 /* #3 'NSResponder' => 'AppKit.NSResponder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x29 /* #4 'NSViewController' => 'AppKit.NSViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x800 /* #5 'ViewController' => 'CIS329_Exercise01.ViewController, CIS329_Exercise01' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x37 /* #6 'UTType' => 'UniformTypeIdentifiers.UTType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39 /* #7 'THCredentials' => 'ThreadNetwork.THCredentials, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B /* #8 'SFAcousticFeature' => 'Speech.SFAcousticFeature, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D /* #9 'SFSpeechRecognitionRequest' => 'Speech.SFSpeechRecognitionRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3F /* #10 'SFSpeechAudioBufferRecognitionRequest' => 'Speech.SFSpeechAudioBufferRecognitionRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x41 /* #11 'SFSpeechRecognitionMetadata' => 'Speech.SFSpeechRecognitionMetadata, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x43 /* #12 'SFSpeechRecognitionResult' => 'Speech.SFSpeechRecognitionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x45 /* #13 'SFSpeechRecognitionTask' => 'Speech.SFSpeechRecognitionTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4B /* #14 'Microsoft_macOS__Speech_SFSpeechRecognitionTaskDelegate' => 'Speech.SFSpeechRecognitionTaskDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4F /* #15 'SFSpeechRecognizer' => 'Speech.SFSpeechRecognizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x55 /* #16 'Microsoft_macOS__Speech_SFSpeechRecognizerDelegate' => 'Speech.SFSpeechRecognizerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x59 /* #17 'SFSpeechURLRecognitionRequest' => 'Speech.SFSpeechUrlRecognitionRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5B /* #18 'SFTranscription' => 'Speech.SFTranscription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5D /* #19 'SFTranscriptionSegment' => 'Speech.SFTranscriptionSegment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5F /* #20 'SFVoiceAnalytics' => 'Speech.SFVoiceAnalytics, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x61 /* #21 'SNAudioStreamAnalyzer' => 'SoundAnalysis.SNAudioStreamAnalyzer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x63 /* #22 'SNClassification' => 'SoundAnalysis.SNClassification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x69 /* #23 'SNClassificationResult' => 'SoundAnalysis.SNClassificationResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6F /* #24 'SNClassifySoundRequest' => 'SoundAnalysis.SNClassifySoundRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x75 /* #25 'SHCatalog' => 'ShazamKit.SHCatalog, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x77 /* #26 'SHCustomCatalog' => 'ShazamKit.SHCustomCatalog, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x79 /* #27 'SHMatch' => 'ShazamKit.SHMatch, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7B /* #28 'SHMediaItem' => 'ShazamKit.SHMediaItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7D /* #29 'SHMatchedMediaItem' => 'ShazamKit.SHMatchedMediaItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7F /* #30 'SHRange' => 'ShazamKit.SHRange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x81 /* #31 'SHSession' => 'ShazamKit.SHSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x87 /* #32 'Microsoft_macOS__ShazamKit_SHSessionDelegate' => 'ShazamKit.SHSessionDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8B /* #33 'SHSignature' => 'ShazamKit.SHSignature, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9D /* #34 'NSView' => 'AppKit.NSView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9F /* #35 'SWAttributionView' => 'SharedWithYou.SWAttributionView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA1 /* #36 'SWHighlight' => 'SharedWithYou.SWHighlight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA3 /* #37 'SWCollaborationHighlight' => 'SharedWithYou.SWCollaborationHighlight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA5 /* #38 'SWCollaborationView' => 'SharedWithYou.SWCollaborationView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAB /* #39 'Microsoft_macOS__SharedWithYou_SWCollaborationViewDelegate' => 'SharedWithYou.SWCollaborationViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB3 /* #40 'Microsoft_macOS__SharedWithYou_SWHighlightCenterDelegate' => 'SharedWithYou.SWHighlightCenterDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBB /* #41 'SWHighlightChangeEvent' => 'SharedWithYou.SWHighlightChangeEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBD /* #42 'SWHighlightMembershipEvent' => 'SharedWithYou.SWHighlightMembershipEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBF /* #43 'SWHighlightMentionEvent' => 'SharedWithYou.SWHighlightMentionEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC1 /* #44 'SWHighlightPersistenceEvent' => 'SharedWithYou.SWHighlightPersistenceEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC3 /* #45 'SWRemoveParticipantAlert' => 'SharedWithYou.SWRemoveParticipantAlert, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC5 /* #46 'STScreenTimeConfiguration' => 'ScreenTime.STScreenTimeConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC7 /* #47 'STScreenTimeConfigurationObserver' => 'ScreenTime.STScreenTimeConfigurationObserver, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC9 /* #48 'STWebHistory' => 'ScreenTime.STWebHistory, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCB /* #49 'STWebpageController' => 'ScreenTime.STWebpageController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCD /* #50 'SFContentBlockerState' => 'SafariServices.SFContentBlockerState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD3 /* #51 'SFSafariExtensionViewController' => 'SafariServices.SFSafariExtensionViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD5 /* #52 'SFSafariPageProperties' => 'SafariServices.SFSafariPageProperties, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD7 /* #53 'SFSafariToolbarItem' => 'SafariServices.SFSafariToolbarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD9 /* #54 'SFUniversalLink' => 'SafariServices.SFUniversalLink, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDB /* #55 'RPBroadcastActivityController' => 'ReplayKit.RPBroadcastActivityController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE1 /* #56 'Microsoft_macOS__ReplayKit_RPBroadcastActivityControllerDelegate' => 'ReplayKit.RPBroadcastActivityControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE9 /* #57 'Microsoft_macOS__ReplayKit_RPBroadcastControllerDelegate' => 'ReplayKit.RPBroadcastControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xED /* #58 'RPBroadcastHandler' => 'ReplayKit.RPBroadcastHandler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEF /* #59 'RPBroadcastSampleHandler' => 'ReplayKit.RPBroadcastSampleHandler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF1 /* #60 'RPPreviewViewController' => 'ReplayKit.RPPreviewViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF7 /* #61 'Microsoft_macOS__ReplayKit_RPPreviewViewControllerDelegate' => 'ReplayKit.RPPreviewViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFF /* #62 'Microsoft_macOS__ReplayKit_RPScreenRecorderDelegate' => 'ReplayKit.RPScreenRecorderDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x103 /* #63 'QLFileThumbnailRequest' => 'QuickLookThumbnailing.QLFileThumbnailRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x105 /* #64 'QLThumbnailGenerationRequest' => 'QuickLookThumbnailing.QLThumbnailGenerationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x107 /* #65 'QLThumbnailProvider' => 'QuickLookThumbnailing.QLThumbnailProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x109 /* #66 'QLThumbnailReply' => 'QuickLookThumbnailing.QLThumbnailReply, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10B /* #67 'QLThumbnailRepresentation' => 'QuickLookThumbnailing.QLThumbnailRepresentation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10D /* #68 'QCComposition' => 'QuartzComposer.QCComposition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x113 /* #69 'CALayer' => 'CoreAnimation.CALayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x115 /* #70 'CAOpenGLLayer' => 'CoreAnimation.CAOpenGLLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x117 /* #71 'QCCompositionLayer' => 'QuartzComposer.QCCompositionLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x119 /* #72 'QCCompositionRepository' => 'QuartzComposer.QCCompositionRepository, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11B /* #73 'PKPushCredentials' => 'PushKit.PKPushCredentials, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11D /* #74 'PKPushPayload' => 'PushKit.PKPushPayload, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11F /* #75 'PKPushRegistry' => 'PushKit.PKPushRegistry, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x125 /* #76 'Microsoft_macOS__PushKit_PKPushRegistryDelegate' => 'PushKit.PKPushRegistryDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12D /* #77 'PHLivePhotoView' => 'PhotosUI.PHLivePhotoView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x133 /* #78 'Microsoft_macOS__PhotosUI_PHLivePhotoViewDelegate' => 'PhotosUI.PHLivePhotoViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x137 /* #79 'PHPickerConfiguration' => 'PhotosUI.PHPickerConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x139 /* #80 'PHPickerFilter' => 'PhotosUI.PHPickerFilter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13B /* #81 'PHPickerResult' => 'PhotosUI.PHPickerResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13D /* #82 'PHPickerViewController' => 'PhotosUI.PHPickerViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x143 /* #83 'Microsoft_macOS__PhotosUI_PHPickerViewControllerDelegate' => 'PhotosUI.PHPickerViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x147 /* #84 'PHProjectElement' => 'PhotosUI.PHProjectElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x149 /* #85 'PHProjectAssetElement' => 'PhotosUI.PHProjectAssetElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14B /* #86 'NSExtensionContext' => 'Foundation.NSExtensionContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14D /* #87 'PHProjectExtensionContext' => 'PhotosUI.PHProjectExtensionContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x153 /* #88 'PHProjectInfo' => 'PhotosUI.PHProjectInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x155 /* #89 'PHProjectJournalEntryElement' => 'PhotosUI.PHProjectJournalEntryElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x157 /* #90 'PHProjectMapElement' => 'PhotosUI.PHProjectMapElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x159 /* #91 'PHProjectRegionOfInterest' => 'PhotosUI.PHProjectRegionOfInterest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15B /* #92 'PHProjectSection' => 'PhotosUI.PHProjectSection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15D /* #93 'PHProjectSectionContent' => 'PhotosUI.PHProjectSectionContent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15F /* #94 'PHProjectTextElement' => 'PhotosUI.PHProjectTextElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x161 /* #95 'PHProjectTypeDescription' => 'PhotosUI.PHProjectTypeDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x167 /* #96 'Microsoft_macOS__PhotosUI_PHProjectTypeDescriptionDataSource' => 'PhotosUI.PHProjectTypeDescriptionDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16F /* #97 'PHASEDefinition' => 'Phase.PhaseDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x171 /* #98 'PHASEMixerDefinition' => 'Phase.PhaseMixerDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x173 /* #99 'PHASEAmbientMixerDefinition' => 'Phase.PhaseAmbientMixerDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x175 /* #100 'PHASEAsset' => 'Phase.PhaseAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x177 /* #101 'PHASESoundEventNodeDefinition' => 'Phase.PhaseSoundEventNodeDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x179 /* #102 'PHASEBlendNodeDefinition' => 'Phase.PhaseBlendNodeDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17B /* #103 'PHASEDirectivityModelParameters' => 'Phase.PhaseDirectivityModelParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17D /* #104 'PHASECardioidDirectivityModelParameters' => 'Phase.PhaseCardioidDirectivityModelParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17F /* #105 'PHASECardioidDirectivityModelSubbandParameters' => 'Phase.PhaseCardioidDirectivityModelSubbandParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x181 /* #106 'PHASEChannelMixerDefinition' => 'Phase.PhaseChannelMixerDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x183 /* #107 'PHASEConeDirectivityModelParameters' => 'Phase.PhaseConeDirectivityModelParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x185 /* #108 'PHASEConeDirectivityModelSubbandParameters' => 'Phase.PhaseConeDirectivityModelSubbandParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x187 /* #109 'PHASEContainerNodeDefinition' => 'Phase.PhaseContainerNodeDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x189 /* #110 'PHASEDistanceModelFadeOutParameters' => 'Phase.PhaseDistanceModelFadeOutParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x18B /* #111 'PHASEDistanceModelParameters' => 'Phase.PhaseDistanceModelParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x18D /* #112 'PHASEDucker' => 'Phase.PhaseDucker, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x18F /* #113 'PHASEEngine' => 'Phase.PhaseEngine, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x191 /* #114 'PHASEEnvelope' => 'Phase.PhaseEnvelope, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x193 /* #115 'PHASEEnvelopeDistanceModelParameters' => 'Phase.PhaseEnvelopeDistanceModelParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x195 /* #116 'PHASEEnvelopeSegment' => 'Phase.PhaseEnvelopeSegment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x197 /* #117 'PHASEGeneratorNodeDefinition' => 'Phase.PhaseGeneratorNodeDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x199 /* #118 'PHASEGeometricSpreadingDistanceModelParameters' => 'Phase.PhaseGeometricSpreadingDistanceModelParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x19B /* #119 'PHASEGlobalMetaParameterAsset' => 'Phase.PhaseGlobalMetaParameterAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x19D /* #120 'PHASEGroup' => 'Phase.PhaseGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x19F /* #121 'PHASEGroupPreset' => 'Phase.PhaseGroupPreset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1A1 /* #122 'PHASEGroupPresetSetting' => 'Phase.PhaseGroupPresetSetting, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1A3 /* #123 'PHASEObject' => 'Phase.PhaseObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1A5 /* #124 'PHASEListener' => 'Phase.PhaseListener, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1A7 /* #125 'PHASEMetaParameterDefinition' => 'Phase.PhaseMetaParameterDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1A9 /* #126 'PHASENumberMetaParameterDefinition' => 'Phase.PhaseNumberMetaParameterDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1AB /* #127 'PHASEMappedMetaParameterDefinition' => 'Phase.PhaseMappedMetaParameterDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1AD /* #128 'PHASEMaterial' => 'Phase.PhaseMaterial, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1AF /* #129 'PHASEMedium' => 'Phase.PhaseMedium, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1B1 /* #130 'PHASEMetaParameter' => 'Phase.PhaseMetaParameter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1B3 /* #131 'PHASEMixer' => 'Phase.PhaseMixer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1B5 /* #132 'PHASEMixerParameters' => 'Phase.PhaseMixerParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1B7 /* #133 'PHASENumberMetaParameter' => 'Phase.PhaseNumberMetaParameter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1B9 /* #134 'PHASENumericPair' => 'Phase.PhaseNumericPair, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1BB /* #135 'PHASEOccluder' => 'Phase.PhaseOccluder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1BD /* #136 'PHASEPushStreamNodeDefinition' => 'Phase.PhasePushStreamNodeDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1BF /* #137 'PHASERandomNodeDefinition' => 'Phase.PhaseRandomNodeDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1C1 /* #138 'PHASESamplerNodeDefinition' => 'Phase.PhaseSamplerNodeDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1C3 /* #139 'PHASEShape' => 'Phase.PhaseShape, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1C5 /* #140 'PHASEShapeElement' => 'Phase.PhaseShapeElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1C7 /* #141 'PHASESoundAsset' => 'Phase.PhaseSoundAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1C9 /* #142 'PHASESoundEventNodeAsset' => 'Phase.PhaseSoundEventNodeAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1CB /* #143 'PHASESource' => 'Phase.PhaseSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1CD /* #144 'PHASESpatialMixerDefinition' => 'Phase.PhaseSpatialMixerDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1CF /* #145 'PHASESpatialPipeline' => 'Phase.PhaseSpatialPipeline, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1D1 /* #146 'PHASESpatialPipelineEntry' => 'Phase.PhaseSpatialPipelineEntry, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1D3 /* #147 'PHASEStringMetaParameter' => 'Phase.PhaseStringMetaParameter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1D5 /* #148 'PHASEStringMetaParameterDefinition' => 'Phase.PhaseStringMetaParameterDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1D7 /* #149 'PHASESwitchNodeDefinition' => 'Phase.PhaseSwitchNodeDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1D9 /* #150 'PKDrawing' => 'PencilKit.PKDrawing, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1DB /* #151 'PKTool' => 'PencilKit.PKTool, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1DD /* #152 'PKEraserTool' => 'PencilKit.PKEraserTool, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1DF /* #153 'PKFloatRange' => 'PencilKit.PKFloatRange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1E1 /* #154 'PKInk' => 'PencilKit.PKInk, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1E3 /* #155 'PKInkingTool' => 'PencilKit.PKInkingTool, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1E5 /* #156 'PKLassoTool' => 'PencilKit.PKLassoTool, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1E7 /* #157 'PKStroke' => 'PencilKit.PKStroke, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1E9 /* #158 'PKStrokePath' => 'PencilKit.PKStrokePath, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1EB /* #159 'PKStrokePoint' => 'PencilKit.PKStrokePoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1ED /* #160 'OSLogEntry' => 'OSLog.OSLogEntry, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1F3 /* #161 'OSLogEntryActivity' => 'OSLog.OSLogEntryActivity, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1F5 /* #162 'OSLogEntryBoundary' => 'OSLog.OSLogEntryBoundary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1FB /* #163 'OSLogEntryLog' => 'OSLog.OSLogEntryLog, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1FD /* #164 'OSLogEntrySignpost' => 'OSLog.OSLogEntrySignpost, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1FF /* #165 'NSEnumerator' => 'Foundation.NSEnumerator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x201 /* #166 'OSLogEnumerator' => 'OSLog.OSLogEnumerator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x203 /* #167 'OSLogMessageComponent' => 'OSLog.OSLogMessageComponent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x205 /* #168 'OSLogPosition' => 'OSLog.OSLogPosition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x207 /* #169 'OSLogStore' => 'OSLog.OSLogStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x209 /* #170 'NCWidgetController' => 'NotificationCenter.NCWidgetController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x20F /* #171 'Microsoft_macOS__NotificationCenter_NCWidgetListViewDelegate' => 'NotificationCenter.NCWidgetListViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x217 /* #172 'Microsoft_macOS__NotificationCenter_NCWidgetProviding' => 'NotificationCenter.NCWidgetProviding, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x21F /* #173 'Microsoft_macOS__NotificationCenter_NCWidgetSearchViewDelegate' => 'NotificationCenter.NCWidgetSearchViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x223 /* #174 'MLMediaGroup' => 'MediaLibrary.MLMediaGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x225 /* #175 'MLMediaLibrary' => 'MediaLibrary.MLMediaLibrary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x227 /* #176 'MLMediaObject' => 'MediaLibrary.MLMediaObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x229 /* #177 'MLMediaSource' => 'MediaLibrary.MLMediaSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x22B /* #178 'MEAddressAnnotation' => 'MailKit.MEAddressAnnotation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x22D /* #179 'MEComposeContext' => 'MailKit.MEComposeContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x22F /* #180 'MEComposeSession' => 'MailKit.MEComposeSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x239 /* #181 'MEDecodedMessage' => 'MailKit.MEDecodedMessage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x23B /* #182 'MEDecodedMessageBanner' => 'MailKit.MEDecodedMessageBanner, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x23D /* #183 'MEEmailAddress' => 'MailKit.MEEmailAddress, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x23F /* #184 'MEEncodedOutgoingMessage' => 'MailKit.MEEncodedOutgoingMessage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x245 /* #185 'MEExtensionManager' => 'MailKit.MEExtensionManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x247 /* #186 'MEExtensionViewController' => 'MailKit.MEExtensionViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x249 /* #187 'MEMessage' => 'MailKit.MEMessage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x24B /* #188 'MEMessageAction' => 'MailKit.MEMessageAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x24D /* #189 'MEMessageActionDecision' => 'MailKit.MEMessageActionDecision, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x25B /* #190 'MEMessageEncodingResult' => 'MailKit.MEMessageEncodingResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x261 /* #191 'MEMessageSecurityInformation' => 'MailKit.MEMessageSecurityInformation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x263 /* #192 'MEMessageSigner' => 'MailKit.MEMessageSigner, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x265 /* #193 'MEOutgoingMessageEncodingStatus' => 'MailKit.MEOutgoingMessageEncodingStatus, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x267 /* #194 'LAAuthenticationView' => 'LocalAuthenticationEmbeddedUI.LAAuthenticationView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x269 /* #195 'LAAuthenticationRequirement' => 'LocalAuthentication.LAAuthenticationRequirement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x26B /* #196 'LABiometryFallbackRequirement' => 'LocalAuthentication.LABiometryFallbackRequirement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x26D /* #197 'LARight' => 'LocalAuthentication.LARight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x26F /* #198 'LAPersistedRight' => 'LocalAuthentication.LAPersistedRight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x271 /* #199 'LPLinkMetadata' => 'LinkPresentation.LPLinkMetadata, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x273 /* #200 'LPLinkView' => 'LinkPresentation.LPLinkView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x275 /* #201 'NSControl' => 'AppKit.NSControl, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x283 /* #202 'NSButton' => 'AppKit.NSButton, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x285 /* #203 'INUIAddVoiceShortcutButton' => 'IntentsUI.INUIAddVoiceShortcutButton, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x28B /* #204 'Microsoft_macOS__IntentsUI_INUIAddVoiceShortcutButtonDelegate' => 'IntentsUI.INUIAddVoiceShortcutButtonDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x28F /* #205 'INUIAddVoiceShortcutViewController' => 'IntentsUI.INUIAddVoiceShortcutViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x295 /* #206 'Microsoft_macOS__IntentsUI_INUIAddVoiceShortcutViewControllerDelegate' => 'IntentsUI.INUIAddVoiceShortcutViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x299 /* #207 'INUIEditVoiceShortcutViewController' => 'IntentsUI.INUIEditVoiceShortcutViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x29F /* #208 'Microsoft_macOS__IntentsUI_INUIEditVoiceShortcutViewControllerDelegate' => 'IntentsUI.INUIEditVoiceShortcutViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2A3 /* #209 'FPUIActionExtensionContext' => 'FileProviderUI.FPUIActionExtensionContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2A5 /* #210 'FPUIActionExtensionViewController' => 'FileProviderUI.FPUIActionExtensionViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2AB /* #211 'Microsoft_macOS__ExternalAccessory_EAAccessoryDelegate' => 'ExternalAccessory.EAAccessoryDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2AF /* #212 'EASession' => 'ExternalAccessory.EASession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2B1 /* #213 'EXAppExtensionBrowserViewController' => 'ExtensionKit.EXAppExtensionBrowserViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2B3 /* #214 'EXHostViewController' => 'ExtensionKit.EXHostViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2B9 /* #215 'Microsoft_macOS__ExtensionKit_EXHostViewControllerDelegate' => 'ExtensionKit.EXHostViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BD /* #216 'EPDeveloperTool' => 'ExecutionPolicy.EPDeveloperTool, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BF /* #217 'EPExecutionPolicy' => 'ExecutionPolicy.EPExecutionPolicy, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C1 /* #218 'AUAudioUnitViewConfiguration' => 'CoreAudioKit.AUAudioUnitViewConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C7 /* #219 'AUGenericView' => 'CoreAudioKit.AUGenericView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C9 /* #220 'AUGenericViewController' => 'CoreAudioKit.AUGenericViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CB /* #221 'AUPannerView' => 'CoreAudioKit.AUPannerView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CD /* #222 'AUViewController' => 'CoreAudioKit.AUViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CF /* #223 'NSWindowController' => 'AppKit.NSWindowController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D1 /* #224 'CABTLEMIDIWindowController' => 'CoreAudioKit.CABtleMidiWindowController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D3 /* #225 'CAInterDeviceAudioViewController' => 'CoreAudioKit.CAInterDeviceAudioViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D5 /* #226 'CANetworkBrowserWindowController' => 'CoreAudioKit.CANetworkBrowserWindowController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D7 /* #227 'CNContactPicker' => 'ContactsUI.CNContactPicker, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DD /* #228 'Microsoft_macOS__ContactsUI_CNContactPickerDelegate' => 'ContactsUI.CNContactPickerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E1 /* #229 'CNContactViewController' => 'ContactsUI.CNContactViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E3 /* #230 'CXProviderConfiguration' => 'CallKit.CXProviderConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E5 /* #231 'AEAssessmentApplication' => 'AutomaticAssessmentConfiguration.AEAssessmentApplication, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E7 /* #232 'AEAssessmentConfiguration' => 'AutomaticAssessmentConfiguration.AEAssessmentConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E9 /* #233 'AEAssessmentParticipantConfiguration' => 'AutomaticAssessmentConfiguration.AEAssessmentParticipantConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EB /* #234 'AEAssessmentSession' => 'AutomaticAssessmentConfiguration.AEAssessmentSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F1 /* #235 'Microsoft_macOS__AutomaticAssessmentConfiguration_AEAssessmentSessionDelegate' => 'AutomaticAssessmentConfiguration.AEAssessmentSessionDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F5 /* #236 'ASIdentifierManager' => 'AdSupport.ASIdentifierManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F7 /* #237 'AAAttribution' => 'AdServices.AAAttribution, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F9 /* #238 'AXBrailleMap' => 'Accessibility.AXBrailleMap, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x303 /* #239 'AXCategoricalDataAxisDescriptor' => 'Accessibility.AXCategoricalDataAxisDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x309 /* #240 'AXChartDescriptor' => 'Accessibility.AXChartDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30B /* #241 'AXCustomContent' => 'Accessibility.AXCustomContent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x311 /* #242 'AXDataPoint' => 'Accessibility.AXDataPoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x313 /* #243 'AXDataPointValue' => 'Accessibility.AXDataPointValue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x315 /* #244 'AXDataSeriesDescriptor' => 'Accessibility.AXDataSeriesDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x317 /* #245 'AXLiveAudioGraph' => 'Accessibility.AXLiveAudioGraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x319 /* #246 'AXNumericDataAxisDescriptor' => 'Accessibility.AXNumericDataAxisDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31B /* #247 'ITLibAlbum' => 'iTunesLibrary.ITLibAlbum, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31D /* #248 'ITLibArtist' => 'iTunesLibrary.ITLibArtist, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31F /* #249 'ITLibArtwork' => 'iTunesLibrary.ITLibArtwork, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x321 /* #250 'ITLibMediaEntity' => 'iTunesLibrary.ITLibMediaEntity, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x323 /* #251 'ITLibMediaItem' => 'iTunesLibrary.ITLibMediaItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x325 /* #252 'ITLibMediaItemVideoInfo' => 'iTunesLibrary.ITLibMediaItemVideoInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x327 /* #253 'ITLibPlaylist' => 'iTunesLibrary.ITLibPlaylist, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x329 /* #254 'ITLibrary' => 'iTunesLibrary.ITLibrary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32B /* #255 'VNCircle' => 'Vision.VNCircle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32D /* #256 'VNRequest' => 'Vision.VNRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32F /* #257 'VNImageBasedRequest' => 'Vision.VNImageBasedRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x331 /* #258 'VNDetectBarcodesRequest' => 'Vision.VNDetectBarcodesRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x337 /* #259 'VNObservation' => 'Vision.VNObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x339 /* #260 'VNFeaturePrintObservation' => 'Vision.VNFeaturePrintObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33B /* #261 'VNGeometryUtils' => 'Vision.VNGeometryUtils, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33D /* #262 'VNVector' => 'Vision.VNVector, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33F /* #263 'VNDetectedObjectObservation' => 'Vision.VNDetectedObjectObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x341 /* #264 'VNRectangleObservation' => 'Vision.VNRectangleObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x343 /* #265 'VNBarcodeObservation' => 'Vision.VNBarcodeObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x345 /* #266 'VNClassificationObservation' => 'Vision.VNClassificationObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x347 /* #267 'VNClassifyImageRequest' => 'Vision.VNClassifyImageRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x349 /* #268 'VNContour' => 'Vision.VNContour, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34B /* #269 'VNContoursObservation' => 'Vision.VNContoursObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34D /* #270 'VNCoreMLFeatureValueObservation' => 'Vision.VNCoreMLFeatureValueObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34F /* #271 'VNCoreMLModel' => 'Vision.VNCoreMLModel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x351 /* #272 'VNCoreMLRequest' => 'Vision.VNCoreMLRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x353 /* #273 'VNDetectContoursRequest' => 'Vision.VNDetectContoursRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x355 /* #274 'VNDetectDocumentSegmentationRequest' => 'Vision.VNDetectDocumentSegmentationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x357 /* #275 'VNPoint' => 'Vision.VNPoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x359 /* #276 'VNDetectedPoint' => 'Vision.VNDetectedPoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35F /* #277 'VNDetectFaceCaptureQualityRequest' => 'Vision.VNDetectFaceCaptureQualityRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x361 /* #278 'VNDetectFaceLandmarksRequest' => 'Vision.VNDetectFaceLandmarksRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x363 /* #279 'VNDetectFaceRectanglesRequest' => 'Vision.VNDetectFaceRectanglesRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x365 /* #280 'VNDetectHorizonRequest' => 'Vision.VNDetectHorizonRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x367 /* #281 'VNDetectHumanRectanglesRequest' => 'Vision.VNDetectHumanRectanglesRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x369 /* #282 'VNDetectRectanglesRequest' => 'Vision.VNDetectRectanglesRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36B /* #283 'VNDetectTextRectanglesRequest' => 'Vision.VNDetectTextRectanglesRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36D /* #284 'VNStatefulRequest' => 'Vision.VNStatefulRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36F /* #285 'VNDetectTrajectoriesRequest' => 'Vision.VNDetectTrajectoriesRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x371 /* #286 'VNFaceLandmarkRegion' => 'Vision.VNFaceLandmarkRegion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x373 /* #287 'VNFaceLandmarks' => 'Vision.VNFaceLandmarks, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x375 /* #288 'VNFaceLandmarks2D' => 'Vision.VNFaceLandmarks2D, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x377 /* #289 'VNFaceObservation' => 'Vision.VNFaceObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x379 /* #290 'VNGenerateAttentionBasedSaliencyImageRequest' => 'Vision.VNGenerateAttentionBasedSaliencyImageRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37B /* #291 'VNGenerateImageFeaturePrintRequest' => 'Vision.VNGenerateImageFeaturePrintRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37D /* #292 'VNGenerateObjectnessBasedSaliencyImageRequest' => 'Vision.VNGenerateObjectnessBasedSaliencyImageRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37F /* #293 'VNTargetedImageRequest' => 'Vision.VNTargetedImageRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x381 /* #294 'VNGenerateOpticalFlowRequest' => 'Vision.VNGenerateOpticalFlowRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x383 /* #295 'VNGeneratePersonSegmentationRequest' => 'Vision.VNGeneratePersonSegmentationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x385 /* #296 'VNImageRegistrationRequest' => 'Vision.VNImageRegistrationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x387 /* #297 'VNHomographicImageRegistrationRequest' => 'Vision.VNHomographicImageRegistrationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x389 /* #298 'VNHorizonObservation' => 'Vision.VNHorizonObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x38B /* #299 'VNHumanObservation' => 'Vision.VNHumanObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x38D /* #300 'VNImageAlignmentObservation' => 'Vision.VNImageAlignmentObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x38F /* #301 'VNImageHomographicAlignmentObservation' => 'Vision.VNImageHomographicAlignmentObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x391 /* #302 'VNImageRequestHandler' => 'Vision.VNImageRequestHandler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x393 /* #303 'VNImageTranslationAlignmentObservation' => 'Vision.VNImageTranslationAlignmentObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x395 /* #304 'VNPixelBufferObservation' => 'Vision.VNPixelBufferObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x397 /* #305 'VNRecognizedObjectObservation' => 'Vision.VNRecognizedObjectObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x399 /* #306 'VNRecognizedPoint' => 'Vision.VNRecognizedPoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39B /* #307 'VNRecognizedText' => 'Vision.VNRecognizedText, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39D /* #308 'VNRecognizedTextObservation' => 'Vision.VNRecognizedTextObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A3 /* #309 'VNRecognizeTextRequest' => 'Vision.VNRecognizeTextRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A5 /* #310 'VNSaliencyImageObservation' => 'Vision.VNSaliencyImageObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A7 /* #311 'VNSequenceRequestHandler' => 'Vision.VNSequenceRequestHandler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A9 /* #312 'VNTextObservation' => 'Vision.VNTextObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3AB /* #313 'VNTrackingRequest' => 'Vision.VNTrackingRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3AD /* #314 'VNTrackObjectRequest' => 'Vision.VNTrackObjectRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3AF /* #315 'VNTrackRectangleRequest' => 'Vision.VNTrackRectangleRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B1 /* #316 'VNTrajectoryObservation' => 'Vision.VNTrajectoryObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B3 /* #317 'VNTranslationalImageRegistrationRequest' => 'Vision.VNTranslationalImageRegistrationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B5 /* #318 'VNVideoProcessor' => 'Vision.VNVideoProcessor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B7 /* #319 'VNVideoProcessorCadence' => 'Vision.VNVideoProcessorCadence, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B9 /* #320 'VNVideoProcessorFrameRateCadence' => 'Vision.VNVideoProcessorFrameRateCadence, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BB /* #321 'VNVideoProcessorRequestProcessingOptions' => 'Vision.VNVideoProcessorRequestProcessingOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BD /* #322 'VNVideoProcessorTimeIntervalCadence' => 'Vision.VNVideoProcessorTimeIntervalCadence, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BF /* #323 'VSAccountMetadataRequest' => 'VideoSubscriberAccount.VSAccountMetadataRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3C1 /* #324 'VSAccountApplicationProvider' => 'VideoSubscriberAccount.VSAccountApplicationProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3C3 /* #325 'VSAccountManager' => 'VideoSubscriberAccount.VSAccountManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3C9 /* #326 'Microsoft_macOS__VideoSubscriberAccount_VSAccountManagerDelegate' => 'VideoSubscriberAccount.VSAccountManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CD /* #327 'VSAccountManagerResult' => 'VideoSubscriberAccount.VSAccountManagerResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CF /* #328 'VSAccountMetadata' => 'VideoSubscriberAccount.VSAccountMetadata, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D1 /* #329 'VSAccountProviderResponse' => 'VideoSubscriberAccount.VSAccountProviderResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D3 /* #330 'VSSubscription' => 'VideoSubscriberAccount.VSSubscription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D5 /* #331 'VSSubscriptionRegistrationCenter' => 'VideoSubscriberAccount.VSSubscriptionRegistrationCenter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D7 /* #332 'VSUserAccount' => 'VideoSubscriberAccount.VSUserAccount, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D9 /* #333 'UNNotificationAttachment' => 'UserNotifications.UNNotificationAttachment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DB /* #334 'UNNotificationTrigger' => 'UserNotifications.UNNotificationTrigger, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DD /* #335 'UNCalendarNotificationTrigger' => 'UserNotifications.UNCalendarNotificationTrigger, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3E3 /* #336 'UNNotificationContent' => 'UserNotifications.UNNotificationContent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3E5 /* #337 'UNMutableNotificationContent' => 'UserNotifications.UNMutableNotificationContent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3E7 /* #338 'UNNotification' => 'UserNotifications.UNNotification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3E9 /* #339 'UNNotificationAction' => 'UserNotifications.UNNotificationAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3EB /* #340 'UNNotificationActionIcon' => 'UserNotifications.UNNotificationActionIcon, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3ED /* #341 'UNNotificationCategory' => 'UserNotifications.UNNotificationCategory, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3F3 /* #342 'UNNotificationRequest' => 'UserNotifications.UNNotificationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3F5 /* #343 'UNNotificationResponse' => 'UserNotifications.UNNotificationResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3F7 /* #344 'UNNotificationServiceExtension' => 'UserNotifications.UNNotificationServiceExtension, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3F9 /* #345 'UNNotificationSettings' => 'UserNotifications.UNNotificationSettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3FB /* #346 'UNNotificationSound' => 'UserNotifications.UNNotificationSound, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3FD /* #347 'UNPushNotificationTrigger' => 'UserNotifications.UNPushNotificationTrigger, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3FF /* #348 'UNTextInputNotificationAction' => 'UserNotifications.UNTextInputNotificationAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x401 /* #349 'UNTextInputNotificationResponse' => 'UserNotifications.UNTextInputNotificationResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x403 /* #350 'UNTimeIntervalNotificationTrigger' => 'UserNotifications.UNTimeIntervalNotificationTrigger, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x409 /* #351 'Microsoft_macOS__UserNotifications_UNUserNotificationCenterDelegate' => 'UserNotifications.UNUserNotificationCenterDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x40D /* #352 'SKRequest' => 'StoreKit.SKRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x40F /* #353 'SKReceiptRefreshRequest' => 'StoreKit.SKReceiptRefreshRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x411 /* #354 'SKPayment' => 'StoreKit.SKPayment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x413 /* #355 'SKArcadeService' => 'StoreKit.SKArcadeService, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x415 /* #356 'SKDownload' => 'StoreKit.SKDownload, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x417 /* #357 'SKMutablePayment' => 'StoreKit.SKMutablePayment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x419 /* #358 'SKPaymentDiscount' => 'StoreKit.SKPaymentDiscount, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x41B /* #359 'SKPaymentQueue' => 'StoreKit.SKPaymentQueue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x421 /* #360 'Microsoft_macOS__StoreKit_SKPaymentQueueDelegate' => 'StoreKit.SKPaymentQueueDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x425 /* #361 'SKPaymentTransaction' => 'StoreKit.SKPaymentTransaction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x42B /* #362 'Microsoft_macOS__StoreKit_SKPaymentTransactionObserver' => 'StoreKit.SKPaymentTransactionObserver, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x42F /* #363 'SKProduct' => 'StoreKit.SKProduct, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x431 /* #364 'SKProductDiscount' => 'StoreKit.SKProductDiscount, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x43B /* #365 'Microsoft_macOS__StoreKit_SKRequestDelegate' => 'StoreKit.SKRequestDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x43F /* #366 'Microsoft_macOS__StoreKit_SKProductsRequestDelegate' => 'StoreKit.SKProductsRequestDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x443 /* #367 'SKProductsResponse' => 'StoreKit.SKProductsResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x445 /* #368 'SKProductSubscriptionPeriod' => 'StoreKit.SKProductSubscriptionPeriod, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x447 /* #369 'SKStorefront' => 'StoreKit.SKStorefront, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x44D /* #370 'Microsoft_macOS__StoreKit_SKStoreProductViewControllerDelegate' => 'StoreKit.SKStoreProductViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x451 /* #371 'SKStoreReviewController' => 'StoreKit.SKStoreReviewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x453 /* #372 'SKAction' => 'SpriteKit.SKAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x455 /* #373 'SKKeyframeSequence' => 'SpriteKit.SKKeyframeSequence, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x457 /* #374 'SKNode' => 'SpriteKit.SKNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x459 /* #375 'SKShapeNode' => 'SpriteKit.SKShapeNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x45B /* #376 'SKUniform' => 'SpriteKit.SKUniform, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x45D /* #377 'SKVideoNode' => 'SpriteKit.SKVideoNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x45F /* #378 'SKWarpGeometry' => 'SpriteKit.SKWarpGeometry, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x461 /* #379 'SKWarpGeometryGrid' => 'SpriteKit.SKWarpGeometryGrid, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x463 /* #380 'SK3DNode' => 'SpriteKit.SK3DNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x465 /* #381 'SKAttribute' => 'SpriteKit.SKAttribute, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x467 /* #382 'SKAttributeValue' => 'SpriteKit.SKAttributeValue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x469 /* #383 'SKAudioNode' => 'SpriteKit.SKAudioNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x46B /* #384 'SKCameraNode' => 'SpriteKit.SKCameraNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x46D /* #385 'SKConstraint' => 'SpriteKit.SKConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x46F /* #386 'SKCropNode' => 'SpriteKit.SKCropNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x475 /* #387 'SKEffectNode' => 'SpriteKit.SKEffectNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x477 /* #388 'SKEmitterNode' => 'SpriteKit.SKEmitterNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x479 /* #389 'SKFieldNode' => 'SpriteKit.SKFieldNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x47B /* #390 'SKLabelNode' => 'SpriteKit.SKLabelNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x47D /* #391 'SKLightNode' => 'SpriteKit.SKLightNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x47F /* #392 'SKTexture' => 'SpriteKit.SKTexture, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x481 /* #393 'SKMutableTexture' => 'SpriteKit.SKMutableTexture, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x483 /* #394 'SKPhysicsBody' => 'SpriteKit.SKPhysicsBody, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x485 /* #395 'SKPhysicsContact' => 'SpriteKit.SKPhysicsContact, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x48B /* #396 'Microsoft_macOS__SpriteKit_SKPhysicsContactDelegate' => 'SpriteKit.SKPhysicsContactDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x48F /* #397 'SKPhysicsJoint' => 'SpriteKit.SKPhysicsJoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x491 /* #398 'SKPhysicsJointFixed' => 'SpriteKit.SKPhysicsJointFixed, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x493 /* #399 'SKPhysicsJointLimit' => 'SpriteKit.SKPhysicsJointLimit, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x495 /* #400 'SKPhysicsJointPin' => 'SpriteKit.SKPhysicsJointPin, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x497 /* #401 'SKPhysicsJointSliding' => 'SpriteKit.SKPhysicsJointSliding, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x499 /* #402 'SKPhysicsJointSpring' => 'SpriteKit.SKPhysicsJointSpring, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x49B /* #403 'SKRange' => 'SpriteKit.SKRange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x49D /* #404 'SKReachConstraints' => 'SpriteKit.SKReachConstraints, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x49F /* #405 'SKReferenceNode' => 'SpriteKit.SKReferenceNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4A1 /* #406 'SKRegion' => 'SpriteKit.SKRegion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4A3 /* #407 'SKRenderer' => 'SpriteKit.SKRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4A9 /* #408 'SKScene' => 'SpriteKit.SKScene, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4AF /* #409 'Microsoft_macOS__SpriteKit_SKSceneDelegate' => 'SpriteKit.SKSceneDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4B3 /* #410 'SKShader' => 'SpriteKit.SKShader, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4B5 /* #411 'SKSpriteNode' => 'SpriteKit.SKSpriteNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4B7 /* #412 'SKTileDefinition' => 'SpriteKit.SKTileDefinition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4B9 /* #413 'SKTileGroup' => 'SpriteKit.SKTileGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4BB /* #414 'SKTileGroupRule' => 'SpriteKit.SKTileGroupRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4BD /* #415 'SKTileMapNode' => 'SpriteKit.SKTileMapNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4BF /* #416 'SKTileSet' => 'SpriteKit.SKTileSet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4C1 /* #417 'SKTransformNode' => 'SpriteKit.SKTransformNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4C3 /* #418 'SKTransition' => 'SpriteKit.SKTransition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4C5 /* #419 'SKView' => 'SpriteKit.SKView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4CB /* #420 'Microsoft_macOS__SpriteKit_SKViewDelegate' => 'SpriteKit.SKViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4D7 /* #421 'SLComposeServiceViewController' => 'Social.SLComposeServiceViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4D9 /* #422 'SWAction' => 'SharedWithYouCore.SWAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4DF /* #423 'SWCollaborationCoordinator' => 'SharedWithYouCore.SWCollaborationCoordinator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4E1 /* #424 'SWCollaborationOption' => 'SharedWithYouCore.SWCollaborationOption, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4E3 /* #425 'SWCollaborationOptionsGroup' => 'SharedWithYouCore.SWCollaborationOptionsGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4E5 /* #426 'SWCollaborationOptionsPickerGroup' => 'SharedWithYouCore.SWCollaborationOptionsPickerGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4E7 /* #427 'SWCollaborationShareOptions' => 'SharedWithYouCore.SWCollaborationShareOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4E9 /* #428 'SWPerson' => 'SharedWithYouCore.SWPerson, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4EB /* #429 'SWPersonIdentity' => 'SharedWithYouCore.SWPersonIdentity, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4ED /* #430 'SWPersonIdentityProof' => 'SharedWithYouCore.SWPersonIdentityProof, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4EF /* #431 'SWSignedPersonIdentityProof' => 'SharedWithYouCore.SWSignedPersonIdentityProof, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4F1 /* #432 'SWStartCollaborationAction' => 'SharedWithYouCore.SWStartCollaborationAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4F3 /* #433 'SWUpdateCollaborationParticipantsAction' => 'SharedWithYouCore.SWUpdateCollaborationParticipantsAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x4F9 /* #434 'Microsoft_macOS__ScriptingBridge_SBApplicationDelegate' => 'ScriptingBridge.SBApplicationDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x501 /* #435 'NSArray' => 'Foundation.NSArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x503 /* #436 'NSMutableArray' => 'Foundation.NSMutableArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x505 /* #437 'SBElementArray' => 'ScriptingBridge.SBElementArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x507 /* #438 'SBObject' => 'ScriptingBridge.SBObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x509 /* #439 'SCContentFilter' => 'ScreenCaptureKit.SCContentFilter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x50B /* #440 'SCDisplay' => 'ScreenCaptureKit.SCDisplay, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x50D /* #441 'SCRunningApplication' => 'ScreenCaptureKit.SCRunningApplication, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x50F /* #442 'SCStreamConfiguration' => 'ScreenCaptureKit.SCStreamConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x515 /* #443 'Microsoft_macOS__ScreenCaptureKit_SCStreamDelegate' => 'ScreenCaptureKit.SCStreamDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x51D /* #444 'SCWindow' => 'ScreenCaptureKit.SCWindow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x52B /* #445 'SCNGeometry' => 'SceneKit.SCNGeometry, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x52D /* #446 'SCNText' => 'SceneKit.SCNText, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x52F /* #447 'Microsoft_macOS__SceneKit_SCNAnimatable' => 'SceneKit.SCNAnimatable, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x533 /* #448 'SCNAction' => 'SceneKit.SCNAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x535 /* #449 'SCNGeometrySource' => 'SceneKit.SCNGeometrySource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x537 /* #450 'SCNParticleSystem' => 'SceneKit.SCNParticleSystem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x539 /* #451 'SCNPhysicsShape' => 'SceneKit.SCNPhysicsShape, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x53B /* #452 'SCNScene' => 'SceneKit.SCNScene, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x53D /* #453 'SCNSceneSource' => 'SceneKit.SCNSceneSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x53F /* #454 'SCNSkinner' => 'SceneKit.SCNSkinner, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x541 /* #455 'SCNTechnique' => 'SceneKit.SCNTechnique, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x543 /* #456 'SCNConstraint' => 'SceneKit.SCNConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x545 /* #457 'SCNAccelerationConstraint' => 'SceneKit.SCNAccelerationConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x54B /* #458 'Microsoft_macOS__SceneKit_SCNActionable' => 'SceneKit.SCNActionable, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x553 /* #459 'SCNAnimation' => 'SceneKit.SCNAnimation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x555 /* #460 'SCNAnimationEvent' => 'SceneKit.SCNAnimationEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x557 /* #461 'SCNAnimationPlayer' => 'SceneKit.SCNAnimationPlayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x559 /* #462 'SCNAudioPlayer' => 'SceneKit.SCNAudioPlayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x55B /* #463 'SCNAudioSource' => 'SceneKit.SCNAudioSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x55D /* #464 'SCNAvoidOccluderConstraint' => 'SceneKit.SCNAvoidOccluderConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x563 /* #465 'Microsoft_macOS__SceneKit_SCNAvoidOccluderConstraintDelegate' => 'SceneKit.SCNAvoidOccluderConstraintDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x567 /* #466 'SCNBillboardConstraint' => 'SceneKit.SCNBillboardConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x569 /* #467 'Microsoft_macOS__SceneKit_SCNBoundingVolume' => 'SceneKit.SCNBoundingVolume, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x56D /* #468 'SCNBox' => 'SceneKit.SCNBox, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x577 /* #469 'SCNCamera' => 'SceneKit.SCNCamera, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x57D /* #470 'SCNCameraController' => 'SceneKit.SCNCameraController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x583 /* #471 'Microsoft_macOS__SceneKit_SCNCameraControllerDelegate' => 'SceneKit.SCNCameraControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x587 /* #472 'SCNCapsule' => 'SceneKit.SCNCapsule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x589 /* #473 'SCNCone' => 'SceneKit.SCNCone, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x58B /* #474 'SCNCylinder' => 'SceneKit.SCNCylinder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x58D /* #475 'SCNDistanceConstraint' => 'SceneKit.SCNDistanceConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x58F /* #476 'SCNFloor' => 'SceneKit.SCNFloor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x591 /* #477 'SCNGeometryElement' => 'SceneKit.SCNGeometryElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x593 /* #478 'SCNGeometryTessellator' => 'SceneKit.SCNGeometryTessellator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x595 /* #479 'SCNHitTestResult' => 'SceneKit.SCNHitTestResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x597 /* #480 'SCNIKConstraint' => 'SceneKit.SCNIKConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x599 /* #481 'SCNLevelOfDetail' => 'SceneKit.SCNLevelOfDetail, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x59B /* #482 'SCNLight' => 'SceneKit.SCNLight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x59D /* #483 'SCNLookAtConstraint' => 'SceneKit.SCNLookAtConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x59F /* #484 'SCNMaterial' => 'SceneKit.SCNMaterial, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5A1 /* #485 'SCNMaterialProperty' => 'SceneKit.SCNMaterialProperty, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5A3 /* #486 'SCNMorpher' => 'SceneKit.SCNMorpher, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5A9 /* #487 'Microsoft_macOS__SceneKit_SCNNodeRendererDelegate' => 'SceneKit.SCNNodeRendererDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5AD /* #488 'SCNParticlePropertyController' => 'SceneKit.SCNParticlePropertyController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5AF /* #489 'SCNPhysicsBehavior' => 'SceneKit.SCNPhysicsBehavior, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5B1 /* #490 'SCNPhysicsBallSocketJoint' => 'SceneKit.SCNPhysicsBallSocketJoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5B3 /* #491 'SCNPhysicsBody' => 'SceneKit.SCNPhysicsBody, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5B5 /* #492 'SCNPhysicsConeTwistJoint' => 'SceneKit.SCNPhysicsConeTwistJoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5B7 /* #493 'SCNPhysicsContact' => 'SceneKit.SCNPhysicsContact, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5BD /* #494 'Microsoft_macOS__SceneKit_SCNPhysicsContactDelegate' => 'SceneKit.SCNPhysicsContactDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5C1 /* #495 'SCNPhysicsField' => 'SceneKit.SCNPhysicsField, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5C3 /* #496 'SCNPhysicsHingeJoint' => 'SceneKit.SCNPhysicsHingeJoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5C5 /* #497 'SCNPhysicsSliderJoint' => 'SceneKit.SCNPhysicsSliderJoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5C7 /* #498 'SCNPhysicsVehicle' => 'SceneKit.SCNPhysicsVehicle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5C9 /* #499 'SCNPhysicsVehicleWheel' => 'SceneKit.SCNPhysicsVehicleWheel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5CB /* #500 'SCNPlane' => 'SceneKit.SCNPlane, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5CD /* #501 'SCNProgram' => 'SceneKit.SCNProgram, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5D3 /* #502 'Microsoft_macOS__SceneKit_SCNProgramDelegate' => 'SceneKit.SCNProgramDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5D7 /* #503 'SCNPyramid' => 'SceneKit.SCNPyramid, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5D9 /* #504 'SCNNode' => 'SceneKit.SCNNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5DB /* #505 'SCNReferenceNode' => 'SceneKit.SCNReferenceNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5DD /* #506 'SCNReplicatorConstraint' => 'SceneKit.SCNReplicatorConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5E3 /* #507 'Microsoft_macOS__SceneKit_SCNSceneExportDelegate' => 'SceneKit.SCNSceneExportDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5EB /* #508 'Microsoft_macOS__SceneKit_SCNSceneRenderer' => 'SceneKit.SCNSceneRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5F3 /* #509 'Microsoft_macOS__SceneKit_SCNSceneRendererDelegate' => 'SceneKit.SCNSceneRendererDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5F7 /* #510 'Microsoft_macOS__SceneKit_SCNShadable' => 'SceneKit.SCNShadable, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5FB /* #511 'SCNShape' => 'SceneKit.SCNShape, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5FD /* #512 'SCNSliderConstraint' => 'SceneKit.SCNSliderConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x5FF /* #513 'SCNSphere' => 'SceneKit.SCNSphere, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x601 /* #514 'Microsoft_macOS__SceneKit_SCNTechniqueSupport' => 'SceneKit.SCNTechniqueSupport, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x605 /* #515 'SCNTimingFunction' => 'SceneKit.SCNTimingFunction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x607 /* #516 'SCNTorus' => 'SceneKit.SCNTorus, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x609 /* #517 'SCNTransaction' => 'SceneKit.SCNTransaction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x60B /* #518 'SCNTransformConstraint' => 'SceneKit.SCNTransformConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x60D /* #519 'SCNTube' => 'SceneKit.SCNTube, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x613 /* #520 'NSWindow' => 'AppKit.NSWindow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x615 /* #521 'NSPanel' => 'AppKit.NSPanel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x617 /* #522 'QLPreviewPanel' => 'QuickLookUI.QLPreviewPanel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x619 /* #523 'QLFilePreviewRequest' => 'QuickLookUI.QLFilePreviewRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x623 /* #524 'Microsoft_macOS__QuickLookUI_QLPreviewItem' => 'QuickLookUI.QLPreviewItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x62B /* #525 'Microsoft_macOS__QuickLookUI_QLPreviewPanelDataSource' => 'QuickLookUI.QLPreviewPanelDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x637 /* #526 'Microsoft_macOS__QuickLookUI_QLPreviewPanelDelegate' => 'QuickLookUI.QLPreviewPanelDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x63B /* #527 'QLPreviewProvider' => 'QuickLookUI.QLPreviewProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x63D /* #528 'QLPreviewReply' => 'QuickLookUI.QLPreviewReply, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x63F /* #529 'QLPreviewReplyAttachment' => 'QuickLookUI.QLPreviewReplyAttachment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x641 /* #530 'QLPreviewView' => 'QuickLookUI.QLPreviewView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x643 /* #531 'PHChangeRequest' => 'Photos.PHChangeRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x645 /* #532 'PHAssetChangeRequest' => 'Photos.PHAssetChangeRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x647 /* #533 'PHAssetCreationRequest' => 'Photos.PHAssetCreationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x649 /* #534 'PHLivePhoto' => 'Photos.PHLivePhoto, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x64B /* #535 'PHAdjustmentData' => 'Photos.PHAdjustmentData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x64D /* #536 'PHObject' => 'Photos.PHObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x64F /* #537 'PHAsset' => 'Photos.PHAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x651 /* #538 'PHCollection' => 'Photos.PHCollection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x653 /* #539 'PHAssetCollection' => 'Photos.PHAssetCollection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x655 /* #540 'PHAssetCollectionChangeRequest' => 'Photos.PHAssetCollectionChangeRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x657 /* #541 'PHAssetResource' => 'Photos.PHAssetResource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x659 /* #542 'PHAssetResourceCreationOptions' => 'Photos.PHAssetResourceCreationOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x65B /* #543 'PHAssetResourceRequestOptions' => 'Photos.PHAssetResourceRequestOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x65D /* #544 'PHImageManager' => 'Photos.PHImageManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x65F /* #545 'PHCachingImageManager' => 'Photos.PHCachingImageManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x661 /* #546 'PHChange' => 'Photos.PHChange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x663 /* #547 'PHCloudIdentifier' => 'Photos.PHCloudIdentifier, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x665 /* #548 'PHCloudIdentifierMapping' => 'Photos.PHCloudIdentifierMapping, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x667 /* #549 'PHCollectionList' => 'Photos.PHCollectionList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x669 /* #550 'PHCollectionListChangeRequest' => 'Photos.PHCollectionListChangeRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x66B /* #551 'PHContentEditingInput' => 'Photos.PHContentEditingInput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x66D /* #552 'PHContentEditingInputRequestOptions' => 'Photos.PHContentEditingInputRequestOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x66F /* #553 'PHContentEditingOutput' => 'Photos.PHContentEditingOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x671 /* #554 'PHFetchOptions' => 'Photos.PHFetchOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x673 /* #555 'PHFetchResultChangeDetails' => 'Photos.PHFetchResultChangeDetails, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x675 /* #556 'PHImageRequestOptions' => 'Photos.PHImageRequestOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x67B /* #557 'PHLivePhotoRequestOptions' => 'Photos.PHLivePhotoRequestOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x67D /* #558 'PHLocalIdentifierMapping' => 'Photos.PHLocalIdentifierMapping, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x67F /* #559 'PHObjectChangeDetails' => 'Photos.PHObjectChangeDetails, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x681 /* #560 'PHObjectPlaceholder' => 'Photos.PHObjectPlaceholder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x683 /* #561 'PHPersistentChange' => 'Photos.PHPersistentChange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x685 /* #562 'PHPersistentChangeFetchResult' => 'Photos.PHPersistentChangeFetchResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x687 /* #563 'PHPersistentChangeToken' => 'Photos.PHPersistentChangeToken, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x689 /* #564 'PHPersistentObjectChangeDetails' => 'Photos.PHPersistentObjectChangeDetails, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x693 /* #565 'Microsoft_macOS__Photos_PHPhotoLibraryChangeObserver' => 'Photos.PHPhotoLibraryChangeObserver, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x697 /* #566 'PHProject' => 'Photos.PHProject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x699 /* #567 'PHProjectChangeRequest' => 'Photos.PHProjectChangeRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x69B /* #568 'PHVideoRequestOptions' => 'Photos.PHVideoRequestOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x69D /* #569 'PDFBorder' => 'PdfKit.PdfBorder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x69F /* #570 'PDFAnnotation' => 'PdfKit.PdfAnnotation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6A1 /* #571 'PDFAnnotationMarkup' => 'PdfKit.PdfAnnotationMarkup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6A3 /* #572 'PDFAction' => 'PdfKit.PdfAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6A5 /* #573 'PDFActionGoTo' => 'PdfKit.PdfActionGoTo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6A7 /* #574 'PDFActionNamed' => 'PdfKit.PdfActionNamed, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6A9 /* #575 'PDFActionRemoteGoTo' => 'PdfKit.PdfActionRemoteGoTo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6AB /* #576 'PDFActionResetForm' => 'PdfKit.PdfActionResetForm, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6AD /* #577 'PDFActionURL' => 'PdfKit.PdfActionUrl, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6AF /* #578 'PDFAnnotationButtonWidget' => 'PdfKit.PdfAnnotationButtonWidget, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6B1 /* #579 'PDFAnnotationChoiceWidget' => 'PdfKit.PdfAnnotationChoiceWidget, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6B3 /* #580 'PDFAnnotationCircle' => 'PdfKit.PdfAnnotationCircle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6B5 /* #581 'PDFAnnotationFreeText' => 'PdfKit.PdfAnnotationFreeText, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6B7 /* #582 'PDFAnnotationInk' => 'PdfKit.PdfAnnotationInk, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6B9 /* #583 'PDFAnnotationLine' => 'PdfKit.PdfAnnotationLine, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6BB /* #584 'PDFAnnotationLink' => 'PdfKit.PdfAnnotationLink, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6BD /* #585 'PDFAnnotationPopup' => 'PdfKit.PdfAnnotationPopup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6BF /* #586 'PDFAnnotationSquare' => 'PdfKit.PdfAnnotationSquare, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6C1 /* #587 'PDFAnnotationStamp' => 'PdfKit.PdfAnnotationStamp, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6C3 /* #588 'PDFAnnotationText' => 'PdfKit.PdfAnnotationText, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6C5 /* #589 'PDFAnnotationTextWidget' => 'PdfKit.PdfAnnotationTextWidget, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6C7 /* #590 'PDFAppearanceCharacteristics' => 'PdfKit.PdfAppearanceCharacteristics, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6C9 /* #591 'PDFDestination' => 'PdfKit.PdfDestination, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6CF /* #592 'Microsoft_macOS__PdfKit_PdfDocumentDelegate' => 'PdfKit.PdfDocumentDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6D3 /* #593 'PDFOutline' => 'PdfKit.PdfOutline, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6D5 /* #594 'PDFPage' => 'PdfKit.PdfPage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6DB /* #595 'PDFSelection' => 'PdfKit.PdfSelection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6E1 /* #596 'Microsoft_macOS__PdfKit_PdfViewDelegate' => 'PdfKit.PdfViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6E5 /* #597 'PKPaymentRequest' => 'PassKit.PKPaymentRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6E7 /* #598 'PKAddSecureElementPassConfiguration' => 'PassKit.PKAddSecureElementPassConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6E9 /* #599 'PKAddCarKeyPassConfiguration' => 'PassKit.PKAddCarKeyPassConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6EB /* #600 'PKAddPaymentPassRequest' => 'PassKit.PKAddPaymentPassRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6ED /* #601 'PKAddPaymentPassRequestConfiguration' => 'PassKit.PKAddPaymentPassRequestConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6EF /* #602 'PKAutomaticReloadPaymentRequest' => 'PassKit.PKAutomaticReloadPaymentRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6F1 /* #603 'PKPaymentSummaryItem' => 'PassKit.PKPaymentSummaryItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6F3 /* #604 'PKAutomaticReloadPaymentSummaryItem' => 'PassKit.PKAutomaticReloadPaymentSummaryItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6F5 /* #605 'PKBarcodeEventConfigurationRequest' => 'PassKit.PKBarcodeEventConfigurationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6F7 /* #606 'PKBarcodeEventMetadataRequest' => 'PassKit.PKBarcodeEventMetadataRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6F9 /* #607 'PKBarcodeEventMetadataResponse' => 'PassKit.PKBarcodeEventMetadataResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6FB /* #608 'PKBarcodeEventSignatureRequest' => 'PassKit.PKBarcodeEventSignatureRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6FD /* #609 'PKBarcodeEventSignatureResponse' => 'PassKit.PKBarcodeEventSignatureResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x6FF /* #610 'PKContact' => 'PassKit.PKContact, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x701 /* #611 'PKDateComponentsRange' => 'PassKit.PKDateComponentsRange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x703 /* #612 'PKDeferredPaymentRequest' => 'PassKit.PKDeferredPaymentRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x705 /* #613 'PKDeferredPaymentSummaryItem' => 'PassKit.PKDeferredPaymentSummaryItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x707 /* #614 'PKIssuerProvisioningExtensionPassEntry' => 'PassKit.PKIssuerProvisioningExtensionPassEntry, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x709 /* #615 'PKIssuerProvisioningExtensionPaymentPassEntry' => 'PassKit.PKIssuerProvisioningExtensionPaymentPassEntry, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x70B /* #616 'PKIssuerProvisioningExtensionStatus' => 'PassKit.PKIssuerProvisioningExtensionStatus, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x70D /* #617 'PKLabeledValue' => 'PassKit.PKLabeledValue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x70F /* #618 'PKObject' => 'PassKit.PKObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x711 /* #619 'PKPass' => 'PassKit.PKPass, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x713 /* #620 'PKPayment' => 'PassKit.PKPayment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x719 /* #621 'Microsoft_macOS__PassKit_PKPaymentAuthorizationControllerDelegate' => 'PassKit.PKPaymentAuthorizationControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x71D /* #622 'PKPaymentAuthorizationResult' => 'PassKit.PKPaymentAuthorizationResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x723 /* #623 'Microsoft_macOS__PassKit_PKPaymentAuthorizationViewControllerDelegate' => 'PassKit.PKPaymentAuthorizationViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x727 /* #624 'PKPaymentButton' => 'PassKit.PKPaymentButton, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x729 /* #625 'PKPaymentInformationEventExtension' => 'PassKit.PKPaymentInformationEventExtension, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x72F /* #626 'PKPaymentMerchantSession' => 'PassKit.PKPaymentMerchantSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x731 /* #627 'PKPaymentMethod' => 'PassKit.PKPaymentMethod, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x733 /* #628 'PKPaymentOrderDetails' => 'PassKit.PKPaymentOrderDetails, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x735 /* #629 'PKSecureElementPass' => 'PassKit.PKSecureElementPass, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x737 /* #630 'PKPaymentPass' => 'PassKit.PKPaymentPass, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x739 /* #631 'PKPaymentRequestUpdate' => 'PassKit.PKPaymentRequestUpdate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x73B /* #632 'PKPaymentRequestCouponCodeUpdate' => 'PassKit.PKPaymentRequestCouponCodeUpdate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x73D /* #633 'PKPaymentRequestMerchantSessionUpdate' => 'PassKit.PKPaymentRequestMerchantSessionUpdate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x73F /* #634 'PKPaymentRequestPaymentMethodUpdate' => 'PassKit.PKPaymentRequestPaymentMethodUpdate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x741 /* #635 'PKPaymentRequestShippingContactUpdate' => 'PassKit.PKPaymentRequestShippingContactUpdate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x743 /* #636 'PKPaymentRequestShippingMethodUpdate' => 'PassKit.PKPaymentRequestShippingMethodUpdate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x745 /* #637 'PKPaymentToken' => 'PassKit.PKPaymentToken, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x747 /* #638 'PKPaymentTokenContext' => 'PassKit.PKPaymentTokenContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x749 /* #639 'PKRecurringPaymentRequest' => 'PassKit.PKRecurringPaymentRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x74B /* #640 'PKRecurringPaymentSummaryItem' => 'PassKit.PKRecurringPaymentSummaryItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x74D /* #641 'PKShareablePassMetadataPreview' => 'PassKit.PKShareablePassMetadataPreview, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x74F /* #642 'PKShippingMethod' => 'PassKit.PKShippingMethod, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x751 /* #643 'PKStoredValuePassBalance' => 'PassKit.PKStoredValuePassBalance, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x753 /* #644 'PKStoredValuePassProperties' => 'PassKit.PKStoredValuePassProperties, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x755 /* #645 'PKTransitPassProperties' => 'PassKit.PKTransitPassProperties, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x757 /* #646 'PKSuicaPassProperties' => 'PassKit.PKSuicaPassProperties, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x75D /* #647 'Microsoft_macOS__PassKit_PKVehicleConnectionDelegate' => 'PassKit.PKVehicleConnectionDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x761 /* #648 'NEAppRule' => 'NetworkExtension.NEAppRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x763 /* #649 'NEDNSSettings' => 'NetworkExtension.NEDnsSettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x765 /* #650 'NEDNSOverHTTPSSettings' => 'NetworkExtension.NEDnsOverHttpsSettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x767 /* #651 'NEDNSOverTLSSettings' => 'NetworkExtension.NEDnsOverTlsSettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x769 /* #652 'NEVPNProtocol' => 'NetworkExtension.NEVpnProtocol, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x76B /* #653 'NEDNSProxyProviderProtocol' => 'NetworkExtension.NEDnsProxyProviderProtocol, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x76D /* #654 'NETunnelNetworkSettings' => 'NetworkExtension.NETunnelNetworkSettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x76F /* #655 'NEPacketTunnelNetworkSettings' => 'NetworkExtension.NEPacketTunnelNetworkSettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x771 /* #656 'NEEthernetTunnelNetworkSettings' => 'NetworkExtension.NEEthernetTunnelNetworkSettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x773 /* #657 'NEProvider' => 'NetworkExtension.NEProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x775 /* #658 'NETunnelProvider' => 'NetworkExtension.NETunnelProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x777 /* #659 'NEPacketTunnelProvider' => 'NetworkExtension.NEPacketTunnelProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x779 /* #660 'NEEthernetTunnelProvider' => 'NetworkExtension.NEEthernetTunnelProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x77B /* #661 'NEEvaluateConnectionRule' => 'NetworkExtension.NEEvaluateConnectionRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x77D /* #662 'NEFilterVerdict' => 'NetworkExtension.NEFilterVerdict, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x77F /* #663 'NEFilterDataVerdict' => 'NetworkExtension.NEFilterDataVerdict, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x781 /* #664 'NEFilterFlow' => 'NetworkExtension.NEFilterFlow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x783 /* #665 'NEFilterNewFlowVerdict' => 'NetworkExtension.NEFilterNewFlowVerdict, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x785 /* #666 'NEFilterPacketContext' => 'NetworkExtension.NEFilterPacketContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x787 /* #667 'NEFilterProvider' => 'NetworkExtension.NEFilterProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x789 /* #668 'NEFilterPacketProvider' => 'NetworkExtension.NEFilterPacketProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x78B /* #669 'NEFilterProviderConfiguration' => 'NetworkExtension.NEFilterProviderConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x78D /* #670 'NEFilterReport' => 'NetworkExtension.NEFilterReport, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x78F /* #671 'NEFilterRule' => 'NetworkExtension.NEFilterRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x791 /* #672 'NEFilterSettings' => 'NetworkExtension.NEFilterSettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x793 /* #673 'NEFilterSocketFlow' => 'NetworkExtension.NEFilterSocketFlow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x795 /* #674 'NEFlowMetaData' => 'NetworkExtension.NEFlowMetaData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x797 /* #675 'NEIPv4Route' => 'NetworkExtension.NEIPv4Route, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x799 /* #676 'NEIPv4Settings' => 'NetworkExtension.NEIPv4Settings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x79B /* #677 'NEIPv6Route' => 'NetworkExtension.NEIPv6Route, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x79D /* #678 'NEIPv6Settings' => 'NetworkExtension.NEIPv6Settings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x79F /* #679 'NENetworkRule' => 'NetworkExtension.NENetworkRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7A1 /* #680 'NEOnDemandRule' => 'NetworkExtension.NEOnDemandRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7A3 /* #681 'NEOnDemandRuleConnect' => 'NetworkExtension.NEOnDemandRuleConnect, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7A5 /* #682 'NEOnDemandRuleDisconnect' => 'NetworkExtension.NEOnDemandRuleDisconnect, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7A7 /* #683 'NEOnDemandRuleEvaluateConnection' => 'NetworkExtension.NEOnDemandRuleEvaluateConnection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7A9 /* #684 'NEOnDemandRuleIgnore' => 'NetworkExtension.NEOnDemandRuleIgnore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7AB /* #685 'NEPacket' => 'NetworkExtension.NEPacket, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7AD /* #686 'NEProxyServer' => 'NetworkExtension.NEProxyServer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7AF /* #687 'NEProxySettings' => 'NetworkExtension.NEProxySettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7B1 /* #688 'NETransparentProxyNetworkSettings' => 'NetworkExtension.NETransparentProxyNetworkSettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7B3 /* #689 'NEAppProxyProvider' => 'NetworkExtension.NEAppProxyProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7B5 /* #690 'NETransparentProxyProvider' => 'NetworkExtension.NETransparentProxyProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7B7 /* #691 'NETunnelProviderProtocol' => 'NetworkExtension.NETunnelProviderProtocol, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7B9 /* #692 'NEVPNConnection' => 'NetworkExtension.NEVpnConnection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7BB /* #693 'NETunnelProviderSession' => 'NetworkExtension.NETunnelProviderSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7BD /* #694 'NEVPNIKEv2SecurityAssociationParameters' => 'NetworkExtension.NEVpnIke2SecurityAssociationParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7BF /* #695 'NEVPNProtocolIPSec' => 'NetworkExtension.NEVpnProtocolIpSec, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7C1 /* #696 'NEVPNProtocolIKEv2' => 'NetworkExtension.NEVpnProtocolIke2, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7C3 /* #697 'NWEndpoint' => 'NetworkExtension.NWEndpoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7C5 /* #698 'NWBonjourServiceEndpoint' => 'NetworkExtension.NWBonjourServiceEndpoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7C7 /* #699 'NWHostEndpoint' => 'NetworkExtension.NWHostEndpoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7C9 /* #700 'NWPath' => 'NetworkExtension.NWPath, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7CF /* #701 'Microsoft_macOS__NetworkExtension_NWTcpConnectionAuthenticationDelegate' => 'NetworkExtension.NWTcpConnectionAuthenticationDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7D3 /* #702 'NWTLSParameters' => 'NetworkExtension.NWTlsParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7D5 /* #703 'NLModel' => 'NaturalLanguage.NLModel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7D7 /* #704 'NLGazetteer' => 'NaturalLanguage.NLGazetteer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7D9 /* #705 'NLModelConfiguration' => 'NaturalLanguage.NLModelConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7DB /* #706 'NLTokenizer' => 'NaturalLanguage.NLTokenizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7DD /* #707 'MCAdvertiserAssistant' => 'MultipeerConnectivity.MCAdvertiserAssistant, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7E3 /* #708 'Microsoft_macOS__MultipeerConnectivity_MCAdvertiserAssistantDelegate' => 'MultipeerConnectivity.MCAdvertiserAssistantDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7EB /* #709 'MCBrowserViewController' => 'MultipeerConnectivity.MCBrowserViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7F1 /* #710 'Microsoft_macOS__MultipeerConnectivity_MCBrowserViewControllerDelegate' => 'MultipeerConnectivity.MCBrowserViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7F5 /* #711 'MCNearbyServiceAdvertiser' => 'MultipeerConnectivity.MCNearbyServiceAdvertiser, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7FB /* #712 'Microsoft_macOS__MultipeerConnectivity_MCNearbyServiceAdvertiserDelegate' => 'MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x7FF /* #713 'MCNearbyServiceBrowser' => 'MultipeerConnectivity.MCNearbyServiceBrowser, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x801 /* #714 'Microsoft_macOS__MultipeerConnectivity_MCNearbyServiceBrowserDelegate' => 'MultipeerConnectivity.MCNearbyServiceBrowserDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x805 /* #715 'MCPeerID' => 'MultipeerConnectivity.MCPeerID, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x80B /* #716 'Microsoft_macOS__MultipeerConnectivity_MCSessionDelegate' => 'MultipeerConnectivity.MCSessionDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x80F /* #717 'MDLAnimatedValue' => 'ModelIO.MDLAnimatedValue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x811 /* #718 'MDLAnimatedQuaternion' => 'ModelIO.MDLAnimatedQuaternion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x813 /* #719 'MDLAnimatedScalarArray' => 'ModelIO.MDLAnimatedScalarArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x815 /* #720 'MDLAnimatedVector3Array' => 'ModelIO.MDLAnimatedVector3Array, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x817 /* #721 'MDLAnimatedQuaternionArray' => 'ModelIO.MDLAnimatedQuaternionArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x819 /* #722 'MDLAnimatedScalar' => 'ModelIO.MDLAnimatedScalar, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x81B /* #723 'MDLAnimatedVector2' => 'ModelIO.MDLAnimatedVector2, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x81D /* #724 'MDLAnimatedVector3' => 'ModelIO.MDLAnimatedVector3, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x81F /* #725 'MDLAnimatedVector4' => 'ModelIO.MDLAnimatedVector4, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x821 /* #726 'MDLAnimatedMatrix4x4' => 'ModelIO.MDLAnimatedMatrix4x4, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x823 /* #727 'MDLMatrix4x4Array' => 'ModelIO.MDLMatrix4x4Array, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x825 /* #728 'MDLAsset' => 'ModelIO.MDLAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x82B /* #729 'MDLTexture' => 'ModelIO.MDLTexture, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x82D /* #730 'MDLNoiseTexture' => 'ModelIO.MDLNoiseTexture, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x837 /* #731 'MDLTransform' => 'ModelIO.MDLTransform, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x839 /* #732 'MDLVertexDescriptor' => 'ModelIO.MDLVertexDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x83B /* #733 'MDLAnimationBindComponent' => 'ModelIO.MDLAnimationBindComponent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x83D /* #734 'MDLObject' => 'ModelIO.MDLObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x83F /* #735 'MDLLight' => 'ModelIO.MDLLight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x841 /* #736 'MDLPhysicallyPlausibleLight' => 'ModelIO.MDLPhysicallyPlausibleLight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x843 /* #737 'MDLAreaLight' => 'ModelIO.MDLAreaLight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x849 /* #738 'MDLBundleAssetResolver' => 'ModelIO.MDLBundleAssetResolver, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x84B /* #739 'MDLCamera' => 'ModelIO.MDLCamera, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x84D /* #740 'MDLCheckerboardTexture' => 'ModelIO.MDLCheckerboardTexture, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x84F /* #741 'MDLColorSwatchTexture' => 'ModelIO.MDLColorSwatchTexture, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x855 /* #742 'MDLLightProbe' => 'ModelIO.MDLLightProbe, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x85B /* #743 'Microsoft_macOS__ModelIO_MDLLightProbeIrradianceDataSource' => 'ModelIO.MDLLightProbeIrradianceDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x85F /* #744 'MDLMaterial' => 'ModelIO.MDLMaterial, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x861 /* #745 'MDLMaterialProperty' => 'ModelIO.MDLMaterialProperty, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x863 /* #746 'MDLMaterialPropertyConnection' => 'ModelIO.MDLMaterialPropertyConnection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x865 /* #747 'MDLMaterialPropertyNode' => 'ModelIO.MDLMaterialPropertyNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x867 /* #748 'MDLMaterialPropertyGraph' => 'ModelIO.MDLMaterialPropertyGraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x871 /* #749 'MDLMeshBufferData' => 'ModelIO.MDLMeshBufferData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x873 /* #750 'MDLMeshBufferDataAllocator' => 'ModelIO.MDLMeshBufferDataAllocator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x875 /* #751 'MDLMeshBufferMap' => 'ModelIO.MDLMeshBufferMap, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x87B /* #752 'MDLMeshBufferZoneDefault' => 'ModelIO.MDLMeshBufferZoneDefault, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x87D /* #753 'MDLNormalMapTexture' => 'ModelIO.MDLNormalMapTexture, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x883 /* #754 'MDLObjectContainer' => 'ModelIO.MDLObjectContainer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x885 /* #755 'MDLPackedJointAnimation' => 'ModelIO.MDLPackedJointAnimation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x887 /* #756 'MDLPathAssetResolver' => 'ModelIO.MDLPathAssetResolver, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x889 /* #757 'MDLPhotometricLight' => 'ModelIO.MDLPhotometricLight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x88B /* #758 'MDLScatteringFunction' => 'ModelIO.MDLScatteringFunction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x88D /* #759 'MDLPhysicallyPlausibleScatteringFunction' => 'ModelIO.MDLPhysicallyPlausibleScatteringFunction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x88F /* #760 'MDLRelativeAssetResolver' => 'ModelIO.MDLRelativeAssetResolver, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x891 /* #761 'MDLSkeleton' => 'ModelIO.MDLSkeleton, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x893 /* #762 'MDLSkyCubeTexture' => 'ModelIO.MDLSkyCubeTexture, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x895 /* #763 'MDLStereoscopicCamera' => 'ModelIO.MDLStereoscopicCamera, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x897 /* #764 'MDLSubmesh' => 'ModelIO.MDLSubmesh, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x899 /* #765 'MDLSubmeshTopology' => 'ModelIO.MDLSubmeshTopology, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x89B /* #766 'MDLTextureFilter' => 'ModelIO.MDLTextureFilter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x89D /* #767 'MDLTextureSampler' => 'ModelIO.MDLTextureSampler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8A3 /* #768 'MDLTransformMatrixOp' => 'ModelIO.MDLTransformMatrixOp, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8A5 /* #769 'MDLTransformOrientOp' => 'ModelIO.MDLTransformOrientOp, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8A7 /* #770 'MDLTransformRotateOp' => 'ModelIO.MDLTransformRotateOp, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8A9 /* #771 'MDLTransformRotateXOp' => 'ModelIO.MDLTransformRotateXOp, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8AB /* #772 'MDLTransformRotateYOp' => 'ModelIO.MDLTransformRotateYOp, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8AD /* #773 'MDLTransformRotateZOp' => 'ModelIO.MDLTransformRotateZOp, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8AF /* #774 'MDLTransformScaleOp' => 'ModelIO.MDLTransformScaleOp, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8B1 /* #775 'MDLTransformStack' => 'ModelIO.MDLTransformStack, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8B3 /* #776 'MDLTransformTranslateOp' => 'ModelIO.MDLTransformTranslateOp, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8B5 /* #777 'MDLURLTexture' => 'ModelIO.MDLUrlTexture, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8B7 /* #778 'MDLVertexAttribute' => 'ModelIO.MDLVertexAttribute, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8B9 /* #779 'MDLVertexAttributeData' => 'ModelIO.MDLVertexAttributeData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8BB /* #780 'MDLVertexBufferLayout' => 'ModelIO.MDLVertexBufferLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8BD /* #781 'MDLVoxelArray' => 'ModelIO.MDLVoxelArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8BF /* #782 'MXMetricManager' => 'MetricKit.MXMetricManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8C1 /* #783 'MXAverage' => 'MetricKit.MXAverage`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8C3 /* #784 'MXCallStackTree' => 'MetricKit.MXCallStackTree, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8C5 /* #785 'MXDiagnostic' => 'MetricKit.MXDiagnostic, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8C7 /* #786 'MXCPUExceptionDiagnostic' => 'MetricKit.MXCpuExceptionDiagnostic, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8C9 /* #787 'MXCrashDiagnostic' => 'MetricKit.MXCrashDiagnostic, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8CB /* #788 'MXDiagnosticPayload' => 'MetricKit.MXDiagnosticPayload, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8CD /* #789 'MXDiskWriteExceptionDiagnostic' => 'MetricKit.MXDiskWriteExceptionDiagnostic, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8CF /* #790 'MXHangDiagnostic' => 'MetricKit.MXHangDiagnostic, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8D1 /* #791 'MXHistogram' => 'MetricKit.MXHistogram`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8D3 /* #792 'MXHistogramBucket' => 'MetricKit.MXHistogramBucket`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8D5 /* #793 'MXMetaData' => 'MetricKit.MXMetaData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8DB /* #794 'MPSGraph' => 'MetalPerformanceShadersGraph.MPSGraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8DD /* #795 'MPSGraphCompilationDescriptor' => 'MetalPerformanceShadersGraph.MPSGraphCompilationDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8DF /* #796 'MPSGraphConvolution2DOpDescriptor' => 'MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8E1 /* #797 'MPSGraphCreateSparseOpDescriptor' => 'MetalPerformanceShadersGraph.MPSGraphCreateSparseOpDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8E3 /* #798 'MPSGraphDepthwiseConvolution2DOpDescriptor' => 'MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution2DOpDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8E5 /* #799 'MPSGraphDevice' => 'MetalPerformanceShadersGraph.MPSGraphDevice, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8E7 /* #800 'MPSGraphExecutable' => 'MetalPerformanceShadersGraph.MPSGraphExecutable, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8E9 /* #801 'MPSGraphExecutableExecutionDescriptor' => 'MetalPerformanceShadersGraph.MPSGraphExecutableExecutionDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8EB /* #802 'MPSGraphExecutionDescriptor' => 'MetalPerformanceShadersGraph.MPSGraphExecutionDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8ED /* #803 'MPSGraphOperation' => 'MetalPerformanceShadersGraph.MPSGraphOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8EF /* #804 'MPSGraphPooling2DOpDescriptor' => 'MetalPerformanceShadersGraph.MPSGraphPooling2DOpDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8F1 /* #805 'MPSGraphRandomOpDescriptor' => 'MetalPerformanceShadersGraph.MPSGraphRandomOpDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8F3 /* #806 'MPSGraphType' => 'MetalPerformanceShadersGraph.MPSGraphType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8F5 /* #807 'MPSCNNConvolutionDescriptor' => 'MetalPerformanceShaders.MPSCnnConvolutionDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8F7 /* #808 'MPSKernel' => 'MetalPerformanceShaders.MPSKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8F9 /* #809 'MPSCNNKernel' => 'MetalPerformanceShaders.MPSCnnKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8FB /* #810 'MPSCNNBinaryConvolution' => 'MetalPerformanceShaders.MPSCnnBinaryConvolution, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8FD /* #811 'MPSCNNBinaryFullyConnected' => 'MetalPerformanceShaders.MPSCnnBinaryFullyConnected, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x8FF /* #812 'MPSCNNNeuron' => 'MetalPerformanceShaders.MPSCnnNeuron, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x901 /* #813 'MPSCNNNeuronPReLU' => 'MetalPerformanceShaders.MPSCnnNeuronPReLU, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x903 /* #814 'MPSUnaryImageKernel' => 'MetalPerformanceShaders.MPSUnaryImageKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x905 /* #815 'MPSImageScale' => 'MetalPerformanceShaders.MPSImageScale, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x907 /* #816 'MPSImage' => 'MetalPerformanceShaders.MPSImage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x909 /* #817 'MPSImageDilate' => 'MetalPerformanceShaders.MPSImageDilate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x90B /* #818 'MPSImageErode' => 'MetalPerformanceShaders.MPSImageErode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x90D /* #819 'MPSImageThresholdBinary' => 'MetalPerformanceShaders.MPSImageThresholdBinary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x90F /* #820 'MPSImageThresholdBinaryInverse' => 'MetalPerformanceShaders.MPSImageThresholdBinaryInverse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x911 /* #821 'MPSImageThresholdTruncate' => 'MetalPerformanceShaders.MPSImageThresholdTruncate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x913 /* #822 'MPSImageThresholdToZero' => 'MetalPerformanceShaders.MPSImageThresholdToZero, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x915 /* #823 'MPSImageThresholdToZeroInverse' => 'MetalPerformanceShaders.MPSImageThresholdToZeroInverse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x917 /* #824 'MPSImageSobel' => 'MetalPerformanceShaders.MPSImageSobel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x919 /* #825 'MPSCNNConvolution' => 'MetalPerformanceShaders.MPSCnnConvolution, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x91B /* #826 'MPSCNNFullyConnected' => 'MetalPerformanceShaders.MPSCnnFullyConnected, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x91D /* #827 'MPSImageConversion' => 'MetalPerformanceShaders.MPSImageConversion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x91F /* #828 'MPSImagePyramid' => 'MetalPerformanceShaders.MPSImagePyramid, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x921 /* #829 'MPSImageGaussianPyramid' => 'MetalPerformanceShaders.MPSImageGaussianPyramid, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x923 /* #830 'MPSImageLaplacianPyramid' => 'MetalPerformanceShaders.MPSImageLaplacianPyramid, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x925 /* #831 'MPSImageLaplacianPyramidSubtract' => 'MetalPerformanceShaders.MPSImageLaplacianPyramidSubtract, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x927 /* #832 'MPSImageLaplacianPyramidAdd' => 'MetalPerformanceShaders.MPSImageLaplacianPyramidAdd, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x929 /* #833 'MPSNNFilterNode' => 'MetalPerformanceShaders.MPSNNFilterNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x92B /* #834 'MPSCNNConvolutionNode' => 'MetalPerformanceShaders.MPSCnnConvolutionNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x92D /* #835 'MPSCNNBinaryConvolutionNode' => 'MetalPerformanceShaders.MPSCnnBinaryConvolutionNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x92F /* #836 'MPSCNNBinaryFullyConnectedNode' => 'MetalPerformanceShaders.MPSCnnBinaryFullyConnectedNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x931 /* #837 'MPSNDArray' => 'MetalPerformanceShaders.MPSNDArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x933 /* #838 'MPSStateResourceList' => 'MetalPerformanceShaders.MPSStateResourceList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x935 /* #839 'MPSAccelerationStructureGroup' => 'MetalPerformanceShaders.MPSAccelerationStructureGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x937 /* #840 'MPSBinaryImageKernel' => 'MetalPerformanceShaders.MPSBinaryImageKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x939 /* #841 'MPSCNNBinaryKernel' => 'MetalPerformanceShaders.MPSCnnBinaryKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x93B /* #842 'MPSCNNArithmetic' => 'MetalPerformanceShaders.MPSCnnArithmetic, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x93D /* #843 'MPSCNNAdd' => 'MetalPerformanceShaders.MPSCnnAdd, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x93F /* #844 'MPSCNNGradientKernel' => 'MetalPerformanceShaders.MPSCnnGradientKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x941 /* #845 'MPSCNNArithmeticGradient' => 'MetalPerformanceShaders.MPSCnnArithmeticGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x943 /* #846 'MPSCNNAddGradient' => 'MetalPerformanceShaders.MPSCnnAddGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x945 /* #847 'MPSState' => 'MetalPerformanceShaders.MPSState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x947 /* #848 'MPSNNBinaryGradientState' => 'MetalPerformanceShaders.MPSNNBinaryGradientState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x949 /* #849 'MPSCNNArithmeticGradientState' => 'MetalPerformanceShaders.MPSCnnArithmeticGradientState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x94B /* #850 'MPSCNNBatchNormalization' => 'MetalPerformanceShaders.MPSCnnBatchNormalization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x951 /* #851 'Microsoft_macOS__MetalPerformanceShaders_MPSCnnBatchNormalizationDataSource' => 'MetalPerformanceShaders.MPSCnnBatchNormalizationDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x957 /* #852 'MPSCNNBatchNormalizationGradient' => 'MetalPerformanceShaders.MPSCnnBatchNormalizationGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x959 /* #853 'MPSNNGradientFilterNode' => 'MetalPerformanceShaders.MPSNNGradientFilterNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x95F /* #854 'MPSCNNBatchNormalizationGradientNode' => 'MetalPerformanceShaders.MPSCnnBatchNormalizationGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x961 /* #855 'MPSCNNBatchNormalizationNode' => 'MetalPerformanceShaders.MPSCnnBatchNormalizationNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x963 /* #856 'MPSNNGradientState' => 'MetalPerformanceShaders.MPSNNGradientState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x965 /* #857 'MPSCNNBatchNormalizationState' => 'MetalPerformanceShaders.MPSCnnBatchNormalizationState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x967 /* #858 'MPSCNNBatchNormalizationStatistics' => 'MetalPerformanceShaders.MPSCnnBatchNormalizationStatistics, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x969 /* #859 'MPSCNNBatchNormalizationStatisticsGradient' => 'MetalPerformanceShaders.MPSCnnBatchNormalizationStatisticsGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x96F /* #860 'Microsoft_macOS__MetalPerformanceShaders_MPSCnnConvolutionDataSource' => 'MetalPerformanceShaders.MPSCnnConvolutionDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x973 /* #861 'MPSCNNConvolutionGradient' => 'MetalPerformanceShaders.MPSCnnConvolutionGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x975 /* #862 'MPSCNNConvolutionGradientNode' => 'MetalPerformanceShaders.MPSCnnConvolutionGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x97B /* #863 'MPSCNNConvolutionGradientState' => 'MetalPerformanceShaders.MPSCnnConvolutionGradientState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x97D /* #864 'MPSNNStateNode' => 'MetalPerformanceShaders.MPSNNStateNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x97F /* #865 'MPSNNGradientStateNode' => 'MetalPerformanceShaders.MPSNNGradientStateNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x981 /* #866 'MPSCNNConvolutionGradientStateNode' => 'MetalPerformanceShaders.MPSCnnConvolutionGradientStateNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x983 /* #867 'MPSCNNConvolutionStateNode' => 'MetalPerformanceShaders.MPSCnnConvolutionStateNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x985 /* #868 'MPSCNNConvolutionTranspose' => 'MetalPerformanceShaders.MPSCnnConvolutionTranspose, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x987 /* #869 'MPSCNNConvolutionTransposeNode' => 'MetalPerformanceShaders.MPSCnnConvolutionTransposeNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x989 /* #870 'MPSCNNConvolutionWeightsAndBiasesState' => 'MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x98B /* #871 'MPSCNNCrossChannelNormalization' => 'MetalPerformanceShaders.MPSCnnCrossChannelNormalization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x98D /* #872 'MPSCNNCrossChannelNormalizationGradient' => 'MetalPerformanceShaders.MPSCnnCrossChannelNormalizationGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x98F /* #873 'MPSCNNCrossChannelNormalizationGradientNode' => 'MetalPerformanceShaders.MPSCnnCrossChannelNormalizationGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x991 /* #874 'MPSCNNNormalizationNode' => 'MetalPerformanceShaders.MPSCnnNormalizationNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x993 /* #875 'MPSCNNCrossChannelNormalizationNode' => 'MetalPerformanceShaders.MPSCnnCrossChannelNormalizationNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x995 /* #876 'MPSCNNDepthWiseConvolutionDescriptor' => 'MetalPerformanceShaders.MPSCnnDepthWiseConvolutionDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x997 /* #877 'MPSCNNPooling' => 'MetalPerformanceShaders.MPSCnnPooling, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x999 /* #878 'MPSCNNDilatedPoolingMax' => 'MetalPerformanceShaders.MPSCnnDilatedPoolingMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x99B /* #879 'MPSCNNPoolingGradient' => 'MetalPerformanceShaders.MPSCnnPoolingGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x99D /* #880 'MPSCNNDilatedPoolingMaxGradient' => 'MetalPerformanceShaders.MPSCnnDilatedPoolingMaxGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x99F /* #881 'MPSCNNPoolingGradientNode' => 'MetalPerformanceShaders.MPSCnnPoolingGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9A1 /* #882 'MPSCNNDilatedPoolingMaxGradientNode' => 'MetalPerformanceShaders.MPSCnnDilatedPoolingMaxGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9A3 /* #883 'MPSCNNDilatedPoolingMaxNode' => 'MetalPerformanceShaders.MPSCnnDilatedPoolingMaxNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9A5 /* #884 'MPSCNNDivide' => 'MetalPerformanceShaders.MPSCnnDivide, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9A7 /* #885 'MPSCNNDropout' => 'MetalPerformanceShaders.MPSCnnDropout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9A9 /* #886 'MPSCNNDropoutGradient' => 'MetalPerformanceShaders.MPSCnnDropoutGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9AB /* #887 'MPSCNNDropoutGradientNode' => 'MetalPerformanceShaders.MPSCnnDropoutGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9AD /* #888 'MPSCNNDropoutGradientState' => 'MetalPerformanceShaders.MPSCnnDropoutGradientState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9AF /* #889 'MPSCNNDropoutNode' => 'MetalPerformanceShaders.MPSCnnDropoutNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9B1 /* #890 'MPSCNNFullyConnectedGradient' => 'MetalPerformanceShaders.MPSCnnFullyConnectedGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9B3 /* #891 'MPSCNNFullyConnectedNode' => 'MetalPerformanceShaders.MPSCnnFullyConnectedNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9B5 /* #892 'MPSCNNInstanceNormalization' => 'MetalPerformanceShaders.MPSCnnInstanceNormalization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9BB /* #893 'Microsoft_macOS__MetalPerformanceShaders_MPSCnnInstanceNormalizationDataSource' => 'MetalPerformanceShaders.MPSCnnInstanceNormalizationDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9C1 /* #894 'MPSCNNInstanceNormalizationGradient' => 'MetalPerformanceShaders.MPSCnnInstanceNormalizationGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9C3 /* #895 'MPSCNNInstanceNormalizationGradientNode' => 'MetalPerformanceShaders.MPSCnnInstanceNormalizationGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9C5 /* #896 'MPSCNNInstanceNormalizationGradientState' => 'MetalPerformanceShaders.MPSCnnInstanceNormalizationGradientState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9C7 /* #897 'MPSCNNInstanceNormalizationNode' => 'MetalPerformanceShaders.MPSCnnInstanceNormalizationNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9C9 /* #898 'MPSCNNLocalContrastNormalization' => 'MetalPerformanceShaders.MPSCnnLocalContrastNormalization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9CB /* #899 'MPSCNNLocalContrastNormalizationGradient' => 'MetalPerformanceShaders.MPSCnnLocalContrastNormalizationGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9CD /* #900 'MPSCNNLocalContrastNormalizationGradientNode' => 'MetalPerformanceShaders.MPSCnnLocalContrastNormalizationGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9CF /* #901 'MPSCNNLocalContrastNormalizationNode' => 'MetalPerformanceShaders.MPSCnnLocalContrastNormalizationNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9D1 /* #902 'MPSCNNLogSoftMax' => 'MetalPerformanceShaders.MPSCnnLogSoftMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9D3 /* #903 'MPSCNNLogSoftMaxGradient' => 'MetalPerformanceShaders.MPSCnnLogSoftMaxGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9D5 /* #904 'MPSCNNLogSoftMaxGradientNode' => 'MetalPerformanceShaders.MPSCnnLogSoftMaxGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9D7 /* #905 'MPSCNNLogSoftMaxNode' => 'MetalPerformanceShaders.MPSCnnLogSoftMaxNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9D9 /* #906 'MPSCNNLoss' => 'MetalPerformanceShaders.MPSCnnLoss, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9DB /* #907 'MPSCNNLossDataDescriptor' => 'MetalPerformanceShaders.MPSCnnLossDataDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9DD /* #908 'MPSCNNLossDescriptor' => 'MetalPerformanceShaders.MPSCnnLossDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9DF /* #909 'MPSCNNLossLabels' => 'MetalPerformanceShaders.MPSCnnLossLabels, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9E1 /* #910 'MPSCNNLossNode' => 'MetalPerformanceShaders.MPSCnnLossNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9E3 /* #911 'MPSCNNMultiply' => 'MetalPerformanceShaders.MPSCnnMultiply, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9E5 /* #912 'MPSCNNMultiplyGradient' => 'MetalPerformanceShaders.MPSCnnMultiplyGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9E7 /* #913 'MPSCNNNeuronAbsolute' => 'MetalPerformanceShaders.MPSCnnNeuronAbsolute, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9E9 /* #914 'MPSCNNNeuronNode' => 'MetalPerformanceShaders.MPSCnnNeuronNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9EB /* #915 'MPSCNNNeuronAbsoluteNode' => 'MetalPerformanceShaders.MPSCnnNeuronAbsoluteNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9ED /* #916 'MPSCNNNeuronELU' => 'MetalPerformanceShaders.MPSCnnNeuronElu, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9EF /* #917 'MPSCNNNeuronELUNode' => 'MetalPerformanceShaders.MPSCnnNeuronEluNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9F1 /* #918 'MPSCNNNeuronExponential' => 'MetalPerformanceShaders.MPSCnnNeuronExponential, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9F3 /* #919 'MPSCNNNeuronExponentialNode' => 'MetalPerformanceShaders.MPSCnnNeuronExponentialNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9F5 /* #920 'MPSCNNNeuronGradient' => 'MetalPerformanceShaders.MPSCnnNeuronGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9F7 /* #921 'MPSCNNNeuronGradientNode' => 'MetalPerformanceShaders.MPSCnnNeuronGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9F9 /* #922 'MPSCNNNeuronHardSigmoid' => 'MetalPerformanceShaders.MPSCnnNeuronHardSigmoid, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9FB /* #923 'MPSCNNNeuronHardSigmoidNode' => 'MetalPerformanceShaders.MPSCnnNeuronHardSigmoidNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9FD /* #924 'MPSCNNNeuronLinear' => 'MetalPerformanceShaders.MPSCnnNeuronLinear, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x9FF /* #925 'MPSCNNNeuronLinearNode' => 'MetalPerformanceShaders.MPSCnnNeuronLinearNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA01 /* #926 'MPSCNNNeuronLogarithm' => 'MetalPerformanceShaders.MPSCnnNeuronLogarithm, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA03 /* #927 'MPSCNNNeuronLogarithmNode' => 'MetalPerformanceShaders.MPSCnnNeuronLogarithmNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA05 /* #928 'MPSCNNNeuronPower' => 'MetalPerformanceShaders.MPSCnnNeuronPower, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA07 /* #929 'MPSCNNNeuronPowerNode' => 'MetalPerformanceShaders.MPSCnnNeuronPowerNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA09 /* #930 'MPSCNNNeuronPReLUNode' => 'MetalPerformanceShaders.MPSCnnNeuronPReLUNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA0B /* #931 'MPSCNNNeuronReLU' => 'MetalPerformanceShaders.MPSCnnNeuronReLU, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA0D /* #932 'MPSCNNNeuronReLUN' => 'MetalPerformanceShaders.MPSCnnNeuronReLun, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA0F /* #933 'MPSCNNNeuronReLUNNode' => 'MetalPerformanceShaders.MPSCnnNeuronReLunNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA11 /* #934 'MPSCNNNeuronReLUNode' => 'MetalPerformanceShaders.MPSCnnNeuronReLUNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA13 /* #935 'MPSCNNNeuronSigmoid' => 'MetalPerformanceShaders.MPSCnnNeuronSigmoid, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA15 /* #936 'MPSCNNNeuronSigmoidNode' => 'MetalPerformanceShaders.MPSCnnNeuronSigmoidNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA17 /* #937 'MPSCNNNeuronSoftPlus' => 'MetalPerformanceShaders.MPSCnnNeuronSoftPlus, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA19 /* #938 'MPSCNNNeuronSoftPlusNode' => 'MetalPerformanceShaders.MPSCnnNeuronSoftPlusNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA1B /* #939 'MPSCNNNeuronSoftSign' => 'MetalPerformanceShaders.MPSCnnNeuronSoftSign, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA1D /* #940 'MPSCNNNeuronSoftSignNode' => 'MetalPerformanceShaders.MPSCnnNeuronSoftSignNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA1F /* #941 'MPSCNNNeuronTanH' => 'MetalPerformanceShaders.MPSCnnNeuronTanH, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA21 /* #942 'MPSCNNNeuronTanHNode' => 'MetalPerformanceShaders.MPSCnnNeuronTanHNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA23 /* #943 'MPSCNNNormalizationGammaAndBetaState' => 'MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA25 /* #944 'MPSCNNNormalizationMeanAndVarianceState' => 'MetalPerformanceShaders.MPSCnnNormalizationMeanAndVarianceState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA27 /* #945 'MPSCNNPoolingAverage' => 'MetalPerformanceShaders.MPSCnnPoolingAverage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA29 /* #946 'MPSCNNPoolingAverageGradient' => 'MetalPerformanceShaders.MPSCnnPoolingAverageGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA2B /* #947 'MPSCNNPoolingAverageGradientNode' => 'MetalPerformanceShaders.MPSCnnPoolingAverageGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA2D /* #948 'MPSCNNPoolingNode' => 'MetalPerformanceShaders.MPSCnnPoolingNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA2F /* #949 'MPSCNNPoolingAverageNode' => 'MetalPerformanceShaders.MPSCnnPoolingAverageNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA31 /* #950 'MPSCNNPoolingL2Norm' => 'MetalPerformanceShaders.MPSCnnPoolingL2Norm, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA33 /* #951 'MPSCNNPoolingL2NormGradient' => 'MetalPerformanceShaders.MPSCnnPoolingL2NormGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA35 /* #952 'MPSCNNPoolingL2NormGradientNode' => 'MetalPerformanceShaders.MPSCnnPoolingL2NormGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA37 /* #953 'MPSCNNPoolingL2NormNode' => 'MetalPerformanceShaders.MPSCnnPoolingL2NormNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA39 /* #954 'MPSCNNPoolingMax' => 'MetalPerformanceShaders.MPSCnnPoolingMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA3B /* #955 'MPSCNNPoolingMaxGradient' => 'MetalPerformanceShaders.MPSCnnPoolingMaxGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA3D /* #956 'MPSCNNPoolingMaxGradientNode' => 'MetalPerformanceShaders.MPSCnnPoolingMaxGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA3F /* #957 'MPSCNNPoolingMaxNode' => 'MetalPerformanceShaders.MPSCnnPoolingMaxNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA41 /* #958 'MPSCNNSoftMax' => 'MetalPerformanceShaders.MPSCnnSoftMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA43 /* #959 'MPSCNNSoftMaxGradient' => 'MetalPerformanceShaders.MPSCnnSoftMaxGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA45 /* #960 'MPSCNNSoftMaxGradientNode' => 'MetalPerformanceShaders.MPSCnnSoftMaxGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA47 /* #961 'MPSCNNSoftMaxNode' => 'MetalPerformanceShaders.MPSCnnSoftMaxNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA49 /* #962 'MPSCNNSpatialNormalization' => 'MetalPerformanceShaders.MPSCnnSpatialNormalization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA4B /* #963 'MPSCNNSpatialNormalizationGradient' => 'MetalPerformanceShaders.MPSCnnSpatialNormalizationGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA4D /* #964 'MPSCNNSpatialNormalizationGradientNode' => 'MetalPerformanceShaders.MPSCnnSpatialNormalizationGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA4F /* #965 'MPSCNNSpatialNormalizationNode' => 'MetalPerformanceShaders.MPSCnnSpatialNormalizationNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA51 /* #966 'MPSCNNSubPixelConvolutionDescriptor' => 'MetalPerformanceShaders.MPSCnnSubPixelConvolutionDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA53 /* #967 'MPSCNNSubtract' => 'MetalPerformanceShaders.MPSCnnSubtract, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA55 /* #968 'MPSCNNSubtractGradient' => 'MetalPerformanceShaders.MPSCnnSubtractGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA57 /* #969 'MPSCNNUpsampling' => 'MetalPerformanceShaders.MPSCnnUpsampling, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA59 /* #970 'MPSCNNUpsamplingBilinear' => 'MetalPerformanceShaders.MPSCnnUpsamplingBilinear, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA5B /* #971 'MPSCNNUpsamplingGradient' => 'MetalPerformanceShaders.MPSCnnUpsamplingGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA5D /* #972 'MPSCNNUpsamplingBilinearGradient' => 'MetalPerformanceShaders.MPSCnnUpsamplingBilinearGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA5F /* #973 'MPSCNNUpsamplingBilinearGradientNode' => 'MetalPerformanceShaders.MPSCnnUpsamplingBilinearGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA61 /* #974 'MPSCNNUpsamplingBilinearNode' => 'MetalPerformanceShaders.MPSCnnUpsamplingBilinearNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA63 /* #975 'MPSCNNUpsamplingNearest' => 'MetalPerformanceShaders.MPSCnnUpsamplingNearest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA65 /* #976 'MPSCNNUpsamplingNearestGradient' => 'MetalPerformanceShaders.MPSCnnUpsamplingNearestGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA67 /* #977 'MPSCNNUpsamplingNearestGradientNode' => 'MetalPerformanceShaders.MPSCnnUpsamplingNearestGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA69 /* #978 'MPSCNNUpsamplingNearestNode' => 'MetalPerformanceShaders.MPSCnnUpsamplingNearestNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA6B /* #979 'MPSCNNYOLOLoss' => 'MetalPerformanceShaders.MPSCnnYoloLoss, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA6D /* #980 'MPSCNNYOLOLossDescriptor' => 'MetalPerformanceShaders.MPSCnnYoloLossDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA6F /* #981 'MPSCNNYOLOLossNode' => 'MetalPerformanceShaders.MPSCnnYoloLossNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA75 /* #982 'MPSCommandBuffer' => 'MetalPerformanceShaders.MPSCommandBuffer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA7B /* #983 'MPSRNNDescriptor' => 'MetalPerformanceShaders.MPSRnnDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA7D /* #984 'MPSGRUDescriptor' => 'MetalPerformanceShaders.MPSGRUDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA87 /* #985 'MPSImageArithmetic' => 'MetalPerformanceShaders.MPSImageArithmetic, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA89 /* #986 'MPSImageAdd' => 'MetalPerformanceShaders.MPSImageAdd, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA8F /* #987 'MPSImageAreaMax' => 'MetalPerformanceShaders.MPSImageAreaMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA91 /* #988 'MPSImageAreaMin' => 'MetalPerformanceShaders.MPSImageAreaMin, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA93 /* #989 'MPSImageBilinearScale' => 'MetalPerformanceShaders.MPSImageBilinearScale, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA95 /* #990 'MPSImageBox' => 'MetalPerformanceShaders.MPSImageBox, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA97 /* #991 'MPSImageConvolution' => 'MetalPerformanceShaders.MPSImageConvolution, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA99 /* #992 'MPSImageCopyToMatrix' => 'MetalPerformanceShaders.MPSImageCopyToMatrix, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA9B /* #993 'MPSImageDescriptor' => 'MetalPerformanceShaders.MPSImageDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA9D /* #994 'MPSImageDivide' => 'MetalPerformanceShaders.MPSImageDivide, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xA9F /* #995 'MPSImageEuclideanDistanceTransform' => 'MetalPerformanceShaders.MPSImageEuclideanDistanceTransform, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAA1 /* #996 'MPSImageFindKeypoints' => 'MetalPerformanceShaders.MPSImageFindKeypoints, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAA3 /* #997 'MPSImageGaussianBlur' => 'MetalPerformanceShaders.MPSImageGaussianBlur, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAA5 /* #998 'MPSImageGuidedFilter' => 'MetalPerformanceShaders.MPSImageGuidedFilter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAA7 /* #999 'MPSImageHistogram' => 'MetalPerformanceShaders.MPSImageHistogram, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAA9 /* #1000 'MPSImageHistogramEqualization' => 'MetalPerformanceShaders.MPSImageHistogramEqualization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAAB /* #1001 'MPSImageHistogramSpecification' => 'MetalPerformanceShaders.MPSImageHistogramSpecification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAAD /* #1002 'MPSImageIntegral' => 'MetalPerformanceShaders.MPSImageIntegral, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAAF /* #1003 'MPSImageIntegralOfSquares' => 'MetalPerformanceShaders.MPSImageIntegralOfSquares, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAB1 /* #1004 'MPSImageLanczosScale' => 'MetalPerformanceShaders.MPSImageLanczosScale, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAB3 /* #1005 'MPSImageLaplacian' => 'MetalPerformanceShaders.MPSImageLaplacian, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAB5 /* #1006 'MPSImageMedian' => 'MetalPerformanceShaders.MPSImageMedian, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAB7 /* #1007 'MPSImageMultiply' => 'MetalPerformanceShaders.MPSImageMultiply, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAB9 /* #1008 'MPSImageNormalizedHistogram' => 'MetalPerformanceShaders.MPSImageNormalizedHistogram, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xABB /* #1009 'MPSImageReduceUnary' => 'MetalPerformanceShaders.MPSImageReduceUnary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xABD /* #1010 'MPSImageReduceColumnMax' => 'MetalPerformanceShaders.MPSImageReduceColumnMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xABF /* #1011 'MPSImageReduceColumnMean' => 'MetalPerformanceShaders.MPSImageReduceColumnMean, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAC1 /* #1012 'MPSImageReduceColumnMin' => 'MetalPerformanceShaders.MPSImageReduceColumnMin, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAC3 /* #1013 'MPSImageReduceColumnSum' => 'MetalPerformanceShaders.MPSImageReduceColumnSum, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAC5 /* #1014 'MPSImageReduceRowMax' => 'MetalPerformanceShaders.MPSImageReduceRowMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAC7 /* #1015 'MPSImageReduceRowMean' => 'MetalPerformanceShaders.MPSImageReduceRowMean, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAC9 /* #1016 'MPSImageReduceRowMin' => 'MetalPerformanceShaders.MPSImageReduceRowMin, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xACB /* #1017 'MPSImageReduceRowSum' => 'MetalPerformanceShaders.MPSImageReduceRowSum, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xACD /* #1018 'MPSImageStatisticsMean' => 'MetalPerformanceShaders.MPSImageStatisticsMean, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xACF /* #1019 'MPSImageStatisticsMeanAndVariance' => 'MetalPerformanceShaders.MPSImageStatisticsMeanAndVariance, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAD1 /* #1020 'MPSImageStatisticsMinAndMax' => 'MetalPerformanceShaders.MPSImageStatisticsMinAndMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAD3 /* #1021 'MPSImageSubtract' => 'MetalPerformanceShaders.MPSImageSubtract, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAD5 /* #1022 'MPSImageTent' => 'MetalPerformanceShaders.MPSImageTent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xADB /* #1023 'MPSImageTranspose' => 'MetalPerformanceShaders.MPSImageTranspose, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xADD /* #1024 'MPSAccelerationStructure' => 'MetalPerformanceShaders.MPSAccelerationStructure, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xADF /* #1025 'MPSInstanceAccelerationStructure' => 'MetalPerformanceShaders.MPSInstanceAccelerationStructure, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAE1 /* #1026 'NSCoder' => 'Foundation.NSCoder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAE3 /* #1027 'NSKeyedUnarchiver' => 'Foundation.NSKeyedUnarchiver, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAE5 /* #1028 'MPSKeyedUnarchiver' => 'MetalPerformanceShaders.MPSKeyedUnarchiver, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAE7 /* #1029 'MPSLSTMDescriptor' => 'MetalPerformanceShaders.MPSLSTMDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAE9 /* #1030 'MPSMatrix' => 'MetalPerformanceShaders.MPSMatrix, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAEB /* #1031 'MPSMatrixUnaryKernel' => 'MetalPerformanceShaders.MPSMatrixUnaryKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAED /* #1032 'MPSMatrixBatchNormalization' => 'MetalPerformanceShaders.MPSMatrixBatchNormalization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAEF /* #1033 'MPSMatrixBinaryKernel' => 'MetalPerformanceShaders.MPSMatrixBinaryKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAF1 /* #1034 'MPSMatrixBatchNormalizationGradient' => 'MetalPerformanceShaders.MPSMatrixBatchNormalizationGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAF3 /* #1035 'MPSMatrixCopy' => 'MetalPerformanceShaders.MPSMatrixCopy, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAF5 /* #1036 'MPSMatrixCopyDescriptor' => 'MetalPerformanceShaders.MPSMatrixCopyDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAF7 /* #1037 'MPSMatrixCopyToImage' => 'MetalPerformanceShaders.MPSMatrixCopyToImage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAF9 /* #1038 'MPSMatrixDecompositionCholesky' => 'MetalPerformanceShaders.MPSMatrixDecompositionCholesky, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAFB /* #1039 'MPSMatrixDecompositionLU' => 'MetalPerformanceShaders.MPSMatrixDecompositionLU, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAFD /* #1040 'MPSMatrixDescriptor' => 'MetalPerformanceShaders.MPSMatrixDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xAFF /* #1041 'MPSMatrixFindTopK' => 'MetalPerformanceShaders.MPSMatrixFindTopK, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB01 /* #1042 'MPSMatrixFullyConnected' => 'MetalPerformanceShaders.MPSMatrixFullyConnected, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB03 /* #1043 'MPSMatrixFullyConnectedGradient' => 'MetalPerformanceShaders.MPSMatrixFullyConnectedGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB05 /* #1044 'MPSMatrixSoftMax' => 'MetalPerformanceShaders.MPSMatrixSoftMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB07 /* #1045 'MPSMatrixLogSoftMax' => 'MetalPerformanceShaders.MPSMatrixLogSoftMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB09 /* #1046 'MPSMatrixSoftMaxGradient' => 'MetalPerformanceShaders.MPSMatrixSoftMaxGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB0B /* #1047 'MPSMatrixLogSoftMaxGradient' => 'MetalPerformanceShaders.MPSMatrixLogSoftMaxGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB0D /* #1048 'MPSMatrixMultiplication' => 'MetalPerformanceShaders.MPSMatrixMultiplication, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB0F /* #1049 'MPSMatrixNeuron' => 'MetalPerformanceShaders.MPSMatrixNeuron, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB11 /* #1050 'MPSMatrixNeuronGradient' => 'MetalPerformanceShaders.MPSMatrixNeuronGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB13 /* #1051 'MPSMatrixRandom' => 'MetalPerformanceShaders.MPSMatrixRandom, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB15 /* #1052 'MPSMatrixRandomDistributionDescriptor' => 'MetalPerformanceShaders.MPSMatrixRandomDistributionDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB17 /* #1053 'MPSMatrixRandomMTGP32' => 'MetalPerformanceShaders.MPSMatrixRandomMtgp32, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB19 /* #1054 'MPSMatrixRandomPhilox' => 'MetalPerformanceShaders.MPSMatrixRandomPhilox, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB1B /* #1055 'MPSMatrixSolveCholesky' => 'MetalPerformanceShaders.MPSMatrixSolveCholesky, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB1D /* #1056 'MPSMatrixSolveLU' => 'MetalPerformanceShaders.MPSMatrixSolveLU, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB1F /* #1057 'MPSMatrixSolveTriangular' => 'MetalPerformanceShaders.MPSMatrixSolveTriangular, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB21 /* #1058 'MPSMatrixSum' => 'MetalPerformanceShaders.MPSMatrixSum, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB23 /* #1059 'MPSMatrixVectorMultiplication' => 'MetalPerformanceShaders.MPSMatrixVectorMultiplication, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB29 /* #1060 'MPSNNArithmeticGradientNode' => 'MetalPerformanceShaders.MPSNNArithmeticGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB2B /* #1061 'MPSNNAdditionGradientNode' => 'MetalPerformanceShaders.MPSNNAdditionGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB2D /* #1062 'MPSNNBinaryArithmeticNode' => 'MetalPerformanceShaders.MPSNNBinaryArithmeticNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB2F /* #1063 'MPSNNAdditionNode' => 'MetalPerformanceShaders.MPSNNAdditionNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB31 /* #1064 'MPSNNBinaryGradientStateNode' => 'MetalPerformanceShaders.MPSNNBinaryGradientStateNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB33 /* #1065 'MPSNNArithmeticGradientStateNode' => 'MetalPerformanceShaders.MPSNNArithmeticGradientStateNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB35 /* #1066 'MPSNNScaleNode' => 'MetalPerformanceShaders.MPSNNScaleNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB37 /* #1067 'MPSNNBilinearScaleNode' => 'MetalPerformanceShaders.MPSNNBilinearScaleNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB39 /* #1068 'MPSNNCompare' => 'MetalPerformanceShaders.MPSNNCompare, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB3B /* #1069 'MPSNNComparisonNode' => 'MetalPerformanceShaders.MPSNNComparisonNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB3D /* #1070 'MPSNNConcatenationGradientNode' => 'MetalPerformanceShaders.MPSNNConcatenationGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB3F /* #1071 'MPSNNConcatenationNode' => 'MetalPerformanceShaders.MPSNNConcatenationNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB41 /* #1072 'MPSNNCropAndResizeBilinear' => 'MetalPerformanceShaders.MPSNNCropAndResizeBilinear, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB47 /* #1073 'MPSNNDefaultPadding' => 'MetalPerformanceShaders.MPSNNDefaultPadding, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB49 /* #1074 'MPSNNDivisionNode' => 'MetalPerformanceShaders.MPSNNDivisionNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB4B /* #1075 'MPSNNForwardLossNode' => 'MetalPerformanceShaders.MPSNNForwardLossNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB4D /* #1076 'MPSNNImageNode' => 'MetalPerformanceShaders.MPSNNImageNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB4F /* #1077 'MPSNNInitialGradientNode' => 'MetalPerformanceShaders.MPSNNInitialGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB51 /* #1078 'MPSNNLabelsNode' => 'MetalPerformanceShaders.MPSNNLabelsNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB53 /* #1079 'MPSNNLanczosScaleNode' => 'MetalPerformanceShaders.MPSNNLanczosScaleNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB59 /* #1080 'MPSNNLossGradientNode' => 'MetalPerformanceShaders.MPSNNLossGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB5B /* #1081 'MPSNNMultiplicationGradientNode' => 'MetalPerformanceShaders.MPSNNMultiplicationGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB5D /* #1082 'MPSNNMultiplicationNode' => 'MetalPerformanceShaders.MPSNNMultiplicationNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB5F /* #1083 'MPSNNNeuronDescriptor' => 'MetalPerformanceShaders.MPSNNNeuronDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB61 /* #1084 'MPSNNOptimizer' => 'MetalPerformanceShaders.MPSNNOptimizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB63 /* #1085 'MPSNNOptimizerAdam' => 'MetalPerformanceShaders.MPSNNOptimizerAdam, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB65 /* #1086 'MPSNNOptimizerDescriptor' => 'MetalPerformanceShaders.MPSNNOptimizerDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB67 /* #1087 'MPSNNOptimizerRMSProp' => 'MetalPerformanceShaders.MPSNNOptimizerRmsProp, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB69 /* #1088 'MPSNNOptimizerStochasticGradientDescent' => 'MetalPerformanceShaders.MPSNNOptimizerStochasticGradientDescent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB6B /* #1089 'MPSNNPad' => 'MetalPerformanceShaders.MPSNNPad, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB6D /* #1090 'MPSNNPadGradient' => 'MetalPerformanceShaders.MPSNNPadGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB6F /* #1091 'MPSNNPadGradientNode' => 'MetalPerformanceShaders.MPSNNPadGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB71 /* #1092 'MPSNNPadNode' => 'MetalPerformanceShaders.MPSNNPadNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB73 /* #1093 'MPSNNReduceBinary' => 'MetalPerformanceShaders.MPSNNReduceBinary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB75 /* #1094 'MPSNNReduceUnary' => 'MetalPerformanceShaders.MPSNNReduceUnary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB77 /* #1095 'MPSNNReduceColumnMax' => 'MetalPerformanceShaders.MPSNNReduceColumnMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB79 /* #1096 'MPSNNReduceColumnMean' => 'MetalPerformanceShaders.MPSNNReduceColumnMean, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB7B /* #1097 'MPSNNReduceColumnMin' => 'MetalPerformanceShaders.MPSNNReduceColumnMin, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB7D /* #1098 'MPSNNReduceColumnSum' => 'MetalPerformanceShaders.MPSNNReduceColumnSum, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB7F /* #1099 'MPSNNReduceFeatureChannelsAndWeightsMean' => 'MetalPerformanceShaders.MPSNNReduceFeatureChannelsAndWeightsMean, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB81 /* #1100 'MPSNNReduceFeatureChannelsAndWeightsSum' => 'MetalPerformanceShaders.MPSNNReduceFeatureChannelsAndWeightsSum, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB83 /* #1101 'MPSNNReduceFeatureChannelsArgumentMax' => 'MetalPerformanceShaders.MPSNNReduceFeatureChannelsArgumentMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB85 /* #1102 'MPSNNReduceFeatureChannelsArgumentMin' => 'MetalPerformanceShaders.MPSNNReduceFeatureChannelsArgumentMin, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB87 /* #1103 'MPSNNReduceFeatureChannelsMax' => 'MetalPerformanceShaders.MPSNNReduceFeatureChannelsMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB89 /* #1104 'MPSNNReduceFeatureChannelsMean' => 'MetalPerformanceShaders.MPSNNReduceFeatureChannelsMean, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB8B /* #1105 'MPSNNReduceFeatureChannelsMin' => 'MetalPerformanceShaders.MPSNNReduceFeatureChannelsMin, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB8D /* #1106 'MPSNNReduceFeatureChannelsSum' => 'MetalPerformanceShaders.MPSNNReduceFeatureChannelsSum, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB8F /* #1107 'MPSNNReduceRowMax' => 'MetalPerformanceShaders.MPSNNReduceRowMax, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB91 /* #1108 'MPSNNReduceRowMean' => 'MetalPerformanceShaders.MPSNNReduceRowMean, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB93 /* #1109 'MPSNNReduceRowMin' => 'MetalPerformanceShaders.MPSNNReduceRowMin, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB95 /* #1110 'MPSNNReduceRowSum' => 'MetalPerformanceShaders.MPSNNReduceRowSum, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB97 /* #1111 'MPSNNUnaryReductionNode' => 'MetalPerformanceShaders.MPSNNUnaryReductionNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB99 /* #1112 'MPSNNReductionColumnMaxNode' => 'MetalPerformanceShaders.MPSNNReductionColumnMaxNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB9B /* #1113 'MPSNNReductionColumnMeanNode' => 'MetalPerformanceShaders.MPSNNReductionColumnMeanNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB9D /* #1114 'MPSNNReductionColumnMinNode' => 'MetalPerformanceShaders.MPSNNReductionColumnMinNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xB9F /* #1115 'MPSNNReductionColumnSumNode' => 'MetalPerformanceShaders.MPSNNReductionColumnSumNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBA1 /* #1116 'MPSNNReductionFeatureChannelsArgumentMaxNode' => 'MetalPerformanceShaders.MPSNNReductionFeatureChannelsArgumentMaxNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBA3 /* #1117 'MPSNNReductionFeatureChannelsArgumentMinNode' => 'MetalPerformanceShaders.MPSNNReductionFeatureChannelsArgumentMinNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBA5 /* #1118 'MPSNNReductionFeatureChannelsMaxNode' => 'MetalPerformanceShaders.MPSNNReductionFeatureChannelsMaxNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBA7 /* #1119 'MPSNNReductionFeatureChannelsMeanNode' => 'MetalPerformanceShaders.MPSNNReductionFeatureChannelsMeanNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBA9 /* #1120 'MPSNNReductionFeatureChannelsMinNode' => 'MetalPerformanceShaders.MPSNNReductionFeatureChannelsMinNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBAB /* #1121 'MPSNNReductionFeatureChannelsSumNode' => 'MetalPerformanceShaders.MPSNNReductionFeatureChannelsSumNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBAD /* #1122 'MPSNNReductionRowMaxNode' => 'MetalPerformanceShaders.MPSNNReductionRowMaxNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBAF /* #1123 'MPSNNReductionRowMeanNode' => 'MetalPerformanceShaders.MPSNNReductionRowMeanNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBB1 /* #1124 'MPSNNReductionRowMinNode' => 'MetalPerformanceShaders.MPSNNReductionRowMinNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBB3 /* #1125 'MPSNNReductionRowSumNode' => 'MetalPerformanceShaders.MPSNNReductionRowSumNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBB5 /* #1126 'MPSNNReductionSpatialMeanGradientNode' => 'MetalPerformanceShaders.MPSNNReductionSpatialMeanGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBB7 /* #1127 'MPSNNReductionSpatialMeanNode' => 'MetalPerformanceShaders.MPSNNReductionSpatialMeanNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBB9 /* #1128 'MPSNNReshape' => 'MetalPerformanceShaders.MPSNNReshape, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBBB /* #1129 'MPSNNReshapeGradient' => 'MetalPerformanceShaders.MPSNNReshapeGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBBD /* #1130 'MPSNNReshapeGradientNode' => 'MetalPerformanceShaders.MPSNNReshapeGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBBF /* #1131 'MPSNNReshapeNode' => 'MetalPerformanceShaders.MPSNNReshapeNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBC1 /* #1132 'MPSNNResizeBilinear' => 'MetalPerformanceShaders.MPSNNResizeBilinear, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBC3 /* #1133 'MPSNNSlice' => 'MetalPerformanceShaders.MPSNNSlice, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBC5 /* #1134 'MPSNNSubtractionGradientNode' => 'MetalPerformanceShaders.MPSNNSubtractionGradientNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBC7 /* #1135 'MPSNNSubtractionNode' => 'MetalPerformanceShaders.MPSNNSubtractionNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBC9 /* #1136 'MPSPredicate' => 'MetalPerformanceShaders.MPSPredicate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBCB /* #1137 'MPSRayIntersector' => 'MetalPerformanceShaders.MPSRayIntersector, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBCD /* #1138 'MPSRNNImageInferenceLayer' => 'MetalPerformanceShaders.MPSRnnImageInferenceLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBCF /* #1139 'MPSRNNMatrixInferenceLayer' => 'MetalPerformanceShaders.MPSRnnMatrixInferenceLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBD1 /* #1140 'MPSRNNMatrixTrainingLayer' => 'MetalPerformanceShaders.MPSRnnMatrixTrainingLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBD3 /* #1141 'MPSRNNMatrixTrainingState' => 'MetalPerformanceShaders.MPSRnnMatrixTrainingState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBD5 /* #1142 'MPSRNNRecurrentImageState' => 'MetalPerformanceShaders.MPSRnnRecurrentImageState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBD7 /* #1143 'MPSRNNRecurrentMatrixState' => 'MetalPerformanceShaders.MPSRnnRecurrentMatrixState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBD9 /* #1144 'MPSRNNSingleGateDescriptor' => 'MetalPerformanceShaders.MPSRnnSingleGateDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBDB /* #1145 'MPSTemporaryImage' => 'MetalPerformanceShaders.MPSTemporaryImage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBDD /* #1146 'MPSTemporaryMatrix' => 'MetalPerformanceShaders.MPSTemporaryMatrix, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBDF /* #1147 'MPSTemporaryNDArray' => 'MetalPerformanceShaders.MPSTemporaryNDArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBE1 /* #1148 'MPSVector' => 'MetalPerformanceShaders.MPSVector, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBE3 /* #1149 'MPSTemporaryVector' => 'MetalPerformanceShaders.MPSTemporaryVector, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBE5 /* #1150 'MPSTriangleAccelerationStructure' => 'MetalPerformanceShaders.MPSTriangleAccelerationStructure, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBE7 /* #1151 'MPSVectorDescriptor' => 'MetalPerformanceShaders.MPSVectorDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBE9 /* #1152 'MTKMesh' => 'MetalKit.MTKMesh, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBEB /* #1153 'MTKMeshBufferAllocator' => 'MetalKit.MTKMeshBufferAllocator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBED /* #1154 'MTKMeshBuffer' => 'MetalKit.MTKMeshBuffer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBEF /* #1155 'MTKSubmesh' => 'MetalKit.MTKSubmesh, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBF5 /* #1156 'MTKView' => 'MetalKit.MTKView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBFB /* #1157 'Microsoft_macOS__MetalKit_MTKViewDelegate' => 'MetalKit.MTKViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xBFF /* #1158 'MTLRenderPipelineColorAttachmentDescriptorArray' => 'Metal.MTLRenderPipelineColorAttachmentDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC01 /* #1159 'MTLRenderPassColorAttachmentDescriptorArray' => 'Metal.MTLRenderPassColorAttachmentDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC03 /* #1160 'MTLVertexAttributeDescriptorArray' => 'Metal.MTLVertexAttributeDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC05 /* #1161 'MTLVertexBufferLayoutDescriptorArray' => 'Metal.MTLVertexBufferLayoutDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC07 /* #1162 'MTLBufferLayoutDescriptorArray' => 'Metal.MTLBufferLayoutDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC09 /* #1163 'MTLAttributeDescriptorArray' => 'Metal.MTLAttributeDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC0B /* #1164 'MTLPipelineBufferDescriptorArray' => 'Metal.MTLPipelineBufferDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC0D /* #1165 'MTLBlitPassSampleBufferAttachmentDescriptorArray' => 'Metal.MTLBlitPassSampleBufferAttachmentDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC0F /* #1166 'MTLComputePassSampleBufferAttachmentDescriptorArray' => 'Metal.MTLComputePassSampleBufferAttachmentDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC11 /* #1167 'MTLRenderPassDescriptor' => 'Metal.MTLRenderPassDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC13 /* #1168 'MTLRenderPassSampleBufferAttachmentDescriptorArray' => 'Metal.MTLRenderPassSampleBufferAttachmentDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC15 /* #1169 'MTLResourceStatePassSampleBufferAttachmentDescriptorArray' => 'Metal.MTLResourceStatePassSampleBufferAttachmentDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC17 /* #1170 'MTLVertexDescriptor' => 'Metal.MTLVertexDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC21 /* #1171 'MTLAccelerationStructureGeometryDescriptor' => 'Metal.MTLAccelerationStructureGeometryDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC23 /* #1172 'MTLAccelerationStructureBoundingBoxGeometryDescriptor' => 'Metal.MTLAccelerationStructureBoundingBoxGeometryDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC2D /* #1173 'MTLAccelerationStructureDescriptor' => 'Metal.MTLAccelerationStructureDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC2F /* #1174 'MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor' => 'Metal.MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC31 /* #1175 'MTLAccelerationStructureMotionTriangleGeometryDescriptor' => 'Metal.MTLAccelerationStructureMotionTriangleGeometryDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC33 /* #1176 'MTLAccelerationStructureTriangleGeometryDescriptor' => 'Metal.MTLAccelerationStructureTriangleGeometryDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC35 /* #1177 'MTLArgument' => 'Metal.MTLArgument, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC37 /* #1178 'MTLArgumentDescriptor' => 'Metal.MTLArgumentDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC3D /* #1179 'MTLType' => 'Metal.MTLType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC3F /* #1180 'MTLArrayType' => 'Metal.MTLArrayType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC41 /* #1181 'MTLAttribute' => 'Metal.MTLAttribute, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC43 /* #1182 'MTLAttributeDescriptor' => 'Metal.MTLAttributeDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC49 /* #1183 'MTLBinaryArchiveDescriptor' => 'Metal.MTLBinaryArchiveDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC4F /* #1184 'MTLBlitPassDescriptor' => 'Metal.MTLBlitPassDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC51 /* #1185 'MTLBlitPassSampleBufferAttachmentDescriptor' => 'Metal.MTLBlitPassSampleBufferAttachmentDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC57 /* #1186 'MTLBufferLayoutDescriptor' => 'Metal.MTLBufferLayoutDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC59 /* #1187 'MTLCaptureDescriptor' => 'Metal.MTLCaptureDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC5B /* #1188 'MTLCaptureManager' => 'Metal.MTLCaptureManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC61 /* #1189 'Microsoft_macOS__Metal_MTLCaptureScope' => 'Metal.MTLCaptureScope, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC65 /* #1190 'MTLCommandBufferDescriptor' => 'Metal.MTLCommandBufferDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC6F /* #1191 'MTLCompileOptions' => 'Metal.MTLCompileOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC75 /* #1192 'MTLComputePassDescriptor' => 'Metal.MTLComputePassDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC77 /* #1193 'MTLComputePassSampleBufferAttachmentDescriptor' => 'Metal.MTLComputePassSampleBufferAttachmentDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC79 /* #1194 'MTLComputePipelineDescriptor' => 'Metal.MTLComputePipelineDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC7B /* #1195 'MTLComputePipelineReflection' => 'Metal.MTLComputePipelineReflection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC89 /* #1196 'MTLCounterSampleBufferDescriptor' => 'Metal.MTLCounterSampleBufferDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC8F /* #1197 'MTLDepthStencilDescriptor' => 'Metal.MTLDepthStencilDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xC9D /* #1198 'Microsoft_macOS__Metal_MTLDrawable' => 'Metal.MTLDrawable, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCB1 /* #1199 'MTLFunctionConstant' => 'Metal.MTLFunctionConstant, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCB3 /* #1200 'MTLFunctionConstantValues' => 'Metal.MTLFunctionConstantValues, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCB5 /* #1201 'MTLFunctionDescriptor' => 'Metal.MTLFunctionDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCCB /* #1202 'MTLFunctionStitchingFunctionNode' => 'Metal.MTLFunctionStitchingFunctionNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCCD /* #1203 'MTLFunctionStitchingGraph' => 'Metal.MTLFunctionStitchingGraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCCF /* #1204 'MTLFunctionStitchingInputNode' => 'Metal.MTLFunctionStitchingInputNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCD5 /* #1205 'MTLHeapDescriptor' => 'Metal.MTLHeapDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCDB /* #1206 'MTLIndirectCommandBufferDescriptor' => 'Metal.MTLIndirectCommandBufferDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCE5 /* #1207 'MTLInstanceAccelerationStructureDescriptor' => 'Metal.MTLInstanceAccelerationStructureDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCE7 /* #1208 'MTLIntersectionFunctionDescriptor' => 'Metal.MTLIntersectionFunctionDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCED /* #1209 'MTLIntersectionFunctionTableDescriptor' => 'Metal.MTLIntersectionFunctionTableDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCF3 /* #1210 'MTLLinkedFunctions' => 'Metal.MTLLinkedFunctions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCF9 /* #1211 'MTLMotionKeyframeData' => 'Metal.MTLMotionKeyframeData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xCFF /* #1212 'MTLPipelineBufferDescriptor' => 'Metal.MTLPipelineBufferDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD01 /* #1213 'MTLPointerType' => 'Metal.MTLPointerType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD03 /* #1214 'MTLPrimitiveAccelerationStructureDescriptor' => 'Metal.MTLPrimitiveAccelerationStructureDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD05 /* #1215 'MTLRasterizationRateLayerArray' => 'Metal.MTLRasterizationRateLayerArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD07 /* #1216 'MTLRasterizationRateLayerDescriptor' => 'Metal.MTLRasterizationRateLayerDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD0D /* #1217 'MTLRasterizationRateMapDescriptor' => 'Metal.MTLRasterizationRateMapDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD0F /* #1218 'MTLRasterizationRateSampleArray' => 'Metal.MTLRasterizationRateSampleArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD15 /* #1219 'MTLRenderPassAttachmentDescriptor' => 'Metal.MTLRenderPassAttachmentDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD17 /* #1220 'MTLRenderPassColorAttachmentDescriptor' => 'Metal.MTLRenderPassColorAttachmentDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD19 /* #1221 'MTLRenderPassDepthAttachmentDescriptor' => 'Metal.MTLRenderPassDepthAttachmentDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD1B /* #1222 'MTLRenderPassSampleBufferAttachmentDescriptor' => 'Metal.MTLRenderPassSampleBufferAttachmentDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD1D /* #1223 'MTLRenderPassStencilAttachmentDescriptor' => 'Metal.MTLRenderPassStencilAttachmentDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD1F /* #1224 'MTLRenderPipelineColorAttachmentDescriptor' => 'Metal.MTLRenderPipelineColorAttachmentDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD21 /* #1225 'MTLRenderPipelineDescriptor' => 'Metal.MTLRenderPipelineDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD23 /* #1226 'MTLRenderPipelineFunctionsDescriptor' => 'Metal.MTLRenderPipelineFunctionsDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD25 /* #1227 'MTLRenderPipelineReflection' => 'Metal.MTLRenderPipelineReflection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD2F /* #1228 'MTLResourceStatePassDescriptor' => 'Metal.MTLResourceStatePassDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD31 /* #1229 'MTLResourceStatePassSampleBufferAttachmentDescriptor' => 'Metal.MTLResourceStatePassSampleBufferAttachmentDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD33 /* #1230 'MTLSamplerDescriptor' => 'Metal.MTLSamplerDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD3D /* #1231 'MTLSharedEventHandle' => 'Metal.MTLSharedEventHandle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD3F /* #1232 'MTLSharedEventListener' => 'Metal.MTLSharedEventListener, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD41 /* #1233 'MTLSharedTextureHandle' => 'Metal.MTLSharedTextureHandle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD43 /* #1234 'MTLStageInputOutputDescriptor' => 'Metal.MTLStageInputOutputDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD45 /* #1235 'MTLStencilDescriptor' => 'Metal.MTLStencilDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD47 /* #1236 'MTLStitchedLibraryDescriptor' => 'Metal.MTLStitchedLibraryDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD49 /* #1237 'MTLStructMember' => 'Metal.MTLStructMember, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD4B /* #1238 'MTLStructType' => 'Metal.MTLStructType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD51 /* #1239 'MTLTextureDescriptor' => 'Metal.MTLTextureDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD53 /* #1240 'MTLTextureReferenceType' => 'Metal.MTLTextureReferenceType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD55 /* #1241 'MTLTileRenderPipelineColorAttachmentDescriptor' => 'Metal.MTLTileRenderPipelineColorAttachmentDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD57 /* #1242 'MTLTileRenderPipelineColorAttachmentDescriptorArray' => 'Metal.MTLTileRenderPipelineColorAttachmentDescriptorArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD59 /* #1243 'MTLTileRenderPipelineDescriptor' => 'Metal.MTLTileRenderPipelineDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD5B /* #1244 'MTLVertexAttribute' => 'Metal.MTLVertexAttribute, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD5D /* #1245 'MTLVertexAttributeDescriptor' => 'Metal.MTLVertexAttributeDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD5F /* #1246 'MTLVertexBufferLayoutDescriptor' => 'Metal.MTLVertexBufferLayoutDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD65 /* #1247 'MTLVisibleFunctionTableDescriptor' => 'Metal.MTLVisibleFunctionTableDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD67 /* #1248 'MPNowPlayingInfoCenter' => 'MediaPlayer.MPNowPlayingInfoCenter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD69 /* #1249 'MPRemoteCommandEvent' => 'MediaPlayer.MPRemoteCommandEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD6B /* #1250 'MPChangeLanguageOptionCommandEvent' => 'MediaPlayer.MPChangeLanguageOptionCommandEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD6D /* #1251 'MPRemoteCommand' => 'MediaPlayer.MPRemoteCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD6F /* #1252 'MPChangePlaybackPositionCommand' => 'MediaPlayer.MPChangePlaybackPositionCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD71 /* #1253 'MPChangePlaybackPositionCommandEvent' => 'MediaPlayer.MPChangePlaybackPositionCommandEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD73 /* #1254 'MPChangePlaybackRateCommand' => 'MediaPlayer.MPChangePlaybackRateCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD75 /* #1255 'MPChangePlaybackRateCommandEvent' => 'MediaPlayer.MPChangePlaybackRateCommandEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD77 /* #1256 'MPChangeRepeatModeCommand' => 'MediaPlayer.MPChangeRepeatModeCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD79 /* #1257 'MPChangeRepeatModeCommandEvent' => 'MediaPlayer.MPChangeRepeatModeCommandEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD7B /* #1258 'MPChangeShuffleModeCommand' => 'MediaPlayer.MPChangeShuffleModeCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD7D /* #1259 'MPChangeShuffleModeCommandEvent' => 'MediaPlayer.MPChangeShuffleModeCommandEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD7F /* #1260 'MPContentItem' => 'MediaPlayer.MPContentItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD81 /* #1261 'MPFeedbackCommand' => 'MediaPlayer.MPFeedbackCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD83 /* #1262 'MPFeedbackCommandEvent' => 'MediaPlayer.MPFeedbackCommandEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD85 /* #1263 'MPMediaItem' => 'MediaPlayer.MPMediaItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD87 /* #1264 'MPMediaItemArtwork' => 'MediaPlayer.MPMediaItemArtwork, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD89 /* #1265 'MPNowPlayingInfoLanguageOption' => 'MediaPlayer.MPNowPlayingInfoLanguageOption, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD8B /* #1266 'MPNowPlayingInfoLanguageOptionGroup' => 'MediaPlayer.MPNowPlayingInfoLanguageOptionGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD8D /* #1267 'MPRatingCommand' => 'MediaPlayer.MPRatingCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD8F /* #1268 'MPRatingCommandEvent' => 'MediaPlayer.MPRatingCommandEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD91 /* #1269 'MPRemoteCommandCenter' => 'MediaPlayer.MPRemoteCommandCenter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD93 /* #1270 'MPSeekCommandEvent' => 'MediaPlayer.MPSeekCommandEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD95 /* #1271 'MPSkipIntervalCommandEvent' => 'MediaPlayer.MPSkipIntervalCommandEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xD9B /* #1272 'MKShape' => 'MapKit.MKShape, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDA1 /* #1273 'MKMultiPoint' => 'MapKit.MKMultiPoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDA7 /* #1274 'MKPolyline' => 'MapKit.MKPolyline, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDA9 /* #1275 'MKGeodesicPolyline' => 'MapKit.MKGeodesicPolyline, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDAB /* #1276 'MKMapItem' => 'MapKit.MKMapItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDAD /* #1277 'MKOverlayRenderer' => 'MapKit.MKOverlayRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDAF /* #1278 'MKPolygon' => 'MapKit.MKPolygon, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDB1 /* #1279 'Microsoft_macOS__MapKit_MKAnnotation' => 'MapKit.MKAnnotation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDB5 /* #1280 'MKAnnotationView' => 'MapKit.MKAnnotationView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDB7 /* #1281 'MKCircle' => 'MapKit.MKCircle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDB9 /* #1282 'MKOverlayPathRenderer' => 'MapKit.MKOverlayPathRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDBB /* #1283 'MKCircleRenderer' => 'MapKit.MKCircleRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDBD /* #1284 'MKClusterAnnotation' => 'MapKit.MKClusterAnnotation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDBF /* #1285 'MKCompassButton' => 'MapKit.MKCompassButton, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDC1 /* #1286 'MKDirectionsRequest' => 'MapKit.MKDirectionsRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDC3 /* #1287 'MKDirectionsResponse' => 'MapKit.MKDirectionsResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDC5 /* #1288 'NSFormatter' => 'Foundation.NSFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDC7 /* #1289 'MKDistanceFormatter' => 'MapKit.MKDistanceFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDC9 /* #1290 'MKETAResponse' => 'MapKit.MKETAResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDCB /* #1291 'MKGeoJSONDecoder' => 'MapKit.MKGeoJsonDecoder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDCD /* #1292 'MKGeoJSONFeature' => 'MapKit.MKGeoJsonFeature, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDCF /* #1293 'MKMapConfiguration' => 'MapKit.MKMapConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDD1 /* #1294 'MKHybridMapConfiguration' => 'MapKit.MKHybridMapConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDD3 /* #1295 'MKImageryMapConfiguration' => 'MapKit.MKImageryMapConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDD5 /* #1296 'MKLocalPointsOfInterestRequest' => 'MapKit.MKLocalPointsOfInterestRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDD7 /* #1297 'MKLocalSearchCompleter' => 'MapKit.MKLocalSearchCompleter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDDD /* #1298 'Microsoft_macOS__MapKit_MKLocalSearchCompleterDelegate' => 'MapKit.MKLocalSearchCompleterDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDE1 /* #1299 'MKLocalSearchCompletion' => 'MapKit.MKLocalSearchCompletion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDE3 /* #1300 'MKLocalSearchRequest' => 'MapKit.MKLocalSearchRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDE5 /* #1301 'MKLocalSearchResponse' => 'MapKit.MKLocalSearchResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDE7 /* #1302 'MKLookAroundScene' => 'MapKit.MKLookAroundScene, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDE9 /* #1303 'MKLookAroundSnapshot' => 'MapKit.MKLookAroundSnapshot, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDEB /* #1304 'MKLookAroundSnapshotOptions' => 'MapKit.MKLookAroundSnapshotOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDED /* #1305 'MKLookAroundViewController' => 'MapKit.MKLookAroundViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDF3 /* #1306 'Microsoft_macOS__MapKit_MKLookAroundViewControllerDelegate' => 'MapKit.MKLookAroundViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDF7 /* #1307 'MKMapCamera' => 'MapKit.MKMapCamera, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDF9 /* #1308 'MKMapCameraBoundary' => 'MapKit.MKMapCameraBoundary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDFB /* #1309 'MKMapCameraZoomRange' => 'MapKit.MKMapCameraZoomRange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDFD /* #1310 'MKMapSnapshot' => 'MapKit.MKMapSnapshot, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xDFF /* #1311 'MKMapSnapshotOptions' => 'MapKit.MKMapSnapshotOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE05 /* #1312 'Microsoft_macOS__MapKit_MKMapViewDelegate' => 'MapKit.MKMapViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE09 /* #1313 'MKMarkerAnnotationView' => 'MapKit.MKMarkerAnnotationView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE0B /* #1314 'MKMultiPolygon' => 'MapKit.MKMultiPolygon, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE0D /* #1315 'MKMultiPolygonRenderer' => 'MapKit.MKMultiPolygonRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE0F /* #1316 'MKMultiPolyline' => 'MapKit.MKMultiPolyline, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE11 /* #1317 'MKMultiPolylineRenderer' => 'MapKit.MKMultiPolylineRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE13 /* #1318 'Microsoft_macOS__MapKit_MKOverlay' => 'MapKit.MKOverlay, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE17 /* #1319 'MKPinAnnotationView' => 'MapKit.MKPinAnnotationView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE19 /* #1320 'MKPitchControl' => 'MapKit.MKPitchControl, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE1B /* #1321 'CLPlacemark' => 'CoreLocation.CLPlacemark, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE1D /* #1322 'MKPlacemark' => 'MapKit.MKPlacemark, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE1F /* #1323 'MKPointAnnotation' => 'MapKit.MKPointAnnotation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE21 /* #1324 'MKPolygonRenderer' => 'MapKit.MKPolygonRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE23 /* #1325 'MKPolylineRenderer' => 'MapKit.MKPolylineRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE25 /* #1326 'MKRoute' => 'MapKit.MKRoute, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE27 /* #1327 'MKRouteStep' => 'MapKit.MKRouteStep, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE29 /* #1328 'MKStandardMapConfiguration' => 'MapKit.MKStandardMapConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE2B /* #1329 'MKTileOverlay' => 'MapKit.MKTileOverlay, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE2D /* #1330 'MKTileOverlayRenderer' => 'MapKit.MKTileOverlayRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE2F /* #1331 'MKUserLocation' => 'MapKit.MKUserLocation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE31 /* #1332 'MKUserLocationView' => 'MapKit.MKUserLocationView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE33 /* #1333 'MKZoomControl' => 'MapKit.MKZoomControl, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE35 /* #1334 'MLCActivationDescriptor' => 'MLCompute.MLCActivationDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE37 /* #1335 'MLCLayer' => 'MLCompute.MLCLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE39 /* #1336 'MLCActivationLayer' => 'MLCompute.MLCActivationLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE3B /* #1337 'MLCOptimizer' => 'MLCompute.MLCOptimizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE3D /* #1338 'MLCAdamOptimizer' => 'MLCompute.MLCAdamOptimizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE3F /* #1339 'MLCAdamWOptimizer' => 'MLCompute.MLCAdamWOptimizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE41 /* #1340 'MLCArithmeticLayer' => 'MLCompute.MLCArithmeticLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE43 /* #1341 'MLCBatchNormalizationLayer' => 'MLCompute.MLCBatchNormalizationLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE45 /* #1342 'MLCComparisonLayer' => 'MLCompute.MLCComparisonLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE47 /* #1343 'MLCConcatenationLayer' => 'MLCompute.MLCConcatenationLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE49 /* #1344 'MLCConvolutionLayer' => 'MLCompute.MLCConvolutionLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE4B /* #1345 'MLCDevice' => 'MLCompute.MLCDevice, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE4D /* #1346 'MLCDropoutLayer' => 'MLCompute.MLCDropoutLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE4F /* #1347 'MLCEmbeddingDescriptor' => 'MLCompute.MLCEmbeddingDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE51 /* #1348 'MLCEmbeddingLayer' => 'MLCompute.MLCEmbeddingLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE53 /* #1349 'MLCFullyConnectedLayer' => 'MLCompute.MLCFullyConnectedLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE55 /* #1350 'MLCGatherLayer' => 'MLCompute.MLCGatherLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE57 /* #1351 'MLCGramMatrixLayer' => 'MLCompute.MLCGramMatrixLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE59 /* #1352 'MLCGroupNormalizationLayer' => 'MLCompute.MLCGroupNormalizationLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE5B /* #1353 'MLCInstanceNormalizationLayer' => 'MLCompute.MLCInstanceNormalizationLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE5D /* #1354 'MLCLossDescriptor' => 'MLCompute.MLCLossDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE5F /* #1355 'MLCLossLayer' => 'MLCompute.MLCLossLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE61 /* #1356 'MLCLSTMDescriptor' => 'MLCompute.MLCLstmDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE63 /* #1357 'MLCLSTMLayer' => 'MLCompute.MLCLstmLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE65 /* #1358 'MLCMatMulDescriptor' => 'MLCompute.MLCMatMulDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE67 /* #1359 'MLCMatMulLayer' => 'MLCompute.MLCMatMulLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE69 /* #1360 'MLCMultiheadAttentionDescriptor' => 'MLCompute.MLCMultiheadAttentionDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE6B /* #1361 'MLCMultiheadAttentionLayer' => 'MLCompute.MLCMultiheadAttentionLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE6D /* #1362 'MLCOptimizerDescriptor' => 'MLCompute.MLCOptimizerDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE6F /* #1363 'MLCPlatform' => 'MLCompute.MLCPlatform, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE71 /* #1364 'MLCPoolingLayer' => 'MLCompute.MLCPoolingLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE73 /* #1365 'MLCRMSPropOptimizer' => 'MLCompute.MLCRmsPropOptimizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE75 /* #1366 'MLCScatterLayer' => 'MLCompute.MLCScatterLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE77 /* #1367 'MLCSelectionLayer' => 'MLCompute.MLCSelectionLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE79 /* #1368 'MLCSGDOptimizer' => 'MLCompute.MLCSgdOptimizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE7B /* #1369 'MLCSoftmaxLayer' => 'MLCompute.MLCSoftmaxLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE7D /* #1370 'MLCTensorData' => 'MLCompute.MLCTensorData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE7F /* #1371 'MLCTensorOptimizerDeviceData' => 'MLCompute.MLCTensorOptimizerDeviceData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE81 /* #1372 'MLCTensorParameter' => 'MLCompute.MLCTensorParameter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE83 /* #1373 'MLCYOLOLossDescriptor' => 'MLCompute.MLCYoloLossDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE85 /* #1374 'MLCYOLOLossLayer' => 'MLCompute.MLCYoloLossLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE87 /* #1375 'JSContext' => 'JavaScriptCore.JSContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE89 /* #1376 'JSValue' => 'JavaScriptCore.JSValue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE8F /* #1377 'Microsoft_macOS__JavaScriptCore_JSExport' => 'JavaScriptCore.JSExport, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE93 /* #1378 'JSManagedValue' => 'JavaScriptCore.JSManagedValue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE95 /* #1379 'JSVirtualMachine' => 'JavaScriptCore.JSVirtualMachine, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE97 /* #1380 'INCallRecord' => 'Intents.INCallRecord, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE99 /* #1381 'INIntentResolutionResult' => 'Intents.INIntentResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xE9B /* #1382 'INCallRecordTypeResolutionResult' => 'Intents.INCallRecordTypeResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEA1 /* #1383 'INSpeakableString' => 'Intents.INSpeakableString, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEA3 /* #1384 'INAirline' => 'Intents.INAirline, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEA5 /* #1385 'INAirport' => 'Intents.INAirport, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEA7 /* #1386 'INAirportGate' => 'Intents.INAirportGate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEA9 /* #1387 'INIntent' => 'Intents.INIntent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEAB /* #1388 'INAnswerCallIntent' => 'Intents.INAnswerCallIntent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEB1 /* #1389 'INIntentResponse' => 'Intents.INIntentResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEB3 /* #1390 'INAnswerCallIntentResponse' => 'Intents.INAnswerCallIntentResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEB5 /* #1391 'INReservation' => 'Intents.INReservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEB7 /* #1392 'INBoatReservation' => 'Intents.INBoatReservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEB9 /* #1393 'INBoatTrip' => 'Intents.INBoatTrip, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEBB /* #1394 'INBooleanResolutionResult' => 'Intents.INBooleanResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEBD /* #1395 'INBusReservation' => 'Intents.INBusReservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEBF /* #1396 'INBusTrip' => 'Intents.INBusTrip, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEC1 /* #1397 'INCallCapabilityResolutionResult' => 'Intents.INCallCapabilityResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEC3 /* #1398 'INCallDestinationTypeResolutionResult' => 'Intents.INCallDestinationTypeResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEC5 /* #1399 'INCallGroup' => 'Intents.INCallGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEC7 /* #1400 'INCallRecordFilter' => 'Intents.INCallRecordFilter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEC9 /* #1401 'INCallRecordResolutionResult' => 'Intents.INCallRecordResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xECB /* #1402 'INCallRecordTypeOptionsResolutionResult' => 'Intents.INCallRecordTypeOptionsResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xECD /* #1403 'INCurrencyAmount' => 'Intents.INCurrencyAmount, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xECF /* #1404 'INDateComponentsRange' => 'Intents.INDateComponentsRange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xED1 /* #1405 'INDateComponentsResolutionResult' => 'Intents.INDateComponentsResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xED3 /* #1406 'INEnergyResolutionResult' => 'Intents.INEnergyResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xED5 /* #1407 'INEnumResolutionResult' => 'Intents.INEnumResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEDB /* #1408 'INExtension' => 'Intents.INExtension, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEDD /* #1409 'INFile' => 'Intents.INFile, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEDF /* #1410 'INFileResolutionResult' => 'Intents.INFileResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEE1 /* #1411 'INFlight' => 'Intents.INFlight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEE3 /* #1412 'INFlightReservation' => 'Intents.INFlightReservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEE5 /* #1413 'INFocusStatus' => 'Intents.INFocusStatus, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEE7 /* #1414 'INGetReservationDetailsIntent' => 'Intents.INGetReservationDetailsIntent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEE9 /* #1415 'INGetReservationDetailsIntentResponse' => 'Intents.INGetReservationDetailsIntentResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEEB /* #1416 'INHangUpCallIntent' => 'Intents.INHangUpCallIntent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEF1 /* #1417 'INHangUpCallIntentResponse' => 'Intents.INHangUpCallIntentResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEF3 /* #1418 'INImage' => 'Intents.INImage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEF5 /* #1419 'INIntegerResolutionResult' => 'Intents.INIntegerResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEF7 /* #1420 'INIntentDonationMetadata' => 'Intents.INIntentDonationMetadata, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEF9 /* #1421 'INLengthResolutionResult' => 'Intents.INLengthResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEFB /* #1422 'INLodgingReservation' => 'Intents.INLodgingReservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEFD /* #1423 'INMassResolutionResult' => 'Intents.INMassResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xEFF /* #1424 'INObject' => 'Intents.INObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF01 /* #1425 'INObjectCollection' => 'Intents.INObjectCollection`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF03 /* #1426 'INObjectResolutionResult' => 'Intents.INObjectResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF05 /* #1427 'INObjectSection' => 'Intents.INObjectSection`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF07 /* #1428 'INOutgoingMessageTypeResolutionResult' => 'Intents.INOutgoingMessageTypeResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF09 /* #1429 'INPaymentMethod' => 'Intents.INPaymentMethod, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF0B /* #1430 'INPaymentMethodResolutionResult' => 'Intents.INPaymentMethodResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF0D /* #1431 'INPersonHandle' => 'Intents.INPersonHandle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF0F /* #1432 'INPersonResolutionResult' => 'Intents.INPersonResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF11 /* #1433 'INPlacemarkResolutionResult' => 'Intents.INPlacemarkResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF13 /* #1434 'INRentalCar' => 'Intents.INRentalCar, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF15 /* #1435 'INRentalCarReservation' => 'Intents.INRentalCarReservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF17 /* #1436 'INReservationAction' => 'Intents.INReservationAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF19 /* #1437 'INRestaurantReservation' => 'Intents.INRestaurantReservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF1B /* #1438 'INSeat' => 'Intents.INSeat, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF1D /* #1439 'INSendMessageAttachment' => 'Intents.INSendMessageAttachment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF1F /* #1440 'INSendMessageIntent' => 'Intents.INSendMessageIntent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF21 /* #1441 'INSendMessageIntentDonationMetadata' => 'Intents.INSendMessageIntentDonationMetadata, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF27 /* #1442 'INSendMessageIntentResponse' => 'Intents.INSendMessageIntentResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF29 /* #1443 'INSendMessageRecipientResolutionResult' => 'Intents.INSendMessageRecipientResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF2B /* #1444 'INShareFocusStatusIntent' => 'Intents.INShareFocusStatusIntent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF31 /* #1445 'INShareFocusStatusIntentResponse' => 'Intents.INShareFocusStatusIntentResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF33 /* #1446 'INShortcut' => 'Intents.INShortcut, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF35 /* #1447 'INSpeedResolutionResult' => 'Intents.INSpeedResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF37 /* #1448 'INStartCallCallRecordToCallBackResolutionResult' => 'Intents.INStartCallCallRecordToCallBackResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF39 /* #1449 'INStartCallIntent' => 'Intents.INStartCallIntent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF3B /* #1450 'INStringResolutionResult' => 'Intents.INStringResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF3D /* #1451 'INTemperatureResolutionResult' => 'Intents.INTemperatureResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF3F /* #1452 'INTimeIntervalResolutionResult' => 'Intents.INTimeIntervalResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF41 /* #1453 'INTrainReservation' => 'Intents.INTrainReservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF43 /* #1454 'INTrainTrip' => 'Intents.INTrainTrip, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF45 /* #1455 'INURLResolutionResult' => 'Intents.INUrlResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF47 /* #1456 'INVoiceShortcut' => 'Intents.INVoiceShortcut, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF49 /* #1457 'INVolumeResolutionResult' => 'Intents.INVolumeResolutionResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF4F /* #1458 'Microsoft_macOS__ImageKit_IKCameraDeviceViewDelegate' => 'ImageKit.IKCameraDeviceViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF57 /* #1459 'Microsoft_macOS__ImageKit_IKDeviceBrowserViewDelegate' => 'ImageKit.IKDeviceBrowserViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF5B /* #1460 'IKFilterBrowserView' => 'ImageKit.IKFilterBrowserView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF61 /* #1461 'Microsoft_macOS__ImageKit_IKFilterCustomUIProvider' => 'ImageKit.IKFilterCustomUIProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF65 /* #1462 'IKFilterUIView' => 'ImageKit.IKFilterUIView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF67 /* #1463 'IKImageBrowserCell' => 'ImageKit.IKImageBrowserCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF69 /* #1464 'Microsoft_macOS__ImageKit_IKImageBrowserDataSource' => 'ImageKit.IKImageBrowserDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF6D /* #1465 'Microsoft_macOS__ImageKit_IKImageBrowserDelegate' => 'ImageKit.IKImageBrowserDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF71 /* #1466 'Microsoft_macOS__ImageKit_IKImageBrowserItem' => 'ImageKit.IKImageBrowserItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF75 /* #1467 'IKImageEditPanel' => 'ImageKit.IKImageEditPanel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF7B /* #1468 'Microsoft_macOS__ImageKit_IKImageEditPanelDataSource' => 'ImageKit.IKImageEditPanelDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF7F /* #1469 'IKImageView' => 'ImageKit.IKImageView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF81 /* #1470 'IKPictureTaker' => 'ImageKit.IKPictureTaker, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF83 /* #1471 'Microsoft_macOS__ImageKit_IKSaveOptionsDelegate' => 'ImageKit.IKSaveOptionsDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF8B /* #1472 'Microsoft_macOS__ImageKit_IKScannerDeviceViewDelegate' => 'ImageKit.IKScannerDeviceViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF8F /* #1473 'IKSlideshow' => 'ImageKit.IKSlideshow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xF95 /* #1474 'Microsoft_macOS__ImageKit_IKSlideshowDataSource' => 'ImageKit.IKSlideshowDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFA1 /* #1475 'Microsoft_macOS__ImageCaptureCore_ICCameraDeviceDelegate' => 'ImageCaptureCore.ICCameraDeviceDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFA9 /* #1476 'Microsoft_macOS__ImageCaptureCore_ICCameraDeviceDownloadDelegate' => 'ImageCaptureCore.ICCameraDeviceDownloadDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFAD /* #1477 'ICCameraItem' => 'ImageCaptureCore.ICCameraItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFAF /* #1478 'ICCameraFile' => 'ImageCaptureCore.ICCameraFile, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFB1 /* #1479 'ICCameraFolder' => 'ImageCaptureCore.ICCameraFolder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFB3 /* #1480 'ICDevice' => 'ImageCaptureCore.ICDevice, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFB5 /* #1481 'ICDeviceBrowser' => 'ImageCaptureCore.ICDeviceBrowser, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFBB /* #1482 'Microsoft_macOS__ImageCaptureCore_ICDeviceBrowserDelegate' => 'ImageCaptureCore.ICDeviceBrowserDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFBF /* #1483 'Microsoft_macOS__ImageCaptureCore_ICDeviceDelegate' => 'ImageCaptureCore.ICDeviceDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFC3 /* #1484 'ICScannerBandData' => 'ImageCaptureCore.ICScannerBandData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFC5 /* #1485 'ICScannerDevice' => 'ImageCaptureCore.ICScannerDevice, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFCB /* #1486 'Microsoft_macOS__ImageCaptureCore_ICScannerDeviceDelegate' => 'ImageCaptureCore.ICScannerDeviceDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFCF /* #1487 'ICScannerFeature' => 'ImageCaptureCore.ICScannerFeature, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFD1 /* #1488 'ICScannerFeatureBoolean' => 'ImageCaptureCore.ICScannerFeatureBoolean, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFD3 /* #1489 'ICScannerFeatureEnumeration' => 'ImageCaptureCore.ICScannerFeatureEnumeration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFD5 /* #1490 'ICScannerFeatureRange' => 'ImageCaptureCore.ICScannerFeatureRange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFD7 /* #1491 'ICScannerFeatureTemplate' => 'ImageCaptureCore.ICScannerFeatureTemplate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFD9 /* #1492 'ICScannerFunctionalUnit' => 'ImageCaptureCore.ICScannerFunctionalUnit, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFDB /* #1493 'ICScannerFunctionalUnitDocumentFeeder' => 'ImageCaptureCore.ICScannerFunctionalUnitDocumentFeeder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFDD /* #1494 'ICScannerFunctionalUnitFlatbed' => 'ImageCaptureCore.ICScannerFunctionalUnitFlatbed, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFDF /* #1495 'ICScannerFunctionalUnitNegativeTransparency' => 'ImageCaptureCore.ICScannerFunctionalUnitNegativeTransparency, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFE1 /* #1496 'ICScannerFunctionalUnitPositiveTransparency' => 'ImageCaptureCore.ICScannerFunctionalUnitPositiveTransparency, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFE3 /* #1497 'IOSurface' => 'IOSurface.IOSurface, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFE5 /* #1498 'HKQuery' => 'HealthKit.HKQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFE7 /* #1499 'HKAnchoredObjectQuery' => 'HealthKit.HKAnchoredObjectQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFE9 /* #1500 'HKObjectType' => 'HealthKit.HKObjectType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFEB /* #1501 'HKSampleType' => 'HealthKit.HKSampleType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFED /* #1502 'HKQuantityType' => 'HealthKit.HKQuantityType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFEF /* #1503 'HKCategoryType' => 'HealthKit.HKCategoryType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFF1 /* #1504 'HKCharacteristicType' => 'HealthKit.HKCharacteristicType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFF3 /* #1505 'HKCorrelationType' => 'HealthKit.HKCorrelationType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFF5 /* #1506 'HKDocumentType' => 'HealthKit.HKDocumentType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFF7 /* #1507 'HKSampleQuery' => 'HealthKit.HKSampleQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFF9 /* #1508 'HKUnit' => 'HealthKit.HKUnit, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFFB /* #1509 'HKActivityMoveModeObject' => 'HealthKit.HKActivityMoveModeObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFFD /* #1510 'HKActivitySummary' => 'HealthKit.HKActivitySummary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0xFFF /* #1511 'HKActivitySummaryQuery' => 'HealthKit.HKActivitySummaryQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1001 /* #1512 'HKActivitySummaryType' => 'HealthKit.HKActivitySummaryType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1003 /* #1513 'HKAttachment' => 'HealthKit.HKAttachment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1005 /* #1514 'HKObject' => 'HealthKit.HKObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1007 /* #1515 'HKSample' => 'HealthKit.HKSample, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1009 /* #1516 'HKAudiogramSample' => 'HealthKit.HKAudiogramSample, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x100B /* #1517 'HKAudiogramSampleType' => 'HealthKit.HKAudiogramSampleType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x100D /* #1518 'HKAudiogramSensitivityPoint' => 'HealthKit.HKAudiogramSensitivityPoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x100F /* #1519 'HKBiologicalSexObject' => 'HealthKit.HKBiologicalSexObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1011 /* #1520 'HKBloodTypeObject' => 'HealthKit.HKBloodTypeObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1013 /* #1521 'HKCategorySample' => 'HealthKit.HKCategorySample, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1015 /* #1522 'HKCDADocument' => 'HealthKit.HKCdaDocument, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1017 /* #1523 'HKDocumentSample' => 'HealthKit.HKDocumentSample, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1019 /* #1524 'HKCDADocumentSample' => 'HealthKit.HKCdaDocumentSample, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x101B /* #1525 'HKClinicalRecord' => 'HealthKit.HKClinicalRecord, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x101D /* #1526 'HKClinicalType' => 'HealthKit.HKClinicalType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x101F /* #1527 'HKLensSpecification' => 'HealthKit.HKLensSpecification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1021 /* #1528 'HKContactsLensSpecification' => 'HealthKit.HKContactsLensSpecification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1023 /* #1529 'HKVisionPrescription' => 'HealthKit.HKVisionPrescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1025 /* #1530 'HKContactsPrescription' => 'HealthKit.HKContactsPrescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1027 /* #1531 'HKCorrelation' => 'HealthKit.HKCorrelation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1029 /* #1532 'HKCorrelationQuery' => 'HealthKit.HKCorrelationQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x102B /* #1533 'HKQuantitySample' => 'HealthKit.HKQuantitySample, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x102D /* #1534 'HKCumulativeQuantitySample' => 'HealthKit.HKCumulativeQuantitySample, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x102F /* #1535 'HKCumulativeQuantitySeriesSample' => 'HealthKit.HKCumulativeQuantitySeriesSample, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1031 /* #1536 'HKDeletedObject' => 'HealthKit.HKDeletedObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1033 /* #1537 'HKDevice' => 'HealthKit.HKDevice, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1035 /* #1538 'HKDiscreteQuantitySample' => 'HealthKit.HKDiscreteQuantitySample, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1037 /* #1539 'HKDocumentQuery' => 'HealthKit.HKDocumentQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1039 /* #1540 'HKElectrocardiogram' => 'HealthKit.HKElectrocardiogram, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x103B /* #1541 'HKElectrocardiogramQuery' => 'HealthKit.HKElectrocardiogramQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x103D /* #1542 'HKElectrocardiogramType' => 'HealthKit.HKElectrocardiogramType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x103F /* #1543 'HKElectrocardiogramVoltageMeasurement' => 'HealthKit.HKElectrocardiogramVoltageMeasurement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1041 /* #1544 'HKFHIRResource' => 'HealthKit.HKFhirResource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1043 /* #1545 'HKFHIRVersion' => 'HealthKit.HKFhirVersion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1045 /* #1546 'HKFitzpatrickSkinTypeObject' => 'HealthKit.HKFitzpatrickSkinTypeObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1047 /* #1547 'HKGlassesLensSpecification' => 'HealthKit.HKGlassesLensSpecification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1049 /* #1548 'HKGlassesPrescription' => 'HealthKit.HKGlassesPrescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x104B /* #1549 'HKHeartbeatSeriesQuery' => 'HealthKit.HKHeartbeatSeriesQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x104D /* #1550 'HKSeriesSample' => 'HealthKit.HKSeriesSample, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x104F /* #1551 'HKHeartbeatSeriesSample' => 'HealthKit.HKHeartbeatSeriesSample, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1051 /* #1552 'HKWorkoutBuilder' => 'HealthKit.HKWorkoutBuilder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1053 /* #1553 'HKLiveWorkoutBuilder' => 'HealthKit.HKLiveWorkoutBuilder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1059 /* #1554 'Microsoft_macOS__HealthKit_HKLiveWorkoutBuilderDelegate' => 'HealthKit.HKLiveWorkoutBuilderDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x105D /* #1555 'HKLiveWorkoutDataSource' => 'HealthKit.HKLiveWorkoutDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x105F /* #1556 'HKObserverQuery' => 'HealthKit.HKObserverQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1061 /* #1557 'HKPrescriptionType' => 'HealthKit.HKPrescriptionType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1063 /* #1558 'HKQuantity' => 'HealthKit.HKQuantity, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1065 /* #1559 'HKQuantitySeriesSampleQuery' => 'HealthKit.HKQuantitySeriesSampleQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1067 /* #1560 'HKQueryAnchor' => 'HealthKit.HKQueryAnchor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1069 /* #1561 'HKQueryDescriptor' => 'HealthKit.HKQueryDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x106B /* #1562 'HKSeriesBuilder' => 'HealthKit.HKSeriesBuilder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x106D /* #1563 'HKSeriesType' => 'HealthKit.HKSeriesType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x106F /* #1564 'HKSource' => 'HealthKit.HKSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1071 /* #1565 'HKSourceQuery' => 'HealthKit.HKSourceQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1073 /* #1566 'HKSourceRevision' => 'HealthKit.HKSourceRevision, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1075 /* #1567 'HKStatistics' => 'HealthKit.HKStatistics, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1077 /* #1568 'HKStatisticsCollection' => 'HealthKit.HKStatisticsCollection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1079 /* #1569 'HKStatisticsCollectionQuery' => 'HealthKit.HKStatisticsCollectionQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x107B /* #1570 'HKStatisticsQuery' => 'HealthKit.HKStatisticsQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x107D /* #1571 'HKVerifiableClinicalRecord' => 'HealthKit.HKVerifiableClinicalRecord, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x107F /* #1572 'HKVerifiableClinicalRecordSubject' => 'HealthKit.HKVerifiableClinicalRecordSubject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1081 /* #1573 'HKVisionPrism' => 'HealthKit.HKVisionPrism, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1083 /* #1574 'HKWheelchairUseObject' => 'HealthKit.HKWheelchairUseObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1085 /* #1575 'HKWorkout' => 'HealthKit.HKWorkout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1087 /* #1576 'HKWorkoutActivity' => 'HealthKit.HKWorkoutActivity, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1089 /* #1577 'HKWorkoutConfiguration' => 'HealthKit.HKWorkoutConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x108B /* #1578 'HKWorkoutEvent' => 'HealthKit.HKWorkoutEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x108D /* #1579 'HKWorkoutRoute' => 'HealthKit.HKWorkoutRoute, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x108F /* #1580 'HKWorkoutRouteQuery' => 'HealthKit.HKWorkoutRouteQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1091 /* #1581 'HKWorkoutSession' => 'HealthKit.HKWorkoutSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1097 /* #1582 'Microsoft_macOS__HealthKit_HKWorkoutSessionDelegate' => 'HealthKit.HKWorkoutSessionDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x109B /* #1583 'HKWorkoutType' => 'HealthKit.HKWorkoutType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x109D /* #1584 'GKBehavior' => 'GameplayKit.GKBehavior, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x109F /* #1585 'GKComponentSystem' => 'GameplayKit.GKComponentSystem`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10A1 /* #1586 'GKCompositeBehavior' => 'GameplayKit.GKCompositeBehavior, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10A3 /* #1587 'GKEntity' => 'GameplayKit.GKEntity, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10A5 /* #1588 'GKGraph' => 'GameplayKit.GKGraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10A7 /* #1589 'GKGridGraph' => 'GameplayKit.GKGridGraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10A9 /* #1590 'GKObstacleGraph' => 'GameplayKit.GKObstacleGraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10AB /* #1591 'GKPath' => 'GameplayKit.GKPath, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10AD /* #1592 'GKObstacle' => 'GameplayKit.GKObstacle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10AF /* #1593 'GKPolygonObstacle' => 'GameplayKit.GKPolygonObstacle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10B1 /* #1594 'GKState' => 'GameplayKit.GKState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10B3 /* #1595 'GKStateMachine' => 'GameplayKit.GKStateMachine, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10B5 /* #1596 'GKComponent' => 'GameplayKit.GKComponent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10B7 /* #1597 'GKAgent' => 'GameplayKit.GKAgent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10B9 /* #1598 'GKAgent2D' => 'GameplayKit.GKAgent2D, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10BB /* #1599 'GKAgent3D' => 'GameplayKit.GKAgent3D, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10C1 /* #1600 'Microsoft_macOS__GameplayKit_GKAgentDelegate' => 'GameplayKit.GKAgentDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10C9 /* #1601 'GKRandomSource' => 'GameplayKit.GKRandomSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10CB /* #1602 'GKARC4RandomSource' => 'GameplayKit.GKARC4RandomSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10CD /* #1603 'GKNoiseSource' => 'GameplayKit.GKNoiseSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10CF /* #1604 'GKCoherentNoiseSource' => 'GameplayKit.GKCoherentNoiseSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10D1 /* #1605 'GKBillowNoiseSource' => 'GameplayKit.GKBillowNoiseSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10D3 /* #1606 'GKCheckerboardNoiseSource' => 'GameplayKit.GKCheckerboardNoiseSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10D5 /* #1607 'GKCircleObstacle' => 'GameplayKit.GKCircleObstacle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10D7 /* #1608 'GKConstantNoiseSource' => 'GameplayKit.GKConstantNoiseSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10D9 /* #1609 'GKCylindersNoiseSource' => 'GameplayKit.GKCylindersNoiseSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10DB /* #1610 'GKDecisionNode' => 'GameplayKit.GKDecisionNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10DD /* #1611 'GKDecisionTree' => 'GameplayKit.GKDecisionTree, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10EB /* #1612 'GKRandomDistribution' => 'GameplayKit.GKRandomDistribution, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10ED /* #1613 'GKGaussianDistribution' => 'GameplayKit.GKGaussianDistribution, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10EF /* #1614 'GKGoal' => 'GameplayKit.GKGoal, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10F1 /* #1615 'GKGraphNode' => 'GameplayKit.GKGraphNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10F3 /* #1616 'GKGraphNode2D' => 'GameplayKit.GKGraphNode2D, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10F5 /* #1617 'GKGraphNode3D' => 'GameplayKit.GKGraphNode3D, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10F7 /* #1618 'GKGridGraphNode' => 'GameplayKit.GKGridGraphNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10F9 /* #1619 'GKLinearCongruentialRandomSource' => 'GameplayKit.GKLinearCongruentialRandomSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10FB /* #1620 'GKMersenneTwisterRandomSource' => 'GameplayKit.GKMersenneTwisterRandomSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x10FD /* #1621 'GKMeshGraph' => 'GameplayKit.GKMeshGraph`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1103 /* #1622 'GKMinmaxStrategist' => 'GameplayKit.GKMinMaxStrategist, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1105 /* #1623 'GKMonteCarloStrategist' => 'GameplayKit.GKMonteCarloStrategist, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1107 /* #1624 'GKNoise' => 'GameplayKit.GKNoise, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1109 /* #1625 'GKNoiseMap' => 'GameplayKit.GKNoiseMap, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x110B /* #1626 'GKRule' => 'GameplayKit.GKRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x110D /* #1627 'GKNSPredicateRule' => 'GameplayKit.GKNSPredicateRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x110F /* #1628 'GKOctree' => 'GameplayKit.GKOctree`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1111 /* #1629 'GKOctreeNode' => 'GameplayKit.GKOctreeNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1113 /* #1630 'GKPerlinNoiseSource' => 'GameplayKit.GKPerlinNoiseSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1115 /* #1631 'GKQuadtree' => 'GameplayKit.GKQuadTree, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1117 /* #1632 'GKQuadtreeNode' => 'GameplayKit.GKQuadTreeNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1119 /* #1633 'GKRidgedNoiseSource' => 'GameplayKit.GKRidgedNoiseSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x111B /* #1634 'GKRTree' => 'GameplayKit.GKRTree`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x111D /* #1635 'GKRuleSystem' => 'GameplayKit.GKRuleSystem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x111F /* #1636 'GKScene' => 'GameplayKit.GKScene, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1121 /* #1637 'GKSCNNodeComponent' => 'GameplayKit.GKSCNNodeComponent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1123 /* #1638 'GKShuffledDistribution' => 'GameplayKit.GKShuffledDistribution, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1125 /* #1639 'GKSKNodeComponent' => 'GameplayKit.GKSKNodeComponent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1127 /* #1640 'GKSphereObstacle' => 'GameplayKit.GKSphereObstacle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1129 /* #1641 'GKSpheresNoiseSource' => 'GameplayKit.GKSpheresNoiseSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x112B /* #1642 'GKVoronoiNoiseSource' => 'GameplayKit.GKVoronoiNoiseSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x112D /* #1643 'GKVoiceChat' => 'GameKit.GKVoiceChat, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x112F /* #1644 'GKTurnBasedExchangeReply' => 'GameKit.GKTurnBasedExchangeReply, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1131 /* #1645 'GKAccessPoint' => 'GameKit.GKAccessPoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1133 /* #1646 'GKChallenge' => 'GameKit.GKChallenge, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1135 /* #1647 'GKAchievementChallenge' => 'GameKit.GKAchievementChallenge, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x113B /* #1648 'Microsoft_macOS__GameKit_GKAchievementViewControllerDelegate' => 'GameKit.GKAchievementViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x113F /* #1649 'GKBasePlayer' => 'GameKit.GKBasePlayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1145 /* #1650 'Microsoft_macOS__GameKit_GKChallengeEventHandlerDelegate' => 'GameKit.GKChallengeEventHandlerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x114D /* #1651 'Microsoft_macOS__GameKit_GKChallengeListener' => 'GameKit.GKChallengeListener, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1155 /* #1652 'GKChallengesViewController' => 'GameKit.GKChallengesViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x115B /* #1653 'Microsoft_macOS__GameKit_GKChallengesViewControllerDelegate' => 'GameKit.GKChallengesViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x115F /* #1654 'GKCloudPlayer' => 'GameKit.GKCloudPlayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1161 /* #1655 'GKDialogController' => 'GameKit.GKDialogController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1167 /* #1656 'Microsoft_macOS__GameKit_GKFriendRequestComposeViewControllerDelegate' => 'GameKit.GKFriendRequestComposeViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x116F /* #1657 'Microsoft_macOS__GameKit_GKGameCenterControllerDelegate' => 'GameKit.GKGameCenterControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1177 /* #1658 'GKInvite' => 'GameKit.GKInvite, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x117D /* #1659 'Microsoft_macOS__GameKit_GKInviteEventListener' => 'GameKit.GKInviteEventListener, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1181 /* #1660 'GKLeaderboardScore' => 'GameKit.GKLeaderboardScore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1187 /* #1661 'Microsoft_macOS__GameKit_GKLeaderboardViewControllerDelegate' => 'GameKit.GKLeaderboardViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1197 /* #1662 'Microsoft_macOS__GameKit_GKLocalPlayerListener' => 'GameKit.GKLocalPlayerListener, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x119F /* #1663 'Microsoft_macOS__GameKit_GKMatchDelegate' => 'GameKit.GKMatchDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11A7 /* #1664 'Microsoft_macOS__GameKit_GKMatchmakerViewControllerDelegate' => 'GameKit.GKMatchmakerViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11AB /* #1665 'GKMatchRequest' => 'GameKit.GKMatchRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11AD /* #1666 'Microsoft_macOS__GameKit_GKSavedGameListener' => 'GameKit.GKSavedGameListener, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11B1 /* #1667 'GKScoreChallenge' => 'GameKit.GKScoreChallenge, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11B3 /* #1668 'GKSession' => 'GameKit.GKSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11B9 /* #1669 'Microsoft_macOS__GameKit_GKSessionDelegate' => 'GameKit.GKSessionDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11BD /* #1670 'GKTurnBasedEventHandler' => 'GameKit.GKTurnBasedEventHandler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11C3 /* #1671 'Microsoft_macOS__GameKit_GKTurnBasedEventHandlerDelegate' => 'GameKit.GKTurnBasedEventHandlerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11C7 /* #1672 'Microsoft_macOS__GameKit_GKTurnBasedEventListener' => 'GameKit.GKTurnBasedEventListener, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11CB /* #1673 'GKTurnBasedMatchmakerViewController' => 'GameKit.GKTurnBasedMatchmakerViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11D1 /* #1674 'Microsoft_macOS__GameKit_GKTurnBasedMatchmakerViewControllerDelegate' => 'GameKit.GKTurnBasedMatchmakerViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11D5 /* #1675 'GKTurnBasedParticipant' => 'GameKit.GKTurnBasedParticipant, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11D7 /* #1676 'GCPhysicalInputProfile' => 'GameController.GCPhysicalInputProfile, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11D9 /* #1677 'GCExtendedGamepad' => 'GameController.GCExtendedGamepad, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11DB /* #1678 'GCExtendedGamepadSnapshot' => 'GameController.GCExtendedGamepadSnapshot, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11DD /* #1679 'GCGamepad' => 'GameController.GCGamepad, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11DF /* #1680 'GCGamepadSnapshot' => 'GameController.GCGamepadSnapshot, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11E1 /* #1681 'GCMicroGamepad' => 'GameController.GCMicroGamepad, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11E3 /* #1682 'GCMicroGamepadSnapshot' => 'GameController.GCMicroGamepadSnapshot, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11F5 /* #1683 'GCColor' => 'GameController.GCColor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11F7 /* #1684 'GCControllerElement' => 'GameController.GCControllerElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11F9 /* #1685 'GCControllerAxisInput' => 'GameController.GCControllerAxisInput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11FB /* #1686 'GCControllerButtonInput' => 'GameController.GCControllerButtonInput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11FD /* #1687 'GCControllerDirectionPad' => 'GameController.GCControllerDirectionPad, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x11FF /* #1688 'GCControllerTouchpad' => 'GameController.GCControllerTouchpad, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1205 /* #1689 'GCDeviceBattery' => 'GameController.GCDeviceBattery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1207 /* #1690 'GCDeviceCursor' => 'GameController.GCDeviceCursor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1209 /* #1691 'GCDeviceHaptics' => 'GameController.GCDeviceHaptics, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x120B /* #1692 'GCDeviceLight' => 'GameController.GCDeviceLight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1219 /* #1693 'GCDirectionalGamepad' => 'GameController.GCDirectionalGamepad, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x121F /* #1694 'GCDualSenseAdaptiveTrigger' => 'GameController.GCDualSenseAdaptiveTrigger, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1221 /* #1695 'GCDualSenseGamepad' => 'GameController.GCDualSenseGamepad, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1223 /* #1696 'GCDualShockGamepad' => 'GameController.GCDualShockGamepad, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1225 /* #1697 'GCEventViewController' => 'GameController.GCEventViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1227 /* #1698 'GCGearShifterElement' => 'GameController.GCGearShifterElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1229 /* #1699 'GCKeyboardInput' => 'GameController.GCKeyboardInput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x122F /* #1700 'GCMotion' => 'GameController.GCMotion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1231 /* #1701 'GCMouseInput' => 'GameController.GCMouseInput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1237 /* #1702 'GCRacingWheelInputState' => 'GameController.GCRacingWheelInputState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1239 /* #1703 'GCRacingWheelInput' => 'GameController.GCRacingWheelInput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x123F /* #1704 'GCSteeringWheelElement' => 'GameController.GCSteeringWheelElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x124D /* #1705 'GCXboxGamepad' => 'GameController.GCXboxGamepad, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x124F /* #1706 'GLKMesh' => 'GLKit.GLKMesh, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1255 /* #1707 'GLKBaseEffect' => 'GLKit.GLKBaseEffect, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1257 /* #1708 'GLKEffectProperty' => 'GLKit.GLKEffectProperty, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1259 /* #1709 'GLKEffectPropertyFog' => 'GLKit.GLKEffectPropertyFog, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x125B /* #1710 'GLKEffectPropertyLight' => 'GLKit.GLKEffectPropertyLight, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x125D /* #1711 'GLKEffectPropertyMaterial' => 'GLKit.GLKEffectPropertyMaterial, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x125F /* #1712 'GLKEffectPropertyTexture' => 'GLKit.GLKEffectPropertyTexture, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1261 /* #1713 'GLKEffectPropertyTransform' => 'GLKit.GLKEffectPropertyTransform, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1263 /* #1714 'GLKMeshBuffer' => 'GLKit.GLKMeshBuffer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1265 /* #1715 'GLKMeshBufferAllocator' => 'GLKit.GLKMeshBufferAllocator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1267 /* #1716 'Microsoft_macOS__GLKit_GLKNamedEffect' => 'GLKit.GLKNamedEffect, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x126B /* #1717 'GLKReflectionMapEffect' => 'GLKit.GLKReflectionMapEffect, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x126D /* #1718 'GLKSkyboxEffect' => 'GLKit.GLKSkyboxEffect, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x126F /* #1719 'GLKSubmesh' => 'GLKit.GLKSubmesh, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1271 /* #1720 'GLKTextureInfo' => 'GLKit.GLKTextureInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1273 /* #1721 'WebScriptObject' => 'WebKit.WebScriptObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1275 /* #1722 'DOMObject' => 'WebKit.DomObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x127B /* #1723 'DOMNode' => 'WebKit.DomNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x127D /* #1724 'DOMElement' => 'WebKit.DomElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x127F /* #1725 'DOMHTMLElement' => 'WebKit.DomHtmlElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1281 /* #1726 'DOMHTMLSelectElement' => 'WebKit.DomHtmlSelectElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1283 /* #1727 'DOMHTMLOptionsCollection' => 'WebKit.DomHtmlOptionsCollection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1285 /* #1728 'DOMCSSRuleList' => 'WebKit.DomCssRuleList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1287 /* #1729 'DOMCSSStyleDeclaration' => 'WebKit.DomCssStyleDeclaration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1289 /* #1730 'DOMHTMLCollection' => 'WebKit.DomHtmlCollection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x128B /* #1731 'DOMMediaList' => 'WebKit.DomMediaList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x128D /* #1732 'DOMNamedNodeMap' => 'WebKit.DomNamedNodeMap, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x128F /* #1733 'DOMNodeList' => 'WebKit.DomNodeList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1291 /* #1734 'DOMStyleSheetList' => 'WebKit.DomStyleSheetList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1293 /* #1735 'WKPreferences' => 'WebKit.WKPreferences, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1295 /* #1736 'WKWindowFeatures' => 'WebKit.WKWindowFeatures, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1297 /* #1737 'WebFrame' => 'WebKit.WebFrame, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x129D /* #1738 'Microsoft_macOS__WebKit_WebPolicyDelegate' => 'WebKit.WebPolicyDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12A1 /* #1739 'DOMAbstractView' => 'WebKit.DomAbstractView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12A3 /* #1740 'DOMAttr' => 'WebKit.DomAttr, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12A5 /* #1741 'DOMBlob' => 'WebKit.DomBlob, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12A7 /* #1742 'DOMCharacterData' => 'WebKit.DomCharacterData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12A9 /* #1743 'DOMText' => 'WebKit.DomText, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12AB /* #1744 'DOMCDATASection' => 'WebKit.DomCDataSection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12AD /* #1745 'DOMComment' => 'WebKit.DomComment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12AF /* #1746 'DOMCSSRule' => 'WebKit.DomCssRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12B1 /* #1747 'DOMCSSCharsetRule' => 'WebKit.DomCssCharsetRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12B3 /* #1748 'DOMCSSFontFaceRule' => 'WebKit.DomCssFontFaceRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12B5 /* #1749 'DOMCSSMediaRule' => 'WebKit.DomCssMediaRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12B7 /* #1750 'DOMCSSPageRule' => 'WebKit.DomCssPageRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12B9 /* #1751 'DOMCSSStyleRule' => 'WebKit.DomCssStyleRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12BB /* #1752 'DOMStyleSheet' => 'WebKit.DomStyleSheet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12BD /* #1753 'DOMCSSStyleSheet' => 'WebKit.DomCssStyleSheet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12BF /* #1754 'DOMCSSUnknownRule' => 'WebKit.DomCssUnknownRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12C1 /* #1755 'DOMCSSValue' => 'WebKit.DomCssValue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12C3 /* #1756 'DOMDocument' => 'WebKit.DomDocument, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12C5 /* #1757 'DOMDocumentFragment' => 'WebKit.DomDocumentFragment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12C7 /* #1758 'DOMDocumentType' => 'WebKit.DomDocumentType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12C9 /* #1759 'DOMEntityReference' => 'WebKit.DomEntityReference, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12CB /* #1760 'DOMEvent' => 'WebKit.DomEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12D1 /* #1761 'Microsoft_macOS__WebKit_DomEventListener' => 'WebKit.DomEventListener, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12D5 /* #1762 'Microsoft_macOS__WebKit_DomEventTarget' => 'WebKit.DomEventTarget, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12D9 /* #1763 'DOMFile' => 'WebKit.DomFile, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12DB /* #1764 'DOMFileList' => 'WebKit.DomFileList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12DD /* #1765 'DOMHTMLAnchorElement' => 'WebKit.DomHtmlAnchorElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12DF /* #1766 'DOMHTMLAppletElement' => 'WebKit.DomHtmlAppletElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12E1 /* #1767 'DOMHTMLAreaElement' => 'WebKit.DomHtmlAreaElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12E3 /* #1768 'DOMHTMLBaseElement' => 'WebKit.DomHtmlBaseElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12E5 /* #1769 'DOMHTMLBaseFontElement' => 'WebKit.DomHtmlBaseFontElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12E7 /* #1770 'DOMHTMLBodyElement' => 'WebKit.DomHtmlBodyElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12E9 /* #1771 'DOMHTMLBRElement' => 'WebKit.DomHtmlBRElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12EB /* #1772 'DOMHTMLButtonElement' => 'WebKit.DomHtmlButtonElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12ED /* #1773 'DOMHTMLDirectoryElement' => 'WebKit.DomHtmlDirectoryElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12EF /* #1774 'DOMHTMLDivElement' => 'WebKit.DomHtmlDivElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12F1 /* #1775 'DOMHTMLDListElement' => 'WebKit.DomHtmlDListElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12F3 /* #1776 'DOMHTMLDocument' => 'WebKit.DomHtmlDocument, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12F5 /* #1777 'DOMHTMLEmbedElement' => 'WebKit.DomHtmlEmbedElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12F7 /* #1778 'DOMHTMLFieldSetElement' => 'WebKit.DomHtmlFieldSetElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12F9 /* #1779 'DOMHTMLFontElement' => 'WebKit.DomHtmlFontElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12FB /* #1780 'DOMHTMLFormElement' => 'WebKit.DomHtmlFormElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12FD /* #1781 'DOMHTMLFrameElement' => 'WebKit.DomHtmlFrameElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x12FF /* #1782 'DOMHTMLFrameSetElement' => 'WebKit.DomHtmlFrameSetElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1301 /* #1783 'DOMHTMLHeadElement' => 'WebKit.DomHtmlHeadElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1303 /* #1784 'DOMHTMLHeadingElement' => 'WebKit.DomHtmlHeadingElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1305 /* #1785 'DOMHTMLHRElement' => 'WebKit.DomHtmlHRElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1307 /* #1786 'DOMHTMLHtmlElement' => 'WebKit.DomHtmlHtmlElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1309 /* #1787 'DOMHTMLIFrameElement' => 'WebKit.DomHtmlIFrameElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x130B /* #1788 'DOMHTMLImageElement' => 'WebKit.DomHtmlImageElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x130D /* #1789 'DOMHTMLInputElement' => 'WebKit.DomHtmlInputElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x130F /* #1790 'DOMHTMLLabelElement' => 'WebKit.DomHtmlLabelElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1311 /* #1791 'DOMHTMLLegendElement' => 'WebKit.DomHtmlLegendElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1313 /* #1792 'DOMHTMLLIElement' => 'WebKit.DomHtmlLIElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1315 /* #1793 'DOMHTMLLinkElement' => 'WebKit.DomHtmlLinkElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1317 /* #1794 'DOMHTMLMapElement' => 'WebKit.DomHtmlMapElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1319 /* #1795 'DOMHTMLMarqueeElement' => 'WebKit.DomHtmlMarqueeElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x131B /* #1796 'DOMHTMLMenuElement' => 'WebKit.DomHtmlMenuElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x131D /* #1797 'DOMHTMLMetaElement' => 'WebKit.DomHtmlMetaElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x131F /* #1798 'DOMHTMLModElement' => 'WebKit.DomHtmlModElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1321 /* #1799 'DOMHTMLObjectElement' => 'WebKit.DomHtmlObjectElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1323 /* #1800 'DOMHTMLOListElement' => 'WebKit.DomHtmlOListElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1325 /* #1801 'DOMHTMLOptGroupElement' => 'WebKit.DomHtmlOptGroupElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1327 /* #1802 'DOMHTMLOptionElement' => 'WebKit.DomHtmlOptionElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1329 /* #1803 'DOMHTMLParagraphElement' => 'WebKit.DomHtmlParagraphElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x132B /* #1804 'DOMHTMLParamElement' => 'WebKit.DomHtmlParamElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x132D /* #1805 'DOMHTMLPreElement' => 'WebKit.DomHtmlPreElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x132F /* #1806 'DOMHTMLQuoteElement' => 'WebKit.DomHtmlQuoteElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1331 /* #1807 'DOMHTMLScriptElement' => 'WebKit.DomHtmlScriptElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1333 /* #1808 'DOMHTMLStyleElement' => 'WebKit.DomHtmlStyleElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1335 /* #1809 'DOMHTMLTableCaptionElement' => 'WebKit.DomHtmlTableCaptionElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1337 /* #1810 'DOMHTMLTableCellElement' => 'WebKit.DomHtmlTableCellElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1339 /* #1811 'DOMHTMLTableColElement' => 'WebKit.DomHtmlTableColElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x133B /* #1812 'DOMHTMLTableElement' => 'WebKit.DomHtmlTableElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x133D /* #1813 'DOMHTMLTableRowElement' => 'WebKit.DomHtmlTableRowElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x133F /* #1814 'DOMHTMLTableSectionElement' => 'WebKit.DomHtmlTableSectionElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1341 /* #1815 'DOMHTMLTextAreaElement' => 'WebKit.DomHtmlTextAreaElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1343 /* #1816 'DOMImplementation' => 'WebKit.DomImplementation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1345 /* #1817 'DOMCSSImportRule' => 'WebKit.DomImportCssRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1347 /* #1818 'DOMUIEvent' => 'WebKit.DomUIEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1349 /* #1819 'DOMKeyboardEvent' => 'WebKit.DomKeyboardEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x134B /* #1820 'DOMMouseEvent' => 'WebKit.DomMouseEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1351 /* #1821 'Microsoft_macOS__WebKit_DomNodeFilter' => 'WebKit.DomNodeFilter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1355 /* #1822 'DOMNodeIterator' => 'WebKit.DomNodeIterator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1357 /* #1823 'DOMOverflowEvent' => 'WebKit.DomOverflowEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1359 /* #1824 'DOMProcessingInstruction' => 'WebKit.DomProcessingInstruction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x135B /* #1825 'DOMProgressEvent' => 'WebKit.DomProgressEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x135D /* #1826 'DOMRange' => 'WebKit.DomRange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x135F /* #1827 'DOMWheelEvent' => 'WebKit.DomWheelEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1361 /* #1828 'WebArchive' => 'WebKit.WebArchive, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1363 /* #1829 'WebBackForwardList' => 'WebKit.WebBackForwardList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1365 /* #1830 'WebDataSource' => 'WebKit.WebDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x136B /* #1831 'Microsoft_macOS__WebKit_WebDocumentRepresentation' => 'WebKit.WebDocumentRepresentation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x136F /* #1832 'NSURLDownload' => 'Foundation.NSUrlDownload, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1371 /* #1833 'WebDownload' => 'WebKit.WebDownload, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1377 /* #1834 'Microsoft_macOS__WebKit_WebDownloadDelegate' => 'WebKit.WebDownloadDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x137F /* #1835 'Microsoft_macOS__WebKit_WebFrameLoadDelegate' => 'WebKit.WebFrameLoadDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1383 /* #1836 'WebFrameView' => 'WebKit.WebFrameView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1385 /* #1837 'WebHistory' => 'WebKit.WebHistory, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x138B /* #1838 'Microsoft_macOS__WebKit_WebOpenPanelResultListener' => 'WebKit.WebOpenPanelResultListener, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1393 /* #1839 'Microsoft_macOS__WebKit_WebPolicyDecisionListener' => 'WebKit.WebPolicyDecisionListener, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1397 /* #1840 'WebPreferences' => 'WebKit.WebPreferences, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1399 /* #1841 'WebResource' => 'WebKit.WebResource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x139F /* #1842 'Microsoft_macOS__WebKit_WebResourceLoadDelegate' => 'WebKit.WebResourceLoadDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13A7 /* #1843 'Microsoft_macOS__WebKit_WebUIDelegate' => 'WebKit.WebUIDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13AB /* #1844 'WKBackForwardList' => 'WebKit.WKBackForwardList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13AD /* #1845 'WKBackForwardListItem' => 'WebKit.WKBackForwardListItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13AF /* #1846 'WKContentRuleList' => 'WebKit.WKContentRuleList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13B1 /* #1847 'WKContentWorld' => 'WebKit.WKContentWorld, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13B7 /* #1848 'Microsoft_macOS__WebKit_WKDownloadDelegate' => 'WebKit.WKDownloadDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13BB /* #1849 'WKFindConfiguration' => 'WebKit.WKFindConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13BD /* #1850 'WKFindResult' => 'WebKit.WKFindResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13BF /* #1851 'WKFrameInfo' => 'WebKit.WKFrameInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13C5 /* #1852 'WKNavigation' => 'WebKit.WKNavigation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13C7 /* #1853 'WKNavigationAction' => 'WebKit.WKNavigationAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13CD /* #1854 'Microsoft_macOS__WebKit_WKNavigationDelegate' => 'WebKit.WKNavigationDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13D1 /* #1855 'WKNavigationResponse' => 'WebKit.WKNavigationResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13D3 /* #1856 'WKOpenPanelParameters' => 'WebKit.WKOpenPanelParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13D5 /* #1857 'WKPDFConfiguration' => 'WebKit.WKPdfConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13D7 /* #1858 'WKProcessPool' => 'WebKit.WKProcessPool, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13D9 /* #1859 'WKScriptMessage' => 'WebKit.WKScriptMessage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13DF /* #1860 'Microsoft_macOS__WebKit_WKScriptMessageHandler' => 'WebKit.WKScriptMessageHandler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13E7 /* #1861 'WKSecurityOrigin' => 'WebKit.WKSecurityOrigin, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13E9 /* #1862 'WKSnapshotConfiguration' => 'WebKit.WKSnapshotConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13EF /* #1863 'Microsoft_macOS__WebKit_WKUIDelegate' => 'WebKit.WKUIDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13FB /* #1864 'WKUserContentController' => 'WebKit.WKUserContentController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13FD /* #1865 'WKUserScript' => 'WebKit.WKUserScript, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x13FF /* #1866 'WKWebpagePreferences' => 'WebKit.WKWebpagePreferences, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1401 /* #1867 'WKWebsiteDataRecord' => 'WebKit.WKWebsiteDataRecord, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1403 /* #1868 'WKWebViewConfiguration' => 'WebKit.WKWebViewConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1405 /* #1869 'Foundation_NSDispatcher' => 'Foundation.NSDispatcher, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x140B /* #1870 '__MonoMac_NSActionDispatcher' => 'Foundation.NSActionDispatcher, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x140F /* #1871 '__MonoMac_NSSynchronizationContextDispatcher' => 'Foundation.NSSynchronizationContextDispatcher, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1413 /* #1872 '__Xamarin_NSTimerActionDispatcher' => 'Foundation.NSTimerActionDispatcher, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1417 /* #1873 'Foundation_NSAsyncDispatcher' => 'Foundation.NSAsyncDispatcher, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x141D /* #1874 '__MonoMac_NSAsyncActionDispatcher' => 'Foundation.NSAsyncActionDispatcher, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1421 /* #1875 '__MonoMac_NSAsyncSynchronizationContextDispatcher' => 'Foundation.NSAsyncSynchronizationContextDispatcher, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1425 /* #1876 'NSAppleEventDescriptor' => 'Foundation.NSAppleEventDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1427 /* #1877 'NSBundle' => 'Foundation.NSBundle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1429 /* #1878 'NSConnection' => 'Foundation.NSConnection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x142B /* #1879 'NSDate' => 'Foundation.NSDate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x142D /* #1880 'NSDateComponents' => 'Foundation.NSDateComponents, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x142F /* #1881 'NSUnit' => 'Foundation.NSUnit, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1431 /* #1882 'NSDimension' => 'Foundation.NSDimension, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1433 /* #1883 'NSDirectoryEnumerator' => 'Foundation.NSDirectoryEnumerator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1435 /* #1884 'NSError' => 'Foundation.NSError, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1437 /* #1885 'NSExpression' => 'Foundation.NSExpression, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x143D /* #1886 'Microsoft_macOS__Foundation_NSFileManagerDelegate' => 'Foundation.NSFileManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1441 /* #1887 'NSHTTPCookie' => 'Foundation.NSHttpCookie, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1443 /* #1888 'NSStream' => 'Foundation.NSStream, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1445 /* #1889 'NSInputStream' => 'Foundation.NSInputStream, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1447 /* #1890 'NSMetadataItem' => 'Foundation.NSMetadataItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1451 /* #1891 'NSAttributedString' => 'Foundation.NSAttributedString, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1453 /* #1892 'NSMutableAttributedString' => 'Foundation.NSMutableAttributedString, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1455 /* #1893 'NSOrderedSet' => 'Foundation.NSOrderedSet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1457 /* #1894 'NSMutableOrderedSet' => 'Foundation.NSMutableOrderedSet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1459 /* #1895 'NSSet' => 'Foundation.NSSet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x145B /* #1896 'NSMutableSet' => 'Foundation.NSMutableSet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1465 /* #1897 'NSString' => 'Foundation.NSString, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1467 /* #1898 'NSMutableString' => 'Foundation.NSMutableString, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1469 /* #1899 'NSURLRequest' => 'Foundation.NSUrlRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x146B /* #1900 'NSMutableURLRequest' => 'Foundation.NSMutableUrlRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x146D /* #1901 'Foundation_InternalNSNotificationHandler' => 'Foundation.InternalNSNotificationHandler, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1475 /* #1902 'NSNull' => 'Foundation.NSNull, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1477 /* #1903 'NSValue' => 'Foundation.NSValue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x147D /* #1904 'NSNumber' => 'Foundation.NSNumber, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x147F /* #1905 'NSOutputStream' => 'Foundation.NSOutputStream, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1481 /* #1906 'NSPredicate' => 'Foundation.NSPredicate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1483 /* #1907 'NSPropertyListSerialization' => 'Foundation.NSPropertyListSerialization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1485 /* #1908 'NSProxy' => 'Foundation.NSProxy, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1487 /* #1909 'NSRunLoop' => 'Foundation.NSRunLoop, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1489 /* #1910 'NSScriptCommandDescription' => 'Foundation.NSScriptCommandDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x148B /* #1911 'NSTimeZone' => 'Foundation.NSTimeZone, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x148D /* #1912 'NSTimer' => 'Foundation.NSTimer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x148F /* #1913 'NSURLComponents' => 'Foundation.NSUrlComponents, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1491 /* #1914 'NSURLCredential' => 'Foundation.NSUrlCredential, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1493 /* #1915 'NSURLProtectionSpace' => 'Foundation.NSUrlProtectionSpace, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1495 /* #1916 'NSURLProtocol' => 'Foundation.NSUrlProtocol, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1497 /* #1917 'NSUUID' => 'Foundation.NSUuid, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1499 /* #1918 'NSXPCConnection' => 'Foundation.NSXpcConnection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x149B /* #1919 'NSXPCInterface' => 'Foundation.NSXpcInterface, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x149D /* #1920 'NSAffineTransform' => 'Foundation.NSAffineTransform, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x149F /* #1921 'NSAppleEventManager' => 'Foundation.NSAppleEventManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14A1 /* #1922 'NSAppleScript' => 'Foundation.NSAppleScript, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14A3 /* #1923 'NSAttributedStringMarkdownParsingOptions' => 'Foundation.NSAttributedStringMarkdownParsingOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14A5 /* #1924 'NSAttributedStringMarkdownSourcePosition' => 'Foundation.NSAttributedStringMarkdownSourcePosition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14A7 /* #1925 'NSAutoreleasePool' => 'Foundation.NSAutoreleasePool, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14A9 /* #1926 'NSBackgroundActivityScheduler' => 'Foundation.NSBackgroundActivityScheduler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14AB /* #1927 'NSBindingSelectionMarker' => 'Foundation.NSBindingSelectionMarker, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14AD /* #1928 'NSOperation' => 'Foundation.NSOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14AF /* #1929 'NSBlockOperation' => 'Foundation.NSBlockOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14B1 /* #1930 'NSByteCountFormatter' => 'Foundation.NSByteCountFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14B7 /* #1931 'Microsoft_macOS__Foundation_NSCacheDelegate' => 'Foundation.NSCacheDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14BB /* #1932 'NSCachedURLResponse' => 'Foundation.NSCachedUrlResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14BD /* #1933 'NSCalendarDate' => 'Foundation.NSCalendarDate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14BF /* #1934 'NSCharacterSet' => 'Foundation.NSCharacterSet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14C1 /* #1935 'Microsoft_macOS__Foundation_NSCoding' => 'Foundation.NSCoding, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14C7 /* #1936 'NSComparisonPredicate' => 'Foundation.NSComparisonPredicate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14C9 /* #1937 'NSCompoundPredicate' => 'Foundation.NSCompoundPredicate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14CF /* #1938 'NSCondition' => 'Foundation.NSCondition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14D1 /* #1939 'NSConditionLock' => 'Foundation.NSConditionLock, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14D7 /* #1940 'Microsoft_macOS__Foundation_NSConnectionDelegate' => 'Foundation.NSConnectionDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14DB /* #1941 'Microsoft_macOS__Foundation_NSCopying' => 'Foundation.NSCopying, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14DF /* #1942 'NSRegularExpression' => 'Foundation.NSRegularExpression, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14E1 /* #1943 'NSDataDetector' => 'Foundation.NSDataDetector, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14E3 /* #1944 'NSDateComponentsFormatter' => 'Foundation.NSDateComponentsFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14E5 /* #1945 'NSDateFormatter' => 'Foundation.NSDateFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14E7 /* #1946 'NSDateInterval' => 'Foundation.NSDateInterval, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14E9 /* #1947 'NSDateIntervalFormatter' => 'Foundation.NSDateIntervalFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14EB /* #1948 'NSDecimalNumber' => 'Foundation.NSDecimalNumber, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14F1 /* #1949 'NSDistantObjectRequest' => 'Foundation.NSDistantObjectRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14F3 /* #1950 'NSDistributedLock' => 'Foundation.NSDistributedLock, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14F5 /* #1951 'NSNotificationCenter' => 'Foundation.NSNotificationCenter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14F7 /* #1952 'NSDistributedNotificationCenter' => 'Foundation.NSDistributedNotificationCenter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14F9 /* #1953 'NSEnergyFormatter' => 'Foundation.NSEnergyFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14FB /* #1954 'NSException' => 'Foundation.NSException, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14FD /* #1955 'NSExtensionItem' => 'Foundation.NSExtensionItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x14FF /* #1956 'Microsoft_macOS__Foundation_NSExtensionRequestHandling' => 'Foundation.NSExtensionRequestHandling, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1503 /* #1957 'NSFileAccessIntent' => 'Foundation.NSFileAccessIntent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1505 /* #1958 'NSFileCoordinator' => 'Foundation.NSFileCoordinator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x150B /* #1959 'Microsoft_macOS__Foundation_NSFilePresenter' => 'Foundation.NSFilePresenter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x150F /* #1960 'NSFileProviderService' => 'Foundation.NSFileProviderService, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1511 /* #1961 'NSFileWrapper' => 'Foundation.NSFileWrapper, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1513 /* #1962 'NSURLResponse' => 'Foundation.NSUrlResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1515 /* #1963 'NSHTTPURLResponse' => 'Foundation.NSHttpUrlResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1517 /* #1964 'NSInflectionRule' => 'Foundation.NSInflectionRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1519 /* #1965 'NSInflectionRuleExplicit' => 'Foundation.NSInflectionRuleExplicit, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x151B /* #1966 'NSInvocation' => 'Foundation.NSInvocation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x151D /* #1967 'NSISO8601DateFormatter' => 'Foundation.NSIso8601DateFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x151F /* #1968 'NSJSONSerialization' => 'Foundation.NSJsonSerialization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1525 /* #1969 'Microsoft_macOS__Foundation_NSKeyedArchiverDelegate' => 'Foundation.NSKeyedArchiverDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x152D /* #1970 'Microsoft_macOS__Foundation_NSKeyedUnarchiverDelegate' => 'Foundation.NSKeyedUnarchiverDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1531 /* #1971 'NSLengthFormatter' => 'Foundation.NSLengthFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1533 /* #1972 'NSLinguisticTagger' => 'Foundation.NSLinguisticTagger, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1535 /* #1973 'NSListFormatter' => 'Foundation.NSListFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1537 /* #1974 'NSLock' => 'Foundation.NSLock, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1539 /* #1975 'NSPort' => 'Foundation.NSPort, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x153B /* #1976 'NSMachPort' => 'Foundation.NSMachPort, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1545 /* #1977 'Microsoft_macOS__Foundation_NSPortDelegate' => 'Foundation.NSPortDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1549 /* #1978 'Microsoft_macOS__Foundation_NSMachPortDelegate' => 'Foundation.NSMachPortDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x154D /* #1979 'NSMassFormatter' => 'Foundation.NSMassFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x154F /* #1980 'NSMeasurement' => 'Foundation.NSMeasurement`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1551 /* #1981 'NSMeasurementFormatter' => 'Foundation.NSMeasurementFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1553 /* #1982 'NSMetadataQueryAttributeValueTuple' => 'Foundation.NSMetadataQueryAttributeValueTuple, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1559 /* #1983 'Microsoft_macOS__Foundation_NSMetadataQueryDelegate' => 'Foundation.NSMetadataQueryDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x155D /* #1984 'NSMetadataQueryResultGroup' => 'Foundation.NSMetadataQueryResultGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x155F /* #1985 'NSMethodSignature' => 'Foundation.NSMethodSignature, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1561 /* #1986 'NSMorphology' => 'Foundation.NSMorphology, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1563 /* #1987 'NSMorphologyCustomPronoun' => 'Foundation.NSMorphologyCustomPronoun, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1565 /* #1988 'NSMutableCharacterSet' => 'Foundation.NSMutableCharacterSet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1567 /* #1989 'Microsoft_macOS__Foundation_NSMutableCopying' => 'Foundation.NSMutableCopying, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x156B /* #1990 'NSIndexSet' => 'Foundation.NSIndexSet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x156D /* #1991 'NSMutableIndexSet' => 'Foundation.NSMutableIndexSet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1573 /* #1992 'Microsoft_macOS__Foundation_NSNetServiceBrowserDelegate' => 'Foundation.NSNetServiceBrowserDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x157B /* #1993 'Microsoft_macOS__Foundation_NSNetServiceDelegate' => 'Foundation.NSNetServiceDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x157F /* #1994 'NSNotification' => 'Foundation.NSNotification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1581 /* #1995 'NSNotificationQueue' => 'Foundation.NSNotificationQueue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1583 /* #1996 'NSNumberFormatter' => 'Foundation.NSNumberFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x158D /* #1997 'NSOperationQueue' => 'Foundation.NSOperationQueue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x158F /* #1998 'NSOrthography' => 'Foundation.NSOrthography, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1591 /* #1999 'NSPersonNameComponents' => 'Foundation.NSPersonNameComponents, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1593 /* #2000 'NSPersonNameComponentsFormatter' => 'Foundation.NSPersonNameComponentsFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1595 /* #2001 'NSPipe' => 'Foundation.NSPipe, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1597 /* #2002 'NSPortMessage' => 'Foundation.NSPortMessage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1599 /* #2003 'NSPortNameServer' => 'Foundation.NSPortNameServer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x159B /* #2004 'NSPresentationIntent' => 'Foundation.NSPresentationIntent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x159D /* #2005 'NSData' => 'Foundation.NSData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x159F /* #2006 'NSMutableData' => 'Foundation.NSMutableData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15A1 /* #2007 'NSPurgeableData' => 'Foundation.NSPurgeableData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15A3 /* #2008 'NSRecursiveLock' => 'Foundation.NSRecursiveLock, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15A5 /* #2009 'NSRelativeDateTimeFormatter' => 'Foundation.NSRelativeDateTimeFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15A7 /* #2010 'NSScriptCommand' => 'Foundation.NSScriptCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15A9 /* #2011 'NSSortDescriptor' => 'Foundation.NSSortDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15AF /* #2012 'Microsoft_macOS__Foundation_NSStreamDelegate' => 'Foundation.NSStreamDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15B3 /* #2013 'NSTextCheckingResult' => 'Foundation.NSTextCheckingResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15B5 /* #2014 'NSUnitAcceleration' => 'Foundation.NSUnitAcceleration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15B7 /* #2015 'NSUnitAngle' => 'Foundation.NSUnitAngle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15B9 /* #2016 'NSUnitArea' => 'Foundation.NSUnitArea, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15BB /* #2017 'NSUnitConcentrationMass' => 'Foundation.NSUnitConcentrationMass, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15BD /* #2018 'NSUnitConverter' => 'Foundation.NSUnitConverter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15BF /* #2019 'NSUnitConverterLinear' => 'Foundation.NSUnitConverterLinear, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15C1 /* #2020 'NSUnitDispersion' => 'Foundation.NSUnitDispersion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15C3 /* #2021 'NSUnitDuration' => 'Foundation.NSUnitDuration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15C5 /* #2022 'NSUnitElectricCharge' => 'Foundation.NSUnitElectricCharge, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15C7 /* #2023 'NSUnitElectricCurrent' => 'Foundation.NSUnitElectricCurrent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15C9 /* #2024 'NSUnitElectricPotentialDifference' => 'Foundation.NSUnitElectricPotentialDifference, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15CB /* #2025 'NSUnitElectricResistance' => 'Foundation.NSUnitElectricResistance, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15CD /* #2026 'NSUnitEnergy' => 'Foundation.NSUnitEnergy, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15CF /* #2027 'NSUnitFrequency' => 'Foundation.NSUnitFrequency, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15D1 /* #2028 'NSUnitFuelEfficiency' => 'Foundation.NSUnitFuelEfficiency, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15D3 /* #2029 'NSUnitIlluminance' => 'Foundation.NSUnitIlluminance, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15D5 /* #2030 'NSUnitInformationStorage' => 'Foundation.NSUnitInformationStorage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15D7 /* #2031 'NSUnitLength' => 'Foundation.NSUnitLength, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15D9 /* #2032 'NSUnitMass' => 'Foundation.NSUnitMass, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15DB /* #2033 'NSUnitPower' => 'Foundation.NSUnitPower, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15DD /* #2034 'NSUnitPressure' => 'Foundation.NSUnitPressure, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15DF /* #2035 'NSUnitSpeed' => 'Foundation.NSUnitSpeed, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15E1 /* #2036 'NSUnitTemperature' => 'Foundation.NSUnitTemperature, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15E3 /* #2037 'NSUnitVolume' => 'Foundation.NSUnitVolume, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15E5 /* #2038 'NSURLAuthenticationChallenge' => 'Foundation.NSUrlAuthenticationChallenge, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15F3 /* #2039 'Microsoft_macOS__Foundation_NSUrlConnectionDelegate' => 'Foundation.NSUrlConnectionDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15F7 /* #2040 'Microsoft_macOS__Foundation_NSUrlConnectionDataDelegate' => 'Foundation.NSUrlConnectionDataDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x15FF /* #2041 'Microsoft_macOS__Foundation_NSUrlConnectionDownloadDelegate' => 'Foundation.NSUrlConnectionDownloadDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1607 /* #2042 'Microsoft_macOS__Foundation_NSUrlDownloadDelegate' => 'Foundation.NSUrlDownloadDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x160F /* #2043 'NSURLQueryItem' => 'Foundation.NSUrlQueryItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x161D /* #2044 'Microsoft_macOS__Foundation_NSUrlSessionDelegate' => 'Foundation.NSUrlSessionDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1621 /* #2045 'Microsoft_macOS__Foundation_NSUrlSessionTaskDelegate' => 'Foundation.NSUrlSessionTaskDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1625 /* #2046 'Microsoft_macOS__Foundation_NSUrlSessionDataDelegate' => 'Foundation.NSUrlSessionDataDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1629 /* #2047 'NSURLSessionTask' => 'Foundation.NSUrlSessionTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x162B /* #2048 'NSURLSessionDataTask' => 'Foundation.NSUrlSessionDataTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1631 /* #2049 'Microsoft_macOS__Foundation_NSUrlSessionDownloadDelegate' => 'Foundation.NSUrlSessionDownloadDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1635 /* #2050 'NSURLSessionDownloadTask' => 'Foundation.NSUrlSessionDownloadTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x163B /* #2051 'Microsoft_macOS__Foundation_NSUrlSessionStreamDelegate' => 'Foundation.NSUrlSessionStreamDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x163F /* #2052 'NSURLSessionTaskMetrics' => 'Foundation.NSUrlSessionTaskMetrics, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1641 /* #2053 'NSURLSessionTaskTransactionMetrics' => 'Foundation.NSUrlSessionTaskTransactionMetrics, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1643 /* #2054 'NSURLSessionUploadTask' => 'Foundation.NSUrlSessionUploadTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1649 /* #2055 'Microsoft_macOS__Foundation_NSUrlSessionWebSocketDelegate' => 'Foundation.NSUrlSessionWebSocketDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x164D /* #2056 'NSURLSessionWebSocketMessage' => 'Foundation.NSUrlSessionWebSocketMessage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1653 /* #2057 'Microsoft_macOS__Foundation_NSUserActivityDelegate' => 'Foundation.NSUserActivityDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1657 /* #2058 'NSUserNotification' => 'Foundation.NSUserNotification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1659 /* #2059 'NSUserNotificationAction' => 'Foundation.NSUserNotificationAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x165F /* #2060 'Microsoft_macOS__Foundation_NSUserNotificationCenterDelegate' => 'Foundation.NSUserNotificationCenterDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1663 /* #2061 'NSValueTransformer' => 'Foundation.NSValueTransformer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1665 /* #2062 'NSXPCListener' => 'Foundation.NSXpcListener, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x166B /* #2063 'Microsoft_macOS__Foundation_NSXpcListenerDelegate' => 'Foundation.NSXpcListenerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x166F /* #2064 'NSXPCListenerEndpoint' => 'Foundation.NSXpcListenerEndpoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1681 /* #2065 'NSFileProviderDomainVersion' => 'FileProvider.NSFileProviderDomainVersion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1697 /* #2066 'NSFileProviderItemVersion' => 'FileProvider.NSFileProviderItemVersion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16A5 /* #2067 'NSFileProviderRequest' => 'FileProvider.NSFileProviderRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16DB /* #2068 'EKObject' => 'EventKit.EKObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16DD /* #2069 'EKAlarm' => 'EventKit.EKAlarm, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16DF /* #2070 'EKCalendarItem' => 'EventKit.EKCalendarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16E1 /* #2071 'EKReminder' => 'EventKit.EKReminder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16E3 /* #2072 'EKCalendar' => 'EventKit.EKCalendar, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16E5 /* #2073 'EKEvent' => 'EventKit.EKEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16E7 /* #2074 'EKParticipant' => 'EventKit.EKParticipant, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16E9 /* #2075 'EKRecurrenceDayOfWeek' => 'EventKit.EKRecurrenceDayOfWeek, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16EB /* #2076 'EKRecurrenceEnd' => 'EventKit.EKRecurrenceEnd, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16ED /* #2077 'EKRecurrenceRule' => 'EventKit.EKRecurrenceRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16EF /* #2078 'EKSource' => 'EventKit.EKSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16F1 /* #2079 'EKStructuredLocation' => 'EventKit.EKStructuredLocation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16F3 /* #2080 'EKVirtualConferenceDescriptor' => 'EventKit.EKVirtualConferenceDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16F5 /* #2081 'EKVirtualConferenceRoomTypeDescriptor' => 'EventKit.EKVirtualConferenceRoomTypeDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16F7 /* #2082 'EKVirtualConferenceURLDescriptor' => 'EventKit.EKVirtualConferenceUrlDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16F9 /* #2083 'CWConfiguration' => 'CoreWlan.CWConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x16FB /* #2084 'CWChannel' => 'CoreWlan.CWChannel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1701 /* #2085 'Microsoft_macOS__CoreWlan_CWEventDelegate' => 'CoreWlan.CWEventDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1705 /* #2086 'CWMutableConfiguration' => 'CoreWlan.CWMutableConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1707 /* #2087 'CWNetworkProfile' => 'CoreWlan.CWNetworkProfile, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1709 /* #2088 'CWMutableNetworkProfile' => 'CoreWlan.CWMutableNetworkProfile, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x170B /* #2089 'CWNetwork' => 'CoreWlan.CWNetwork, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x170D /* #2090 'CWWiFiClient' => 'CoreWlan.CWWiFiClient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x170F /* #2091 'CSSearchQueryContext' => 'CoreSpotlight.CSSearchQueryContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1711 /* #2092 'CSSearchableItemAttributeSet' => 'CoreSpotlight.CSSearchableItemAttributeSet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1713 /* #2093 'CSCustomAttributeKey' => 'CoreSpotlight.CSCustomAttributeKey, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1715 /* #2094 'CSImportExtension' => 'CoreSpotlight.CSImportExtension, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x171B /* #2095 'CSIndexExtensionRequestHandler' => 'CoreSpotlight.CSIndexExtensionRequestHandler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x171D /* #2096 'CSLocalizedString' => 'CoreSpotlight.CSLocalizedString, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x171F /* #2097 'CSPerson' => 'CoreSpotlight.CSPerson, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1721 /* #2098 'Microsoft_macOS__CoreSpotlight_CSSearchableIndexDelegate' => 'CoreSpotlight.CSSearchableIndexDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1725 /* #2099 'CSSearchableItem' => 'CoreSpotlight.CSSearchableItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1727 /* #2100 'CSSearchQuery' => 'CoreSpotlight.CSSearchQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1729 /* #2101 'CSSuggestion' => 'CoreSpotlight.CSSuggestion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x172B /* #2102 'CSUserQuery' => 'CoreSpotlight.CSUserQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x172D /* #2103 'CSUserQueryContext' => 'CoreSpotlight.CSUserQueryContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x172F /* #2104 'CMLogItem' => 'CoreMotion.CMLogItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1731 /* #2105 'CMAccelerometerData' => 'CoreMotion.CMAccelerometerData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1733 /* #2106 'CMAttitude' => 'CoreMotion.CMAttitude, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1735 /* #2107 'CMDeviceMotion' => 'CoreMotion.CMDeviceMotion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1737 /* #2108 'CMGyroData' => 'CoreMotion.CMGyroData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1739 /* #2109 'CMMagnetometerData' => 'CoreMotion.CMMagnetometerData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x173B /* #2110 'CMPedometerData' => 'CoreMotion.CMPedometerData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x173D /* #2111 'CMPedometerEvent' => 'CoreMotion.CMPedometerEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x173F /* #2112 'MIDICIDeviceInfo' => 'CoreMidi.MidiCIDeviceInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1741 /* #2113 'MIDICIDiscoveredNode' => 'CoreMidi.MidiCIDiscoveredNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1743 /* #2114 'MIDICIDiscoveryManager' => 'CoreMidi.MidiCIDiscoveryManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1745 /* #2115 'MIDICIProfile' => 'CoreMidi.MidiCIProfile, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x174B /* #2116 'Microsoft_macOS__CoreMidi_MidiCIProfileResponderDelegate' => 'CoreMidi.MidiCIProfileResponderDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x174F /* #2117 'MIDICIProfileState' => 'CoreMidi.MidiCIProfileState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1751 /* #2118 'MIDICISession' => 'CoreMidi.MidiCISession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1753 /* #2119 'MIDINetworkConnection' => 'CoreMidi.MidiNetworkConnection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1755 /* #2120 'MIDINetworkHost' => 'CoreMidi.MidiNetworkHost, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1757 /* #2121 'MIDINetworkSession' => 'CoreMidi.MidiNetworkSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x175D /* #2122 'MLDictionaryFeatureProvider' => 'CoreML.MLDictionaryFeatureProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x175F /* #2123 'MLMultiArrayConstraint' => 'CoreML.MLMultiArrayConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1765 /* #2124 'MLArrayBatchProvider' => 'CoreML.MLArrayBatchProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x176F /* #2125 'Microsoft_macOS__CoreML_MLCustomModel' => 'CoreML.MLCustomModel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1775 /* #2126 'MLDictionaryConstraint' => 'CoreML.MLDictionaryConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1777 /* #2127 'MLFeatureDescription' => 'CoreML.MLFeatureDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1779 /* #2128 'MLFeatureValue' => 'CoreML.MLFeatureValue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x177B /* #2129 'MLImageConstraint' => 'CoreML.MLImageConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x177D /* #2130 'MLImageSize' => 'CoreML.MLImageSize, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x177F /* #2131 'MLImageSizeConstraint' => 'CoreML.MLImageSizeConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1781 /* #2132 'MLKey' => 'CoreML.MLKey, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1783 /* #2133 'MLMetricKey' => 'CoreML.MLMetricKey, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1785 /* #2134 'MLModelAsset' => 'CoreML.MLModelAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1787 /* #2135 'MLModelCollectionEntry' => 'CoreML.MLModelCollectionEntry, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1789 /* #2136 'MLModelConfiguration' => 'CoreML.MLModelConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x178B /* #2137 'MLModelDescription' => 'CoreML.MLModelDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x178D /* #2138 'MLMultiArrayShapeConstraint' => 'CoreML.MLMultiArrayShapeConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x178F /* #2139 'MLNumericConstraint' => 'CoreML.MLNumericConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1791 /* #2140 'MLParameterDescription' => 'CoreML.MLParameterDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1793 /* #2141 'MLParameterKey' => 'CoreML.MLParameterKey, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1795 /* #2142 'MLPredictionOptions' => 'CoreML.MLPredictionOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1797 /* #2143 'MLSequence' => 'CoreML.MLSequence, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1799 /* #2144 'MLSequenceConstraint' => 'CoreML.MLSequenceConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x179B /* #2145 'MLTask' => 'CoreML.MLTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x179D /* #2146 'MLUpdateContext' => 'CoreML.MLUpdateContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x179F /* #2147 'MLUpdateProgressHandlers' => 'CoreML.MLUpdateProgressHandlers, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17A1 /* #2148 'MLUpdateTask' => 'CoreML.MLUpdateTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17A7 /* #2149 'CLBeacon' => 'CoreLocation.CLBeacon, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17A9 /* #2150 'CLBeaconIdentityConstraint' => 'CoreLocation.CLBeaconIdentityConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17AB /* #2151 'CLRegion' => 'CoreLocation.CLRegion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17AD /* #2152 'CLBeaconRegion' => 'CoreLocation.CLBeaconRegion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17AF /* #2153 'CLCircularRegion' => 'CoreLocation.CLCircularRegion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17B1 /* #2154 'CLFloor' => 'CoreLocation.CLFloor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17B3 /* #2155 'CLHeading' => 'CoreLocation.CLHeading, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17B5 /* #2156 'CLLocation' => 'CoreLocation.CLLocation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17BB /* #2157 'Microsoft_macOS__CoreLocation_CLLocationManagerDelegate' => 'CoreLocation.CLLocationManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17BF /* #2158 'CLLocationSourceInformation' => 'CoreLocation.CLLocationSourceInformation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17C1 /* #2159 'CLVisit' => 'CoreLocation.CLVisit, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17C3 /* #2160 'CIColor' => 'CoreImage.CIColor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17C5 /* #2161 'CIContext' => 'CoreImage.CIContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17C7 /* #2162 'CIDetector' => 'CoreImage.CIDetector, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17C9 /* #2163 'CIFilter' => 'CoreImage.CIFilter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17CB /* #2164 'CIImage' => 'CoreImage.CIImage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17CD /* #2165 'CISampler' => 'CoreImage.CISampler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17CF /* #2166 'CIVector' => 'CoreImage.CIVector, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x17DD /* #2167 'CoreImage_CIAccordionFoldTransition' => 'CoreImage.CIAccordionFoldTransition, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x17FD /* #2168 'CoreImage_CICompositingFilter' => 'CoreImage.CICompositingFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1801 /* #2169 'CoreImage_CIAdditionCompositing' => 'CoreImage.CIAdditionCompositing, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1807 /* #2170 'CoreImage_CIAffineFilter' => 'CoreImage.CIAffineFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1811 /* #2171 'CoreImage_CIAffineClamp' => 'CoreImage.CIAffineClamp, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1825 /* #2172 'CoreImage_CIAffineTile' => 'CoreImage.CIAffineTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1835 /* #2173 'CoreImage_CIAffineTransform' => 'CoreImage.CIAffineTransform, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x183B /* #2174 'CoreImage_CIReductionFilter' => 'CoreImage.CIReductionFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x183F /* #2175 'CoreImage_CIAreaAverage' => 'CoreImage.CIAreaAverage, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1851 /* #2176 'CoreImage_CIAreaHistogram' => 'CoreImage.CIAreaHistogram, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x186D /* #2177 'CoreImage_CIAreaLogarithmicHistogram' => 'CoreImage.CIAreaLogarithmicHistogram, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1891 /* #2178 'CoreImage_CIAreaMaximum' => 'CoreImage.CIAreaMaximum, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x18A5 /* #2179 'CoreImage_CIAreaMaximumAlpha' => 'CoreImage.CIAreaMaximumAlpha, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x18B5 /* #2180 'CoreImage_CIAreaMinimum' => 'CoreImage.CIAreaMinimum, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x18C5 /* #2181 'CoreImage_CIAreaMinimumAlpha' => 'CoreImage.CIAreaMinimumAlpha, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x18DD /* #2182 'CoreImage_CIAreaMinMax' => 'CoreImage.CIAreaMinMax, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x18F5 /* #2183 'CoreImage_CIAreaMinMaxRed' => 'CoreImage.CIAreaMinMaxRed, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1905 /* #2184 'CoreImage_CIImageGenerator' => 'CoreImage.CIImageGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x190D /* #2185 'CoreImage_CIAttributedTextImageGenerator' => 'CoreImage.CIAttributedTextImageGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1921 /* #2186 'CIBarcodeDescriptor' => 'CoreImage.CIBarcodeDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1923 /* #2187 'CIAztecCodeDescriptor' => 'CoreImage.CIAztecCodeDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1925 /* #2188 'CoreImage_CICodeGenerator' => 'CoreImage.CICodeGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x192D /* #2189 'CoreImage_CIAztecCodeGenerator' => 'CoreImage.CIAztecCodeGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1949 /* #2190 'CoreImage_CIBarcodeGenerator' => 'CoreImage.CIBarcodeGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1955 /* #2191 'CoreImage_CITransitionFilter' => 'CoreImage.CITransitionFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1967 /* #2192 'CoreImage_CIBarsSwipeTransition' => 'CoreImage.CIBarsSwipeTransition, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1975 /* #2193 'CoreImage_CIBicubicScaleTransform' => 'CoreImage.CIBicubicScaleTransform, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1991 /* #2194 'CoreImage_CIBlendFilter' => 'CoreImage.CIBlendFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1995 /* #2195 'CIKernel' => 'CoreImage.CIKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1997 /* #2196 'CIColorKernel' => 'CoreImage.CIColorKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1999 /* #2197 'CIBlendKernel' => 'CoreImage.CIBlendKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x199F /* #2198 'CoreImage_CIBlendWithMask' => 'CoreImage.CIBlendWithMask, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x19B3 /* #2199 'CoreImage_CIBlendWithAlphaMask' => 'CoreImage.CIBlendWithAlphaMask, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x19B9 /* #2200 'CoreImage_CIBlendWithBlueMask' => 'CoreImage.CIBlendWithBlueMask, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x19BF /* #2201 'CoreImage_CIBlendWithRedMask' => 'CoreImage.CIBlendWithRedMask, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x19C9 /* #2202 'CoreImage_CIBloom' => 'CoreImage.CIBloom, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x19DD /* #2203 'CoreImage_CILinearBlur' => 'CoreImage.CILinearBlur, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x19E5 /* #2204 'CoreImage_CIBokehBlur' => 'CoreImage.CIBokehBlur, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1A05 /* #2205 'CoreImage_CIBoxBlur' => 'CoreImage.CIBoxBlur, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1A15 /* #2206 'CoreImage_CIDistortionFilter' => 'CoreImage.CIDistortionFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1A1D /* #2207 'CoreImage_CIBumpDistortion' => 'CoreImage.CIBumpDistortion, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1A39 /* #2208 'CoreImage_CIBumpDistortionLinear' => 'CoreImage.CIBumpDistortionLinear, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1A55 /* #2209 'CoreImage_CICameraCalibrationLensCorrection' => 'CoreImage.CICameraCalibrationLensCorrection, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1A5F /* #2210 'CoreImage_CICheckerboardGenerator' => 'CoreImage.CICheckerboardGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1A7F /* #2211 'CoreImage_CICircleSplashDistortion' => 'CoreImage.CICircleSplashDistortion, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1A93 /* #2212 'CoreImage_CIScreenFilter' => 'CoreImage.CIScreenFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1A9B /* #2213 'CoreImage_CICircularScreen' => 'CoreImage.CICircularScreen, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1AB7 /* #2214 'CoreImage_CICircularWrap' => 'CoreImage.CICircularWrap, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1ACF /* #2215 'CoreImage_CIClamp' => 'CoreImage.CIClamp, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1AD9 /* #2216 'CoreImage_CICmykHalftone' => 'CoreImage.CICmykHalftone, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1B01 /* #2217 'CoreImage_CICode128BarcodeGenerator' => 'CoreImage.CICode128BarcodeGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1B19 /* #2218 'CoreImage_CIColorAbsoluteDifference' => 'CoreImage.CIColorAbsoluteDifference, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1B29 /* #2219 'CoreImage_CIColorBlendMode' => 'CoreImage.CIColorBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1B2F /* #2220 'CoreImage_CIColorBurnBlendMode' => 'CoreImage.CIColorBurnBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1B39 /* #2221 'CoreImage_CIColorClamp' => 'CoreImage.CIColorClamp, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1B51 /* #2222 'CoreImage_CIColorControls' => 'CoreImage.CIColorControls, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1B6D /* #2223 'CoreImage_CIColorCrossPolynomial' => 'CoreImage.CIColorCrossPolynomial, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1B89 /* #2224 'CoreImage_CIColorCube' => 'CoreImage.CIColorCube, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1BA5 /* #2225 'CoreImage_CIColorCubesMixedWithMask' => 'CoreImage.CIColorCubesMixedWithMask, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1BCD /* #2226 'CoreImage_CIColorCubeWithColorSpace' => 'CoreImage.CIColorCubeWithColorSpace, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1BED /* #2227 'CoreImage_CIColorCurves' => 'CoreImage.CIColorCurves, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1C05 /* #2228 'CoreImage_CIColorDodgeBlendMode' => 'CoreImage.CIColorDodgeBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1C0F /* #2229 'CoreImage_CIColorInvert' => 'CoreImage.CIColorInvert, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1C1F /* #2230 'CoreImage_CIColorMap' => 'CoreImage.CIColorMap, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1C33 /* #2231 'CoreImage_CIColorMatrix' => 'CoreImage.CIColorMatrix, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1C57 /* #2232 'CoreImage_CIColorMonochrome' => 'CoreImage.CIColorMonochrome, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1C6F /* #2233 'CoreImage_CIColorPolynomial' => 'CoreImage.CIColorPolynomial, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1C8F /* #2234 'CoreImage_CIColorPosterize' => 'CoreImage.CIColorPosterize, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1CA3 /* #2235 'CoreImage_CIColorThreshold' => 'CoreImage.CIColorThreshold, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1CB7 /* #2236 'CoreImage_CIColorThresholdOtsu' => 'CoreImage.CIColorThresholdOtsu, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1CC7 /* #2237 'CoreImage_CIColumnAverage' => 'CoreImage.CIColumnAverage, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1CDB /* #2238 'CoreImage_CIComicEffect' => 'CoreImage.CIComicEffect, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1CEB /* #2239 'CoreImage_CIConstantColorGenerator' => 'CoreImage.CIConstantColorGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1CF5 /* #2240 'CoreImage_CIConvolutionCore' => 'CoreImage.CIConvolutionCore, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1CF9 /* #2241 'CoreImage_CIConvolution3X3' => 'CoreImage.CIConvolution3X3, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1CFF /* #2242 'CoreImage_CIConvolution5X5' => 'CoreImage.CIConvolution5X5, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D05 /* #2243 'CoreImage_CIConvolution7X7' => 'CoreImage.CIConvolution7X7, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D0B /* #2244 'CoreImage_CIConvolution9Horizontal' => 'CoreImage.CIConvolution9Horizontal, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D11 /* #2245 'CoreImage_CIConvolution9Vertical' => 'CoreImage.CIConvolution9Vertical, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D1B /* #2246 'CoreImage_CIConvolutionRGB3X3' => 'CoreImage.CIConvolutionRGB3X3, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D23 /* #2247 'CoreImage_CIConvolutionRGB5X5' => 'CoreImage.CIConvolutionRGB5X5, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D2B /* #2248 'CoreImage_CIConvolutionRGB7X7' => 'CoreImage.CIConvolutionRGB7X7, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D33 /* #2249 'CoreImage_CIConvolutionRGB9Horizontal' => 'CoreImage.CIConvolutionRGB9Horizontal, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D3B /* #2250 'CoreImage_CIConvolutionRGB9Vertical' => 'CoreImage.CIConvolutionRGB9Vertical, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D43 /* #2251 'CoreImage_CICopyMachineTransition' => 'CoreImage.CICopyMachineTransition, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D4D /* #2252 'CoreImage_CICoreMLModelFilter' => 'CoreImage.CICoreMLModelFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D57 /* #2253 'CoreImage_CICrop' => 'CoreImage.CICrop, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D61 /* #2254 'CoreImage_CICrystallize' => 'CoreImage.CICrystallize, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D75 /* #2255 'CoreImage_CIDarkenBlendMode' => 'CoreImage.CIDarkenBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D7B /* #2256 'CIDataMatrixCodeDescriptor' => 'CoreImage.CIDataMatrixCodeDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1D7D /* #2257 'CoreImage_CIDepthBlurEffect' => 'CoreImage.CIDepthBlurEffect, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D83 /* #2258 'CoreImage_CIDepthDisparityConverter' => 'CoreImage.CIDepthDisparityConverter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1D8B /* #2259 'CoreImage_CIDepthOfField' => 'CoreImage.CIDepthOfField, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1DB3 /* #2260 'CoreImage_CIDepthToDisparity' => 'CoreImage.CIDepthToDisparity, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1DBF /* #2261 'CoreImage_CIDifferenceBlendMode' => 'CoreImage.CIDifferenceBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1DC9 /* #2262 'CoreImage_CIDiscBlur' => 'CoreImage.CIDiscBlur, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1DDD /* #2263 'CoreImage_CIDisintegrateWithMaskTransition' => 'CoreImage.CIDisintegrateWithMaskTransition, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1DF9 /* #2264 'CoreImage_CIDisparityToDepth' => 'CoreImage.CIDisparityToDepth, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1E09 /* #2265 'CoreImage_CIDisplacementDistortion' => 'CoreImage.CIDisplacementDistortion, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1E1D /* #2266 'CoreImage_CIDissolveTransition' => 'CoreImage.CIDissolveTransition, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1E2B /* #2267 'CoreImage_CIDither' => 'CoreImage.CIDither, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1E3B /* #2268 'CoreImage_CIDivideBlendMode' => 'CoreImage.CIDivideBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1E45 /* #2269 'CoreImage_CIDocumentEnhancer' => 'CoreImage.CIDocumentEnhancer, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1E59 /* #2270 'CoreImage_CIDotScreen' => 'CoreImage.CIDotScreen, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1E79 /* #2271 'CoreImage_CIDroste' => 'CoreImage.CIDroste, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1EA1 /* #2272 'CoreImage_CIEdgePreserveUpsampleFilter' => 'CoreImage.CIEdgePreserveUpsampleFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1EBD /* #2273 'CoreImage_CIEdges' => 'CoreImage.CIEdges, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1ED1 /* #2274 'CoreImage_CIEdgeWork' => 'CoreImage.CIEdgeWork, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1EE1 /* #2275 'CoreImage_CITileFilter' => 'CoreImage.CITileFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1EE9 /* #2276 'CoreImage_CIEightfoldReflectedTile' => 'CoreImage.CIEightfoldReflectedTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1F01 /* #2277 'CoreImage_CIExclusionBlendMode' => 'CoreImage.CIExclusionBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1F0B /* #2278 'CoreImage_CIExposureAdjust' => 'CoreImage.CIExposureAdjust, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1F1B /* #2279 'CoreImage_CIFaceBalance' => 'CoreImage.CIFaceBalance, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1F1F /* #2280 'CIFeature' => 'CoreImage.CIFeature, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1F21 /* #2281 'CIFaceFeature' => 'CoreImage.CIFaceFeature, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1F27 /* #2282 'CoreImage_CIFalseColor' => 'CoreImage.CIFalseColor, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1F3F /* #2283 'CIFilterGenerator' => 'CoreImage.CIFilterGenerator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1F41 /* #2284 'CIFilterShape' => 'CoreImage.CIFilterShape, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x1F47 /* #2285 'CoreImage_CIFlashTransition' => 'CoreImage.CIFlashTransition, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1F7F /* #2286 'CoreImage_CIFourfoldReflectedTile' => 'CoreImage.CIFourfoldReflectedTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1F9F /* #2287 'CoreImage_CIFourfoldRotatedTile' => 'CoreImage.CIFourfoldRotatedTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1FBB /* #2288 'CoreImage_CIFourfoldTranslatedTile' => 'CoreImage.CIFourfoldTranslatedTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1FDB /* #2289 'CoreImage_CIGaborGradients' => 'CoreImage.CIGaborGradients, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1FEB /* #2290 'CoreImage_CIGammaAdjust' => 'CoreImage.CIGammaAdjust, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x1FFF /* #2291 'CoreImage_CIGaussianBlur' => 'CoreImage.CIGaussianBlur, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2013 /* #2292 'CoreImage_CIGaussianGradient' => 'CoreImage.CIGaussianGradient, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x202F /* #2293 'CoreImage_CIGlassDistortion' => 'CoreImage.CIGlassDistortion, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x204B /* #2294 'CoreImage_CIGlassLozenge' => 'CoreImage.CIGlassLozenge, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x206B /* #2295 'CoreImage_CIGlideReflectedTile' => 'CoreImage.CIGlideReflectedTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2087 /* #2296 'CoreImage_CIGloom' => 'CoreImage.CIGloom, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x209B /* #2297 'CoreImage_CIGuidedFilter' => 'CoreImage.CIGuidedFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x20A1 /* #2298 'CoreImage_CIHardLightBlendMode' => 'CoreImage.CIHardLightBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x20AB /* #2299 'CoreImage_CIHatchedScreen' => 'CoreImage.CIHatchedScreen, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x20CB /* #2300 'CoreImage_CIHeightFieldFromMask' => 'CoreImage.CIHeightFieldFromMask, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x20DF /* #2301 'CoreImage_CIHexagonalPixellate' => 'CoreImage.CIHexagonalPixellate, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x20F7 /* #2302 'CoreImage_CIHighlightShadowAdjust' => 'CoreImage.CIHighlightShadowAdjust, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2113 /* #2303 'CoreImage_CIHistogramDisplayFilter' => 'CoreImage.CIHistogramDisplayFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x212F /* #2304 'CoreImage_CIHoleDistortion' => 'CoreImage.CIHoleDistortion, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2147 /* #2305 'CoreImage_CIHueAdjust' => 'CoreImage.CIHueAdjust, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2157 /* #2306 'CoreImage_CIHueBlendMode' => 'CoreImage.CIHueBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2161 /* #2307 'CoreImage_CIHueSaturationValueGradient' => 'CoreImage.CIHueSaturationValueGradient, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x217D /* #2308 'CIImageAccumulator' => 'CoreImage.CIImageAccumulator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2183 /* #2309 'CIImageProcessorKernel' => 'CoreImage.CIImageProcessorKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x218D /* #2310 'CoreImage_CIKaleidoscope' => 'CoreImage.CIKaleidoscope, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x21A5 /* #2311 'CoreImage_CIKeystoneCorrection' => 'CoreImage.CIKeystoneCorrection, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x21AD /* #2312 'CoreImage_CIKeystoneCorrectionCombined' => 'CoreImage.CIKeystoneCorrectionCombined, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x21D1 /* #2313 'CoreImage_CIKeystoneCorrectionHorizontal' => 'CoreImage.CIKeystoneCorrectionHorizontal, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x21F5 /* #2314 'CoreImage_CIKeystoneCorrectionVertical' => 'CoreImage.CIKeystoneCorrectionVertical, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2219 /* #2315 'CoreImage_CIKMeans' => 'CoreImage.CIKMeans, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x223D /* #2316 'CoreImage_CILabDeltaE' => 'CoreImage.CILabDeltaE, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2251 /* #2317 'CoreImage_CILanczosScaleTransform' => 'CoreImage.CILanczosScaleTransform, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2269 /* #2318 'CoreImage_CILenticularHaloGenerator' => 'CoreImage.CILenticularHaloGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2291 /* #2319 'CoreImage_CILightenBlendMode' => 'CoreImage.CILightenBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x229B /* #2320 'CoreImage_CILightTunnel' => 'CoreImage.CILightTunnel, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x22B3 /* #2321 'CoreImage_CILinearBurnBlendMode' => 'CoreImage.CILinearBurnBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x22B9 /* #2322 'CoreImage_CILinearDodgeBlendMode' => 'CoreImage.CILinearDodgeBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x22C3 /* #2323 'CoreImage_CILinearGradient' => 'CoreImage.CILinearGradient, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x22DB /* #2324 'CoreImage_CILinearLightBlendMode' => 'CoreImage.CILinearLightBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x22E7 /* #2325 'CoreImage_CILinearToSRGBToneCurve' => 'CoreImage.CILinearToSRGBToneCurve, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x22F7 /* #2326 'CoreImage_CILineOverlay' => 'CoreImage.CILineOverlay, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x231B /* #2327 'CoreImage_CILineScreen' => 'CoreImage.CILineScreen, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2337 /* #2328 'CoreImage_CILuminosityBlendMode' => 'CoreImage.CILuminosityBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2341 /* #2329 'CoreImage_CIMaskedVariableBlur' => 'CoreImage.CIMaskedVariableBlur, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2359 /* #2330 'CoreImage_CIMaskToAlpha' => 'CoreImage.CIMaskToAlpha, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2369 /* #2331 'CoreImage_CIMaximumComponent' => 'CoreImage.CIMaximumComponent, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2375 /* #2332 'CoreImage_CIMaximumCompositing' => 'CoreImage.CIMaximumCompositing, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x237F /* #2333 'CoreImage_CIMedianFilter' => 'CoreImage.CIMedianFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x238F /* #2334 'CoreImage_CIMeshGenerator' => 'CoreImage.CIMeshGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x23A7 /* #2335 'CoreImage_CIMinimumComponent' => 'CoreImage.CIMinimumComponent, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x23B3 /* #2336 'CoreImage_CIMinimumCompositing' => 'CoreImage.CIMinimumCompositing, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x23BD /* #2337 'CoreImage_CIMix' => 'CoreImage.CIMix, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x23D5 /* #2338 'CoreImage_CIModTransition' => 'CoreImage.CIModTransition, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x23F9 /* #2339 'CoreImage_CIMorphology' => 'CoreImage.CIMorphology, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2401 /* #2340 'CoreImage_CIMorphologyGradient' => 'CoreImage.CIMorphologyGradient, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2415 /* #2341 'CoreImage_CIMorphologyMaximum' => 'CoreImage.CIMorphologyMaximum, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2429 /* #2342 'CoreImage_CIMorphologyMinimum' => 'CoreImage.CIMorphologyMinimum, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2439 /* #2343 'CoreImage_CIMorphologyRectangle' => 'CoreImage.CIMorphologyRectangle, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2441 /* #2344 'CoreImage_CIMorphologyRectangleMaximum' => 'CoreImage.CIMorphologyRectangleMaximum, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2459 /* #2345 'CoreImage_CIMorphologyRectangleMinimum' => 'CoreImage.CIMorphologyRectangleMinimum, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2471 /* #2346 'CoreImage_CIMotionBlur' => 'CoreImage.CIMotionBlur, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2485 /* #2347 'CoreImage_CIMultiplyBlendMode' => 'CoreImage.CIMultiplyBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x248B /* #2348 'CoreImage_CIMultiplyCompositing' => 'CoreImage.CIMultiplyCompositing, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2495 /* #2349 'CoreImage_CINinePartStretched' => 'CoreImage.CINinePartStretched, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x24B1 /* #2350 'CoreImage_CINinePartTiled' => 'CoreImage.CINinePartTiled, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x24D1 /* #2351 'CoreImage_CINoiseReduction' => 'CoreImage.CINoiseReduction, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x24E9 /* #2352 'CoreImage_CIOpTile' => 'CoreImage.CIOpTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2505 /* #2353 'CoreImage_CIOverlayBlendMode' => 'CoreImage.CIOverlayBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x250F /* #2354 'CoreImage_CIPageCurlTransition' => 'CoreImage.CIPageCurlTransition, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x253B /* #2355 'CoreImage_CIPageCurlWithShadowTransition' => 'CoreImage.CIPageCurlWithShadowTransition, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x256F /* #2356 'CoreImage_CIPaletteCentroid' => 'CoreImage.CIPaletteCentroid, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2587 /* #2357 'CoreImage_CIPalettize' => 'CoreImage.CIPalettize, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x259F /* #2358 'CoreImage_CIParallelogramTile' => 'CoreImage.CIParallelogramTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x25BF /* #2359 'CoreImage_CIPdf417BarcodeGenerator' => 'CoreImage.CIPdf417BarcodeGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x25F7 /* #2360 'CIPDF417CodeDescriptor' => 'CoreImage.CIPdf417CodeDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x25FD /* #2361 'CoreImage_CIPersonSegmentation' => 'CoreImage.CIPersonSegmentation, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2611 /* #2362 'CoreImage_CIPerspectiveTransform' => 'CoreImage.CIPerspectiveTransform, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2631 /* #2363 'CoreImage_CIPerspectiveCorrection' => 'CoreImage.CIPerspectiveCorrection, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2655 /* #2364 'CoreImage_CIPerspectiveRotate' => 'CoreImage.CIPerspectiveRotate, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2675 /* #2365 'CoreImage_CIPerspectiveTile' => 'CoreImage.CIPerspectiveTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2695 /* #2366 'CoreImage_CIPerspectiveTransformWithExtent' => 'CoreImage.CIPerspectiveTransformWithExtent, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x26B9 /* #2367 'CoreImage_CIPhotoEffect' => 'CoreImage.CIPhotoEffect, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x26C3 /* #2368 'CoreImage_CIPhotoEffectChrome' => 'CoreImage.CIPhotoEffectChrome, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x26C9 /* #2369 'CoreImage_CIPhotoEffectFade' => 'CoreImage.CIPhotoEffectFade, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x26CF /* #2370 'CoreImage_CIPhotoEffectInstant' => 'CoreImage.CIPhotoEffectInstant, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x26D5 /* #2371 'CoreImage_CIPhotoEffectMono' => 'CoreImage.CIPhotoEffectMono, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x26DB /* #2372 'CoreImage_CIPhotoEffectNoir' => 'CoreImage.CIPhotoEffectNoir, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x26E1 /* #2373 'CoreImage_CIPhotoEffectProcess' => 'CoreImage.CIPhotoEffectProcess, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x26E7 /* #2374 'CoreImage_CIPhotoEffectTonal' => 'CoreImage.CIPhotoEffectTonal, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x26ED /* #2375 'CoreImage_CIPhotoEffectTransfer' => 'CoreImage.CIPhotoEffectTransfer, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x26F7 /* #2376 'CoreImage_CIPinchDistortion' => 'CoreImage.CIPinchDistortion, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x270F /* #2377 'CoreImage_CIPinLightBlendMode' => 'CoreImage.CIPinLightBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2719 /* #2378 'CoreImage_CIPixellate' => 'CoreImage.CIPixellate, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x272D /* #2379 'CIPlugIn' => 'CoreImage.CIPlugIn, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2733 /* #2380 'CoreImage_CIPointillize' => 'CoreImage.CIPointillize, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2747 /* #2381 'CIQRCodeDescriptor' => 'CoreImage.CIQRCodeDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2749 /* #2382 'CIQRCodeFeature' => 'CoreImage.CIQRCodeFeature, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x274F /* #2383 'CoreImage_CIQRCodeGenerator' => 'CoreImage.CIQRCodeGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2763 /* #2384 'CoreImage_CIRadialGradient' => 'CoreImage.CIRadialGradient, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2783 /* #2385 'CoreImage_CIRandomGenerator' => 'CoreImage.CIRandomGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x278B /* #2386 'CIRAWFilter' => 'CoreImage.CIRawFilter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x278D /* #2387 'CIRectangleFeature' => 'CoreImage.CIRectangleFeature, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x278F /* #2388 'CIRenderDestination' => 'CoreImage.CIRenderDestination, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2791 /* #2389 'CIRenderInfo' => 'CoreImage.CIRenderInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2793 /* #2390 'CIRenderTask' => 'CoreImage.CIRenderTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2799 /* #2391 'CoreImage_CIRippleTransition' => 'CoreImage.CIRippleTransition, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x27C5 /* #2392 'CoreImage_CIRoundedRectangleGenerator' => 'CoreImage.CIRoundedRectangleGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x27DD /* #2393 'CoreImage_CIRowAverage' => 'CoreImage.CIRowAverage, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x27F1 /* #2394 'CoreImage_CISaliencyMapFilter' => 'CoreImage.CISaliencyMapFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x27FD /* #2395 'CoreImage_CISampleNearest' => 'CoreImage.CISampleNearest, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2803 /* #2396 'CoreImage_CISaturationBlendMode' => 'CoreImage.CISaturationBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2809 /* #2397 'CoreImage_CIScreenBlendMode' => 'CoreImage.CIScreenBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2813 /* #2398 'CoreImage_CISepiaTone' => 'CoreImage.CISepiaTone, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2827 /* #2399 'CoreImage_CIShadedMaterial' => 'CoreImage.CIShadedMaterial, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x283F /* #2400 'CoreImage_CISharpenLuminance' => 'CoreImage.CISharpenLuminance, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2857 /* #2401 'CoreImage_CISixfoldReflectedTile' => 'CoreImage.CISixfoldReflectedTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2873 /* #2402 'CoreImage_CISixfoldRotatedTile' => 'CoreImage.CISixfoldRotatedTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x288F /* #2403 'CoreImage_CISmoothLinearGradient' => 'CoreImage.CISmoothLinearGradient, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x28A7 /* #2404 'CoreImage_CISoftLightBlendMode' => 'CoreImage.CISoftLightBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x28AD /* #2405 'CoreImage_CISourceAtopCompositing' => 'CoreImage.CISourceAtopCompositing, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x28B3 /* #2406 'CoreImage_CISourceInCompositing' => 'CoreImage.CISourceInCompositing, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x28B9 /* #2407 'CoreImage_CISourceOutCompositing' => 'CoreImage.CISourceOutCompositing, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x28BF /* #2408 'CoreImage_CISourceOverCompositing' => 'CoreImage.CISourceOverCompositing, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x28C9 /* #2409 'CoreImage_CISpotColor' => 'CoreImage.CISpotColor, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2909 /* #2410 'CoreImage_CISpotLight' => 'CoreImage.CISpotLight, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x292D /* #2411 'CoreImage_CISRGBToneCurveToLinear' => 'CoreImage.CISRGBToneCurveToLinear, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x293D /* #2412 'CoreImage_CIStarShineGenerator' => 'CoreImage.CIStarShineGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2969 /* #2413 'CoreImage_CIStraightenFilter' => 'CoreImage.CIStraightenFilter, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x297D /* #2414 'CoreImage_CIStretchCrop' => 'CoreImage.CIStretchCrop, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2999 /* #2415 'CoreImage_CIStripesGenerator' => 'CoreImage.CIStripesGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x29B5 /* #2416 'CoreImage_CISubtractBlendMode' => 'CoreImage.CISubtractBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x29BF /* #2417 'CoreImage_CISunbeamsGenerator' => 'CoreImage.CISunbeamsGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x29E3 /* #2418 'CoreImage_CISwipeTransition' => 'CoreImage.CISwipeTransition, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x29F1 /* #2419 'CoreImage_CITemperatureAndTint' => 'CoreImage.CITemperatureAndTint, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2A05 /* #2420 'CITextFeature' => 'CoreImage.CITextFeature, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2A0B /* #2421 'CoreImage_CITextImageGenerator' => 'CoreImage.CITextImageGenerator, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2A2B /* #2422 'CoreImage_CIThermal' => 'CoreImage.CIThermal, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2A3B /* #2423 'CoreImage_CIToneCurve' => 'CoreImage.CIToneCurve, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2A5F /* #2424 'CoreImage_CITorusLensDistortion' => 'CoreImage.CITorusLensDistortion, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2A7F /* #2425 'CoreImage_CITriangleKaleidoscope' => 'CoreImage.CITriangleKaleidoscope, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2A9F /* #2426 'CoreImage_CITriangleTile' => 'CoreImage.CITriangleTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2ABB /* #2427 'CoreImage_CITwelvefoldReflectedTile' => 'CoreImage.CITwelvefoldReflectedTile, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2AD7 /* #2428 'CoreImage_CITwirlDistortion' => 'CoreImage.CITwirlDistortion, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2AF3 /* #2429 'CoreImage_CIUnsharpMask' => 'CoreImage.CIUnsharpMask, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2B0B /* #2430 'CoreImage_CIVibrance' => 'CoreImage.CIVibrance, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2B1F /* #2431 'CoreImage_CIVignette' => 'CoreImage.CIVignette, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2B37 /* #2432 'CoreImage_CIVignetteEffect' => 'CoreImage.CIVignetteEffect, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2B53 /* #2433 'CoreImage_CIVividLightBlendMode' => 'CoreImage.CIVividLightBlendMode, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2B5F /* #2434 'CoreImage_CIVortexDistortion' => 'CoreImage.CIVortexDistortion, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2B77 /* #2435 'CIWarpKernel' => 'CoreImage.CIWarpKernel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2B7D /* #2436 'CoreImage_CIWhitePointAdjust' => 'CoreImage.CIWhitePointAdjust, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2B91 /* #2437 'CoreImage_CIXRay' => 'CoreImage.CIXRay, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2BA1 /* #2438 'CoreImage_CIZoomBlur' => 'CoreImage.CIZoomBlur, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2BB5 /* #2439 'NSEntityDescription' => 'CoreData.NSEntityDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BB7 /* #2440 'NSPersistentStoreRequest' => 'CoreData.NSPersistentStoreRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BB9 /* #2441 'NSAsynchronousFetchRequest' => 'CoreData.NSAsynchronousFetchRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BBB /* #2442 'NSPersistentStoreResult' => 'CoreData.NSPersistentStoreResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BBD /* #2443 'NSPersistentStoreAsynchronousResult' => 'CoreData.NSPersistentStoreAsynchronousResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BBF /* #2444 'NSAsynchronousFetchResult' => 'CoreData.NSAsynchronousFetchResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BC1 /* #2445 'NSPersistentStore' => 'CoreData.NSPersistentStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BC3 /* #2446 'NSAtomicStore' => 'CoreData.NSAtomicStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BC5 /* #2447 'NSAtomicStoreCacheNode' => 'CoreData.NSAtomicStoreCacheNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BC7 /* #2448 'NSPropertyDescription' => 'CoreData.NSPropertyDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BC9 /* #2449 'NSAttributeDescription' => 'CoreData.NSAttributeDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BCB /* #2450 'NSBatchDeleteRequest' => 'CoreData.NSBatchDeleteRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BCD /* #2451 'NSBatchDeleteResult' => 'CoreData.NSBatchDeleteResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BCF /* #2452 'NSBatchInsertRequest' => 'CoreData.NSBatchInsertRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BD1 /* #2453 'NSBatchInsertResult' => 'CoreData.NSBatchInsertResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BD3 /* #2454 'NSBatchUpdateRequest' => 'CoreData.NSBatchUpdateRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BD5 /* #2455 'NSBatchUpdateResult' => 'CoreData.NSBatchUpdateResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BD7 /* #2456 'NSConstraintConflict' => 'CoreData.NSConstraintConflict, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BD9 /* #2457 'NSDerivedAttributeDescription' => 'CoreData.NSDerivedAttributeDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BDB /* #2458 'NSEntityMapping' => 'CoreData.NSEntityMapping, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BDD /* #2459 'NSEntityMigrationPolicy' => 'CoreData.NSEntityMigrationPolicy, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BDF /* #2460 'NSExpressionDescription' => 'CoreData.NSExpressionDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BE1 /* #2461 'NSFetchedPropertyDescription' => 'CoreData.NSFetchedPropertyDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BE3 /* #2462 'NSFetchIndexDescription' => 'CoreData.NSFetchIndexDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BE5 /* #2463 'NSFetchIndexElementDescription' => 'CoreData.NSFetchIndexElementDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BE7 /* #2464 'NSFetchRequest' => 'CoreData.NSFetchRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BE9 /* #2465 'NSFetchRequestExpression' => 'CoreData.NSFetchRequestExpression, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BEB /* #2466 'NSIncrementalStore' => 'CoreData.NSIncrementalStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BED /* #2467 'NSIncrementalStoreNode' => 'CoreData.NSIncrementalStoreNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BEF /* #2468 'NSManagedObject' => 'CoreData.NSManagedObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BF1 /* #2469 'NSManagedObjectID' => 'CoreData.NSManagedObjectID, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BF3 /* #2470 'NSManagedObjectModel' => 'CoreData.NSManagedObjectModel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BF5 /* #2471 'NSMappingModel' => 'CoreData.NSMappingModel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BF7 /* #2472 'NSMergeConflict' => 'CoreData.NSMergeConflict, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BF9 /* #2473 'NSMergePolicy' => 'CoreData.NSMergePolicy, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BFB /* #2474 'NSMigrationManager' => 'CoreData.NSMigrationManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BFD /* #2475 'NSPersistentCloudKitContainerEventRequest' => 'CoreData.NSPersistentCloudKitContainerEventRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2BFF /* #2476 'NSPersistentCloudKitContainerEventResult' => 'CoreData.NSPersistentCloudKitContainerEventResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C01 /* #2477 'NSPersistentCloudKitContainerOptions' => 'CoreData.NSPersistentCloudKitContainerOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C03 /* #2478 'NSPersistentHistoryChange' => 'CoreData.NSPersistentHistoryChange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C05 /* #2479 'NSPersistentHistoryChangeRequest' => 'CoreData.NSPersistentHistoryChangeRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C07 /* #2480 'NSPersistentHistoryResult' => 'CoreData.NSPersistentHistoryResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C09 /* #2481 'NSPersistentHistoryToken' => 'CoreData.NSPersistentHistoryToken, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C0B /* #2482 'NSPersistentHistoryTransaction' => 'CoreData.NSPersistentHistoryTransaction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C0D /* #2483 'NSPersistentStoreDescription' => 'CoreData.NSPersistentStoreDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C0F /* #2484 'NSPropertyMapping' => 'CoreData.NSPropertyMapping, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C11 /* #2485 'NSQueryGenerationToken' => 'CoreData.NSQueryGenerationToken, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C13 /* #2486 'NSRelationshipDescription' => 'CoreData.NSRelationshipDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C15 /* #2487 'NSSaveChangesRequest' => 'CoreData.NSSaveChangesRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C17 /* #2488 'CBUUID' => 'CoreBluetooth.CBUUID, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C19 /* #2489 'CBATTRequest' => 'CoreBluetooth.CBATTRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C1B /* #2490 'CBAttribute' => 'CoreBluetooth.CBAttribute, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C1D /* #2491 'CBPeer' => 'CoreBluetooth.CBPeer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C1F /* #2492 'CBCentral' => 'CoreBluetooth.CBCentral, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C25 /* #2493 'Microsoft_macOS__CoreBluetooth_CBCentralManagerDelegate' => 'CoreBluetooth.CBCentralManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C29 /* #2494 'CBCharacteristic' => 'CoreBluetooth.CBCharacteristic, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C2B /* #2495 'CBDescriptor' => 'CoreBluetooth.CBDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C2D /* #2496 'CBL2CAPChannel' => 'CoreBluetooth.CBL2CapChannel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C2F /* #2497 'CBManager' => 'CoreBluetooth.CBManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C31 /* #2498 'CBMutableCharacteristic' => 'CoreBluetooth.CBMutableCharacteristic, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C33 /* #2499 'CBMutableDescriptor' => 'CoreBluetooth.CBMutableDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C35 /* #2500 'CBService' => 'CoreBluetooth.CBService, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C37 /* #2501 'CBMutableService' => 'CoreBluetooth.CBMutableService, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C3D /* #2502 'Microsoft_macOS__CoreBluetooth_CBPeripheralDelegate' => 'CoreBluetooth.CBPeripheralDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C45 /* #2503 'Microsoft_macOS__CoreBluetooth_CBPeripheralManagerDelegate' => 'CoreBluetooth.CBPeripheralManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C49 /* #2504 'CAAnimation' => 'CoreAnimation.CAAnimation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C4B /* #2505 'CAPropertyAnimation' => 'CoreAnimation.CAPropertyAnimation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C4D /* #2506 'CABasicAnimation' => 'CoreAnimation.CABasicAnimation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C4F /* #2507 'CAGradientLayer' => 'CoreAnimation.CAGradientLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C51 /* #2508 'CAKeyframeAnimation' => 'CoreAnimation.CAKeyFrameAnimation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C53 /* #2509 'Microsoft_macOS__CoreAnimation_CALayerDelegate' => 'CoreAnimation.CALayerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C57 /* #2510 'CAMediaTimingFunction' => 'CoreAnimation.CAMediaTimingFunction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C59 /* #2511 'CATextLayer' => 'CoreAnimation.CATextLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C5B /* #2512 'Microsoft_macOS__CoreAnimation_CAAction' => 'CoreAnimation.CAAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C61 /* #2513 'Microsoft_macOS__CoreAnimation_CAAnimationDelegate' => 'CoreAnimation.CAAnimationDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C65 /* #2514 'CAAnimationGroup' => 'CoreAnimation.CAAnimationGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C67 /* #2515 'CAConstraint' => 'CoreAnimation.CAConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C69 /* #2516 'CAConstraintLayoutManager' => 'CoreAnimation.CAConstraintLayoutManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C6B /* #2517 'CAEDRMetadata' => 'CoreAnimation.CAEdrMetadata, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C6D /* #2518 'CAEmitterCell' => 'CoreAnimation.CAEmitterCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C6F /* #2519 'CAEmitterLayer' => 'CoreAnimation.CAEmitterLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C71 /* #2520 'Microsoft_macOS__CoreAnimation_CAMediaTiming' => 'CoreAnimation.CAMediaTiming, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C79 /* #2521 'CAMetalLayer' => 'CoreAnimation.CAMetalLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C7B /* #2522 'CARenderer' => 'CoreAnimation.CARenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C7D /* #2523 'CAReplicatorLayer' => 'CoreAnimation.CAReplicatorLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C7F /* #2524 'CAScrollLayer' => 'CoreAnimation.CAScrollLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C81 /* #2525 'CAShapeLayer' => 'CoreAnimation.CAShapeLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C83 /* #2526 'CASpringAnimation' => 'CoreAnimation.CASpringAnimation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C85 /* #2527 'CATiledLayer' => 'CoreAnimation.CATiledLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C87 /* #2528 'CATransaction' => 'CoreAnimation.CATransaction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C89 /* #2529 'CATransformLayer' => 'CoreAnimation.CATransformLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C8B /* #2530 'CATransition' => 'CoreAnimation.CATransition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C8D /* #2531 'CAValueFunction' => 'CoreAnimation.CAValueFunction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C8F /* #2532 'CNFetchRequest' => 'Contacts.CNFetchRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C91 /* #2533 'CNContactFetchRequest' => 'Contacts.CNContactFetchRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C93 /* #2534 'CNInstantMessageAddress' => 'Contacts.CNInstantMessageAddress, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C95 /* #2535 'CNSocialProfile' => 'Contacts.CNSocialProfile, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C97 /* #2536 'CNChangeHistoryEvent' => 'Contacts.CNChangeHistoryEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C99 /* #2537 'CNChangeHistoryAddContactEvent' => 'Contacts.CNChangeHistoryAddContactEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C9B /* #2538 'CNChangeHistoryAddGroupEvent' => 'Contacts.CNChangeHistoryAddGroupEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C9D /* #2539 'CNChangeHistoryAddMemberToGroupEvent' => 'Contacts.CNChangeHistoryAddMemberToGroupEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2C9F /* #2540 'CNChangeHistoryAddSubgroupToGroupEvent' => 'Contacts.CNChangeHistoryAddSubgroupToGroupEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CA1 /* #2541 'CNChangeHistoryDeleteContactEvent' => 'Contacts.CNChangeHistoryDeleteContactEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CA3 /* #2542 'CNChangeHistoryDeleteGroupEvent' => 'Contacts.CNChangeHistoryDeleteGroupEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CA5 /* #2543 'CNChangeHistoryDropEverythingEvent' => 'Contacts.CNChangeHistoryDropEverythingEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CAB /* #2544 'CNChangeHistoryFetchRequest' => 'Contacts.CNChangeHistoryFetchRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CAD /* #2545 'CNChangeHistoryRemoveMemberFromGroupEvent' => 'Contacts.CNChangeHistoryRemoveMemberFromGroupEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CAF /* #2546 'CNChangeHistoryRemoveSubgroupFromGroupEvent' => 'Contacts.CNChangeHistoryRemoveSubgroupFromGroupEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CB1 /* #2547 'CNChangeHistoryUpdateContactEvent' => 'Contacts.CNChangeHistoryUpdateContactEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CB3 /* #2548 'CNChangeHistoryUpdateGroupEvent' => 'Contacts.CNChangeHistoryUpdateGroupEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CB5 /* #2549 'CNContactFormatter' => 'Contacts.CNContactFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CB7 /* #2550 'CNContactProperty' => 'Contacts.CNContactProperty, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CB9 /* #2551 'CNContactRelation' => 'Contacts.CNContactRelation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CBB /* #2552 'CNContactsUserDefaults' => 'Contacts.CNContactsUserDefaults, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CBD /* #2553 'CNContactVCardSerialization' => 'Contacts.CNContactVCardSerialization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CBF /* #2554 'CNContainer' => 'Contacts.CNContainer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CC1 /* #2555 'CNFetchResult' => 'Contacts.CNFetchResult`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CC3 /* #2556 'CNGroup' => 'Contacts.CNGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CC9 /* #2557 'CNLabeledValue' => 'Contacts.CNLabeledValue`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CCB /* #2558 'CNContact' => 'Contacts.CNContact, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CCD /* #2559 'CNMutableContact' => 'Contacts.CNMutableContact, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CCF /* #2560 'CNMutableGroup' => 'Contacts.CNMutableGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CD1 /* #2561 'CNPostalAddress' => 'Contacts.CNPostalAddress, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CD3 /* #2562 'CNMutablePostalAddress' => 'Contacts.CNMutablePostalAddress, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CD5 /* #2563 'CNPhoneNumber' => 'Contacts.CNPhoneNumber, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CD7 /* #2564 'CNPostalAddressFormatter' => 'Contacts.CNPostalAddressFormatter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CD9 /* #2565 'CNSaveRequest' => 'Contacts.CNSaveRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CDB /* #2566 'CKRecord' => 'CloudKit.CKRecord, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CDD /* #2567 'CKRecordID' => 'CloudKit.CKRecordID, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CDF /* #2568 'CKRecordZoneID' => 'CloudKit.CKRecordZoneID, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CE1 /* #2569 'CKUserIdentityLookupInfo' => 'CloudKit.CKUserIdentityLookupInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CE3 /* #2570 'CKOperation' => 'CloudKit.CKOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CE5 /* #2571 'CKAcceptSharesOperation' => 'CloudKit.CKAcceptSharesOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CE7 /* #2572 'CKAllowedSharingOptions' => 'CloudKit.CKAllowedSharingOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CE9 /* #2573 'CKAsset' => 'CloudKit.CKAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CEB /* #2574 'CKNotification' => 'CloudKit.CKNotification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CED /* #2575 'CKDatabaseNotification' => 'CloudKit.CKDatabaseNotification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CEF /* #2576 'CKDatabaseOperation' => 'CloudKit.CKDatabaseOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CF1 /* #2577 'CKSubscription' => 'CloudKit.CKSubscription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CF3 /* #2578 'CKDatabaseSubscription' => 'CloudKit.CKDatabaseSubscription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CF5 /* #2579 'CKDiscoverAllUserIdentitiesOperation' => 'CloudKit.CKDiscoverAllUserIdentitiesOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CF7 /* #2580 'CKDiscoverUserIdentitiesOperation' => 'CloudKit.CKDiscoverUserIdentitiesOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CF9 /* #2581 'CKFetchDatabaseChangesOperation' => 'CloudKit.CKFetchDatabaseChangesOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CFB /* #2582 'CKFetchNotificationChangesOperation' => 'CloudKit.CKFetchNotificationChangesOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CFD /* #2583 'CKFetchRecordChangesOperation' => 'CloudKit.CKFetchRecordChangesOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2CFF /* #2584 'CKFetchRecordsOperation' => 'CloudKit.CKFetchRecordsOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D01 /* #2585 'CKFetchRecordZoneChangesConfiguration' => 'CloudKit.CKFetchRecordZoneChangesConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D03 /* #2586 'CKFetchRecordZoneChangesOperation' => 'CloudKit.CKFetchRecordZoneChangesOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D05 /* #2587 'CKFetchRecordZoneChangesOptions' => 'CloudKit.CKFetchRecordZoneChangesOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D07 /* #2588 'CKFetchRecordZonesOperation' => 'CloudKit.CKFetchRecordZonesOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D09 /* #2589 'CKFetchShareMetadataOperation' => 'CloudKit.CKFetchShareMetadataOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D0B /* #2590 'CKFetchShareParticipantsOperation' => 'CloudKit.CKFetchShareParticipantsOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D0D /* #2591 'CKFetchSubscriptionsOperation' => 'CloudKit.CKFetchSubscriptionsOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D0F /* #2592 'CKFetchWebAuthTokenOperation' => 'CloudKit.CKFetchWebAuthTokenOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D11 /* #2593 'CKLocationSortDescriptor' => 'CloudKit.CKLocationSortDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D13 /* #2594 'CKMarkNotificationsReadOperation' => 'CloudKit.CKMarkNotificationsReadOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D15 /* #2595 'CKModifyBadgeOperation' => 'CloudKit.CKModifyBadgeOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D17 /* #2596 'CKModifyRecordsOperation' => 'CloudKit.CKModifyRecordsOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D19 /* #2597 'CKModifyRecordZonesOperation' => 'CloudKit.CKModifyRecordZonesOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D1B /* #2598 'CKModifySubscriptionsOperation' => 'CloudKit.CKModifySubscriptionsOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D1D /* #2599 'CKNotificationID' => 'CloudKit.CKNotificationID, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D1F /* #2600 'CKNotificationInfo' => 'CloudKit.CKNotificationInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D21 /* #2601 'CKOperationConfiguration' => 'CloudKit.CKOperationConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D23 /* #2602 'CKOperationGroup' => 'CloudKit.CKOperationGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D25 /* #2603 'CKQuery' => 'CloudKit.CKQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D27 /* #2604 'CKQueryCursor' => 'CloudKit.CKQueryCursor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D29 /* #2605 'CKQueryNotification' => 'CloudKit.CKQueryNotification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D2B /* #2606 'CKQueryOperation' => 'CloudKit.CKQueryOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D2D /* #2607 'CKQuerySubscription' => 'CloudKit.CKQuerySubscription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D2F /* #2608 'Microsoft_macOS__CloudKit_CKRecordValue' => 'CloudKit.CKRecordValue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D33 /* #2609 'CKRecordZone' => 'CloudKit.CKRecordZone, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D35 /* #2610 'CKRecordZoneNotification' => 'CloudKit.CKRecordZoneNotification, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D37 /* #2611 'CKRecordZoneSubscription' => 'CloudKit.CKRecordZoneSubscription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D39 /* #2612 'CKReference' => 'CloudKit.CKReference, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D3B /* #2613 'CKServerChangeToken' => 'CloudKit.CKServerChangeToken, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D3D /* #2614 'CKShare' => 'CloudKit.CKShare, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D3F /* #2615 'CKShareMetadata' => 'CloudKit.CKShareMetadata, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D41 /* #2616 'CKShareParticipant' => 'CloudKit.CKShareParticipant, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D43 /* #2617 'CKSystemSharingUIObserver' => 'CloudKit.CKSystemSharingUIObserver, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D45 /* #2618 'CKUserIdentity' => 'CloudKit.CKUserIdentity, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D47 /* #2619 'CLSObject' => 'ClassKit.CLSObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D49 /* #2620 'CLSActivity' => 'ClassKit.CLSActivity, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D4B /* #2621 'CLSActivityItem' => 'ClassKit.CLSActivityItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D4D /* #2622 'CLSBinaryItem' => 'ClassKit.CLSBinaryItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D57 /* #2623 'Microsoft_macOS__ClassKit_CLSDataStoreDelegate' => 'ClassKit.CLSDataStoreDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D5B /* #2624 'CLSProgressReportingCapability' => 'ClassKit.CLSProgressReportingCapability, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D5D /* #2625 'CLSQuantityItem' => 'ClassKit.CLSQuantityItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D5F /* #2626 'CLSScoreItem' => 'ClassKit.CLSScoreItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D61 /* #2627 'BCChatAction' => 'BusinessChat.BCChatAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D63 /* #2628 'BCChatButton' => 'BusinessChat.BCChatButton, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D65 /* #2629 'BAAppExtensionInfo' => 'BackgroundAssets.BAAppExtensionInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D67 /* #2630 'BADownload' => 'BackgroundAssets.BADownload, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D71 /* #2631 'Microsoft_macOS__BackgroundAssets_BADownloadManagerDelegate' => 'BackgroundAssets.BADownloadManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D75 /* #2632 'BAURLDownload' => 'BackgroundAssets.BAUrlDownload, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D77 /* #2633 'ASAuthorization' => 'AuthenticationServices.ASAuthorization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D79 /* #2634 'ASAuthorizationRequest' => 'AuthenticationServices.ASAuthorizationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D7F /* #2635 'Microsoft_macOS__AuthenticationServices_ASAuthorizationProviderExtensionRegistrationHandler' => 'AuthenticationServices.ASAuthorizationProviderExtensionRegistrationHandler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D81 /* #2636 'ASAuthorizationAppleIDButton' => 'AuthenticationServices.ASAuthorizationAppleIdButton, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D83 /* #2637 'ASAuthorizationOpenIDRequest' => 'AuthenticationServices.ASAuthorizationOpenIdRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D85 /* #2638 'ASAuthorizationAppleIDRequest' => 'AuthenticationServices.ASAuthorizationAppleIdRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D87 /* #2639 'ASAuthorizationController' => 'AuthenticationServices.ASAuthorizationController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D8D /* #2640 'Microsoft_macOS__AuthenticationServices_ASAuthorizationControllerDelegate' => 'AuthenticationServices.ASAuthorizationControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D9D /* #2641 'ASAuthorizationPasswordProvider' => 'AuthenticationServices.ASAuthorizationPasswordProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2D9F /* #2642 'ASAuthorizationPasswordRequest' => 'AuthenticationServices.ASAuthorizationPasswordRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DA9 /* #2643 'ASAuthorizationPlatformPublicKeyCredentialAssertion' => 'AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DAF /* #2644 'ASAuthorizationPlatformPublicKeyCredentialAssertionRequest' => 'AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DB5 /* #2645 'ASAuthorizationPlatformPublicKeyCredentialDescriptor' => 'AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DB7 /* #2646 'ASAuthorizationPlatformPublicKeyCredentialProvider' => 'AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DBD /* #2647 'ASAuthorizationPlatformPublicKeyCredentialRegistration' => 'AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DC3 /* #2648 'ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest' => 'AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DC9 /* #2649 'ASAuthorizationProviderExtensionAuthorizationResult' => 'AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DCB /* #2650 'ASAuthorizationProviderExtensionKerberosMapping' => 'AuthenticationServices.ASAuthorizationProviderExtensionKerberosMapping, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DCD /* #2651 'ASAuthorizationPublicKeyCredentialParameters' => 'AuthenticationServices.ASAuthorizationPublicKeyCredentialParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DCF /* #2652 'ASAuthorizationSecurityKeyPublicKeyCredentialAssertion' => 'AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DD1 /* #2653 'ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest' => 'AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DD3 /* #2654 'ASAuthorizationSecurityKeyPublicKeyCredentialProvider' => 'AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DD5 /* #2655 'ASAuthorizationSecurityKeyPublicKeyCredentialRegistration' => 'AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DD7 /* #2656 'ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest' => 'AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DD9 /* #2657 'ASAuthorizationSingleSignOnProvider' => 'AuthenticationServices.ASAuthorizationSingleSignOnProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DDB /* #2658 'ASAuthorizationSingleSignOnRequest' => 'AuthenticationServices.ASAuthorizationSingleSignOnRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DE1 /* #2659 'ASAuthorizationWebBrowserPlatformPublicKeyCredential' => 'AuthenticationServices.ASAuthorizationWebBrowserPlatformPublicKeyCredential, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DE3 /* #2660 'ASCredentialIdentityStoreState' => 'AuthenticationServices.ASCredentialIdentityStoreState, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DE5 /* #2661 'ASCredentialProviderExtensionContext' => 'AuthenticationServices.ASCredentialProviderExtensionContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DE7 /* #2662 'ASCredentialProviderViewController' => 'AuthenticationServices.ASCredentialProviderViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DE9 /* #2663 'ASCredentialServiceIdentifier' => 'AuthenticationServices.ASCredentialServiceIdentifier, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DEB /* #2664 'ASPasswordCredential' => 'AuthenticationServices.ASPasswordCredential, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DED /* #2665 'ASPasswordCredentialIdentity' => 'AuthenticationServices.ASPasswordCredentialIdentity, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DF3 /* #2666 'ASWebAuthenticationSession' => 'AuthenticationServices.ASWebAuthenticationSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DF5 /* #2667 'ASWebAuthenticationSessionRequest' => 'AuthenticationServices.ASWebAuthenticationSessionRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2DFB /* #2668 'Microsoft_macOS__AuthenticationServices_ASWebAuthenticationSessionRequestDelegate' => 'AuthenticationServices.ASWebAuthenticationSessionRequestDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E03 /* #2669 'ASWebAuthenticationSessionWebBrowserSessionManager' => 'AuthenticationServices.ASWebAuthenticationSessionWebBrowserSessionManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E05 /* #2670 'AUParameterNode' => 'AudioUnit.AUParameterNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E07 /* #2671 'AUParameter' => 'AudioUnit.AUParameter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E09 /* #2672 'AUAudioUnitBus' => 'AudioUnit.AUAudioUnitBus, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E0B /* #2673 'AUAudioUnitBusArray' => 'AudioUnit.AUAudioUnitBusArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E11 /* #2674 'AUAudioUnitPreset' => 'AudioUnit.AUAudioUnitPreset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E13 /* #2675 'AUParameterGroup' => 'AudioUnit.AUParameterGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E15 /* #2676 'AUParameterTree' => 'AudioUnit.AUParameterTree, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E17 /* #2677 '__monomac_internal_ActionDispatcher' => 'AppKit.ActionDispatcher, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2E23 /* #2678 'NSSavePanel' => 'AppKit.NSSavePanel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E25 /* #2679 'NSOpenPanel' => 'AppKit.NSOpenPanel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E27 /* #2680 'NSPageLayout' => 'AppKit.NSPageLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E29 /* #2681 'NSPathControl' => 'AppKit.NSPathControl, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E2B /* #2682 'NSStatusItem' => 'AppKit.NSStatusItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E2D /* #2683 'NSCell' => 'AppKit.NSCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E2F /* #2684 'NSActionCell' => 'AppKit.NSActionCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E31 /* #2685 '__MonoMac_NSAlertDidEndDispatcher' => 'AppKit.NSAlertDidEndDispatcher, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x2E39 /* #2686 'NSController' => 'AppKit.NSController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E3B /* #2687 'NSObjectController' => 'AppKit.NSObjectController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E3D /* #2688 'NSArrayController' => 'AppKit.NSArrayController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E3F /* #2689 'NSBezierPath' => 'AppKit.NSBezierPath, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E41 /* #2690 'NSImageRep' => 'AppKit.NSImageRep, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E43 /* #2691 'NSBitmapImageRep' => 'AppKit.NSBitmapImageRep, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E45 /* #2692 'NSCollectionLayoutAnchor' => 'AppKit.NSCollectionLayoutAnchor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E4B /* #2693 'NSCollectionView' => 'AppKit.NSCollectionView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E4D /* #2694 'NSCollectionViewLayout' => 'AppKit.NSCollectionViewLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E4F /* #2695 'NSTouchBarItem' => 'AppKit.NSTouchBarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E51 /* #2696 'NSColorPickerTouchBarItem' => 'AppKit.NSColorPickerTouchBarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E53 /* #2697 'NSDraggingSession' => 'AppKit.NSDraggingSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E55 /* #2698 'NSGraphicsContext' => 'AppKit.NSGraphicsContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E57 /* #2699 'NSLayoutManager' => 'AppKit.NSLayoutManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E59 /* #2700 'NSLevelIndicator' => 'AppKit.NSLevelIndicator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E5B /* #2701 'NSOpenGLContext' => 'AppKit.NSOpenGLContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E5D /* #2702 'NSOpenGLPixelFormat' => 'AppKit.NSOpenGLPixelFormat, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E5F /* #2703 'NSPasteboard' => 'AppKit.NSPasteboard, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E61 /* #2704 'NSPathControlItem' => 'AppKit.NSPathControlItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E63 /* #2705 'NSPrintInfo' => 'AppKit.NSPrintInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E65 /* #2706 'NSSegmentedControl' => 'AppKit.NSSegmentedControl, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E6B /* #2707 'NSSlider' => 'AppKit.NSSlider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E6D /* #2708 'NSSliderTouchBarItem' => 'AppKit.NSSliderTouchBarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E6F /* #2709 'NSSpeechSynthesizer' => 'AppKit.NSSpeechSynthesizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E71 /* #2710 'NSStatusBar' => 'AppKit.NSStatusBar, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E77 /* #2711 'NSTextContainer' => 'AppKit.NSTextContainer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E7D /* #2712 'NSToolbarItem' => 'AppKit.NSToolbarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E7F /* #2713 'NSTouch' => 'AppKit.NSTouch, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E81 /* #2714 'NSTreeController' => 'AppKit.NSTreeController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E83 /* #2715 'NSLayoutConstraint' => 'AppKit.NSLayoutConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E8D /* #2716 'NSAccessibilityCustomAction' => 'AppKit.NSAccessibilityCustomAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E8F /* #2717 'NSAccessibilityCustomRotor' => 'AppKit.NSAccessibilityCustomRotor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E91 /* #2718 'NSAccessibilityCustomRotorItemResult' => 'AppKit.NSAccessibilityCustomRotorItemResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E97 /* #2719 'Microsoft_macOS__AppKit_NSAccessibilityCustomRotorItemSearchDelegate' => 'AppKit.NSAccessibilityCustomRotorItemSearchDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2E9B /* #2720 'NSAccessibilityCustomRotorSearchParameters' => 'AppKit.NSAccessibilityCustomRotorSearchParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EDD /* #2721 'Microsoft_macOS__AppKit_NSAlertDelegate' => 'AppKit.NSAlertDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EE1 /* #2722 'NSAlignmentFeedbackFilter' => 'AppKit.NSAlignmentFeedbackFilter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EE7 /* #2723 'Microsoft_macOS__AppKit_NSAlignmentFeedbackToken' => 'AppKit.NSAlignmentFeedbackToken, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EEB /* #2724 'NSAnimationContext' => 'AppKit.NSAnimationContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EF1 /* #2725 'Microsoft_macOS__AppKit_NSAnimationDelegate' => 'AppKit.NSAnimationDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EF5 /* #2726 'NSAppearance' => 'AppKit.NSAppearance, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EF7 /* #2727 'Microsoft_macOS__AppKit_NSAppearanceCustomization' => 'AppKit.NSAppearanceCustomization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EFB /* #2728 'NSTypesetter' => 'AppKit.NSTypesetter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EFD /* #2729 'NSATSTypesetter' => 'AppKit.NSATSTypesetter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2EFF /* #2730 'NSBox' => 'AppKit.NSBox, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F01 /* #2731 'NSBrowserCell' => 'AppKit.NSBrowserCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F07 /* #2732 'Microsoft_macOS__AppKit_NSBrowserDelegate' => 'AppKit.NSBrowserDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F0B /* #2733 'NSButtonCell' => 'AppKit.NSButtonCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F0D /* #2734 'NSButtonTouchBarItem' => 'AppKit.NSButtonTouchBarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F0F /* #2735 'NSCachedImageRep' => 'AppKit.NSCachedImageRep, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F11 /* #2736 'NSCandidateListTouchBarItem' => 'AppKit.NSCandidateListTouchBarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F17 /* #2737 'Microsoft_macOS__AppKit_NSCandidateListTouchBarItemDelegate' => 'AppKit.NSCandidateListTouchBarItemDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F1B /* #2738 'NSCIImageRep' => 'AppKit.NSCIImageRep, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F1D /* #2739 'NSClipView' => 'AppKit.NSClipView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F27 /* #2740 'Microsoft_macOS__AppKit_NSSharingServiceDelegate' => 'AppKit.NSSharingServiceDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F2B /* #2741 'Microsoft_macOS__AppKit_NSCloudSharingServiceDelegate' => 'AppKit.NSCloudSharingServiceDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F33 /* #2742 'NSCollectionLayoutItem' => 'AppKit.NSCollectionLayoutItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F35 /* #2743 'NSCollectionLayoutSupplementaryItem' => 'AppKit.NSCollectionLayoutSupplementaryItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F37 /* #2744 'NSCollectionLayoutBoundarySupplementaryItem' => 'AppKit.NSCollectionLayoutBoundarySupplementaryItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F3D /* #2745 'NSCollectionLayoutDecorationItem' => 'AppKit.NSCollectionLayoutDecorationItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F3F /* #2746 'NSCollectionLayoutDimension' => 'AppKit.NSCollectionLayoutDimension, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F41 /* #2747 'NSCollectionLayoutEdgeSpacing' => 'AppKit.NSCollectionLayoutEdgeSpacing, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F47 /* #2748 'NSCollectionLayoutGroup' => 'AppKit.NSCollectionLayoutGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F49 /* #2749 'NSCollectionLayoutGroupCustomItem' => 'AppKit.NSCollectionLayoutGroupCustomItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F4B /* #2750 'NSCollectionLayoutSection' => 'AppKit.NSCollectionLayoutSection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F4D /* #2751 'NSCollectionLayoutSize' => 'AppKit.NSCollectionLayoutSize, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F4F /* #2752 'NSCollectionLayoutSpacing' => 'AppKit.NSCollectionLayoutSpacing, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F55 /* #2753 'NSCollectionViewCompositionalLayout' => 'AppKit.NSCollectionViewCompositionalLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F57 /* #2754 'NSCollectionViewCompositionalLayoutConfiguration' => 'AppKit.NSCollectionViewCompositionalLayoutConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F5D /* #2755 'Microsoft_macOS__AppKit_NSCollectionViewDataSource' => 'AppKit.NSCollectionViewDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F65 /* #2756 'Microsoft_macOS__AppKit_NSCollectionViewDelegate' => 'AppKit.NSCollectionViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F6D /* #2757 'Microsoft_macOS__AppKit_NSCollectionViewDelegateFlowLayout' => 'AppKit.NSCollectionViewDelegateFlowLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F71 /* #2758 'NSCollectionViewDiffableDataSource' => 'AppKit.NSCollectionViewDiffableDataSource`2, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F77 /* #2759 'Microsoft_macOS__AppKit_NSCollectionViewElement' => 'AppKit.NSCollectionViewElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F7B /* #2760 'NSCollectionViewFlowLayout' => 'AppKit.NSCollectionViewFlowLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F7D /* #2761 'NSCollectionViewLayoutInvalidationContext' => 'AppKit.NSCollectionViewLayoutInvalidationContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F7F /* #2762 'NSCollectionViewFlowLayoutInvalidationContext' => 'AppKit.NSCollectionViewFlowLayoutInvalidationContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F81 /* #2763 'NSCollectionViewGridLayout' => 'AppKit.NSCollectionViewGridLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F83 /* #2764 'NSCollectionViewItem' => 'AppKit.NSCollectionViewItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F85 /* #2765 'NSCollectionViewLayoutAttributes' => 'AppKit.NSCollectionViewLayoutAttributes, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F8F /* #2766 'NSCollectionViewTransitionLayout' => 'AppKit.NSCollectionViewTransitionLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F91 /* #2767 'NSCollectionViewUpdateItem' => 'AppKit.NSCollectionViewUpdateItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F97 /* #2768 'NSColorList' => 'AppKit.NSColorList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F99 /* #2769 'NSColorPicker' => 'AppKit.NSColorPicker, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F9B /* #2770 'NSColorSampler' => 'AppKit.NSColorSampler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F9D /* #2771 'NSColorSpace' => 'AppKit.NSColorSpace, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2F9F /* #2772 'NSColorWell' => 'AppKit.NSColorWell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FA1 /* #2773 'NSTextFieldCell' => 'AppKit.NSTextFieldCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FA3 /* #2774 'NSComboBoxCell' => 'AppKit.NSComboBoxCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FA9 /* #2775 'Microsoft_macOS__AppKit_NSComboBoxCellDataSource' => 'AppKit.NSComboBoxCellDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FB1 /* #2776 'Microsoft_macOS__AppKit_NSComboBoxDataSource' => 'AppKit.NSComboBoxDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FBD /* #2777 'Microsoft_macOS__AppKit_NSTextFieldDelegate' => 'AppKit.NSTextFieldDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FC1 /* #2778 'Microsoft_macOS__AppKit_NSComboBoxDelegate' => 'AppKit.NSComboBoxDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FC5 /* #2779 'NSComboButton' => 'AppKit.NSComboButton, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FCB /* #2780 'Microsoft_macOS__AppKit_NSControlTextEditingDelegate' => 'AppKit.NSControlTextEditingDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FCF /* #2781 'NSCursor' => 'AppKit.NSCursor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FD1 /* #2782 'NSCustomImageRep' => 'AppKit.NSCustomImageRep, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FD3 /* #2783 'NSCustomTouchBarItem' => 'AppKit.NSCustomTouchBarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FD5 /* #2784 'NSDataAsset' => 'AppKit.NSDataAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FDB /* #2785 'Microsoft_macOS__AppKit_NSDatePickerCellDelegate' => 'AppKit.NSDatePickerCellDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FDF /* #2786 'NSDictionaryController' => 'AppKit.NSDictionaryController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FE1 /* #2787 'NSDictionaryControllerKeyValuePair' => 'AppKit.NSDictionaryControllerKeyValuePair, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FE3 /* #2788 'NSDiffableDataSourceSnapshot' => 'AppKit.NSDiffableDataSourceSnapshot`2, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FE5 /* #2789 'NSDockTile' => 'AppKit.NSDockTile, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FEB /* #2790 'Microsoft_macOS__AppKit_NSDockTilePlugIn' => 'AppKit.NSDockTilePlugIn, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FF3 /* #2791 'NSDocumentController' => 'AppKit.NSDocumentController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FF5 /* #2792 'Microsoft_macOS__AppKit_NSDraggingDestination' => 'AppKit.NSDraggingDestination, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FF9 /* #2793 'NSDraggingImageComponent' => 'AppKit.NSDraggingImageComponent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x2FFF /* #2794 'NSDraggingItem' => 'AppKit.NSDraggingItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3001 /* #2795 'Microsoft_macOS__AppKit_NSDraggingSource' => 'AppKit.NSDraggingSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3009 /* #2796 'Microsoft_macOS__AppKit_NSDrawerDelegate' => 'AppKit.NSDrawerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x300D /* #2797 'NSEPSImageRep' => 'AppKit.NSEPSImageRep, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x300F /* #2798 'NSFilePromiseProvider' => 'AppKit.NSFilePromiseProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3015 /* #2799 'Microsoft_macOS__AppKit_NSFilePromiseProviderDelegate' => 'AppKit.NSFilePromiseProviderDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3019 /* #2800 'NSFilePromiseReceiver' => 'AppKit.NSFilePromiseReceiver, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x301B /* #2801 'NSFontAssetRequest' => 'AppKit.NSFontAssetRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3021 /* #2802 'NSFontDescriptor' => 'AppKit.NSFontDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3023 /* #2803 'NSFontManager' => 'AppKit.NSFontManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3025 /* #2804 'NSFontPanel' => 'AppKit.NSFontPanel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x302B /* #2805 'NSMatrix' => 'AppKit.NSMatrix, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x302D /* #2806 'NSForm' => 'AppKit.NSForm, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x302F /* #2807 'NSFormCell' => 'AppKit.NSFormCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3035 /* #2808 'Microsoft_macOS__AppKit_NSGestureRecognizerDelegate' => 'AppKit.NSGestureRecognizerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3039 /* #2809 'NSGlyphGenerator' => 'AppKit.NSGlyphGenerator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x303B /* #2810 'NSGlyphInfo' => 'AppKit.NSGlyphInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x303D /* #2811 'NSGridCell' => 'AppKit.NSGridCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x303F /* #2812 'NSGridColumn' => 'AppKit.NSGridColumn, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3041 /* #2813 'NSGridRow' => 'AppKit.NSGridRow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3043 /* #2814 'NSGridView' => 'AppKit.NSGridView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3045 /* #2815 'NSGroupTouchBarItem' => 'AppKit.NSGroupTouchBarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3047 /* #2816 'NSHapticFeedbackManager' => 'AppKit.NSHapticFeedbackManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x304D /* #2817 'Microsoft_macOS__AppKit_NSHapticFeedbackPerformer' => 'AppKit.NSHapticFeedbackPerformer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3051 /* #2818 'NSImageCell' => 'AppKit.NSImageCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3057 /* #2819 'Microsoft_macOS__AppKit_NSImageDelegate' => 'AppKit.NSImageDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x305B /* #2820 'NSImageSymbolConfiguration' => 'AppKit.NSImageSymbolConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x305D /* #2821 'NSImageView' => 'AppKit.NSImageView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x305F /* #2822 'NSLayoutAnchor' => 'AppKit.NSLayoutAnchor`1, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3061 /* #2823 'NSLayoutDimension' => 'AppKit.NSLayoutDimension, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3063 /* #2824 'NSLayoutGuide' => 'AppKit.NSLayoutGuide, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3069 /* #2825 'Microsoft_macOS__AppKit_NSLayoutManagerDelegate' => 'AppKit.NSLayoutManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x306D /* #2826 'NSLayoutXAxisAnchor' => 'AppKit.NSLayoutXAxisAnchor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x306F /* #2827 'NSLayoutYAxisAnchor' => 'AppKit.NSLayoutYAxisAnchor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3071 /* #2828 'NSLevelIndicatorCell' => 'AppKit.NSLevelIndicatorCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3077 /* #2829 'Microsoft_macOS__AppKit_NSMatrixDelegate' => 'AppKit.NSMatrixDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x307F /* #2830 'Microsoft_macOS__AppKit_NSMenuDelegate' => 'AppKit.NSMenuDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3083 /* #2831 'NSMenuItemCell' => 'AppKit.NSMenuItemCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3085 /* #2832 'NSMenuToolbarItem' => 'AppKit.NSMenuToolbarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3087 /* #2833 'NSFontCollection' => 'AppKit.NSFontCollection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3089 /* #2834 'NSMutableFontCollection' => 'AppKit.NSMutableFontCollection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x308B /* #2835 'NSParagraphStyle' => 'AppKit.NSParagraphStyle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x308D /* #2836 'NSMutableParagraphStyle' => 'AppKit.NSMutableParagraphStyle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x308F /* #2837 'NSNib' => 'AppKit.NSNib, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3091 /* #2838 'NSOpenGLLayer' => 'AppKit.NSOpenGLLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3093 /* #2839 'NSOpenGLPixelBuffer' => 'AppKit.NSOpenGLPixelBuffer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3095 /* #2840 'NSOpenGLView' => 'AppKit.NSOpenGLView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x309B /* #2841 'Microsoft_macOS__AppKit_NSOpenSavePanelDelegate' => 'AppKit.NSOpenSavePanelDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30A3 /* #2842 'Microsoft_macOS__AppKit_NSOutlineViewDataSource' => 'AppKit.NSOutlineViewDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30AB /* #2843 'Microsoft_macOS__AppKit_NSOutlineViewDelegate' => 'AppKit.NSOutlineViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30B3 /* #2844 'Microsoft_macOS__AppKit_NSPageControllerDelegate' => 'AppKit.NSPageControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30B7 /* #2845 'NSPasteboardItem' => 'AppKit.NSPasteboardItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30BD /* #2846 'Microsoft_macOS__AppKit_NSPasteboardItemDataProvider' => 'AppKit.NSPasteboardItemDataProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30C9 /* #2847 'Microsoft_macOS__AppKit_NSPathCellDelegate' => 'AppKit.NSPathCellDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30CD /* #2848 'NSPathComponentCell' => 'AppKit.NSPathComponentCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30D3 /* #2849 'Microsoft_macOS__AppKit_NSPathControlDelegate' => 'AppKit.NSPathControlDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30D7 /* #2850 'NSPDFImageRep' => 'AppKit.NSPdfImageRep, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30D9 /* #2851 'NSPickerTouchBarItem' => 'AppKit.NSPickerTouchBarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30DF /* #2852 'Microsoft_macOS__AppKit_NSPopoverDelegate' => 'AppKit.NSPopoverDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30E3 /* #2853 'NSPopoverTouchBarItem' => 'AppKit.NSPopoverTouchBarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30E5 /* #2854 'NSRuleEditor' => 'AppKit.NSRuleEditor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30E7 /* #2855 'NSPredicateEditor' => 'AppKit.NSPredicateEditor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30E9 /* #2856 'NSPressureConfiguration' => 'AppKit.NSPressureConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30EF /* #2857 'NSPreviewRepresentingActivityItem' => 'AppKit.NSPreviewRepresentingActivityItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30F1 /* #2858 'NSPrinter' => 'AppKit.NSPrinter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30F3 /* #2859 'NSPrintOperation' => 'AppKit.NSPrintOperation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30F5 /* #2860 'NSPrintPanel' => 'AppKit.NSPrintPanel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30FB /* #2861 'Microsoft_macOS__AppKit_NSPrintPanelAccessorizing' => 'AppKit.NSPrintPanelAccessorizing, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x30FF /* #2862 'NSPrintPreviewGraphicsContext' => 'AppKit.NSPrintPreviewGraphicsContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3101 /* #2863 'NSProgressIndicator' => 'AppKit.NSProgressIndicator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3107 /* #2864 'Microsoft_macOS__AppKit_NSRuleEditorDelegate' => 'AppKit.NSRuleEditorDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x310B /* #2865 'NSRulerMarker' => 'AppKit.NSRulerMarker, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x310D /* #2866 'NSRulerView' => 'AppKit.NSRulerView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x310F /* #2867 'NSRunningApplication' => 'AppKit.NSRunningApplication, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3111 /* #2868 'NSScrubber' => 'AppKit.NSScrubber, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3113 /* #2869 'NSScrubberArrangedView' => 'AppKit.NSScrubberArrangedView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3119 /* #2870 'Microsoft_macOS__AppKit_NSScrubberDataSource' => 'AppKit.NSScrubberDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3121 /* #2871 'Microsoft_macOS__AppKit_NSScrubberDelegate' => 'AppKit.NSScrubberDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3125 /* #2872 'NSScrubberLayout' => 'AppKit.NSScrubberLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3127 /* #2873 'NSScrubberFlowLayout' => 'AppKit.NSScrubberFlowLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x312D /* #2874 'Microsoft_macOS__AppKit_NSScrubberFlowLayoutDelegate' => 'AppKit.NSScrubberFlowLayoutDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3131 /* #2875 'NSScrubberItemView' => 'AppKit.NSScrubberItemView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3133 /* #2876 'NSScrubberImageItemView' => 'AppKit.NSScrubberImageItemView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3135 /* #2877 'NSScrubberLayoutAttributes' => 'AppKit.NSScrubberLayoutAttributes, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3137 /* #2878 'NSScrubberProportionalLayout' => 'AppKit.NSScrubberProportionalLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3139 /* #2879 'NSScrubberSelectionStyle' => 'AppKit.NSScrubberSelectionStyle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x313B /* #2880 'NSScrubberSelectionView' => 'AppKit.NSScrubberSelectionView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x313D /* #2881 'NSScrubberTextItemView' => 'AppKit.NSScrubberTextItemView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x313F /* #2882 'NSSearchFieldCell' => 'AppKit.NSSearchFieldCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3145 /* #2883 'Microsoft_macOS__AppKit_NSSearchFieldDelegate' => 'AppKit.NSSearchFieldDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3149 /* #2884 'NSSearchToolbarItem' => 'AppKit.NSSearchToolbarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x314F /* #2885 'NSTextField' => 'AppKit.NSTextField, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3151 /* #2886 'NSSecureTextField' => 'AppKit.NSSecureTextField, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3153 /* #2887 'NSSecureTextFieldCell' => 'AppKit.NSSecureTextFieldCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3155 /* #2888 'NSSegmentedCell' => 'AppKit.NSSegmentedCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3157 /* #2889 'Microsoft_macOS__AppKit_NSSeguePerforming' => 'AppKit.NSSeguePerforming, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x315F /* #2890 'NSShadow' => 'AppKit.NSShadow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3165 /* #2891 'Microsoft_macOS__AppKit_NSSharingServicePickerDelegate' => 'AppKit.NSSharingServicePickerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3169 /* #2892 'NSSharingServicePickerToolbarItem' => 'AppKit.NSSharingServicePickerToolbarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x316F /* #2893 'Microsoft_macOS__AppKit_NSSharingServicePickerToolbarItemDelegate' => 'AppKit.NSSharingServicePickerToolbarItemDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3173 /* #2894 'NSSharingServicePickerTouchBarItem' => 'AppKit.NSSharingServicePickerTouchBarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3179 /* #2895 'Microsoft_macOS__AppKit_NSSharingServicePickerTouchBarItemDelegate' => 'AppKit.NSSharingServicePickerTouchBarItemDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x317D /* #2896 'NSSliderAccessoryBehavior' => 'AppKit.NSSliderAccessoryBehavior, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x317F /* #2897 'NSSliderCell' => 'AppKit.NSSliderCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3185 /* #2898 'Microsoft_macOS__AppKit_NSSoundDelegate' => 'AppKit.NSSoundDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3189 /* #2899 'NSSpeechRecognizer' => 'AppKit.NSSpeechRecognizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x318F /* #2900 'Microsoft_macOS__AppKit_NSSpeechRecognizerDelegate' => 'AppKit.NSSpeechRecognizerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3197 /* #2901 'Microsoft_macOS__AppKit_NSSpeechSynthesizerDelegate' => 'AppKit.NSSpeechSynthesizerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x319F /* #2902 'NSSplitViewController' => 'AppKit.NSSplitViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31A1 /* #2903 'Microsoft_macOS__AppKit_NSSplitViewDelegate' => 'AppKit.NSSplitViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31A5 /* #2904 'NSSplitViewItem' => 'AppKit.NSSplitViewItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31AB /* #2905 'Microsoft_macOS__AppKit_NSSpringLoadingDestination' => 'AppKit.NSSpringLoadingDestination, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31AF /* #2906 'NSStackView' => 'AppKit.NSStackView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31B5 /* #2907 'Microsoft_macOS__AppKit_NSStackViewDelegate' => 'AppKit.NSStackViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31BD /* #2908 'NSStatusBarButton' => 'AppKit.NSStatusBarButton, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31BF /* #2909 'NSStepper' => 'AppKit.NSStepper, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31C1 /* #2910 'NSStepperCell' => 'AppKit.NSStepperCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31C3 /* #2911 'NSStepperTouchBarItem' => 'AppKit.NSStepperTouchBarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31C5 /* #2912 'NSStoryboard' => 'AppKit.NSStoryboard, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31C7 /* #2913 'NSStoryboardSegue' => 'AppKit.NSStoryboardSegue, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31C9 /* #2914 'NSStringDrawingContext' => 'AppKit.NSStringDrawingContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31CB /* #2915 'NSSwitch' => 'AppKit.NSSwitch, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31CD /* #2916 'NSTableCellView' => 'AppKit.NSTableCellView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31CF /* #2917 'NSTableColumn' => 'AppKit.NSTableColumn, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31D1 /* #2918 'NSTableHeaderCell' => 'AppKit.NSTableHeaderCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31D3 /* #2919 'NSTableHeaderView' => 'AppKit.NSTableHeaderView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31D5 /* #2920 'NSTableRowView' => 'AppKit.NSTableRowView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31DB /* #2921 'Microsoft_macOS__AppKit_NSTableViewDataSource' => 'AppKit.NSTableViewDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31E3 /* #2922 'Microsoft_macOS__AppKit_NSTableViewDelegate' => 'AppKit.NSTableViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31E7 /* #2923 'NSTableViewRowAction' => 'AppKit.NSTableViewRowAction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31E9 /* #2924 'Microsoft_macOS__AppKit_NSTableViewSource' => 'AppKit.NSTableViewSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31F5 /* #2925 'NSTabViewController' => 'AppKit.NSTabViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31F7 /* #2926 'Microsoft_macOS__AppKit_NSTabViewDelegate' => 'AppKit.NSTabViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x31FB /* #2927 'NSTabViewItem' => 'AppKit.NSTabViewItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3205 /* #2928 'NSTextAttachment' => 'AppKit.NSTextAttachment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x320B /* #2929 'NSTextAttachmentCell' => 'AppKit.NSTextAttachmentCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x320D /* #2930 'Microsoft_macOS__AppKit_NSTextAttachmentContainer' => 'AppKit.NSTextAttachmentContainer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3211 /* #2931 'NSTextAttachmentViewProvider' => 'AppKit.NSTextAttachmentViewProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3213 /* #2932 'NSTextBlock' => 'AppKit.NSTextBlock, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3221 /* #2933 'NSTextCheckingController' => 'AppKit.NSTextCheckingController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3227 /* #2934 'Microsoft_macOS__AppKit_NSTextContentManagerDelegate' => 'AppKit.NSTextContentManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x322F /* #2935 'NSTextContentManager' => 'AppKit.NSTextContentManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3235 /* #2936 'NSTextContentStorage' => 'AppKit.NSTextContentStorage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x323B /* #2937 'Microsoft_macOS__AppKit_NSTextContentStorageDelegate' => 'AppKit.NSTextContentStorageDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x323F /* #2938 'Microsoft_macOS__AppKit_NSTextDelegate' => 'AppKit.NSTextDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3243 /* #2939 'NSTextElement' => 'AppKit.NSTextElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3245 /* #2940 'NSTextFinder' => 'AppKit.NSTextFinder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x324B /* #2941 'Microsoft_macOS__AppKit_NSTextFinderBarContainer' => 'AppKit.NSTextFinderBarContainer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3257 /* #2942 'Microsoft_macOS__AppKit_NSTextInputClient' => 'AppKit.NSTextInputClient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x325B /* #2943 'NSTextLayoutFragment' => 'AppKit.NSTextLayoutFragment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3261 /* #2944 'NSTextLayoutManager' => 'AppKit.NSTextLayoutManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3267 /* #2945 'Microsoft_macOS__AppKit_NSTextLayoutManagerDelegate' => 'AppKit.NSTextLayoutManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x326B /* #2946 'NSTextLineFragment' => 'AppKit.NSTextLineFragment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x326D /* #2947 'NSTextList' => 'AppKit.NSTextList, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x326F /* #2948 'NSTextParagraph' => 'AppKit.NSTextParagraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3271 /* #2949 'NSTextListElement' => 'AppKit.NSTextListElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3277 /* #2950 'NSTextRange' => 'AppKit.NSTextRange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3279 /* #2951 'NSTextSelection' => 'AppKit.NSTextSelection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x327B /* #2952 'Microsoft_macOS__AppKit_NSTextSelectionDataSource' => 'AppKit.NSTextSelectionDataSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x327F /* #2953 'NSTextSelectionNavigation' => 'AppKit.NSTextSelectionNavigation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3285 /* #2954 'Microsoft_macOS__AppKit_NSTextStorageDelegate' => 'AppKit.NSTextStorageDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3289 /* #2955 'NSTextTab' => 'AppKit.NSTextTab, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x328B /* #2956 'NSTextTable' => 'AppKit.NSTextTable, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x328D /* #2957 'NSTextTableBlock' => 'AppKit.NSTextTableBlock, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x328F /* #2958 'Microsoft_macOS__AppKit_NSTextViewDelegate' => 'AppKit.NSTextViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3293 /* #2959 'NSTextViewportLayoutController' => 'AppKit.NSTextViewportLayoutController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3299 /* #2960 'Microsoft_macOS__AppKit_NSTextViewportLayoutControllerDelegate' => 'AppKit.NSTextViewportLayoutControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x329D /* #2961 'NSTintConfiguration' => 'AppKit.NSTintConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x329F /* #2962 'NSTitlebarAccessoryViewController' => 'AppKit.NSTitlebarAccessoryViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32A1 /* #2963 'NSTokenField' => 'AppKit.NSTokenField, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32A3 /* #2964 'NSTokenFieldCell' => 'AppKit.NSTokenFieldCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32A9 /* #2965 'Microsoft_macOS__AppKit_NSTokenFieldCellDelegate' => 'AppKit.NSTokenFieldCellDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32B1 /* #2966 'Microsoft_macOS__AppKit_NSTokenFieldDelegate' => 'AppKit.NSTokenFieldDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32B5 /* #2967 'Microsoft_macOS__AppKit_NSToolbarDelegate' => 'AppKit.NSToolbarDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32B9 /* #2968 'NSToolbarItemGroup' => 'AppKit.NSToolbarItemGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32C3 /* #2969 'Microsoft_macOS__AppKit_NSTouchBarDelegate' => 'AppKit.NSTouchBarDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32C7 /* #2970 'NSTrackingArea' => 'AppKit.NSTrackingArea, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32C9 /* #2971 'NSTrackingSeparatorToolbarItem' => 'AppKit.NSTrackingSeparatorToolbarItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32CB /* #2972 'NSTreeNode' => 'AppKit.NSTreeNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32CD /* #2973 'NSUserDefaultsController' => 'AppKit.NSUserDefaultsController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32CF /* #2974 'NSUserInterfaceCompressionOptions' => 'AppKit.NSUserInterfaceCompressionOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32D1 /* #2975 'NSAnimation' => 'AppKit.NSAnimation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32D3 /* #2976 'NSViewAnimation' => 'AppKit.NSViewAnimation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32D9 /* #2977 'Microsoft_macOS__AppKit_NSViewControllerPresentationAnimator' => 'AppKit.NSViewControllerPresentationAnimator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32DD /* #2978 'NSVisualEffectView' => 'AppKit.NSVisualEffectView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32DF /* #2979 'Microsoft_macOS__AppKit_NSWindowDelegate' => 'AppKit.NSWindowDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32E3 /* #2980 'Microsoft_macOS__AppKit_NSWindowRestoration' => 'AppKit.NSWindowRestoration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32E7 /* #2981 'NSWindowTab' => 'AppKit.NSWindowTab, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32E9 /* #2982 'NSWindowTabGroup' => 'AppKit.NSWindowTabGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32EB /* #2983 'NSWorkspaceAuthorization' => 'AppKit.NSWorkspaceAuthorization, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32ED /* #2984 'NSWorkspaceOpenConfiguration' => 'AppKit.NSWorkspaceOpenConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32EF /* #2985 'ACAccount' => 'Accounts.ACAccount, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32F1 /* #2986 'ACAccountCredential' => 'Accounts.ACAccountCredential, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32F3 /* #2987 'ACAccountType' => 'Accounts.ACAccountType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32F5 /* #2988 'AVCaptureView' => 'AVKit.AVCaptureView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32FB /* #2989 'Microsoft_macOS__AVKit_AVCaptureViewDelegate' => 'AVKit.AVCaptureViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x32FF /* #2990 'AVPictureInPictureController' => 'AVKit.AVPictureInPictureController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3301 /* #2991 'AVPictureInPictureControllerContentSource' => 'AVKit.AVPictureInPictureControllerContentSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3307 /* #2992 'Microsoft_macOS__AVKit_AVPictureInPictureControllerDelegate' => 'AVKit.AVPictureInPictureControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x330F /* #2993 'Microsoft_macOS__AVKit_AVPictureInPictureSampleBufferPlaybackDelegate' => 'AVKit.AVPictureInPictureSampleBufferPlaybackDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3313 /* #2994 'AVPlaybackSpeed' => 'AVKit.AVPlaybackSpeed, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3315 /* #2995 'AVPlayerView' => 'AVKit.AVPlayerView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x331B /* #2996 'Microsoft_macOS__AVKit_AVPlayerViewDelegate' => 'AVKit.AVPlayerViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3323 /* #2997 'Microsoft_macOS__AVKit_AVPlayerViewPictureInPictureDelegate' => 'AVKit.AVPlayerViewPictureInPictureDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3327 /* #2998 'AVRoutePickerView' => 'AVKit.AVRoutePickerView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x332D /* #2999 'Microsoft_macOS__AVKit_AVRoutePickerViewDelegate' => 'AVKit.AVRoutePickerViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3331 /* #3000 'AVAssetResourceLoadingDataRequest' => 'AVFoundation.AVAssetResourceLoadingDataRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3333 /* #3001 'AVAudioBuffer' => 'AVFoundation.AVAudioBuffer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3335 /* #3002 'AVAudioChannelLayout' => 'AVFoundation.AVAudioChannelLayout, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3337 /* #3003 'AVAudioFormat' => 'AVFoundation.AVAudioFormat, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3339 /* #3004 'AVAudioPlayer' => 'AVFoundation.AVAudioPlayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x333B /* #3005 'AVAudioRecorder' => 'AVFoundation.AVAudioRecorder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x333D /* #3006 'AVCaptureInput' => 'AVFoundation.AVCaptureInput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x333F /* #3007 'AVCaptureDeviceInput' => 'AVFoundation.AVCaptureDeviceInput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3341 /* #3008 'AVCaptureSynchronizedDataCollection' => 'AVFoundation.AVCaptureSynchronizedDataCollection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3343 /* #3009 'AVContentKeyResponse' => 'AVFoundation.AVContentKeyResponse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3345 /* #3010 'AVDepthData' => 'AVFoundation.AVDepthData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3347 /* #3011 'AVPlayerLayer' => 'AVFoundation.AVPlayerLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3349 /* #3012 'AVPlayerLooper' => 'AVFoundation.AVPlayerLooper, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x334B /* #3013 'AVTextStyleRule' => 'AVFoundation.AVTextStyleRule, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3351 /* #3014 'Microsoft_macOS__AVFoundation_AVAudioPlayerDelegate' => 'AVFoundation.AVAudioPlayerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3355 /* #3015 'AVFoundation_InternalAVAudioPlayerDelegate' => 'AVFoundation.InternalAVAudioPlayerDelegate, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x3361 /* #3016 'Microsoft_macOS__AVFoundation_AVAudioRecorderDelegate' => 'AVFoundation.AVAudioRecorderDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3365 /* #3017 'AVFoundation_InternalAVAudioRecorderDelegate' => 'AVFoundation.InternalAVAudioRecorderDelegate, Microsoft.macOS' */, (MTTypeFlags) (2) /* UserType */ },
		{ NULL, 0x336D /* #3018 'AVAggregateAssetDownloadTask' => 'AVFoundation.AVAggregateAssetDownloadTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x336F /* #3019 'AVAssetCache' => 'AVFoundation.AVAssetCache, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3371 /* #3020 'AVAssetDownloadConfiguration' => 'AVFoundation.AVAssetDownloadConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3373 /* #3021 'AVAssetDownloadContentConfiguration' => 'AVFoundation.AVAssetDownloadContentConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3379 /* #3022 'Microsoft_macOS__AVFoundation_AVAssetDownloadDelegate' => 'AVFoundation.AVAssetDownloadDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x337D /* #3023 'AVAssetDownloadStorageManagementPolicy' => 'AVFoundation.AVAssetDownloadStorageManagementPolicy, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x337F /* #3024 'AVAssetDownloadStorageManager' => 'AVFoundation.AVAssetDownloadStorageManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3381 /* #3025 'AVAssetDownloadTask' => 'AVFoundation.AVAssetDownloadTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3383 /* #3026 'NSURLSession' => 'Foundation.NSUrlSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3385 /* #3027 'AVAssetDownloadURLSession' => 'AVFoundation.AVAssetDownloadUrlSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3387 /* #3028 'AVAssetImageGenerator' => 'AVFoundation.AVAssetImageGenerator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3389 /* #3029 'AVAssetReader' => 'AVFoundation.AVAssetReader, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x338B /* #3030 'AVAssetReaderOutput' => 'AVFoundation.AVAssetReaderOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x338D /* #3031 'AVAssetReaderAudioMixOutput' => 'AVFoundation.AVAssetReaderAudioMixOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3393 /* #3032 'AVAssetReaderOutputCaptionAdaptor' => 'AVFoundation.AVAssetReaderOutputCaptionAdaptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3395 /* #3033 'AVAssetReaderOutputMetadataAdaptor' => 'AVFoundation.AVAssetReaderOutputMetadataAdaptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3397 /* #3034 'AVAssetReaderSampleReferenceOutput' => 'AVFoundation.AVAssetReaderSampleReferenceOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3399 /* #3035 'AVAssetReaderTrackOutput' => 'AVFoundation.AVAssetReaderTrackOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x339B /* #3036 'AVAssetReaderVideoCompositionOutput' => 'AVFoundation.AVAssetReaderVideoCompositionOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x339D /* #3037 'AVAssetResourceLoader' => 'AVFoundation.AVAssetResourceLoader, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33A3 /* #3038 'Microsoft_macOS__AVFoundation_AVAssetResourceLoaderDelegate' => 'AVFoundation.AVAssetResourceLoaderDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33A7 /* #3039 'AVAssetResourceLoadingContentInformationRequest' => 'AVFoundation.AVAssetResourceLoadingContentInformationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33A9 /* #3040 'AVAssetResourceLoadingRequest' => 'AVFoundation.AVAssetResourceLoadingRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33AB /* #3041 'AVAssetResourceLoadingRequestor' => 'AVFoundation.AVAssetResourceLoadingRequestor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33AD /* #3042 'AVAssetResourceRenewalRequest' => 'AVFoundation.AVAssetResourceRenewalRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33AF /* #3043 'AVAssetSegmentReport' => 'AVFoundation.AVAssetSegmentReport, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33B1 /* #3044 'AVAssetSegmentReportSampleInformation' => 'AVFoundation.AVAssetSegmentReportSampleInformation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33B3 /* #3045 'AVAssetSegmentTrackReport' => 'AVFoundation.AVAssetSegmentTrackReport, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33B5 /* #3046 'AVAssetTrackGroup' => 'AVFoundation.AVAssetTrackGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33B7 /* #3047 'AVAssetTrackSegment' => 'AVFoundation.AVAssetTrackSegment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33B9 /* #3048 'AVAssetVariant' => 'AVFoundation.AVAssetVariant, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33BB /* #3049 'AVAssetVariantAudioAttributes' => 'AVFoundation.AVAssetVariantAudioAttributes, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33BD /* #3050 'AVAssetVariantAudioRenditionSpecificAttributes' => 'AVFoundation.AVAssetVariantAudioRenditionSpecificAttributes, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33BF /* #3051 'AVAssetVariantQualifier' => 'AVFoundation.AVAssetVariantQualifier, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33C1 /* #3052 'AVAssetVariantVideoAttributes' => 'AVFoundation.AVAssetVariantVideoAttributes, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33C7 /* #3053 'Microsoft_macOS__AVFoundation_AVAssetWriterDelegate' => 'AVFoundation.AVAssetWriterDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33CB /* #3054 'AVAssetWriterInput' => 'AVFoundation.AVAssetWriterInput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33CD /* #3055 'AVAssetWriterInputCaptionAdaptor' => 'AVFoundation.AVAssetWriterInputCaptionAdaptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33CF /* #3056 'AVMediaSelectionGroup' => 'AVFoundation.AVMediaSelectionGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33D1 /* #3057 'AVAssetWriterInputGroup' => 'AVFoundation.AVAssetWriterInputGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33D3 /* #3058 'AVAssetWriterInputMetadataAdaptor' => 'AVFoundation.AVAssetWriterInputMetadataAdaptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33D5 /* #3059 'AVAssetWriterInputPassDescription' => 'AVFoundation.AVAssetWriterInputPassDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33D7 /* #3060 'AVAssetWriterInputPixelBufferAdaptor' => 'AVFoundation.AVAssetWriterInputPixelBufferAdaptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33D9 /* #3061 'AVAsynchronousCIImageFilteringRequest' => 'AVFoundation.AVAsynchronousCIImageFilteringRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33DF /* #3062 'Microsoft_macOS__AVFoundation_AVAsynchronousKeyValueLoading' => 'AVFoundation.AVAsynchronousKeyValueLoading, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33E7 /* #3063 'Microsoft_macOS__AVFoundation_AVAudio3DMixing' => 'AVFoundation.AVAudio3DMixing, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33EB /* #3064 'AVAudioCompressedBuffer' => 'AVFoundation.AVAudioCompressedBuffer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33ED /* #3065 'AVAudioConnectionPoint' => 'AVFoundation.AVAudioConnectionPoint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33EF /* #3066 'AVAudioConverter' => 'AVFoundation.AVAudioConverter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33F1 /* #3067 'AVAudioEnvironmentDistanceAttenuationParameters' => 'AVFoundation.AVAudioEnvironmentDistanceAttenuationParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33F3 /* #3068 'AVAudioNode' => 'AVFoundation.AVAudioNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33FD /* #3069 'AVAudioEnvironmentNode' => 'AVFoundation.AVAudioEnvironmentNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x33FF /* #3070 'AVAudioEnvironmentReverbParameters' => 'AVFoundation.AVAudioEnvironmentReverbParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3401 /* #3071 'AVAudioFile' => 'AVFoundation.AVAudioFile, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3403 /* #3072 'AVAudioIONode' => 'AVFoundation.AVAudioIONode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3405 /* #3073 'AVAudioInputNode' => 'AVFoundation.AVAudioInputNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3407 /* #3074 'AVAudioMix' => 'AVFoundation.AVAudioMix, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3409 /* #3075 'AVAudioMixerNode' => 'AVFoundation.AVAudioMixerNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x340B /* #3076 'AVAudioMixingDestination' => 'AVFoundation.AVAudioMixingDestination, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x340D /* #3077 'AVAudioMixInputParameters' => 'AVFoundation.AVAudioMixInputParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x340F /* #3078 'AVAudioOutputNode' => 'AVFoundation.AVAudioOutputNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3411 /* #3079 'AVAudioPCMBuffer' => 'AVFoundation.AVAudioPcmBuffer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3413 /* #3080 'AVAudioRoutingArbiter' => 'AVFoundation.AVAudioRoutingArbiter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3415 /* #3081 'AVAudioSequencer' => 'AVFoundation.AVAudioSequencer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3417 /* #3082 'AVAudioSinkNode' => 'AVFoundation.AVAudioSinkNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3419 /* #3083 'AVAudioSourceNode' => 'AVFoundation.AVAudioSourceNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x341B /* #3084 'Microsoft_macOS__AVFoundation_AVAudioStereoMixing' => 'AVFoundation.AVAudioStereoMixing, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x341F /* #3085 'AVAudioTime' => 'AVFoundation.AVAudioTime, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3421 /* #3086 'AVAudioUnit' => 'AVFoundation.AVAudioUnit, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3423 /* #3087 'AVAudioUnitEffect' => 'AVFoundation.AVAudioUnitEffect, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3425 /* #3088 'AVAudioUnitDelay' => 'AVFoundation.AVAudioUnitDelay, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3427 /* #3089 'AVAudioUnitDistortion' => 'AVFoundation.AVAudioUnitDistortion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3429 /* #3090 'AVAudioUnitEQ' => 'AVFoundation.AVAudioUnitEQ, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x342B /* #3091 'AVAudioUnitEQFilterParameters' => 'AVFoundation.AVAudioUnitEQFilterParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x342D /* #3092 'AVAudioUnitGenerator' => 'AVFoundation.AVAudioUnitGenerator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x342F /* #3093 'AVAudioUnitMIDIInstrument' => 'AVFoundation.AVAudioUnitMidiInstrument, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3431 /* #3094 'AVAudioUnitReverb' => 'AVFoundation.AVAudioUnitReverb, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3433 /* #3095 'AVAudioUnitSampler' => 'AVFoundation.AVAudioUnitSampler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3435 /* #3096 'AVAudioUnitTimeEffect' => 'AVFoundation.AVAudioUnitTimeEffect, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3437 /* #3097 'AVAudioUnitTimePitch' => 'AVFoundation.AVAudioUnitTimePitch, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3439 /* #3098 'AVAudioUnitVarispeed' => 'AVFoundation.AVAudioUnitVarispeed, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x343B /* #3099 'AVCameraCalibrationData' => 'AVFoundation.AVCameraCalibrationData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x343D /* #3100 'AVCaption' => 'AVFoundation.AVCaption, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x343F /* #3101 'AVCaptionConversionAdjustment' => 'AVFoundation.AVCaptionConversionAdjustment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3441 /* #3102 'AVCaptionConversionTimeRangeAdjustment' => 'AVFoundation.AVCaptionConversionTimeRangeAdjustment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3443 /* #3103 'AVCaptionConversionValidator' => 'AVFoundation.AVCaptionConversionValidator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3445 /* #3104 'AVCaptionConversionWarning' => 'AVFoundation.AVCaptionConversionWarning, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3447 /* #3105 'AVCaptionFormatConformer' => 'AVFoundation.AVCaptionFormatConformer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3449 /* #3106 'AVCaptionGroup' => 'AVFoundation.AVCaptionGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x344B /* #3107 'AVCaptionGrouper' => 'AVFoundation.AVCaptionGrouper, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x344D /* #3108 'AVCaptionRegion' => 'AVFoundation.AVCaptionRegion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x344F /* #3109 'AVCaptionRenderer' => 'AVFoundation.AVCaptionRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3451 /* #3110 'AVCaptionRendererScene' => 'AVFoundation.AVCaptionRendererScene, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3453 /* #3111 'AVCaptionRuby' => 'AVFoundation.AVCaptionRuby, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3455 /* #3112 'AVCaptureAudioChannel' => 'AVFoundation.AVCaptureAudioChannel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3457 /* #3113 'AVCaptureOutput' => 'AVFoundation.AVCaptureOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3459 /* #3114 'AVCaptureAudioDataOutput' => 'AVFoundation.AVCaptureAudioDataOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x345F /* #3115 'Microsoft_macOS__AVFoundation_AVCaptureAudioDataOutputSampleBufferDelegate' => 'AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3463 /* #3116 'AVCaptureFileOutput' => 'AVFoundation.AVCaptureFileOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3465 /* #3117 'AVCaptureAudioFileOutput' => 'AVFoundation.AVCaptureAudioFileOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3467 /* #3118 'AVCaptureAudioPreviewOutput' => 'AVFoundation.AVCaptureAudioPreviewOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3469 /* #3119 'AVCaptureConnection' => 'AVFoundation.AVCaptureConnection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x346B /* #3120 'AVCaptureDeviceInputSource' => 'AVFoundation.AVCaptureDeviceInputSource, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3471 /* #3121 'Microsoft_macOS__AVFoundation_AVCaptureFileOutputDelegate' => 'AVFoundation.AVCaptureFileOutputDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3479 /* #3122 'Microsoft_macOS__AVFoundation_AVCaptureFileOutputRecordingDelegate' => 'AVFoundation.AVCaptureFileOutputRecordingDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x347D /* #3123 'AVCaptureInputPort' => 'AVFoundation.AVCaptureInputPort, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x347F /* #3124 'AVCaptureMovieFileOutput' => 'AVFoundation.AVCaptureMovieFileOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3481 /* #3125 'AVCapturePhoto' => 'AVFoundation.AVCapturePhoto, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3487 /* #3126 'Microsoft_macOS__AVFoundation_AVCapturePhotoCaptureDelegate' => 'AVFoundation.AVCapturePhotoCaptureDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x348B /* #3127 'AVCaptureResolvedPhotoSettings' => 'AVFoundation.AVCaptureResolvedPhotoSettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x348D /* #3128 'AVCaptureScreenInput' => 'AVFoundation.AVCaptureScreenInput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x348F /* #3129 'AVCaptureSynchronizedData' => 'AVFoundation.AVCaptureSynchronizedData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3495 /* #3130 'Microsoft_macOS__AVFoundation_AVCaptureVideoDataOutputSampleBufferDelegate' => 'AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3499 /* #3131 'AVAsset' => 'AVFoundation.AVAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x349B /* #3132 'AVComposition' => 'AVFoundation.AVComposition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x349D /* #3133 'AVAssetTrack' => 'AVFoundation.AVAssetTrack, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x349F /* #3134 'AVCompositionTrack' => 'AVFoundation.AVCompositionTrack, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34A1 /* #3135 'AVCompositionTrackFormatDescriptionReplacement' => 'AVFoundation.AVCompositionTrackFormatDescriptionReplacement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34A3 /* #3136 'AVCompositionTrackSegment' => 'AVFoundation.AVCompositionTrackSegment, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34A5 /* #3137 'AVContentKey' => 'AVFoundation.AVContentKey, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34AF /* #3138 'Microsoft_macOS__AVFoundation_AVContentKeySessionDelegate' => 'AVFoundation.AVContentKeySessionDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34B3 /* #3139 'AVContentKeySpecifier' => 'AVFoundation.AVContentKeySpecifier, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34B5 /* #3140 'AVCoordinatedPlaybackParticipant' => 'AVFoundation.AVCoordinatedPlaybackParticipant, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34B7 /* #3141 'AVCoordinatedPlaybackSuspension' => 'AVFoundation.AVCoordinatedPlaybackSuspension, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34B9 /* #3142 'AVMetadataGroup' => 'AVFoundation.AVMetadataGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34BB /* #3143 'AVDateRangeMetadataGroup' => 'AVFoundation.AVDateRangeMetadataGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34BD /* #3144 'AVPlaybackCoordinator' => 'AVFoundation.AVPlaybackCoordinator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34BF /* #3145 'AVDelegatingPlaybackCoordinator' => 'AVFoundation.AVDelegatingPlaybackCoordinator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34C1 /* #3146 'AVDelegatingPlaybackCoordinatorPlaybackControlCommand' => 'AVFoundation.AVDelegatingPlaybackCoordinatorPlaybackControlCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34C3 /* #3147 'AVDelegatingPlaybackCoordinatorBufferingCommand' => 'AVFoundation.AVDelegatingPlaybackCoordinatorBufferingCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34C5 /* #3148 'AVDelegatingPlaybackCoordinatorPauseCommand' => 'AVFoundation.AVDelegatingPlaybackCoordinatorPauseCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34C7 /* #3149 'AVDelegatingPlaybackCoordinatorPlayCommand' => 'AVFoundation.AVDelegatingPlaybackCoordinatorPlayCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34C9 /* #3150 'AVDelegatingPlaybackCoordinatorSeekCommand' => 'AVFoundation.AVDelegatingPlaybackCoordinatorSeekCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34CB /* #3151 'AVURLAsset' => 'AVFoundation.AVUrlAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34D1 /* #3152 'AVFragmentedAsset' => 'AVFoundation.AVFragmentedAsset, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34D3 /* #3153 'AVFragmentedAssetMinder' => 'AVFoundation.AVFragmentedAssetMinder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34D5 /* #3154 'AVFragmentedAssetTrack' => 'AVFoundation.AVFragmentedAssetTrack, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34D7 /* #3155 'AVFragmentedMovieMinder' => 'AVFoundation.AVFragmentedMovieMinder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34D9 /* #3156 'AVFrameRateRange' => 'AVFoundation.AVFrameRateRange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34DB /* #3157 'AVMediaDataStorage' => 'AVFoundation.AVMediaDataStorage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34DD /* #3158 'AVMediaSelection' => 'AVFoundation.AVMediaSelection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34DF /* #3159 'AVMediaSelectionOption' => 'AVFoundation.AVMediaSelectionOption, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34E1 /* #3160 'AVMetadataObject' => 'AVFoundation.AVMetadataObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34E3 /* #3161 'AVMetadataBodyObject' => 'AVFoundation.AVMetadataBodyObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34E5 /* #3162 'AVMetadataCatBodyObject' => 'AVFoundation.AVMetadataCatBodyObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34E7 /* #3163 'AVMetadataDogBodyObject' => 'AVFoundation.AVMetadataDogBodyObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34E9 /* #3164 'AVMetadataFaceObject' => 'AVFoundation.AVMetadataFaceObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34EB /* #3165 'AVMetadataHumanBodyObject' => 'AVFoundation.AVMetadataHumanBodyObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34ED /* #3166 'AVMetadataItemFilter' => 'AVFoundation.AVMetadataItemFilter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34EF /* #3167 'AVMetadataItemValueRequest' => 'AVFoundation.AVMetadataItemValueRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34F1 /* #3168 'AVMetadataMachineReadableCodeObject' => 'AVFoundation.AVMetadataMachineReadableCodeObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34F3 /* #3169 'AVMetadataSalientObject' => 'AVFoundation.AVMetadataSalientObject, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34F5 /* #3170 'AVMovie' => 'AVFoundation.AVMovie, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34F7 /* #3171 'AVMovieTrack' => 'AVFoundation.AVMovieTrack, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34F9 /* #3172 'AVMusicTrack' => 'AVFoundation.AVMusicTrack, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34FB /* #3173 'AVMutableAssetDownloadStorageManagementPolicy' => 'AVFoundation.AVMutableAssetDownloadStorageManagementPolicy, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34FD /* #3174 'AVMutableAudioMix' => 'AVFoundation.AVMutableAudioMix, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x34FF /* #3175 'AVMutableAudioMixInputParameters' => 'AVFoundation.AVMutableAudioMixInputParameters, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3501 /* #3176 'AVMutableCaption' => 'AVFoundation.AVMutableCaption, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3503 /* #3177 'AVMutableCaptionRegion' => 'AVFoundation.AVMutableCaptionRegion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3505 /* #3178 'AVMutableComposition' => 'AVFoundation.AVMutableComposition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3507 /* #3179 'AVMutableCompositionTrack' => 'AVFoundation.AVMutableCompositionTrack, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3509 /* #3180 'AVMutableDateRangeMetadataGroup' => 'AVFoundation.AVMutableDateRangeMetadataGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x350B /* #3181 'AVMutableMediaSelection' => 'AVFoundation.AVMutableMediaSelection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x350D /* #3182 'AVMetadataItem' => 'AVFoundation.AVMetadataItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x350F /* #3183 'AVMutableMetadataItem' => 'AVFoundation.AVMutableMetadataItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3511 /* #3184 'AVMutableMovieTrack' => 'AVFoundation.AVMutableMovieTrack, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3513 /* #3185 'AVTimedMetadataGroup' => 'AVFoundation.AVTimedMetadataGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3515 /* #3186 'AVMutableTimedMetadataGroup' => 'AVFoundation.AVMutableTimedMetadataGroup, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3517 /* #3187 'AVVideoCompositionLayerInstruction' => 'AVFoundation.AVVideoCompositionLayerInstruction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3519 /* #3188 'AVMutableVideoCompositionLayerInstruction' => 'AVFoundation.AVMutableVideoCompositionLayerInstruction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x351B /* #3189 'AVOutputSettingsAssistant' => 'AVFoundation.AVOutputSettingsAssistant, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x351D /* #3190 'AVContentKeyRequest' => 'AVFoundation.AVContentKeyRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x351F /* #3191 'AVPersistableContentKeyRequest' => 'AVFoundation.AVPersistableContentKeyRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3525 /* #3192 'Microsoft_macOS__AVFoundation_AVPlaybackCoordinatorPlaybackControlDelegate' => 'AVFoundation.AVPlaybackCoordinatorPlaybackControlDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3529 /* #3193 'AVPlayerInterstitialEvent' => 'AVFoundation.AVPlayerInterstitialEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x352B /* #3194 'AVPlayerInterstitialEventMonitor' => 'AVFoundation.AVPlayerInterstitialEventMonitor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x352D /* #3195 'AVPlayerInterstitialEventController' => 'AVFoundation.AVPlayerInterstitialEventController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x352F /* #3196 'AVPlayerItemAccessLog' => 'AVFoundation.AVPlayerItemAccessLog, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3531 /* #3197 'AVPlayerItemAccessLogEvent' => 'AVFoundation.AVPlayerItemAccessLogEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3533 /* #3198 'AVPlayerItemErrorLog' => 'AVFoundation.AVPlayerItemErrorLog, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3535 /* #3199 'AVPlayerItemErrorLogEvent' => 'AVFoundation.AVPlayerItemErrorLogEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3537 /* #3200 'AVPlayerItemOutput' => 'AVFoundation.AVPlayerItemOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3539 /* #3201 'AVPlayerItemLegibleOutput' => 'AVFoundation.AVPlayerItemLegibleOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3543 /* #3202 'Microsoft_macOS__AVFoundation_AVPlayerItemOutputPushDelegate' => 'AVFoundation.AVPlayerItemOutputPushDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3547 /* #3203 'Microsoft_macOS__AVFoundation_AVPlayerItemLegibleOutputPushDelegate' => 'AVFoundation.AVPlayerItemLegibleOutputPushDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x354B /* #3204 'AVPlayerItemMediaDataCollector' => 'AVFoundation.AVPlayerItemMediaDataCollector, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x354D /* #3205 'AVPlayerItemMetadataCollector' => 'AVFoundation.AVPlayerItemMetadataCollector, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3553 /* #3206 'Microsoft_macOS__AVFoundation_AVPlayerItemMetadataCollectorPushDelegate' => 'AVFoundation.AVPlayerItemMetadataCollectorPushDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3557 /* #3207 'AVPlayerItemMetadataOutput' => 'AVFoundation.AVPlayerItemMetadataOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x355D /* #3208 'Microsoft_macOS__AVFoundation_AVPlayerItemMetadataOutputPushDelegate' => 'AVFoundation.AVPlayerItemMetadataOutputPushDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3565 /* #3209 'Microsoft_macOS__AVFoundation_AVPlayerItemOutputPullDelegate' => 'AVFoundation.AVPlayerItemOutputPullDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3569 /* #3210 'AVPlayerItemTrack' => 'AVFoundation.AVPlayerItemTrack, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x356B /* #3211 'AVPlayerPlaybackCoordinator' => 'AVFoundation.AVPlayerPlaybackCoordinator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3571 /* #3212 'Microsoft_macOS__AVFoundation_AVPlayerPlaybackCoordinatorDelegate' => 'AVFoundation.AVPlayerPlaybackCoordinatorDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3575 /* #3213 'AVPortraitEffectsMatte' => 'AVFoundation.AVPortraitEffectsMatte, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x357B /* #3214 'AVPlayer' => 'AVFoundation.AVPlayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x357D /* #3215 'AVQueuePlayer' => 'AVFoundation.AVQueuePlayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x357F /* #3216 'AVSampleBufferRequest' => 'AVFoundation.AVSampleBufferRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3581 /* #3217 'AVSampleCursor' => 'AVFoundation.AVSampleCursor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3583 /* #3218 'AVSemanticSegmentationMatte' => 'AVFoundation.AVSemanticSegmentationMatte, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3585 /* #3219 'AVSpeechSynthesisVoice' => 'AVFoundation.AVSpeechSynthesisVoice, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x358B /* #3220 'Microsoft_macOS__AVFoundation_AVSpeechSynthesizerDelegate' => 'AVFoundation.AVSpeechSynthesizerDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x358F /* #3221 'AVSpeechUtterance' => 'AVFoundation.AVSpeechUtterance, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3591 /* #3222 'AVSynchronizedLayer' => 'AVFoundation.AVSynchronizedLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3597 /* #3223 'Microsoft_macOS__AVFoundation_AVVideoCompositing' => 'AVFoundation.AVVideoCompositing, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x359B /* #3224 'AVVideoCompositionCoreAnimationTool' => 'AVFoundation.AVVideoCompositionCoreAnimationTool, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x359D /* #3225 'AVVideoCompositionRenderContext' => 'AVFoundation.AVVideoCompositionRenderContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x359F /* #3226 'AVVideoCompositionRenderHint' => 'AVFoundation.AVVideoCompositionRenderHint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35A5 /* #3227 'Microsoft_macOS__AVFoundation_AVVideoCompositionValidationHandling' => 'AVFoundation.AVVideoCompositionValidationHandling, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35A7 /* #3228 'THClient' => 'ThreadNetwork.THClient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35A9 /* #3229 'SNAudioFileAnalyzer' => 'SoundAnalysis.SNAudioFileAnalyzer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35AB /* #3230 'SNTimeDurationConstraint' => 'SoundAnalysis.SNTimeDurationConstraint, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35AD /* #3231 'SHMediaLibrary' => 'ShazamKit.SHMediaLibrary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35AF /* #3232 'SHSignatureGenerator' => 'ShazamKit.SHSignatureGenerator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35B1 /* #3233 'SWHighlightCenter' => 'SharedWithYou.SWHighlightCenter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35B3 /* #3234 'SFContentBlockerManager' => 'SafariServices.SFContentBlockerManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35B5 /* #3235 'SFSafariApplication' => 'SafariServices.SFSafariApplication, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35B7 /* #3236 'SFSafariExtension' => 'SafariServices.SFSafariExtension, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35B9 /* #3237 'SFSafariExtensionHandler' => 'SafariServices.SFSafariExtensionHandler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35BB /* #3238 'SFSafariPage' => 'SafariServices.SFSafariPage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35BD /* #3239 'SFSafariTab' => 'SafariServices.SFSafariTab, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35BF /* #3240 'SFSafariWindow' => 'SafariServices.SFSafariWindow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35C1 /* #3241 'RPBroadcastController' => 'ReplayKit.RPBroadcastController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35C3 /* #3242 'RPScreenRecorder' => 'ReplayKit.RPScreenRecorder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35C5 /* #3243 'QLThumbnailGenerator' => 'QuickLookThumbnailing.QLThumbnailGenerator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35C7 /* #3244 'PHASEAssetRegistry' => 'Phase.PhaseAssetRegistry, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35C9 /* #3245 'PHASEPushStreamNode' => 'Phase.PhasePushStreamNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35CB /* #3246 'PHASESoundEvent' => 'Phase.PhaseSoundEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35CD /* #3247 'NotificationCenter_NCWidgetListViewController__NCWidgetListViewDelegate' => 'NotificationCenter.NCWidgetListViewController+_NCWidgetListViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x35DD /* #3248 'NCWidgetListViewController' => 'NotificationCenter.NCWidgetListViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35DF /* #3249 'NotificationCenter_NCWidgetSearchViewController__NCWidgetSearchViewDelegate' => 'NotificationCenter.NCWidgetSearchViewController+_NCWidgetSearchViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x35E9 /* #3250 'NCWidgetSearchViewController' => 'NotificationCenter.NCWidgetSearchViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35EB /* #3251 'LAContext' => 'LocalAuthentication.LAContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35ED /* #3252 'LAPrivateKey' => 'LocalAuthentication.LAPrivateKey, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35EF /* #3253 'LAPublicKey' => 'LocalAuthentication.LAPublicKey, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35F1 /* #3254 'LARightStore' => 'LocalAuthentication.LARightStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35F3 /* #3255 'LASecret' => 'LocalAuthentication.LASecret, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35F5 /* #3256 'LPMetadataProvider' => 'LinkPresentation.LPMetadataProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35F7 /* #3257 'ExternalAccessory_EAAccessory__EAAccessoryDelegate' => 'ExternalAccessory.EAAccessory+_EAAccessoryDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x35FD /* #3258 'EAAccessory' => 'ExternalAccessory.EAAccessory, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x35FF /* #3259 'EAAccessoryManager' => 'ExternalAccessory.EAAccessoryManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3601 /* #3260 'DCAppAttestService' => 'DeviceCheck.DCAppAttestService, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3603 /* #3261 'DCDevice' => 'DeviceCheck.DCDevice, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3605 /* #3262 'ATTrackingManager' => 'AppTrackingTransparency.ATTrackingManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3607 /* #3263 'VNFaceLandmarkRegion2D' => 'Vision.VNFaceLandmarkRegion2D, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3609 /* #3264 'VNRecognizedPointsObservation' => 'Vision.VNRecognizedPointsObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x360B /* #3265 'VNDetectHumanBodyPoseRequest' => 'Vision.VNDetectHumanBodyPoseRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x360D /* #3266 'VNDetectHumanHandPoseRequest' => 'Vision.VNDetectHumanHandPoseRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x360F /* #3267 'VNHumanBodyPoseObservation' => 'Vision.VNHumanBodyPoseObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3611 /* #3268 'VNHumanHandPoseObservation' => 'Vision.VNHumanHandPoseObservation, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3613 /* #3269 'VNRecognizeAnimalsRequest' => 'Vision.VNRecognizeAnimalsRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3615 /* #3270 'VSUserAccountManager' => 'VideoSubscriberAccount.VSUserAccountManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3617 /* #3271 'UNUserNotificationCenter' => 'UserNotifications.UNUserNotificationCenter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3619 /* #3272 'SKCloudServiceController' => 'StoreKit.SKCloudServiceController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x361B /* #3273 'StoreKit_SKRequest__SKRequestDelegate' => 'StoreKit.SKRequest+_SKRequestDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3623 /* #3274 'StoreKit_SKProductsRequest__SKProductsRequestDelegate' => 'StoreKit.SKProductsRequest+_SKProductsRequestDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3629 /* #3275 'SKProductsRequest' => 'StoreKit.SKProductsRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x362B /* #3276 'SKProductStorePromotionController' => 'StoreKit.SKProductStorePromotionController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x362D /* #3277 'StoreKit_SKStoreProductViewController__SKStoreProductViewControllerDelegate' => 'StoreKit.SKStoreProductViewController+_SKStoreProductViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3633 /* #3278 'SKStoreProductViewController' => 'StoreKit.SKStoreProductViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3635 /* #3279 'SpriteKit_SKPhysicsWorld__SKPhysicsContactDelegate' => 'SpriteKit.SKPhysicsWorld+_SKPhysicsContactDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x363D /* #3280 'SKPhysicsWorld' => 'SpriteKit.SKPhysicsWorld, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x363F /* #3281 'SKTextureAtlas' => 'SpriteKit.SKTextureAtlas, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3641 /* #3282 'SLRequest' => 'Social.SLRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3643 /* #3283 'SWCollaborationMetadata' => 'SharedWithYouCore.SWCollaborationMetadata, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3645 /* #3284 'ScriptingBridge_SBApplication__SBApplicationDelegate' => 'ScriptingBridge.SBApplication+_SBApplicationDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x364B /* #3285 'SBApplication' => 'ScriptingBridge.SBApplication, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x364D /* #3286 'SCShareableContent' => 'ScreenCaptureKit.SCShareableContent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x364F /* #3287 'SCStream' => 'ScreenCaptureKit.SCStream, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3651 /* #3288 'SCNLayer' => 'SceneKit.SCNLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3653 /* #3289 'SceneKit_SCNPhysicsWorld__SCNPhysicsContactDelegate' => 'SceneKit.SCNPhysicsWorld+_SCNPhysicsContactDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x365D /* #3290 'SCNPhysicsWorld' => 'SceneKit.SCNPhysicsWorld, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x365F /* #3291 'SCNRenderer' => 'SceneKit.SCNRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3661 /* #3292 'SCNView' => 'SceneKit.SCNView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3663 /* #3293 'PHFetchResult' => 'Photos.PHFetchResult, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3665 /* #3294 'Photos_PHPhotoLibrary___phlib_observer' => 'Photos.PHPhotoLibrary+__phlib_observer, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3669 /* #3295 'PHPhotoLibrary' => 'Photos.PHPhotoLibrary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x366B /* #3296 'PHAssetResourceManager' => 'Photos.PHAssetResourceManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x366D /* #3297 'PHLivePhotoEditingContext' => 'Photos.PHLivePhotoEditingContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x366F /* #3298 'PdfKit_PdfDocument__PdfDocumentDelegate' => 'PdfKit.PdfDocument+_PdfDocumentDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3685 /* #3299 'PDFDocument' => 'PdfKit.PdfDocument, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3687 /* #3300 'PDFThumbnailView' => 'PdfKit.PdfThumbnailView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3689 /* #3301 'PdfKit_PdfView__PdfViewDelegate' => 'PdfKit.PdfView+_PdfViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x369B /* #3302 'PDFView' => 'PdfKit.PdfView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x369D /* #3303 'PKShareablePassMetadata' => 'PassKit.PKShareablePassMetadata, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x369F /* #3304 'PKAddShareablePassConfiguration' => 'PassKit.PKAddShareablePassConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36A1 /* #3305 'PKPassLibrary' => 'PassKit.PKPassLibrary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36A3 /* #3306 'PKPaymentAuthorizationController' => 'PassKit.PKPaymentAuthorizationController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36A5 /* #3307 'PassKit_PKPaymentAuthorizationViewController__PKPaymentAuthorizationViewControllerDelegate' => 'PassKit.PKPaymentAuthorizationViewController+_PKPaymentAuthorizationViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x36C5 /* #3308 'PKPaymentAuthorizationViewController' => 'PassKit.PKPaymentAuthorizationViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36C7 /* #3309 'PKVehicleConnectionSession' => 'PassKit.PKVehicleConnectionSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36C9 /* #3310 'NEVPNManager' => 'NetworkExtension.NEVpnManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36CB /* #3311 'NEAppProxyFlow' => 'NetworkExtension.NEAppProxyFlow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36CD /* #3312 'NETunnelProviderManager' => 'NetworkExtension.NETunnelProviderManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36CF /* #3313 'NEAppProxyProviderManager' => 'NetworkExtension.NEAppProxyProviderManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36D1 /* #3314 'NEAppProxyTCPFlow' => 'NetworkExtension.NEAppProxyTcpFlow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36D3 /* #3315 'NEAppProxyUDPFlow' => 'NetworkExtension.NEAppProxyUdpFlow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36D5 /* #3316 'NEDNSProxyManager' => 'NetworkExtension.NEDnsProxyManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36D7 /* #3317 'NEDNSProxyProvider' => 'NetworkExtension.NEDnsProxyProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36D9 /* #3318 'NEDNSSettingsManager' => 'NetworkExtension.NEDnsSettingsManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36DB /* #3319 'NEFilterDataProvider' => 'NetworkExtension.NEFilterDataProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36DD /* #3320 'NEFilterManager' => 'NetworkExtension.NEFilterManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36DF /* #3321 'NEPacketTunnelFlow' => 'NetworkExtension.NEPacketTunnelFlow, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36E1 /* #3322 'NETransparentProxyManager' => 'NetworkExtension.NETransparentProxyManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36E3 /* #3323 'NWTCPConnection' => 'NetworkExtension.NWTcpConnection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36E5 /* #3324 'NWUDPSession' => 'NetworkExtension.NWUdpSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36E7 /* #3325 'NLEmbedding' => 'NaturalLanguage.NLEmbedding, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36E9 /* #3326 'NLLanguageRecognizer' => 'NaturalLanguage.NLLanguageRecognizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36EB /* #3327 'NLTagger' => 'NaturalLanguage.NLTagger, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36ED /* #3328 'MCSession' => 'MultipeerConnectivity.MCSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36EF /* #3329 'MDLMesh' => 'ModelIO.MDLMesh, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36F1 /* #3330 'MPSGraphTensorData' => 'MetalPerformanceShadersGraph.MPSGraphTensorData, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36F3 /* #3331 'MPSGraphDepthwiseConvolution3DOpDescriptor' => 'MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution3DOpDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36F5 /* #3332 'MPSGraphPooling4DOpDescriptor' => 'MetalPerformanceShadersGraph.MPSGraphPooling4DOpDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36F7 /* #3333 'MPSGraphShapedType' => 'MetalPerformanceShadersGraph.MPSGraphShapedType, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36F9 /* #3334 'MPSGraphStencilOpDescriptor' => 'MetalPerformanceShadersGraph.MPSGraphStencilOpDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36FB /* #3335 'MPSGraphTensor' => 'MetalPerformanceShadersGraph.MPSGraphTensor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36FD /* #3336 'MPSGraphVariableOp' => 'MetalPerformanceShadersGraph.MPSGraphVariableOp, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x36FF /* #3337 'MPSNNGraph' => 'MetalPerformanceShaders.MPSNNGraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3701 /* #3338 'MPSNDArrayDescriptor' => 'MetalPerformanceShaders.MPSNDArrayDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3703 /* #3339 'MTKTextureLoader' => 'MetalKit.MTKTextureLoader, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3705 /* #3340 'MPSkipIntervalCommand' => 'MediaPlayer.MPSkipIntervalCommand, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3707 /* #3341 'MKLocalSearch' => 'MapKit.MKLocalSearch, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3709 /* #3342 'MKDirections' => 'MapKit.MKDirections, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x370B /* #3343 'MKGradientPolylineRenderer' => 'MapKit.MKGradientPolylineRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x370D /* #3344 'MKLookAroundSceneRequest' => 'MapKit.MKLookAroundSceneRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x370F /* #3345 'MKLookAroundSnapshotter' => 'MapKit.MKLookAroundSnapshotter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3711 /* #3346 'MKMapSnapshotter' => 'MapKit.MKMapSnapshotter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3713 /* #3347 'MapKit_MKMapView__MKMapViewDelegate' => 'MapKit.MKMapView+_MKMapViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3741 /* #3348 'MKMapView' => 'MapKit.MKMapView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3743 /* #3349 'MKPointOfInterestFilter' => 'MapKit.MKPointOfInterestFilter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3745 /* #3350 'MLCConvolutionDescriptor' => 'MLCompute.MLCConvolutionDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3747 /* #3351 'MLCGraph' => 'MLCompute.MLCGraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3749 /* #3352 'MLCInferenceGraph' => 'MLCompute.MLCInferenceGraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x374B /* #3353 'MLCLayerNormalizationLayer' => 'MLCompute.MLCLayerNormalizationLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x374D /* #3354 'MLCPaddingLayer' => 'MLCompute.MLCPaddingLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x374F /* #3355 'MLCPoolingDescriptor' => 'MLCompute.MLCPoolingDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3751 /* #3356 'MLCReductionLayer' => 'MLCompute.MLCReductionLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3753 /* #3357 'MLCReshapeLayer' => 'MLCompute.MLCReshapeLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3755 /* #3358 'MLCSliceLayer' => 'MLCompute.MLCSliceLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3757 /* #3359 'MLCSplitLayer' => 'MLCompute.MLCSplitLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3759 /* #3360 'MLCTensor' => 'MLCompute.MLCTensor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x375B /* #3361 'MLCTensorDescriptor' => 'MLCompute.MLCTensorDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x375D /* #3362 'MLCTrainingGraph' => 'MLCompute.MLCTrainingGraph, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x375F /* #3363 'MLCTransposeLayer' => 'MLCompute.MLCTransposeLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3761 /* #3364 'MLCUpsampleLayer' => 'MLCompute.MLCUpsampleLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3763 /* #3365 'INPerson' => 'Intents.INPerson, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3765 /* #3366 'INFocusStatusCenter' => 'Intents.INFocusStatusCenter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3767 /* #3367 'INInteraction' => 'Intents.INInteraction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3769 /* #3368 'INVoiceShortcutCenter' => 'Intents.INVoiceShortcutCenter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x376B /* #3369 'ImageKit_IKCameraDeviceView__IKCameraDeviceViewDelegate' => 'ImageKit.IKCameraDeviceView+_IKCameraDeviceViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3775 /* #3370 'IKCameraDeviceView' => 'ImageKit.IKCameraDeviceView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3777 /* #3371 'ImageKit_IKDeviceBrowserView__IKDeviceBrowserViewDelegate' => 'ImageKit.IKDeviceBrowserView+_IKDeviceBrowserViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x377F /* #3372 'IKDeviceBrowserView' => 'ImageKit.IKDeviceBrowserView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3781 /* #3373 'IKFilterBrowserPanel' => 'ImageKit.IKFilterBrowserPanel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3783 /* #3374 'ImageKit_IKImageBrowserView__IKImageBrowserDelegate' => 'ImageKit.IKImageBrowserView+_IKImageBrowserDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x378F /* #3375 'IKImageBrowserView' => 'ImageKit.IKImageBrowserView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3791 /* #3376 'ImageKit_IKSaveOptions__IKSaveOptionsDelegate' => 'ImageKit.IKSaveOptions+_IKSaveOptionsDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3797 /* #3377 'IKSaveOptions' => 'ImageKit.IKSaveOptions, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3799 /* #3378 'ImageKit_IKScannerDeviceView__IKScannerDeviceViewDelegate' => 'ImageKit.IKScannerDeviceView+_IKScannerDeviceViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x37A5 /* #3379 'IKScannerDeviceView' => 'ImageKit.IKScannerDeviceView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37A7 /* #3380 'ImageCaptureCore_ICCameraDevice_DidReadDataFromFileAction' => 'ImageCaptureCore.ICCameraDevice+DidReadDataFromFileAction, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x37AB /* #3381 'ImageCaptureCore_ICCameraDevice_DidDownloadDataFromFileAction' => 'ImageCaptureCore.ICCameraDevice+DidDownloadDataFromFileAction, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x37AF /* #3382 'ImageCaptureCore_ICCameraDevice_DidSendPtpAction' => 'ImageCaptureCore.ICCameraDevice+DidSendPtpAction, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x37B3 /* #3383 'ICCameraDevice' => 'ImageCaptureCore.ICCameraDevice, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37B5 /* #3384 'HKAttachmentStore' => 'HealthKit.HKAttachmentStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37B7 /* #3385 'HKHealthStore' => 'HealthKit.HKHealthStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37B9 /* #3386 'HKHeartbeatSeriesBuilder' => 'HealthKit.HKHeartbeatSeriesBuilder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37BB /* #3387 'HKQuantitySeriesSampleBuilder' => 'HealthKit.HKQuantitySeriesSampleBuilder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37BD /* #3388 'HKVerifiableClinicalRecordQuery' => 'HealthKit.HKVerifiableClinicalRecordQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37BF /* #3389 'HKWorkoutRouteBuilder' => 'HealthKit.HKWorkoutRouteBuilder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37C1 /* #3390 'GKTurnBasedExchange' => 'GameKit.GKTurnBasedExchange, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37C3 /* #3391 'GameKit_GKMatch__GKMatchDelegate' => 'GameKit.GKMatch+_GKMatchDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x37D7 /* #3392 'GKMatch' => 'GameKit.GKMatch, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37D9 /* #3393 'GKAchievement' => 'GameKit.GKAchievement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37DB /* #3394 'GKAchievementDescription' => 'GameKit.GKAchievementDescription, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37DD /* #3395 'GameKit_GKGameCenterViewController__GKGameCenterControllerDelegate' => 'GameKit.GKGameCenterViewController+_GKGameCenterControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x37E3 /* #3396 'GameKit_GKAchievementViewController__GKAchievementViewControllerDelegate' => 'GameKit.GKAchievementViewController+_GKAchievementViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x37E9 /* #3397 'GKGameCenterViewController' => 'GameKit.GKGameCenterViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37EB /* #3398 'GKAchievementViewController' => 'GameKit.GKAchievementViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x37ED /* #3399 'GameKit_GKChallengeEventHandler__GKChallengeEventHandlerDelegate' => 'GameKit.GKChallengeEventHandler+_GKChallengeEventHandlerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x37FF /* #3400 'GKChallengeEventHandler' => 'GameKit.GKChallengeEventHandler, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3801 /* #3401 'GameKit_GKFriendRequestComposeViewController__GKFriendRequestComposeViewControllerDelegate' => 'GameKit.GKFriendRequestComposeViewController+_GKFriendRequestComposeViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3807 /* #3402 'GKFriendRequestComposeViewController' => 'GameKit.GKFriendRequestComposeViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3809 /* #3403 'GKGameSession' => 'GameKit.GKGameSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x380B /* #3404 'GKLeaderboard' => 'GameKit.GKLeaderboard, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x380D /* #3405 'GKLeaderboardEntry' => 'GameKit.GKLeaderboardEntry, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x380F /* #3406 'GKLeaderboardSet' => 'GameKit.GKLeaderboardSet, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3811 /* #3407 'GameKit_GKLeaderboardViewController__GKLeaderboardViewControllerDelegate' => 'GameKit.GKLeaderboardViewController+_GKLeaderboardViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3817 /* #3408 'GKLeaderboardViewController' => 'GameKit.GKLeaderboardViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3819 /* #3409 'GKPlayer' => 'GameKit.GKPlayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x381B /* #3410 'GKLocalPlayer' => 'GameKit.GKLocalPlayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x381D /* #3411 'GKMatchmaker' => 'GameKit.GKMatchmaker, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x381F /* #3412 'GameKit_GKMatchmakerViewController__GKMatchmakerViewControllerDelegate' => 'GameKit.GKMatchmakerViewController+_GKMatchmakerViewControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3831 /* #3413 'GKMatchmakerViewController' => 'GameKit.GKMatchmakerViewController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3833 /* #3414 'GKNotificationBanner' => 'GameKit.GKNotificationBanner, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3835 /* #3415 'GKSavedGame' => 'GameKit.GKSavedGame, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3837 /* #3416 'GKScore' => 'GameKit.GKScore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3839 /* #3417 'GKTurnBasedMatch' => 'GameKit.GKTurnBasedMatch, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x383B /* #3418 'GCController' => 'GameController.GCController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x383D /* #3419 'GCKeyboard' => 'GameController.GCKeyboard, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x383F /* #3420 'GCMouse' => 'GameController.GCMouse, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3841 /* #3421 'GCRacingWheel' => 'GameController.GCRacingWheel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3843 /* #3422 'GLKTextureLoader' => 'GLKit.GLKTextureLoader, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3845 /* #3423 'WKWebView' => 'WebKit.WKWebView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3847 /* #3424 'WebKit_DomNode_DomNodeEventProxy' => 'WebKit.DomNode+DomNodeEventProxy, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x384B /* #3425 'WebKit_DomNode_DomNodeEventProxy2' => 'WebKit.DomNode+DomNodeEventProxy2, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x384F /* #3426 'WebKit_WebView__WebFrameLoadDelegate' => 'WebKit.WebView+_WebFrameLoadDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3871 /* #3427 'WebKit_WebView__WebDownloadDelegate' => 'WebKit.WebView+_WebDownloadDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3877 /* #3428 'WebKit_WebView__WebResourceLoadDelegate' => 'WebKit.WebView+_WebResourceLoadDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x388D /* #3429 'WebKit_WebView__WebUIDelegate' => 'WebKit.WebView+_WebUIDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x38E5 /* #3430 'WebKit_WebView__WebPolicyDelegate' => 'WebKit.WebView+_WebPolicyDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x38F1 /* #3431 'WebView' => 'WebKit.WebView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x38F3 /* #3432 'WebHistoryItem' => 'WebKit.WebHistoryItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x38F5 /* #3433 'WKContentRuleListStore' => 'WebKit.WKContentRuleListStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x38F7 /* #3434 'WKDownload' => 'WebKit.WKDownload, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x38F9 /* #3435 'WKHTTPCookieStore' => 'WebKit.WKHttpCookieStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x38FB /* #3436 'WKWebsiteDataStore' => 'WebKit.WKWebsiteDataStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x38FD /* #3437 'NSCalendar' => 'Foundation.NSCalendar, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x38FF /* #3438 'NSDictionary' => 'Foundation.NSDictionary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3901 /* #3439 'NSFileManager' => 'Foundation.NSFileManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3903 /* #3440 'NSHost' => 'Foundation.NSHost, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3905 /* #3441 'NSIndexPath' => 'Foundation.NSIndexPath, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3907 /* #3442 'NSItemProvider' => 'Foundation.NSItemProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3909 /* #3443 'Foundation_NSKeyedArchiver__NSKeyedArchiverDelegate' => 'Foundation.NSKeyedArchiver+_NSKeyedArchiverDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3917 /* #3444 'NSKeyedArchiver' => 'Foundation.NSKeyedArchiver, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3919 /* #3445 'Foundation_NSKeyedUnarchiver__NSKeyedUnarchiverDelegate' => 'Foundation.NSKeyedUnarchiver+_NSKeyedUnarchiverDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3927 /* #3446 'NSLocale' => 'Foundation.NSLocale, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3929 /* #3447 'NSMutableDictionary' => 'Foundation.NSMutableDictionary, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x392B /* #3448 'Foundation_NSNetService__NSNetServiceDelegate' => 'Foundation.NSNetService+_NSNetServiceDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3941 /* #3449 'NSNetService' => 'Foundation.NSNetService, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3943 /* #3450 '__NSObject_Disposer' => 'Foundation.NSObject+NSObject_Disposer, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3949 /* #3451 '__XamarinObjectObserver' => 'Foundation.NSObject+Observer, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x394D /* #3452 'NSProgress' => 'Foundation.NSProgress, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x394F /* #3453 'Foundation_NSStream__NSStreamDelegate' => 'Foundation.NSStream+_NSStreamDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3955 /* #3454 'NSThread' => 'Foundation.NSThread, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3957 /* #3455 'Foundation_NSThread_ActionThread' => 'Foundation.NSThread+ActionThread, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x395B /* #3456 'NSUbiquitousKeyValueStore' => 'Foundation.NSUbiquitousKeyValueStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x395D /* #3457 'NSUndoManager' => 'Foundation.NSUndoManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x395F /* #3458 'NSURL' => 'Foundation.NSUrl, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3961 /* #3459 'NSURLConnection' => 'Foundation.NSUrlConnection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3963 /* #3460 'NSURLSessionConfiguration' => 'Foundation.NSUrlSessionConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3965 /* #3461 'NSUserDefaults' => 'Foundation.NSUserDefaults, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3967 /* #3462 'Foundation_NSUrlSessionHandler_WrappedNSInputStream' => 'Foundation.NSUrlSessionHandler+WrappedNSInputStream, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x397F /* #3463 'Foundation_NSCache__NSCacheDelegate' => 'Foundation.NSCache+_NSCacheDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3985 /* #3464 'NSCache' => 'Foundation.NSCache, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3987 /* #3465 'NSFileHandle' => 'Foundation.NSFileHandle, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3989 /* #3466 'NSFileVersion' => 'Foundation.NSFileVersion, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x398B /* #3467 'NSHTTPCookieStorage' => 'Foundation.NSHttpCookieStorage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x398D /* #3468 'Foundation_NSMetadataQuery__NSMetadataQueryDelegate' => 'Foundation.NSMetadataQuery+_NSMetadataQueryDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3995 /* #3469 'NSMetadataQuery' => 'Foundation.NSMetadataQuery, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3997 /* #3470 'Foundation_NSNetServiceBrowser__NSNetServiceBrowserDelegate' => 'Foundation.NSNetServiceBrowser+_NSNetServiceBrowserDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x39A9 /* #3471 'NSNetServiceBrowser' => 'Foundation.NSNetServiceBrowser, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39AB /* #3472 'NSProcessInfo' => 'Foundation.NSProcessInfo, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39AD /* #3473 'NSSecureUnarchiveFromDataTransformer' => 'Foundation.NSSecureUnarchiveFromDataTransformer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39AF /* #3474 'NSTask' => 'Foundation.NSTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39B1 /* #3475 'NSURLCache' => 'Foundation.NSUrlCache, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39B3 /* #3476 'NSURLCredentialStorage' => 'Foundation.NSUrlCredentialStorage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39B5 /* #3477 'NSURLSessionStreamTask' => 'Foundation.NSUrlSessionStreamTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39B7 /* #3478 'NSURLSessionWebSocketTask' => 'Foundation.NSUrlSessionWebSocketTask, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39B9 /* #3479 'NSUserActivity' => 'Foundation.NSUserActivity, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39BB /* #3480 'Foundation_NSUserNotificationCenter__NSUserNotificationCenterDelegate' => 'Foundation.NSUserNotificationCenter+_NSUserNotificationCenterDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x39C5 /* #3481 'NSUserNotificationCenter' => 'Foundation.NSUserNotificationCenter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39C7 /* #3482 'FIFinderSync' => 'FinderSync.FIFinderSync, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39C9 /* #3483 'FIFinderSyncController' => 'FinderSync.FIFinderSyncController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39CB /* #3484 'NSFileProviderDomain' => 'FileProvider.NSFileProviderDomain, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39CD /* #3485 'NSFileProviderManager' => 'FileProvider.NSFileProviderManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39CF /* #3486 'EKEventStore' => 'EventKit.EKEventStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39D1 /* #3487 'EKVirtualConferenceProvider' => 'EventKit.EKVirtualConferenceProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39D3 /* #3488 'CWInterface' => 'CoreWlan.CWInterface, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39D5 /* #3489 'CSSearchableIndex' => 'CoreSpotlight.CSSearchableIndex, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39D7 /* #3490 'CMPedometer' => 'CoreMotion.CMPedometer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39D9 /* #3491 'MIDICIResponder' => 'CoreMidi.MidiCIResponder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39DB /* #3492 'MLMultiArray' => 'CoreML.MLMultiArray, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39DD /* #3493 'MLModel' => 'CoreML.MLModel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39DF /* #3494 'MLModelCollection' => 'CoreML.MLModelCollection, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x39E1 /* #3495 'CoreLocation_CLLocationManager__CLLocationManagerDelegate' => 'CoreLocation.CLLocationManager+_CLLocationManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3A09 /* #3496 'CLLocationManager' => 'CoreLocation.CLLocationManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A0B /* #3497 'CLGeocoder' => 'CoreLocation.CLGeocoder, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A0D /* #3498 'NSCoreDataCoreSpotlightDelegate' => 'CoreData.NSCoreDataCoreSpotlightDelegate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A0F /* #3499 'NSManagedObjectContext' => 'CoreData.NSManagedObjectContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A11 /* #3500 'NSPersistentContainer' => 'CoreData.NSPersistentContainer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A13 /* #3501 'NSPersistentCloudKitContainer' => 'CoreData.NSPersistentCloudKitContainer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A15 /* #3502 'NSPersistentCloudKitContainerEvent' => 'CoreData.NSPersistentCloudKitContainerEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A17 /* #3503 'NSPersistentStoreCoordinator' => 'CoreData.NSPersistentStoreCoordinator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A19 /* #3504 'CoreBluetooth_CBCentralManager__CBCentralManagerDelegate' => 'CoreBluetooth.CBCentralManager+_CBCentralManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3A29 /* #3505 'CBCentralManager' => 'CoreBluetooth.CBCentralManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A2B /* #3506 'CoreBluetooth_CBPeripheral__CBPeripheralDelegate' => 'CoreBluetooth.CBPeripheral+_CBPeripheralDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3A4D /* #3507 'CBPeripheral' => 'CoreBluetooth.CBPeripheral, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A4F /* #3508 'CoreBluetooth_CBPeripheralManager__CBPeripheralManagerDelegate' => 'CoreBluetooth.CBPeripheralManager+_CBPeripheralManagerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3A6B /* #3509 'CBPeripheralManager' => 'CoreBluetooth.CBPeripheralManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A6D /* #3510 'CoreAnimation_CAAnimation__CAAnimationDelegate' => 'CoreAnimation.CAAnimation+_CAAnimationDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3A75 /* #3511 'CNContactStore' => 'Contacts.CNContactStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A77 /* #3512 'CKContainer' => 'CloudKit.CKContainer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A79 /* #3513 'CKDatabase' => 'CloudKit.CKDatabase, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A7B /* #3514 'CLSContext' => 'ClassKit.CLSContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A7D /* #3515 'CLSDataStore' => 'ClassKit.CLSDataStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A7F /* #3516 'BADownloadManager' => 'BackgroundAssets.BADownloadManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A81 /* #3517 'ASAuthorizationAppleIDCredential' => 'AuthenticationServices.ASAuthorizationAppleIdCredential, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A83 /* #3518 'ASAuthorizationAppleIDProvider' => 'AuthenticationServices.ASAuthorizationAppleIdProvider, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A85 /* #3519 'ASAuthorizationProviderExtensionAuthorizationRequest' => 'AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A87 /* #3520 'ASAuthorizationProviderExtensionLoginConfiguration' => 'AuthenticationServices.ASAuthorizationProviderExtensionLoginConfiguration, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A89 /* #3521 'ASAuthorizationProviderExtensionLoginManager' => 'AuthenticationServices.ASAuthorizationProviderExtensionLoginManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A8B /* #3522 'ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor' => 'AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A8D /* #3523 'ASAuthorizationSingleSignOnCredential' => 'AuthenticationServices.ASAuthorizationSingleSignOnCredential, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A8F /* #3524 'ASAuthorizationWebBrowserPublicKeyCredentialManager' => 'AuthenticationServices.ASAuthorizationWebBrowserPublicKeyCredentialManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A91 /* #3525 'ASCredentialIdentityStore' => 'AuthenticationServices.ASCredentialIdentityStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A93 /* #3526 'AUAudioUnit' => 'AudioUnit.AUAudioUnit, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3A95 /* #3527 'AppKit_NSApplication__NSApplicationDelegate' => 'AppKit.NSApplication+_NSApplicationDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3AEF /* #3528 'NSApplication' => 'AppKit.NSApplication, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3AF1 /* #3529 'NSBrowser' => 'AppKit.NSBrowser, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3AF3 /* #3530 'AppKit_NSMatrix__NSMatrixDelegate' => 'AppKit.NSMatrix+_NSMatrixDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3AF7 /* #3531 'AppKit_NSPathCell__NSPathCellDelegate' => 'AppKit.NSPathCell+_NSPathCellDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3AFF /* #3532 'NSPathCell' => 'AppKit.NSPathCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B01 /* #3533 'AppKit_NSTableView__NSTableViewDelegate' => 'AppKit.NSTableView+_NSTableViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3B41 /* #3534 'NSTableView' => 'AppKit.NSTableView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B43 /* #3535 'AppKit_NSAlert__NSAlertDelegate' => 'AppKit.NSAlert+_NSAlertDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3B49 /* #3536 'NSAlert' => 'AppKit.NSAlert, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B4B /* #3537 'NSColor' => 'AppKit.NSColor, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B4D /* #3538 'AppKit_NSTextField__NSTextFieldDelegate' => 'AppKit.NSTextField+_NSTextFieldDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3B6B /* #3539 'AppKit_NSComboBox__NSComboBoxDelegate' => 'AppKit.NSComboBox+_NSComboBoxDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3B77 /* #3540 'NSComboBox' => 'AppKit.NSComboBox, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B79 /* #3541 '__NSDocumentDuplicateCallback' => 'AppKit.NSDocument+Callback, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3B7D /* #3542 'NSDocument' => 'AppKit.NSDocument, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B7F /* #3543 'NSEvent' => 'AppKit.NSEvent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B81 /* #3544 'NSFont' => 'AppKit.NSFont, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3B83 /* #3545 '__NSGestureRecognizerToken' => 'AppKit.NSGestureRecognizer+Token, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3B87 /* #3546 '__NSGestureRecognizerParameterlessToken' => 'AppKit.NSGestureRecognizer+ParameterlessDispatch, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3B8B /* #3547 '__NSGestureRecognizerParametrizedToken' => 'AppKit.NSGestureRecognizer+ParametrizedDispatch, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3B8F /* #3548 'AppKit_NSGestureRecognizer__NSGestureRecognizerDelegate' => 'AppKit.NSGestureRecognizer+_NSGestureRecognizerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3B9F /* #3549 'NSGestureRecognizer' => 'AppKit.NSGestureRecognizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BA1 /* #3550 '__NSClickGestureRecognizer' => 'AppKit.NSClickGestureRecognizer+Callback, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3BA5 /* #3551 'NSClickGestureRecognizer' => 'AppKit.NSClickGestureRecognizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BA7 /* #3552 '__NSMagnificationGestureRecognizer' => 'AppKit.NSMagnificationGestureRecognizer+Callback, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3BAB /* #3553 'NSMagnificationGestureRecognizer' => 'AppKit.NSMagnificationGestureRecognizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BAD /* #3554 '__NSPanGestureRecognizer' => 'AppKit.NSPanGestureRecognizer+Callback, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3BB1 /* #3555 'NSPanGestureRecognizer' => 'AppKit.NSPanGestureRecognizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BB3 /* #3556 '__NSPressGestureRecognizer' => 'AppKit.NSPressGestureRecognizer+Callback, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3BB7 /* #3557 'NSPressGestureRecognizer' => 'AppKit.NSPressGestureRecognizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BB9 /* #3558 '__NSRotationGestureRecognizer' => 'AppKit.NSRotationGestureRecognizer+Callback, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3BBD /* #3559 'NSRotationGestureRecognizer' => 'AppKit.NSRotationGestureRecognizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BBF /* #3560 'NSGradient' => 'AppKit.NSGradient, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BC1 /* #3561 'AppKit_NSImage__NSImageDelegate' => 'AppKit.NSImage+_NSImageDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3BCF /* #3562 'NSImage' => 'AppKit.NSImage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BD1 /* #3563 'NSMenuItem' => 'AppKit.NSMenuItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BD3 /* #3564 'NSPopUpButton' => 'AppKit.NSPopUpButton, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BD5 /* #3565 'NSPopUpButtonCell' => 'AppKit.NSPopUpButtonCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BD7 /* #3566 'NSPredicateEditorRowTemplate' => 'AppKit.NSPredicateEditorRowTemplate, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BD9 /* #3567 'NSScreen' => 'AppKit.NSScreen, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BDB /* #3568 'AppKit_NSSharingService__NSSharingServiceDelegate' => 'AppKit.NSSharingService+_NSSharingServiceDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3BED /* #3569 'NSSharingService' => 'AppKit.NSSharingService, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BEF /* #3570 'AppKit_NSSound__NSSoundDelegate' => 'AppKit.NSSound+_NSSoundDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3BF5 /* #3571 'NSSound' => 'AppKit.NSSound, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BF7 /* #3572 'NSSpellChecker' => 'AppKit.NSSpellChecker, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3BF9 /* #3573 'AppKit_NSTextStorage__NSTextStorageDelegate' => 'AppKit.NSTextStorage+_NSTextStorageDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3C05 /* #3574 'NSTextStorage' => 'AppKit.NSTextStorage, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3C07 /* #3575 'AppKit_NSWindow__NSWindowDelegate' => 'AppKit.NSWindow+_NSWindowDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3C6B /* #3576 'NSWorkspace' => 'AppKit.NSWorkspace, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3C6D /* #3577 'NSAccessibilityElement' => 'AppKit.NSAccessibilityElement, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3C6F /* #3578 'AppKit_NSAnimation__NSAnimationDelegate' => 'AppKit.NSAnimation+_NSAnimationDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3C7D /* #3579 'NSColorPanel' => 'AppKit.NSColorPanel, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3C7F /* #3580 'AppKit_NSDatePicker__NSDatePickerCellDelegate' => 'AppKit.NSDatePicker+_NSDatePickerCellDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3C85 /* #3581 'NSDatePicker' => 'AppKit.NSDatePicker, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3C87 /* #3582 'AppKit_NSDatePickerCell__NSDatePickerCellDelegate' => 'AppKit.NSDatePickerCell+_NSDatePickerCellDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3C8D /* #3583 'NSDatePickerCell' => 'AppKit.NSDatePickerCell, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3C8F /* #3584 'AppKit_NSDrawer__NSDrawerDelegate' => 'AppKit.NSDrawer+_NSDrawerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3CA1 /* #3585 'NSDrawer' => 'AppKit.NSDrawer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CA3 /* #3586 'NSHelpManager' => 'AppKit.NSHelpManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CA5 /* #3587 'NSMenu' => 'AppKit.NSMenu, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CA7 /* #3588 'NSOutlineView' => 'AppKit.NSOutlineView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CA9 /* #3589 'AppKit_NSPageController__NSPageControllerDelegate' => 'AppKit.NSPageController+_NSPageControllerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3CBD /* #3590 'NSPageController' => 'AppKit.NSPageController, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CBF /* #3591 'NSPopover' => 'AppKit.NSPopover, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CC1 /* #3592 'AppKit_NSRuleEditor__NSRuleEditorDelegate' => 'AppKit.NSRuleEditor+_NSRuleEditorDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3CD5 /* #3593 'AppKit_NSSavePanel__NSOpenSavePanelDelegate' => 'AppKit.NSSavePanel+_NSOpenSavePanelDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3CED /* #3594 'NSScroller' => 'AppKit.NSScroller, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CEF /* #3595 'NSScrollView' => 'AppKit.NSScrollView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CF1 /* #3596 'AppKit_NSSearchField__NSSearchFieldDelegate' => 'AppKit.NSSearchField+_NSSearchFieldDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3CF9 /* #3597 'NSSearchField' => 'AppKit.NSSearchField, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3CFB /* #3598 'AppKit_NSSharingServicePicker__NSSharingServicePickerDelegate' => 'AppKit.NSSharingServicePicker+_NSSharingServicePickerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3D05 /* #3599 'NSSharingServicePicker' => 'AppKit.NSSharingServicePicker, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D07 /* #3600 'NSSliderAccessory' => 'AppKit.NSSliderAccessory, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D09 /* #3601 'NSSplitView' => 'AppKit.NSSplitView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D0B /* #3602 'NSTableViewDiffableDataSource' => 'AppKit.NSTableViewDiffableDataSource`2, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D0D /* #3603 'AppKit_NSTabView__NSTabViewDelegate' => 'AppKit.NSTabView+_NSTabViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3D19 /* #3604 'NSTabView' => 'AppKit.NSTabView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D1B /* #3605 'AppKit_NSText__NSTextDelegate' => 'AppKit.NSText+_NSTextDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3D29 /* #3606 'NSText' => 'AppKit.NSText, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D2B /* #3607 'NSTextAlternatives' => 'AppKit.NSTextAlternatives, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D2D /* #3608 'NSTextInputContext' => 'AppKit.NSTextInputContext, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D2F /* #3609 'AppKit_NSTextView__NSTextViewDelegate' => 'AppKit.NSTextView+_NSTextViewDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3D67 /* #3610 'NSTextView' => 'AppKit.NSTextView, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D69 /* #3611 'AppKit_NSToolbar__NSToolbarDelegate' => 'AppKit.NSToolbar+_NSToolbarDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3D7D /* #3612 'NSToolbar' => 'AppKit.NSToolbar, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D7F /* #3613 'AppKit_NSTouchBar__NSTouchBarDelegate' => 'AppKit.NSTouchBar+_NSTouchBarDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3D85 /* #3614 'NSTouchBar' => 'AppKit.NSTouchBar, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D87 /* #3615 'ACAccountStore' => 'Accounts.ACAccountStore, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D89 /* #3616 'AVFoundation_AVCaptureFileOutput_recordingProxy' => 'AVFoundation.AVCaptureFileOutput+recordingProxy, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3D8F /* #3617 'AVCaptureVideoPreviewLayer' => 'AVFoundation.AVCaptureVideoPreviewLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D91 /* #3618 'AVPlayerItem' => 'AVFoundation.AVPlayerItem, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D93 /* #3619 'AVPlayerItemVideoOutput' => 'AVFoundation.AVPlayerItemVideoOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D95 /* #3620 'AVAssetExportSession' => 'AVFoundation.AVAssetExportSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D97 /* #3621 'AVAssetWriter' => 'AVFoundation.AVAssetWriter, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D99 /* #3622 'AVAsynchronousVideoCompositionRequest' => 'AVFoundation.AVAsynchronousVideoCompositionRequest, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D9B /* #3623 'AVAudioEngine' => 'AVFoundation.AVAudioEngine, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D9D /* #3624 'AVAudioPlayerNode' => 'AVFoundation.AVAudioPlayerNode, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3D9F /* #3625 'AVAudioUnitComponent' => 'AVFoundation.AVAudioUnitComponent, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DA1 /* #3626 'AVAudioUnitComponentManager' => 'AVFoundation.AVAudioUnitComponentManager, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DA3 /* #3627 'AVCaptureDevice' => 'AVFoundation.AVCaptureDevice, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DA5 /* #3628 'AVCaptureDeviceDiscoverySession' => 'AVFoundation.AVCaptureDeviceDiscoverySession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DA7 /* #3629 'AVCaptureDeviceFormat' => 'AVFoundation.AVCaptureDeviceFormat, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DA9 /* #3630 'AVCapturePhotoOutput' => 'AVFoundation.AVCapturePhotoOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DAB /* #3631 'AVCapturePhotoSettings' => 'AVFoundation.AVCapturePhotoSettings, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DAD /* #3632 'AVCaptureSession' => 'AVFoundation.AVCaptureSession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DAF /* #3633 'AVCaptureStillImageOutput' => 'AVFoundation.AVCaptureStillImageOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DB1 /* #3634 'AVCaptureVideoDataOutput' => 'AVFoundation.AVCaptureVideoDataOutput, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DB3 /* #3635 'AVContentKeySession' => 'AVFoundation.AVContentKeySession, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DB5 /* #3636 'AVFragmentedMovie' => 'AVFoundation.AVFragmentedMovie, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DB7 /* #3637 'AVFragmentedMovieTrack' => 'AVFoundation.AVFragmentedMovieTrack, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DB9 /* #3638 'AVMIDIPlayer' => 'AVFoundation.AVMidiPlayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DBB /* #3639 'AVMutableMovie' => 'AVFoundation.AVMutableMovie, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DBD /* #3640 'AVVideoComposition' => 'AVFoundation.AVVideoComposition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DBF /* #3641 'AVMutableVideoComposition' => 'AVFoundation.AVMutableVideoComposition, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DC1 /* #3642 'AVVideoCompositionInstruction' => 'AVFoundation.AVVideoCompositionInstruction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DC3 /* #3643 'AVMutableVideoCompositionInstruction' => 'AVFoundation.AVMutableVideoCompositionInstruction, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DC5 /* #3644 'AVPlayerMediaSelectionCriteria' => 'AVFoundation.AVPlayerMediaSelectionCriteria, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DC7 /* #3645 'AVRouteDetector' => 'AVFoundation.AVRouteDetector, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DC9 /* #3646 'AVSampleBufferAudioRenderer' => 'AVFoundation.AVSampleBufferAudioRenderer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DCB /* #3647 'AVSampleBufferDisplayLayer' => 'AVFoundation.AVSampleBufferDisplayLayer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DCD /* #3648 'AVSampleBufferGenerator' => 'AVFoundation.AVSampleBufferGenerator, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DCF /* #3649 'AVSampleBufferRenderSynchronizer' => 'AVFoundation.AVSampleBufferRenderSynchronizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DD1 /* #3650 'AVFoundation_AVSpeechSynthesizer__AVSpeechSynthesizerDelegate' => 'AVFoundation.AVSpeechSynthesizer+_AVSpeechSynthesizerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0x3DE1 /* #3651 'AVSpeechSynthesizer' => 'AVFoundation.AVSpeechSynthesizer, Microsoft.macOS' */, (MTTypeFlags) (0) /* None */ },
		{ NULL, 0x3DE3 /* #3652 'Foundation_NSUrlSessionHandler_NSUrlSessionHandlerDelegate' => 'Foundation.NSUrlSessionHandler+NSUrlSessionHandlerDelegate, Microsoft.macOS' */, (MTTypeFlags) (3) /* CustomType, UserType */ },
		{ NULL, 0 },
	};

	static const MTManagedClassMap __xamarin_skipped_map [] = {
		{ 0x3DF9, 0xE99 /* 'Intents.INIntentResolutionResult`1' => 'Intents.INIntentResolutionResult' */ },
		{ 0x3DFB, 0x10A9 /* 'GameplayKit.GKObstacleGraph`1' => 'GameplayKit.GKObstacleGraph' */ },
		{ 0x3DFD, 0x501 /* 'Foundation.NSArray`1' => 'Foundation.NSArray' */ },
		{ 0x3DFF, 0x1FF /* 'Foundation.NSEnumerator`1' => 'Foundation.NSEnumerator' */ },
		{ 0x3E01, 0x503 /* 'Foundation.NSMutableArray`1' => 'Foundation.NSMutableArray' */ },
		{ 0x3E03, 0x1457 /* 'Foundation.NSMutableOrderedSet`1' => 'Foundation.NSMutableOrderedSet' */ },
		{ 0x3E05, 0x145B /* 'Foundation.NSMutableSet`1' => 'Foundation.NSMutableSet' */ },
		{ 0x3E07, 0x1455 /* 'Foundation.NSOrderedSet`1' => 'Foundation.NSOrderedSet' */ },
		{ 0x3E09, 0x1459 /* 'Foundation.NSSet`1' => 'Foundation.NSSet' */ },
		{ 0x3E0B, 0x38FF /* 'Foundation.NSDictionary`2' => 'Foundation.NSDictionary' */ },
		{ 0x3E0D, 0x3929 /* 'Foundation.NSMutableDictionary`2' => 'Foundation.NSMutableDictionary' */ },
	};

	static const MTAssembly __xamarin_registration_assemblies [] = {
		{ "CIS329_Exercise01", "fd0a4b8d-49c1-43d9-a25b-7154dac1f032" }, 
		{ "Microsoft.Build.Framework", "3cb86783-e7db-414d-80fd-741905e47c03" }, 
		{ "Microsoft.Win32.SystemEvents", "d7381013-4548-4bba-ab7f-79e0996853bc" }, 
		{ "NuGet.Frameworks", "9d793961-5547-4c4c-aa46-910fefcca1f3" }, 
		{ "System.Drawing.Common", "f752af1d-e260-4a76-bff4-3e5476bfe086" }, 
		{ "System.Security.Permissions", "d3738857-1671-4482-8ac1-81e79945d989" }, 
		{ "System.Windows.Extensions", "4e2ae9ec-2366-4677-8fcb-68dda49024f7" }, 
		{ "Microsoft.CSharp", "e2c38abb-465a-4e8e-aa7a-7f516f7b1cfb" }, 
		{ "Microsoft.VisualBasic.Core", "9644f210-c34d-4a0f-8bae-f4de28ae6c7d" }, 
		{ "Microsoft.VisualBasic", "1860905f-668a-4f0c-ae98-f9f2ee9dc2a0" }, 
		{ "Microsoft.Win32.Primitives", "7bbdad82-2df1-491f-a1d1-45798a3009df" }, 
		{ "Microsoft.Win32.Registry", "e0cd3ff2-cf0f-4c2b-b443-fa62cde4245c" }, 
		{ "System.AppContext", "afc106c0-3194-41e8-a009-3bda275a342d" }, 
		{ "System.Buffers", "6e0456b9-334d-4c40-92bc-3bd8347607e7" }, 
		{ "System.Collections.Concurrent", "64503a42-acc3-4b68-af28-aa0e7acd833d" }, 
		{ "System.Collections.Immutable", "620091db-3ca0-45f5-8cf4-4843f8dede42" }, 
		{ "System.Collections.NonGeneric", "f4548a5f-079f-49b4-8e58-96c55339e02d" }, 
		{ "System.Collections.Specialized", "057df8f6-70e1-4c3d-95ec-7804515314e7" }, 
		{ "System.Collections", "0f95373f-020f-428b-b3bf-921176c77239" }, 
		{ "System.ComponentModel.Annotations", "e11e65a5-c9eb-4067-9005-38c07b189ddf" }, 
		{ "System.ComponentModel.DataAnnotations", "9def2d85-cc67-44f4-af09-3e3f6710ca03" }, 
		{ "System.ComponentModel.EventBasedAsync", "20033188-81f9-467f-8a91-59a3982a0298" }, 
		{ "System.ComponentModel.Primitives", "1527f750-fa58-4465-8679-117271246a76" }, 
		{ "System.ComponentModel.TypeConverter", "a9336ef2-6d96-4e11-bd1d-defbbff3cd3c" }, 
		{ "System.ComponentModel", "eb5698f4-2e4b-4b4d-8e31-e968cb295626" }, 
		{ "System.Configuration", "f1a9530d-d473-4a57-a9df-40ae1e1fdf97" }, 
		{ "System.Console", "8b9f6a71-d4ea-4578-ab6f-2494d541ed0d" }, 
		{ "System.Core", "5b18517c-4f1a-4c53-a256-201908a8d2e4" }, 
		{ "System.Data.Common", "f5087da7-6964-4a5b-914a-f4df0fe350e1" }, 
		{ "System.Data.DataSetExtensions", "62313a51-acfa-49bc-a583-b8e16d00ea46" }, 
		{ "System.Data", "e0a36abd-4724-45f5-a5d5-b934cea4ab83" }, 
		{ "System.Diagnostics.Contracts", "54d2c609-5a7e-4354-8c31-05ea6bbab16c" }, 
		{ "System.Diagnostics.Debug", "2971c68b-d4c5-4274-9c99-841aba1f843c" }, 
		{ "System.Diagnostics.DiagnosticSource", "b5345dd6-7ca7-4874-9a21-37d906c5ec37" }, 
		{ "System.Diagnostics.FileVersionInfo", "8f2d8365-a5d1-4dac-94e9-483cc709bbff" }, 
		{ "System.Diagnostics.Process", "778976d7-617a-4b2f-875a-ec02e45ec0fc" }, 
		{ "System.Diagnostics.StackTrace", "6b2ad94a-7fa4-47a0-9c13-c3fcacae2840" }, 
		{ "System.Diagnostics.TextWriterTraceListener", "2ba57a90-87e0-4538-a498-251f3704d0a7" }, 
		{ "System.Diagnostics.Tools", "a33645dd-b113-46b2-80de-f78b63945373" }, 
		{ "System.Diagnostics.TraceSource", "33bd8bcb-a5b6-4ada-a876-07eee02f4832" }, 
		{ "System.Diagnostics.Tracing", "6de870e8-4ace-4561-bd20-4ef312bee9da" }, 
		{ "System.Drawing.Primitives", "ed562ae8-df2f-4e51-b78a-52d818274031" }, 
		{ "System.Drawing", "aa463a29-4ef1-4039-9c48-ac6605e085fd" }, 
		{ "System.Dynamic.Runtime", "87789c9c-61ba-452b-a37f-93853aae0d48" }, 
		{ "System.Formats.Asn1", "9edf82ea-9e75-4302-baf6-dde6aab1adfd" }, 
		{ "System.Formats.Tar", "089e7f17-a792-4b69-a046-53c4eea9126d" }, 
		{ "System.Globalization.Calendars", "93174d79-d95e-461b-b8d8-2fe09cf946e9" }, 
		{ "System.Globalization.Extensions", "ca9bb23a-7f03-44e1-af74-920917bca32c" }, 
		{ "System.Globalization", "1e0d9a38-bcc6-4dc1-b52d-7abc23c4c90b" }, 
		{ "System.IO.Compression.Brotli", "69ab3abc-9613-4e7f-bbb3-72ca792f0e5f" }, 
		{ "System.IO.Compression.FileSystem", "c31270c9-7c9f-487b-a2bd-4054b81f445b" }, 
		{ "System.IO.Compression.ZipFile", "6121f32a-e5f8-4ac7-95b0-456091bb1bfb" }, 
		{ "System.IO.Compression", "61afca6a-df9f-4029-8971-7aae4a4217ea" }, 
		{ "System.IO.FileSystem.AccessControl", "69418755-db9f-4656-b462-95ab83ed980c" }, 
		{ "System.IO.FileSystem.DriveInfo", "499ac707-f9b5-4b8c-a188-a80186a40893" }, 
		{ "System.IO.FileSystem.Primitives", "e3c98154-5160-4a7a-9cb5-008811148bad" }, 
		{ "System.IO.FileSystem.Watcher", "5ef43528-133a-4a7d-b0f7-94cf83702d8d" }, 
		{ "System.IO.FileSystem", "47077deb-7640-4a26-af7e-c1191477a6ad" }, 
		{ "System.IO.IsolatedStorage", "4545d3b0-566d-45de-ad68-f3219ff213ef" }, 
		{ "System.IO.MemoryMappedFiles", "2304a6e3-2355-42de-817d-4f15361f544d" }, 
		{ "System.IO.Pipes.AccessControl", "807300bf-b5c3-44b4-b1a1-0f3bcf77cd09" }, 
		{ "System.IO.Pipes", "902a3cbf-0a3a-49e1-bbfb-85b64cd60d71" }, 
		{ "System.IO.UnmanagedMemoryStream", "111bfac1-db0b-4120-bc67-cc2d6efe33fa" }, 
		{ "System.IO", "c5f927e5-7f38-4670-800a-19a7ec8d9e6e" }, 
		{ "System.Linq.Expressions", "a7232f76-f64b-402e-b321-d46362d731f1" }, 
		{ "System.Linq.Parallel", "60d6caef-33ba-4ff9-a948-90346930fbf0" }, 
		{ "System.Linq.Queryable", "f376203b-53bc-4bf9-ad80-824c19981016" }, 
		{ "System.Linq", "f4c411c0-bd99-429e-b7c6-ae1b87a2e6e6" }, 
		{ "System.Memory", "cc3436e5-d8fe-4b73-93da-d62136c1deac" }, 
		{ "System.Net.Http.Json", "a8036488-17af-4c3d-bf73-e2182167b497" }, 
		{ "System.Net.Http", "18f22da7-0c73-44dd-aded-7e33f911cd6c" }, 
		{ "System.Net.HttpListener", "8a5b1613-fd25-4964-93a7-d1f36cdb16c5" }, 
		{ "System.Net.Mail", "34647f6c-9878-406e-9610-3a5b5c2a1bd6" }, 
		{ "System.Net.NameResolution", "10b495b5-9293-4745-a719-883dbf6238e3" }, 
		{ "System.Net.NetworkInformation", "7a65f985-f13d-41e4-b389-41703a6fefb2" }, 
		{ "System.Net.Ping", "1afb4a8b-3736-4024-a6c4-0c5c2d2a2f20" }, 
		{ "System.Net.Primitives", "6f526732-830a-42d0-963f-bd3c686e8ea5" }, 
		{ "System.Net.Quic", "1e5f630d-9aac-4acd-a87f-db9416b50188" }, 
		{ "System.Net.Requests", "e23d0435-b02f-4a02-a80a-37dc5336b706" }, 
		{ "System.Net.Security", "50a26074-72fc-4995-a72d-334475d43914" }, 
		{ "System.Net.ServicePoint", "f7c87899-9c54-4043-bc43-10690afbac3c" }, 
		{ "System.Net.Sockets", "a544f8ff-1e8a-43da-a664-b1fc3b430dff" }, 
		{ "System.Net.WebClient", "bf763373-77fc-499f-9176-7bd2f9d0acae" }, 
		{ "System.Net.WebHeaderCollection", "04f97a3b-1523-43a7-978c-19ee69741ab2" }, 
		{ "System.Net.WebProxy", "3fd71e93-239d-4a2f-a5a1-246cf8393daf" }, 
		{ "System.Net.WebSockets.Client", "c91f4aa6-5e17-4dab-95ab-0cebb2f52be6" }, 
		{ "System.Net.WebSockets", "52b7cd54-5722-481d-a800-9d703a0d9d53" }, 
		{ "System.Net", "ac64326b-0c84-4112-9006-61072ce1ff9e" }, 
		{ "System.Numerics.Vectors", "ba38db08-c07a-4437-86ff-bb9cfc648be1" }, 
		{ "System.Numerics", "aa5f2b51-a074-4256-8403-cb1dedad29e2" }, 
		{ "System.ObjectModel", "01961070-619c-4327-91fe-c580231a6817" }, 
		{ "System.Private.CoreLib", "d71f1e15-106e-4dd1-a3ea-8dd4eaf38ef2" }, 
		{ "System.Private.DataContractSerialization", "78bbcfe5-e398-42cd-8fc1-3b5e2be30cf9" }, 
		{ "System.Private.Uri", "d7f4f4c0-d3e8-498f-a059-8a611d93d905" }, 
		{ "System.Private.Xml.Linq", "71844020-8047-41e5-8c0a-5517a9cba0e9" }, 
		{ "System.Private.Xml", "422fe479-2473-4fc5-aa97-ab0d4a1bd194" }, 
		{ "System.Reflection.DispatchProxy", "27f0b996-07f6-492c-93a1-429b0e759857" }, 
		{ "System.Reflection.Emit.ILGeneration", "6f725944-9f7e-4085-842e-d57aa32efdfc" }, 
		{ "System.Reflection.Emit.Lightweight", "d60060e8-9937-4dc5-b5e6-76c260a21b70" }, 
		{ "System.Reflection.Emit", "8ed07931-d639-4324-ba7a-ec9e4461096c" }, 
		{ "System.Reflection.Extensions", "e302efa1-d4f2-42ad-b1f0-a4558b6ad3d4" }, 
		{ "System.Reflection.Metadata", "b5c7d94c-b4e2-4090-85e4-d51d08ddd9fa" }, 
		{ "System.Reflection.Primitives", "49454fd5-d1f6-417c-bd4c-b3f947f974f6" }, 
		{ "System.Reflection.TypeExtensions", "c234aa53-f47d-45e5-9f1d-d0ccbcc0b77b" }, 
		{ "System.Reflection", "77430d9f-2018-43df-b0eb-8ce13dccaab2" }, 
		{ "System.Resources.Reader", "b2910f68-de9d-459c-a9eb-2b3fb51732a2" }, 
		{ "System.Resources.ResourceManager", "65b564de-813f-4c8f-b710-624cae2d1114" }, 
		{ "System.Resources.Writer", "2b0e0ae3-0023-48cd-9419-fb3e3e143135" }, 
		{ "System.Runtime.CompilerServices.Unsafe", "c30e7b36-06ba-459f-8275-9420b3632fb3" }, 
		{ "System.Runtime.CompilerServices.VisualC", "53c29dfb-e7c3-4bc4-ad9b-873bd81195ac" }, 
		{ "System.Runtime.Extensions", "45700973-3969-499b-8579-c8e242d0988c" }, 
		{ "System.Runtime.Handles", "ff70e20e-a929-4168-8f74-d42a3de8ebec" }, 
		{ "System.Runtime.InteropServices.JavaScript", "5310b64d-3699-4b5f-82bf-8f3b5f3c542c" }, 
		{ "System.Runtime.InteropServices.RuntimeInformation", "5b772c9d-a9ce-4a9a-9bc3-cb371a67ab9c" }, 
		{ "System.Runtime.InteropServices", "7d17a826-1eab-4d8a-a0b8-fc7b1edb9012" }, 
		{ "System.Runtime.Intrinsics", "e63d52af-fe5d-4e90-9d94-71f618543f44" }, 
		{ "System.Runtime.Loader", "ce0a6f1a-64aa-475e-af4c-fac00d414257" }, 
		{ "System.Runtime.Numerics", "5f350a05-7c3e-4873-833e-d756c12da2ce" }, 
		{ "System.Runtime.Serialization.Formatters", "b4ebf61a-bc24-4f41-a684-db69880cc98c" }, 
		{ "System.Runtime.Serialization.Json", "a31f5e1f-c350-44d8-ba28-818bff520c20" }, 
		{ "System.Runtime.Serialization.Primitives", "48bee519-231d-4afd-9cb5-e4b82897a284" }, 
		{ "System.Runtime.Serialization.Xml", "811b570c-83b3-4b10-81e2-feeba2d3631c" }, 
		{ "System.Runtime.Serialization", "671c1193-2014-4bb2-a60c-c967025b3dec" }, 
		{ "System.Runtime", "833a6f08-9ec0-4531-a653-a0854a743e7b" }, 
		{ "System.Security.AccessControl", "5d230a7d-612a-492b-bf56-30d0a33a5c30" }, 
		{ "System.Security.Claims", "5da815ad-714e-4dff-add6-770f00a3561a" }, 
		{ "System.Security.Cryptography.Algorithms", "f902a1a7-d340-468a-8cb9-b55eeac64fc6" }, 
		{ "System.Security.Cryptography.Cng", "fea3fc89-6d0d-480b-a1ef-6c13f328f27f" }, 
		{ "System.Security.Cryptography.Csp", "f0e0850d-5f8e-44aa-a66b-6239b855f05b" }, 
		{ "System.Security.Cryptography.Encoding", "a0def143-56e0-4112-a50b-871a2d9acd0f" }, 
		{ "System.Security.Cryptography.OpenSsl", "0ca10c21-dd82-40ab-95dc-38a5144e68e0" }, 
		{ "System.Security.Cryptography.Primitives", "ec6ef87a-1a04-448a-adb0-da892d36a30a" }, 
		{ "System.Security.Cryptography.X509Certificates", "e8cc274d-6d6a-41e9-acc8-cb2d798bcf56" }, 
		{ "System.Security.Cryptography", "cf0b3fdd-a864-4ff9-8d42-0c8da8e00098" }, 
		{ "System.Security.Principal.Windows", "7011d527-3fc8-4555-a4a0-19ddebb09f23" }, 
		{ "System.Security.Principal", "ca3aa702-aabe-4568-91a6-46513c27158a" }, 
		{ "System.Security.SecureString", "17ea390e-efb1-44c4-934a-4c00f0b18df4" }, 
		{ "System.Security", "ed314127-756e-4b1f-b976-539e0792736c" }, 
		{ "System.ServiceModel.Web", "069a3a29-0abc-4720-9305-3ec34cf59c7a" }, 
		{ "System.ServiceProcess", "2c8600f2-da2d-41f5-8470-0b169322d70b" }, 
		{ "System.Text.Encoding.CodePages", "00f84f44-1c67-4111-897c-80670391185f" }, 
		{ "System.Text.Encoding.Extensions", "3df2343c-6679-434b-9ffb-9460408ec672" }, 
		{ "System.Text.Encoding", "43f2a091-4b31-4838-ac98-de44935b3d86" }, 
		{ "System.Text.Encodings.Web", "701041a1-95ab-422b-8d60-18f310b6fb15" }, 
		{ "System.Text.Json", "c4645987-bb51-4311-8cbd-bf5348293c7a" }, 
		{ "System.Text.RegularExpressions", "358caf3a-0f76-4847-8219-0b11863ef1d8" }, 
		{ "System.Threading.Channels", "bf2e24da-8565-44d8-89f2-23e9b05c7512" }, 
		{ "System.Threading.Overlapped", "f6c2be1a-9b6e-492b-91ae-44f444826784" }, 
		{ "System.Threading.Tasks.Dataflow", "c5b6fdd8-7573-45c4-83e4-e10d39f9fdfc" }, 
		{ "System.Threading.Tasks.Extensions", "f508df98-c3e8-46e9-ae18-d01ea2694ead" }, 
		{ "System.Threading.Tasks.Parallel", "34d1603b-acde-4d9b-8d52-d4e2344cba45" }, 
		{ "System.Threading.Tasks", "72a84985-13fc-4eef-8f19-16904e6fe153" }, 
		{ "System.Threading.Thread", "7ba9095a-14f4-44bf-a318-7ddb62b70bab" }, 
		{ "System.Threading.ThreadPool", "995383ed-27c7-497e-926a-fb0d1a6a8509" }, 
		{ "System.Threading.Timer", "b0b5ce09-05aa-4f9e-9f59-c9df26f1cddb" }, 
		{ "System.Threading", "732ed819-a8a6-4902-9cf8-3e88b3d0673b" }, 
		{ "System.Transactions.Local", "20fb375b-0cc1-4430-930d-19901d11ef3b" }, 
		{ "System.Transactions", "245a2ddf-bd92-4417-b3e1-821871acc853" }, 
		{ "System.ValueTuple", "0383134e-2c42-487f-b33a-254a05c98e1b" }, 
		{ "System.Web.HttpUtility", "2da0639a-edbb-4760-963a-38677d020cca" }, 
		{ "System.Web", "7488cbdd-7c13-4ad3-b9b9-d27d3c4715bd" }, 
		{ "System.Windows", "69bec9fb-1162-47e9-966d-060a4cd9d8ca" }, 
		{ "System.Xml.Linq", "f61d8955-0c8c-47ba-8db5-b41b5467a9db" }, 
		{ "System.Xml.ReaderWriter", "0c525e19-9ab6-491f-9111-19c95a7424ae" }, 
		{ "System.Xml.Serialization", "aee8d5f1-4aa9-47f5-b1df-08a619935633" }, 
		{ "System.Xml.XDocument", "dc3f029b-4b51-46fe-9074-7e23b461876a" }, 
		{ "System.Xml.XPath.XDocument", "391dcf1f-105f-45e7-810e-7cf694b334c9" }, 
		{ "System.Xml.XPath", "0b283644-e0d5-4b67-84ae-cdbbbcaf9136" }, 
		{ "System.Xml.XmlDocument", "24a1973d-71a3-4595-9ea7-81b569ae41a0" }, 
		{ "System.Xml.XmlSerializer", "2c9f5d8d-826b-47a5-b598-54a35a18e019" }, 
		{ "System.Xml", "a10b20c9-9dd4-4654-80d0-a473f86edd46" }, 
		{ "System", "1dff331a-0a6d-4cba-b7b2-c79ed8b6fd01" }, 
		{ "WindowsBase", "0942e9b8-81e4-4b3b-811d-aef9e7702568" }, 
		{ "mscorlib", "eda3a22b-1de9-4ad7-a540-110c59aca24c" }, 
		{ "netstandard", "27b1164c-4d58-4361-b16e-1c8c90031886" }, 
		{ "Microsoft.macOS", "8c776f95-fea6-4864-bba6-f3508f4d0ae5" }
	};

	static const MTFullTokenReference __xamarin_token_references [] = {
		{ /* #1 = 0x1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011A6 /* Foundation.NSObject */ },
		{ /* #2 = 0x3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DAE /* AppKit.INSApplicationDelegate */ },
		{ /* #3 = 0x5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DB0 /* AppKit.NSApplicationDelegateWrapper */ },
		{ /* #4 = 0x7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DB1 /* AppKit.NSApplicationDelegate */ },
		{ /* #5 = 0x9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013804 /* System.Void AppKit.NSApplicationDelegate::.ctor() */ },
		{ /* #6 = 0xB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200120B /* Foundation.INSCoding */ },
		{ /* #7 = 0xD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200120C /* Foundation.NSCodingWrapper */ },
		{ /* #8 = 0xF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002101 /* AppKit.INSTouchBarProvider */ },
		{ /* #9 = 0x11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002102 /* AppKit.NSTouchBarProviderWrapper */ },
		{ /* #10 = 0x13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200210F /* AppKit.INSUserActivityRestoring */ },
		{ /* #11 = 0x15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002110 /* AppKit.NSUserActivityRestoringWrapper */ },
		{ /* #12 = 0x17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F7D /* AppKit.NSResponder */ },
		{ /* #13 = 0x19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E7B /* AppKit.INSEditor */ },
		{ /* #14 = 0x1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E7C /* AppKit.NSEditorWrapper */ },
		{ /* #15 = 0x1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001240 /* Foundation.INSExtensionRequestHandling */ },
		{ /* #16 = 0x1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001241 /* Foundation.NSExtensionRequestHandlingWrapper */ },
		{ /* #17 = 0x21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FC1 /* AppKit.INSSeguePerforming */ },
		{ /* #18 = 0x23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FC3 /* AppKit.NSSeguePerformingWrapper */ },
		{ /* #19 = 0x25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002115 /* AppKit.INSUserInterfaceItemIdentification */ },
		{ /* #20 = 0x27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002116 /* AppKit.NSUserInterfaceItemIdentificationWrapper */ },
		{ /* #21 = 0x29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002120 /* AppKit.NSViewController */ },
		{ /* #22 = 0x2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000008 /* UserNotificationsUI.IUNNotificationContentExtension */ },
		{ /* #23 = 0x2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200000A /* UserNotificationsUI.UNNotificationContentExtensionWrapper */ },
		{ /* #24 = 0x2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200121B /* Foundation.INSCopying */ },
		{ /* #25 = 0x31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200121C /* Foundation.NSCopyingWrapper */ },
		{ /* #26 = 0x33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001301 /* Foundation.INSSecureCoding */ },
		{ /* #27 = 0x35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001302 /* Foundation.NSSecureCodingWrapper */ },
		{ /* #28 = 0x37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000011 /* UniformTypeIdentifiers.UTType */ },
		{ /* #29 = 0x39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000014 /* ThreadNetwork.THCredentials */ },
		{ /* #30 = 0x3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000015 /* Speech.SFAcousticFeature */ },
		{ /* #31 = 0x3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000018 /* Speech.SFSpeechRecognitionRequest */ },
		{ /* #32 = 0x3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000016 /* Speech.SFSpeechAudioBufferRecognitionRequest */ },
		{ /* #33 = 0x41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000017 /* Speech.SFSpeechRecognitionMetadata */ },
		{ /* #34 = 0x43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000019 /* Speech.SFSpeechRecognitionResult */ },
		{ /* #35 = 0x45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200001A /* Speech.SFSpeechRecognitionTask */ },
		{ /* #36 = 0x47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200001B /* Speech.ISFSpeechRecognitionTaskDelegate */ },
		{ /* #37 = 0x49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200001D /* Speech.SFSpeechRecognitionTaskDelegateWrapper */ },
		{ /* #38 = 0x4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200001E /* Speech.SFSpeechRecognitionTaskDelegate */ },
		{ /* #39 = 0x4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600013D /* System.Void Speech.SFSpeechRecognitionTaskDelegate::.ctor() */ },
		{ /* #40 = 0x4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000021 /* Speech.SFSpeechRecognizer */ },
		{ /* #41 = 0x51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000023 /* Speech.ISFSpeechRecognizerDelegate */ },
		{ /* #42 = 0x53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000025 /* Speech.SFSpeechRecognizerDelegateWrapper */ },
		{ /* #43 = 0x55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000026 /* Speech.SFSpeechRecognizerDelegate */ },
		{ /* #44 = 0x57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600015E /* System.Void Speech.SFSpeechRecognizerDelegate::.ctor() */ },
		{ /* #45 = 0x59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000027 /* Speech.SFSpeechUrlRecognitionRequest */ },
		{ /* #46 = 0x5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000028 /* Speech.SFTranscription */ },
		{ /* #47 = 0x5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000029 /* Speech.SFTranscriptionSegment */ },
		{ /* #48 = 0x5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200002A /* Speech.SFVoiceAnalytics */ },
		{ /* #49 = 0x61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200002C /* SoundAnalysis.SNAudioStreamAnalyzer */ },
		{ /* #50 = 0x63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200002D /* SoundAnalysis.SNClassification */ },
		{ /* #51 = 0x65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000036 /* SoundAnalysis.ISNResult */ },
		{ /* #52 = 0x67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000037 /* SoundAnalysis.SNResultWrapper */ },
		{ /* #53 = 0x69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200002E /* SoundAnalysis.SNClassificationResult */ },
		{ /* #54 = 0x6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000034 /* SoundAnalysis.ISNRequest */ },
		{ /* #55 = 0x6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000035 /* SoundAnalysis.SNRequestWrapper */ },
		{ /* #56 = 0x6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000031 /* SoundAnalysis.SNClassifySoundRequest */ },
		{ /* #57 = 0x71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000038 /* SoundAnalysis.ISNResultsObserving */ },
		{ /* #58 = 0x73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200003A /* SoundAnalysis.SNResultsObservingWrapper */ },
		{ /* #59 = 0x75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200003E /* ShazamKit.SHCatalog */ },
		{ /* #60 = 0x77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200003F /* ShazamKit.SHCustomCatalog */ },
		{ /* #61 = 0x79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000042 /* ShazamKit.SHMatch */ },
		{ /* #62 = 0x7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000044 /* ShazamKit.SHMediaItem */ },
		{ /* #63 = 0x7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000043 /* ShazamKit.SHMatchedMediaItem */ },
		{ /* #64 = 0x7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000048 /* ShazamKit.SHRange */ },
		{ /* #65 = 0x81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000049 /* ShazamKit.SHSession */ },
		{ /* #66 = 0x83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200004A /* ShazamKit.ISHSessionDelegate */ },
		{ /* #67 = 0x85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200004C /* ShazamKit.SHSessionDelegateWrapper */ },
		{ /* #68 = 0x87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200004D /* ShazamKit.SHSessionDelegate */ },
		{ /* #69 = 0x89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6000247 /* System.Void ShazamKit.SHSessionDelegate::.ctor() */ },
		{ /* #70 = 0x8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200004E /* ShazamKit.SHSignature */ },
		{ /* #71 = 0x8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CF9 /* AppKit.INSAccessibility */ },
		{ /* #72 = 0x8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D41 /* AppKit.NSAccessibilityWrapper */ },
		{ /* #73 = 0x91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D59 /* AppKit.INSAccessibilityElementProtocol */ },
		{ /* #74 = 0x93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D5B /* AppKit.NSAccessibilityElementProtocolWrapper */ },
		{ /* #75 = 0x95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D9E /* AppKit.INSAppearanceCustomization */ },
		{ /* #76 = 0x97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D9F /* AppKit.NSAppearanceCustomizationWrapper */ },
		{ /* #77 = 0x99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E66 /* AppKit.INSDraggingDestination */ },
		{ /* #78 = 0x9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E68 /* AppKit.NSDraggingDestinationWrapper */ },
		{ /* #79 = 0x9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D3A /* AppKit.NSView */ },
		{ /* #80 = 0x9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000050 /* SharedWithYou.SWAttributionView */ },
		{ /* #81 = 0xA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200005A /* SharedWithYou.SWHighlight */ },
		{ /* #82 = 0xA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000054 /* SharedWithYou.SWCollaborationHighlight */ },
		{ /* #83 = 0xA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000055 /* SharedWithYou.SWCollaborationView */ },
		{ /* #84 = 0xA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000056 /* SharedWithYou.ISWCollaborationViewDelegate */ },
		{ /* #85 = 0xA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000058 /* SharedWithYou.SWCollaborationViewDelegateWrapper */ },
		{ /* #86 = 0xAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000059 /* SharedWithYou.SWCollaborationViewDelegate */ },
		{ /* #87 = 0xAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60002A9 /* System.Void SharedWithYou.SWCollaborationViewDelegate::.ctor() */ },
		{ /* #88 = 0xAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200005C /* SharedWithYou.ISWHighlightCenterDelegate */ },
		{ /* #89 = 0xB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200005D /* SharedWithYou.SWHighlightCenterDelegateWrapper */ },
		{ /* #90 = 0xB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200005E /* SharedWithYou.SWHighlightCenterDelegate */ },
		{ /* #91 = 0xB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60002D2 /* System.Void SharedWithYou.SWHighlightCenterDelegate::.ctor() */ },
		{ /* #92 = 0xB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000062 /* SharedWithYou.ISWHighlightEvent */ },
		{ /* #93 = 0xB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000063 /* SharedWithYou.SWHighlightEventWrapper */ },
		{ /* #94 = 0xBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000060 /* SharedWithYou.SWHighlightChangeEvent */ },
		{ /* #95 = 0xBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000064 /* SharedWithYou.SWHighlightMembershipEvent */ },
		{ /* #96 = 0xBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000066 /* SharedWithYou.SWHighlightMentionEvent */ },
		{ /* #97 = 0xC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000067 /* SharedWithYou.SWHighlightPersistenceEvent */ },
		{ /* #98 = 0xC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000069 /* SharedWithYou.SWRemoveParticipantAlert */ },
		{ /* #99 = 0xC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200006A /* ScreenTime.STScreenTimeConfiguration */ },
		{ /* #100 = 0xC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200006B /* ScreenTime.STScreenTimeConfigurationObserver */ },
		{ /* #101 = 0xC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200006C /* ScreenTime.STWebHistory */ },
		{ /* #102 = 0xCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200006D /* ScreenTime.STWebpageController */ },
		{ /* #103 = 0xCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200006F /* SafariServices.SFContentBlockerState */ },
		{ /* #104 = 0xCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000078 /* SafariServices.ISFSafariExtensionHandling */ },
		{ /* #105 = 0xD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200007A /* SafariServices.SFSafariExtensionHandlingWrapper */ },
		{ /* #106 = 0xD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200007B /* SafariServices.SFSafariExtensionViewController */ },
		{ /* #107 = 0xD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200007D /* SafariServices.SFSafariPageProperties */ },
		{ /* #108 = 0xD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200007F /* SafariServices.SFSafariToolbarItem */ },
		{ /* #109 = 0xD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000081 /* SafariServices.SFUniversalLink */ },
		{ /* #110 = 0xDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000084 /* ReplayKit.RPBroadcastActivityController */ },
		{ /* #111 = 0xDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000085 /* ReplayKit.IRPBroadcastActivityControllerDelegate */ },
		{ /* #112 = 0xDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000086 /* ReplayKit.RPBroadcastActivityControllerDelegateWrapper */ },
		{ /* #113 = 0xE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000087 /* ReplayKit.RPBroadcastActivityControllerDelegate */ },
		{ /* #114 = 0xE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60003F0 /* System.Void ReplayKit.RPBroadcastActivityControllerDelegate::.ctor() */ },
		{ /* #115 = 0xE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000089 /* ReplayKit.IRPBroadcastControllerDelegate */ },
		{ /* #116 = 0xE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200008B /* ReplayKit.RPBroadcastControllerDelegateWrapper */ },
		{ /* #117 = 0xE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200008C /* ReplayKit.RPBroadcastControllerDelegate */ },
		{ /* #118 = 0xEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600040A /* System.Void ReplayKit.RPBroadcastControllerDelegate::.ctor() */ },
		{ /* #119 = 0xED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200008D /* ReplayKit.RPBroadcastHandler */ },
		{ /* #120 = 0xEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200008E /* ReplayKit.RPBroadcastSampleHandler */ },
		{ /* #121 = 0xF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000090 /* ReplayKit.RPPreviewViewController */ },
		{ /* #122 = 0xF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000091 /* ReplayKit.IRPPreviewViewControllerDelegate */ },
		{ /* #123 = 0xF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000093 /* ReplayKit.RPPreviewViewControllerDelegateWrapper */ },
		{ /* #124 = 0xF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000094 /* ReplayKit.RPPreviewViewControllerDelegate */ },
		{ /* #125 = 0xF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6000432 /* System.Void ReplayKit.RPPreviewViewControllerDelegate::.ctor() */ },
		{ /* #126 = 0xFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000099 /* ReplayKit.IRPScreenRecorderDelegate */ },
		{ /* #127 = 0xFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200009B /* ReplayKit.RPScreenRecorderDelegateWrapper */ },
		{ /* #128 = 0xFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200009C /* ReplayKit.RPScreenRecorderDelegate */ },
		{ /* #129 = 0x101 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600045D /* System.Void ReplayKit.RPScreenRecorderDelegate::.ctor() */ },
		{ /* #130 = 0x103 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200009E /* QuickLookThumbnailing.QLFileThumbnailRequest */ },
		{ /* #131 = 0x105 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000A1 /* QuickLookThumbnailing.QLThumbnailGenerationRequest */ },
		{ /* #132 = 0x107 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000A5 /* QuickLookThumbnailing.QLThumbnailProvider */ },
		{ /* #133 = 0x109 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000A6 /* QuickLookThumbnailing.QLThumbnailReply */ },
		{ /* #134 = 0x10B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000A7 /* QuickLookThumbnailing.QLThumbnailRepresentation */ },
		{ /* #135 = 0x10D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000A9 /* QuartzComposer.QCComposition */ },
		{ /* #136 = 0x10F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A73 /* CoreAnimation.ICAMediaTiming */ },
		{ /* #137 = 0x111 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A74 /* CoreAnimation.CAMediaTimingWrapper */ },
		{ /* #138 = 0x113 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A52 /* CoreAnimation.CALayer */ },
		{ /* #139 = 0x115 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A79 /* CoreAnimation.CAOpenGLLayer */ },
		{ /* #140 = 0x117 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000AA /* QuartzComposer.QCCompositionLayer */ },
		{ /* #141 = 0x119 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000AB /* QuartzComposer.QCCompositionRepository */ },
		{ /* #142 = 0x11B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000AC /* PushKit.PKPushCredentials */ },
		{ /* #143 = 0x11D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000AD /* PushKit.PKPushPayload */ },
		{ /* #144 = 0x11F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000AE /* PushKit.PKPushRegistry */ },
		{ /* #145 = 0x121 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000AF /* PushKit.IPKPushRegistryDelegate */ },
		{ /* #146 = 0x123 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000B1 /* PushKit.PKPushRegistryDelegateWrapper */ },
		{ /* #147 = 0x125 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000B2 /* PushKit.PKPushRegistryDelegate */ },
		{ /* #148 = 0x127 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600050A /* System.Void PushKit.PKPushRegistryDelegate::.ctor() */ },
		{ /* #149 = 0x129 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000B4 /* PhotosUI.IPHContentEditingController */ },
		{ /* #150 = 0x12B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000B5 /* PhotosUI.PHContentEditingControllerWrapper */ },
		{ /* #151 = 0x12D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000B6 /* PhotosUI.PHLivePhotoView */ },
		{ /* #152 = 0x12F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000B8 /* PhotosUI.IPHLivePhotoViewDelegate */ },
		{ /* #153 = 0x131 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000BA /* PhotosUI.PHLivePhotoViewDelegateWrapper */ },
		{ /* #154 = 0x133 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000BB /* PhotosUI.PHLivePhotoViewDelegate */ },
		{ /* #155 = 0x135 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6000538 /* System.Void PhotosUI.PHLivePhotoViewDelegate::.ctor() */ },
		{ /* #156 = 0x137 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000BD /* PhotosUI.PHPickerConfiguration */ },
		{ /* #157 = 0x139 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000C0 /* PhotosUI.PHPickerFilter */ },
		{ /* #158 = 0x13B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000C1 /* PhotosUI.PHPickerResult */ },
		{ /* #159 = 0x13D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000C2 /* PhotosUI.PHPickerViewController */ },
		{ /* #160 = 0x13F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000C3 /* PhotosUI.IPHPickerViewControllerDelegate */ },
		{ /* #161 = 0x141 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000C4 /* PhotosUI.PHPickerViewControllerDelegateWrapper */ },
		{ /* #162 = 0x143 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000C5 /* PhotosUI.PHPickerViewControllerDelegate */ },
		{ /* #163 = 0x145 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600057A /* System.Void PhotosUI.PHPickerViewControllerDelegate::.ctor() */ },
		{ /* #164 = 0x147 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000C9 /* PhotosUI.PHProjectElement */ },
		{ /* #165 = 0x149 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000C6 /* PhotosUI.PHProjectAssetElement */ },
		{ /* #166 = 0x14B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200123E /* Foundation.NSExtensionContext */ },
		{ /* #167 = 0x14D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000CA /* PhotosUI.PHProjectExtensionContext */ },
		{ /* #168 = 0x14F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000CB /* PhotosUI.IPHProjectExtensionController */ },
		{ /* #169 = 0x151 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000CD /* PhotosUI.PHProjectExtensionControllerWrapper */ },
		{ /* #170 = 0x153 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000CE /* PhotosUI.PHProjectInfo */ },
		{ /* #171 = 0x155 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000CF /* PhotosUI.PHProjectJournalEntryElement */ },
		{ /* #172 = 0x157 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000D0 /* PhotosUI.PHProjectMapElement */ },
		{ /* #173 = 0x159 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000D1 /* PhotosUI.PHProjectRegionOfInterest */ },
		{ /* #174 = 0x15B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000D2 /* PhotosUI.PHProjectSection */ },
		{ /* #175 = 0x15D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000D3 /* PhotosUI.PHProjectSectionContent */ },
		{ /* #176 = 0x15F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000D4 /* PhotosUI.PHProjectTextElement */ },
		{ /* #177 = 0x161 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000D6 /* PhotosUI.PHProjectTypeDescription */ },
		{ /* #178 = 0x163 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000D7 /* PhotosUI.IPHProjectTypeDescriptionDataSource */ },
		{ /* #179 = 0x165 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000D9 /* PhotosUI.PHProjectTypeDescriptionDataSourceWrapper */ },
		{ /* #180 = 0x167 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000DA /* PhotosUI.PHProjectTypeDescriptionDataSource */ },
		{ /* #181 = 0x169 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6000615 /* System.Void PhotosUI.PHProjectTypeDescriptionDataSource::.ctor() */ },
		{ /* #182 = 0x16B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000DB /* PhotosUI.IPHProjectTypeDescriptionInvalidator */ },
		{ /* #183 = 0x16D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000DC /* PhotosUI.PHProjectTypeDescriptionInvalidatorWrapper */ },
		{ /* #184 = 0x16F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000ED /* Phase.PhaseDefinition */ },
		{ /* #185 = 0x171 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000107 /* Phase.PhaseMixerDefinition */ },
		{ /* #186 = 0x173 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000DD /* Phase.PhaseAmbientMixerDefinition */ },
		{ /* #187 = 0x175 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000DE /* Phase.PhaseAsset */ },
		{ /* #188 = 0x177 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200011F /* Phase.PhaseSoundEventNodeDefinition */ },
		{ /* #189 = 0x179 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000E3 /* Phase.PhaseBlendNodeDefinition */ },
		{ /* #190 = 0x17B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000EE /* Phase.PhaseDirectivityModelParameters */ },
		{ /* #191 = 0x17D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000E5 /* Phase.PhaseCardioidDirectivityModelParameters */ },
		{ /* #192 = 0x17F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000E6 /* Phase.PhaseCardioidDirectivityModelSubbandParameters */ },
		{ /* #193 = 0x181 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000E7 /* Phase.PhaseChannelMixerDefinition */ },
		{ /* #194 = 0x183 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000E8 /* Phase.PhaseConeDirectivityModelParameters */ },
		{ /* #195 = 0x185 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000E9 /* Phase.PhaseConeDirectivityModelSubbandParameters */ },
		{ /* #196 = 0x187 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000EA /* Phase.PhaseContainerNodeDefinition */ },
		{ /* #197 = 0x189 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000EF /* Phase.PhaseDistanceModelFadeOutParameters */ },
		{ /* #198 = 0x18B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000F0 /* Phase.PhaseDistanceModelParameters */ },
		{ /* #199 = 0x18D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000F1 /* Phase.PhaseDucker */ },
		{ /* #200 = 0x18F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000F2 /* Phase.PhaseEngine */ },
		{ /* #201 = 0x191 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000F3 /* Phase.PhaseEnvelope */ },
		{ /* #202 = 0x193 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000F4 /* Phase.PhaseEnvelopeDistanceModelParameters */ },
		{ /* #203 = 0x195 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000F5 /* Phase.PhaseEnvelopeSegment */ },
		{ /* #204 = 0x197 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000F8 /* Phase.PhaseGeneratorNodeDefinition */ },
		{ /* #205 = 0x199 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000F9 /* Phase.PhaseGeometricSpreadingDistanceModelParameters */ },
		{ /* #206 = 0x19B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000FA /* Phase.PhaseGlobalMetaParameterAsset */ },
		{ /* #207 = 0x19D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000FB /* Phase.PhaseGroup */ },
		{ /* #208 = 0x19F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000FC /* Phase.PhaseGroupPreset */ },
		{ /* #209 = 0x1A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000FD /* Phase.PhaseGroupPresetSetting */ },
		{ /* #210 = 0x1A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200010D /* Phase.PhaseObject */ },
		{ /* #211 = 0x1A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000FE /* Phase.PhaseListener */ },
		{ /* #212 = 0x1A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000105 /* Phase.PhaseMetaParameterDefinition */ },
		{ /* #213 = 0x1A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200010B /* Phase.PhaseNumberMetaParameterDefinition */ },
		{ /* #214 = 0x1AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000FF /* Phase.PhaseMappedMetaParameterDefinition */ },
		{ /* #215 = 0x1AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000100 /* Phase.PhaseMaterial */ },
		{ /* #216 = 0x1AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000102 /* Phase.PhaseMedium */ },
		{ /* #217 = 0x1B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000104 /* Phase.PhaseMetaParameter */ },
		{ /* #218 = 0x1B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000106 /* Phase.PhaseMixer */ },
		{ /* #219 = 0x1B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000108 /* Phase.PhaseMixerParameters */ },
		{ /* #220 = 0x1B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200010A /* Phase.PhaseNumberMetaParameter */ },
		{ /* #221 = 0x1B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200010C /* Phase.PhaseNumericPair */ },
		{ /* #222 = 0x1BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200010E /* Phase.PhaseOccluder */ },
		{ /* #223 = 0x1BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000113 /* Phase.PhasePushStreamNodeDefinition */ },
		{ /* #224 = 0x1BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000114 /* Phase.PhaseRandomNodeDefinition */ },
		{ /* #225 = 0x1C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000117 /* Phase.PhaseSamplerNodeDefinition */ },
		{ /* #226 = 0x1C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000118 /* Phase.PhaseShape */ },
		{ /* #227 = 0x1C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000119 /* Phase.PhaseShapeElement */ },
		{ /* #228 = 0x1C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200011A /* Phase.PhaseSoundAsset */ },
		{ /* #229 = 0x1C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200011E /* Phase.PhaseSoundEventNodeAsset */ },
		{ /* #230 = 0x1CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000124 /* Phase.PhaseSource */ },
		{ /* #231 = 0x1CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000128 /* Phase.PhaseSpatialMixerDefinition */ },
		{ /* #232 = 0x1CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000129 /* Phase.PhaseSpatialPipeline */ },
		{ /* #233 = 0x1D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200012A /* Phase.PhaseSpatialPipelineEntry */ },
		{ /* #234 = 0x1D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200012C /* Phase.PhaseStringMetaParameter */ },
		{ /* #235 = 0x1D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200012D /* Phase.PhaseStringMetaParameterDefinition */ },
		{ /* #236 = 0x1D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200012E /* Phase.PhaseSwitchNodeDefinition */ },
		{ /* #237 = 0x1D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000130 /* PencilKit.PKDrawing */ },
		{ /* #238 = 0x1DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200013C /* PencilKit.PKTool */ },
		{ /* #239 = 0x1DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000131 /* PencilKit.PKEraserTool */ },
		{ /* #240 = 0x1DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000133 /* PencilKit.PKFloatRange */ },
		{ /* #241 = 0x1E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000134 /* PencilKit.PKInk */ },
		{ /* #242 = 0x1E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000135 /* PencilKit.PKInkingTool */ },
		{ /* #243 = 0x1E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000138 /* PencilKit.PKLassoTool */ },
		{ /* #244 = 0x1E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000139 /* PencilKit.PKStroke */ },
		{ /* #245 = 0x1E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200013A /* PencilKit.PKStrokePath */ },
		{ /* #246 = 0x1EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200013B /* PencilKit.PKStrokePoint */ },
		{ /* #247 = 0x1ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200013E /* OSLog.OSLogEntry */ },
		{ /* #248 = 0x1EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000141 /* OSLog.IOSLogEntryFromProcess */ },
		{ /* #249 = 0x1F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000142 /* OSLog.OSLogEntryFromProcessWrapper */ },
		{ /* #250 = 0x1F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200013F /* OSLog.OSLogEntryActivity */ },
		{ /* #251 = 0x1F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000140 /* OSLog.OSLogEntryBoundary */ },
		{ /* #252 = 0x1F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000148 /* OSLog.IOSLogEntryWithPayload */ },
		{ /* #253 = 0x1F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000149 /* OSLog.OSLogEntryWithPayloadWrapper */ },
		{ /* #254 = 0x1FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000143 /* OSLog.OSLogEntryLog */ },
		{ /* #255 = 0x1FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000145 /* OSLog.OSLogEntrySignpost */ },
		{ /* #256 = 0x1FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200123B /* Foundation.NSEnumerator */ },
		{ /* #257 = 0x201 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200014A /* OSLog.OSLogEnumerator */ },
		{ /* #258 = 0x203 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200014C /* OSLog.OSLogMessageComponent */ },
		{ /* #259 = 0x205 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200014E /* OSLog.OSLogPosition */ },
		{ /* #260 = 0x207 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200014F /* OSLog.OSLogStore */ },
		{ /* #261 = 0x209 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000152 /* NotificationCenter.NCWidgetController */ },
		{ /* #262 = 0x20B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000156 /* NotificationCenter.INCWidgetListViewDelegate */ },
		{ /* #263 = 0x20D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000158 /* NotificationCenter.NCWidgetListViewDelegateWrapper */ },
		{ /* #264 = 0x20F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000159 /* NotificationCenter.NCWidgetListViewDelegate */ },
		{ /* #265 = 0x211 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600094F /* System.Void NotificationCenter.NCWidgetListViewDelegate::.ctor() */ },
		{ /* #266 = 0x213 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200015A /* NotificationCenter.INCWidgetProviding */ },
		{ /* #267 = 0x215 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200015C /* NotificationCenter.NCWidgetProvidingWrapper */ },
		{ /* #268 = 0x217 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200015D /* NotificationCenter.NCWidgetProviding */ },
		{ /* #269 = 0x219 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600095E /* System.Void NotificationCenter.NCWidgetProviding::.ctor() */ },
		{ /* #270 = 0x21B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000161 /* NotificationCenter.INCWidgetSearchViewDelegate */ },
		{ /* #271 = 0x21D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000162 /* NotificationCenter.NCWidgetSearchViewDelegateWrapper */ },
		{ /* #272 = 0x21F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000163 /* NotificationCenter.NCWidgetSearchViewDelegate */ },
		{ /* #273 = 0x221 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600098E /* System.Void NotificationCenter.NCWidgetSearchViewDelegate::.ctor() */ },
		{ /* #274 = 0x223 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000168 /* MediaLibrary.MLMediaGroup */ },
		{ /* #275 = 0x225 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000169 /* MediaLibrary.MLMediaLibrary */ },
		{ /* #276 = 0x227 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200016A /* MediaLibrary.MLMediaObject */ },
		{ /* #277 = 0x229 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200016B /* MediaLibrary.MLMediaSource */ },
		{ /* #278 = 0x22B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200016E /* MailKit.MEAddressAnnotation */ },
		{ /* #279 = 0x22D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200016F /* MailKit.MEComposeContext */ },
		{ /* #280 = 0x22F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000170 /* MailKit.MEComposeSession */ },
		{ /* #281 = 0x231 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000173 /* MailKit.IMEComposeSessionHandler */ },
		{ /* #282 = 0x233 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000175 /* MailKit.MEComposeSessionHandlerWrapper */ },
		{ /* #283 = 0x235 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000177 /* MailKit.IMEContentBlocker */ },
		{ /* #284 = 0x237 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000178 /* MailKit.MEContentBlockerWrapper */ },
		{ /* #285 = 0x239 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000179 /* MailKit.MEDecodedMessage */ },
		{ /* #286 = 0x23B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200017A /* MailKit.MEDecodedMessageBanner */ },
		{ /* #287 = 0x23D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200017B /* MailKit.MEEmailAddress */ },
		{ /* #288 = 0x23F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200017C /* MailKit.MEEncodedOutgoingMessage */ },
		{ /* #289 = 0x241 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200017D /* MailKit.IMEExtension */ },
		{ /* #290 = 0x243 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200017F /* MailKit.MEExtensionWrapper */ },
		{ /* #291 = 0x245 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000180 /* MailKit.MEExtensionManager */ },
		{ /* #292 = 0x247 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000181 /* MailKit.MEExtensionViewController */ },
		{ /* #293 = 0x249 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000182 /* MailKit.MEMessage */ },
		{ /* #294 = 0x24B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000183 /* MailKit.MEMessageAction */ },
		{ /* #295 = 0x24D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000184 /* MailKit.MEMessageActionDecision */ },
		{ /* #296 = 0x24F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000186 /* MailKit.IMEMessageActionHandler */ },
		{ /* #297 = 0x251 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000188 /* MailKit.MEMessageActionHandlerWrapper */ },
		{ /* #298 = 0x253 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200018A /* MailKit.IMEMessageDecoder */ },
		{ /* #299 = 0x255 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200018B /* MailKit.MEMessageDecoderWrapper */ },
		{ /* #300 = 0x257 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200018C /* MailKit.IMEMessageEncoder */ },
		{ /* #301 = 0x259 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200018D /* MailKit.MEMessageEncoderWrapper */ },
		{ /* #302 = 0x25B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200018E /* MailKit.MEMessageEncodingResult */ },
		{ /* #303 = 0x25D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000192 /* MailKit.IMEMessageSecurityHandler */ },
		{ /* #304 = 0x25F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000193 /* MailKit.MEMessageSecurityHandlerWrapper */ },
		{ /* #305 = 0x261 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000194 /* MailKit.MEMessageSecurityInformation */ },
		{ /* #306 = 0x263 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000195 /* MailKit.MEMessageSigner */ },
		{ /* #307 = 0x265 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000197 /* MailKit.MEOutgoingMessageEncodingStatus */ },
		{ /* #308 = 0x267 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000198 /* LocalAuthenticationEmbeddedUI.LAAuthenticationView */ },
		{ /* #309 = 0x269 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200019A /* LocalAuthentication.LAAuthenticationRequirement */ },
		{ /* #310 = 0x26B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200019B /* LocalAuthentication.LABiometryFallbackRequirement */ },
		{ /* #311 = 0x26D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001A3 /* LocalAuthentication.LARight */ },
		{ /* #312 = 0x26F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200019F /* LocalAuthentication.LAPersistedRight */ },
		{ /* #313 = 0x271 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001B3 /* LinkPresentation.LPLinkMetadata */ },
		{ /* #314 = 0x273 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001B4 /* LinkPresentation.LPLinkView */ },
		{ /* #315 = 0x275 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D0A /* AppKit.NSControl */ },
		{ /* #316 = 0x277 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D46 /* AppKit.INSAccessibilityButton */ },
		{ /* #317 = 0x279 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D47 /* AppKit.NSAccessibilityButtonWrapper */ },
		{ /* #318 = 0x27B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002112 /* AppKit.INSUserInterfaceCompression */ },
		{ /* #319 = 0x27D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002113 /* AppKit.NSUserInterfaceCompressionWrapper */ },
		{ /* #320 = 0x27F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002119 /* AppKit.INSUserInterfaceValidations */ },
		{ /* #321 = 0x281 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200211A /* AppKit.NSUserInterfaceValidationsWrapper */ },
		{ /* #322 = 0x283 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D01 /* AppKit.NSButton */ },
		{ /* #323 = 0x285 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001B6 /* IntentsUI.INUIAddVoiceShortcutButton */ },
		{ /* #324 = 0x287 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001B7 /* IntentsUI.IINUIAddVoiceShortcutButtonDelegate */ },
		{ /* #325 = 0x289 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001B8 /* IntentsUI.INUIAddVoiceShortcutButtonDelegateWrapper */ },
		{ /* #326 = 0x28B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001B9 /* IntentsUI.INUIAddVoiceShortcutButtonDelegate */ },
		{ /* #327 = 0x28D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6000C24 /* System.Void IntentsUI.INUIAddVoiceShortcutButtonDelegate::.ctor() */ },
		{ /* #328 = 0x28F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001BB /* IntentsUI.INUIAddVoiceShortcutViewController */ },
		{ /* #329 = 0x291 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001BC /* IntentsUI.IINUIAddVoiceShortcutViewControllerDelegate */ },
		{ /* #330 = 0x293 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001BD /* IntentsUI.INUIAddVoiceShortcutViewControllerDelegateWrapper */ },
		{ /* #331 = 0x295 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001BE /* IntentsUI.INUIAddVoiceShortcutViewControllerDelegate */ },
		{ /* #332 = 0x297 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6000C39 /* System.Void IntentsUI.INUIAddVoiceShortcutViewControllerDelegate::.ctor() */ },
		{ /* #333 = 0x299 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001BF /* IntentsUI.INUIEditVoiceShortcutViewController */ },
		{ /* #334 = 0x29B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001C0 /* IntentsUI.IINUIEditVoiceShortcutViewControllerDelegate */ },
		{ /* #335 = 0x29D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001C1 /* IntentsUI.INUIEditVoiceShortcutViewControllerDelegateWrapper */ },
		{ /* #336 = 0x29F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001C2 /* IntentsUI.INUIEditVoiceShortcutViewControllerDelegate */ },
		{ /* #337 = 0x2A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6000C50 /* System.Void IntentsUI.INUIEditVoiceShortcutViewControllerDelegate::.ctor() */ },
		{ /* #338 = 0x2A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001C3 /* FileProviderUI.FPUIActionExtensionContext */ },
		{ /* #339 = 0x2A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001C4 /* FileProviderUI.FPUIActionExtensionViewController */ },
		{ /* #340 = 0x2A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001C8 /* ExternalAccessory.IEAAccessoryDelegate */ },
		{ /* #341 = 0x2A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001CA /* ExternalAccessory.EAAccessoryDelegateWrapper */ },
		{ /* #342 = 0x2AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001CB /* ExternalAccessory.EAAccessoryDelegate */ },
		{ /* #343 = 0x2AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6000C82 /* System.Void ExternalAccessory.EAAccessoryDelegate::.ctor() */ },
		{ /* #344 = 0x2AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001CF /* ExternalAccessory.EASession */ },
		{ /* #345 = 0x2B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001D1 /* ExtensionKit.EXAppExtensionBrowserViewController */ },
		{ /* #346 = 0x2B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001D2 /* ExtensionKit.EXHostViewController */ },
		{ /* #347 = 0x2B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001D3 /* ExtensionKit.IEXHostViewControllerDelegate */ },
		{ /* #348 = 0x2B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001D5 /* ExtensionKit.EXHostViewControllerDelegateWrapper */ },
		{ /* #349 = 0x2B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001D6 /* ExtensionKit.EXHostViewControllerDelegate */ },
		{ /* #350 = 0x2BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6000CB7 /* System.Void ExtensionKit.EXHostViewControllerDelegate::.ctor() */ },
		{ /* #351 = 0x2BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001D7 /* ExecutionPolicy.EPDeveloperTool */ },
		{ /* #352 = 0x2BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001DB /* ExecutionPolicy.EPExecutionPolicy */ },
		{ /* #353 = 0x2C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001E1 /* CoreAudioKit.AUAudioUnitViewConfiguration */ },
		{ /* #354 = 0x2C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001E3 /* CoreAudioKit.IAUCustomViewPersistentData */ },
		{ /* #355 = 0x2C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001E4 /* CoreAudioKit.AUCustomViewPersistentDataWrapper */ },
		{ /* #356 = 0x2C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001E5 /* CoreAudioKit.AUGenericView */ },
		{ /* #357 = 0x2C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001E6 /* CoreAudioKit.AUGenericViewController */ },
		{ /* #358 = 0x2CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001E8 /* CoreAudioKit.AUPannerView */ },
		{ /* #359 = 0x2CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001E9 /* CoreAudioKit.AUViewController */ },
		{ /* #360 = 0x2CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002135 /* AppKit.NSWindowController */ },
		{ /* #361 = 0x2D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001EA /* CoreAudioKit.CABtleMidiWindowController */ },
		{ /* #362 = 0x2D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001EB /* CoreAudioKit.CAInterDeviceAudioViewController */ },
		{ /* #363 = 0x2D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001EC /* CoreAudioKit.CANetworkBrowserWindowController */ },
		{ /* #364 = 0x2D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001ED /* ContactsUI.CNContactPicker */ },
		{ /* #365 = 0x2D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001EE /* ContactsUI.ICNContactPickerDelegate */ },
		{ /* #366 = 0x2DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001F0 /* ContactsUI.CNContactPickerDelegateWrapper */ },
		{ /* #367 = 0x2DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001F1 /* ContactsUI.CNContactPickerDelegate */ },
		{ /* #368 = 0x2DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6000D42 /* System.Void ContactsUI.CNContactPickerDelegate::.ctor() */ },
		{ /* #369 = 0x2E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001F2 /* ContactsUI.CNContactViewController */ },
		{ /* #370 = 0x2E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001F3 /* CallKit.CXProviderConfiguration */ },
		{ /* #371 = 0x2E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001F5 /* AutomaticAssessmentConfiguration.AEAssessmentApplication */ },
		{ /* #372 = 0x2E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001F6 /* AutomaticAssessmentConfiguration.AEAssessmentConfiguration */ },
		{ /* #373 = 0x2E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001F9 /* AutomaticAssessmentConfiguration.AEAssessmentParticipantConfiguration */ },
		{ /* #374 = 0x2EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001FA /* AutomaticAssessmentConfiguration.AEAssessmentSession */ },
		{ /* #375 = 0x2ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001FB /* AutomaticAssessmentConfiguration.IAEAssessmentSessionDelegate */ },
		{ /* #376 = 0x2EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001FD /* AutomaticAssessmentConfiguration.AEAssessmentSessionDelegateWrapper */ },
		{ /* #377 = 0x2F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001FE /* AutomaticAssessmentConfiguration.AEAssessmentSessionDelegate */ },
		{ /* #378 = 0x2F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6000D9A /* System.Void AutomaticAssessmentConfiguration.AEAssessmentSessionDelegate::.ctor() */ },
		{ /* #379 = 0x2F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000202 /* AdSupport.ASIdentifierManager */ },
		{ /* #380 = 0x2F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000203 /* AdServices.AAAttribution */ },
		{ /* #381 = 0x2F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000206 /* Accessibility.AXBrailleMap */ },
		{ /* #382 = 0x2FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000207 /* Accessibility.IAXBrailleMapRenderer */ },
		{ /* #383 = 0x2FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000209 /* Accessibility.AXBrailleMapRendererWrapper */ },
		{ /* #384 = 0x2FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000213 /* Accessibility.IAXDataAxisDescriptor */ },
		{ /* #385 = 0x301 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000214 /* Accessibility.AXDataAxisDescriptorWrapper */ },
		{ /* #386 = 0x303 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200020A /* Accessibility.AXCategoricalDataAxisDescriptor */ },
		{ /* #387 = 0x305 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200020B /* Accessibility.IAXChart */ },
		{ /* #388 = 0x307 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200020C /* Accessibility.AXChartWrapper */ },
		{ /* #389 = 0x309 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200020D /* Accessibility.AXChartDescriptor */ },
		{ /* #390 = 0x30B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200020F /* Accessibility.AXCustomContent */ },
		{ /* #391 = 0x30D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000211 /* Accessibility.IAXCustomContentProvider */ },
		{ /* #392 = 0x30F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000212 /* Accessibility.AXCustomContentProviderWrapper */ },
		{ /* #393 = 0x311 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000215 /* Accessibility.AXDataPoint */ },
		{ /* #394 = 0x313 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000216 /* Accessibility.AXDataPointValue */ },
		{ /* #395 = 0x315 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000217 /* Accessibility.AXDataSeriesDescriptor */ },
		{ /* #396 = 0x317 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000218 /* Accessibility.AXLiveAudioGraph */ },
		{ /* #397 = 0x319 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000219 /* Accessibility.AXNumericDataAxisDescriptor */ },
		{ /* #398 = 0x31B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000225 /* iTunesLibrary.ITLibAlbum */ },
		{ /* #399 = 0x31D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000226 /* iTunesLibrary.ITLibArtist */ },
		{ /* #400 = 0x31F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000227 /* iTunesLibrary.ITLibArtwork */ },
		{ /* #401 = 0x321 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200022C /* iTunesLibrary.ITLibMediaEntity */ },
		{ /* #402 = 0x323 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200022F /* iTunesLibrary.ITLibMediaItem */ },
		{ /* #403 = 0x325 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000234 /* iTunesLibrary.ITLibMediaItemVideoInfo */ },
		{ /* #404 = 0x327 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000235 /* iTunesLibrary.ITLibPlaylist */ },
		{ /* #405 = 0x329 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000239 /* iTunesLibrary.ITLibrary */ },
		{ /* #406 = 0x32B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200023F /* Vision.VNCircle */ },
		{ /* #407 = 0x32D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000244 /* Vision.VNRequest */ },
		{ /* #408 = 0x32F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200029A /* Vision.VNImageBasedRequest */ },
		{ /* #409 = 0x331 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000240 /* Vision.VNDetectBarcodesRequest */ },
		{ /* #410 = 0x333 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002B5 /* Vision.IVNRequestRevisionProviding */ },
		{ /* #411 = 0x335 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002B6 /* Vision.VNRequestRevisionProvidingWrapper */ },
		{ /* #412 = 0x337 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002A2 /* Vision.VNObservation */ },
		{ /* #413 = 0x339 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000242 /* Vision.VNFeaturePrintObservation */ },
		{ /* #414 = 0x33B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000246 /* Vision.VNGeometryUtils */ },
		{ /* #415 = 0x33D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000247 /* Vision.VNVector */ },
		{ /* #416 = 0x33F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200025E /* Vision.VNDetectedObjectObservation */ },
		{ /* #417 = 0x341 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002AF /* Vision.VNRectangleObservation */ },
		{ /* #418 = 0x343 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200024C /* Vision.VNBarcodeObservation */ },
		{ /* #419 = 0x345 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000250 /* Vision.VNClassificationObservation */ },
		{ /* #420 = 0x347 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000251 /* Vision.VNClassifyImageRequest */ },
		{ /* #421 = 0x349 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000253 /* Vision.VNContour */ },
		{ /* #422 = 0x34B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000254 /* Vision.VNContoursObservation */ },
		{ /* #423 = 0x34D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000255 /* Vision.VNCoreMLFeatureValueObservation */ },
		{ /* #424 = 0x34F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000256 /* Vision.VNCoreMLModel */ },
		{ /* #425 = 0x351 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000257 /* Vision.VNCoreMLRequest */ },
		{ /* #426 = 0x353 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200025B /* Vision.VNDetectContoursRequest */ },
		{ /* #427 = 0x355 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200025C /* Vision.VNDetectDocumentSegmentationRequest */ },
		{ /* #428 = 0x357 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002A4 /* Vision.VNPoint */ },
		{ /* #429 = 0x359 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000260 /* Vision.VNDetectedPoint */ },
		{ /* #430 = 0x35B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200027C /* Vision.IVNFaceObservationAccepting */ },
		{ /* #431 = 0x35D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200027D /* Vision.VNFaceObservationAcceptingWrapper */ },
		{ /* #432 = 0x35F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000261 /* Vision.VNDetectFaceCaptureQualityRequest */ },
		{ /* #433 = 0x361 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000263 /* Vision.VNDetectFaceLandmarksRequest */ },
		{ /* #434 = 0x363 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000265 /* Vision.VNDetectFaceRectanglesRequest */ },
		{ /* #435 = 0x365 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000267 /* Vision.VNDetectHorizonRequest */ },
		{ /* #436 = 0x367 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200026D /* Vision.VNDetectHumanRectanglesRequest */ },
		{ /* #437 = 0x369 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200026F /* Vision.VNDetectRectanglesRequest */ },
		{ /* #438 = 0x36B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000271 /* Vision.VNDetectTextRectanglesRequest */ },
		{ /* #439 = 0x36D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002BB /* Vision.VNStatefulRequest */ },
		{ /* #440 = 0x36F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000273 /* Vision.VNDetectTrajectoriesRequest */ },
		{ /* #441 = 0x371 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000278 /* Vision.VNFaceLandmarkRegion */ },
		{ /* #442 = 0x373 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000279 /* Vision.VNFaceLandmarks */ },
		{ /* #443 = 0x375 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200027A /* Vision.VNFaceLandmarks2D */ },
		{ /* #444 = 0x377 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200027B /* Vision.VNFaceObservation */ },
		{ /* #445 = 0x379 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200027F /* Vision.VNGenerateAttentionBasedSaliencyImageRequest */ },
		{ /* #446 = 0x37B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000281 /* Vision.VNGenerateImageFeaturePrintRequest */ },
		{ /* #447 = 0x37D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000283 /* Vision.VNGenerateObjectnessBasedSaliencyImageRequest */ },
		{ /* #448 = 0x37F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002BD /* Vision.VNTargetedImageRequest */ },
		{ /* #449 = 0x381 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000285 /* Vision.VNGenerateOpticalFlowRequest */ },
		{ /* #450 = 0x383 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000288 /* Vision.VNGeneratePersonSegmentationRequest */ },
		{ /* #451 = 0x385 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200029F /* Vision.VNImageRegistrationRequest */ },
		{ /* #452 = 0x387 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200028B /* Vision.VNHomographicImageRegistrationRequest */ },
		{ /* #453 = 0x389 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200028D /* Vision.VNHorizonObservation */ },
		{ /* #454 = 0x38B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000298 /* Vision.VNHumanObservation */ },
		{ /* #455 = 0x38D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000299 /* Vision.VNImageAlignmentObservation */ },
		{ /* #456 = 0x38F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200029C /* Vision.VNImageHomographicAlignmentObservation */ },
		{ /* #457 = 0x391 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002A0 /* Vision.VNImageRequestHandler */ },
		{ /* #458 = 0x393 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002A1 /* Vision.VNImageTranslationAlignmentObservation */ },
		{ /* #459 = 0x395 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002A3 /* Vision.VNPixelBufferObservation */ },
		{ /* #460 = 0x397 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002A8 /* Vision.VNRecognizedObjectObservation */ },
		{ /* #461 = 0x399 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002AA /* Vision.VNRecognizedPoint */ },
		{ /* #462 = 0x39B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002AB /* Vision.VNRecognizedText */ },
		{ /* #463 = 0x39D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002AC /* Vision.VNRecognizedTextObservation */ },
		{ /* #464 = 0x39F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002B2 /* Vision.IVNRequestProgressProviding */ },
		{ /* #465 = 0x3A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002B3 /* Vision.VNRequestProgressProvidingWrapper */ },
		{ /* #466 = 0x3A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002AD /* Vision.VNRecognizeTextRequest */ },
		{ /* #467 = 0x3A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002B9 /* Vision.VNSaliencyImageObservation */ },
		{ /* #468 = 0x3A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002BA /* Vision.VNSequenceRequestHandler */ },
		{ /* #469 = 0x3A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002BE /* Vision.VNTextObservation */ },
		{ /* #470 = 0x3AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002C0 /* Vision.VNTrackingRequest */ },
		{ /* #471 = 0x3AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002C1 /* Vision.VNTrackObjectRequest */ },
		{ /* #472 = 0x3AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002C3 /* Vision.VNTrackRectangleRequest */ },
		{ /* #473 = 0x3B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002C5 /* Vision.VNTrajectoryObservation */ },
		{ /* #474 = 0x3B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002C6 /* Vision.VNTranslationalImageRegistrationRequest */ },
		{ /* #475 = 0x3B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002C8 /* Vision.VNVideoProcessor */ },
		{ /* #476 = 0x3B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002C9 /* Vision.VNVideoProcessorCadence */ },
		{ /* #477 = 0x3B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002CA /* Vision.VNVideoProcessorFrameRateCadence */ },
		{ /* #478 = 0x3BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002CB /* Vision.VNVideoProcessorRequestProcessingOptions */ },
		{ /* #479 = 0x3BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002CC /* Vision.VNVideoProcessorTimeIntervalCadence */ },
		{ /* #480 = 0x3BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200030B /* VideoSubscriberAccount.VSAccountMetadataRequest */ },
		{ /* #481 = 0x3C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200030E /* VideoSubscriberAccount.VSAccountApplicationProvider */ },
		{ /* #482 = 0x3C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200030F /* VideoSubscriberAccount.VSAccountManager */ },
		{ /* #483 = 0x3C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000311 /* VideoSubscriberAccount.IVSAccountManagerDelegate */ },
		{ /* #484 = 0x3C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000313 /* VideoSubscriberAccount.VSAccountManagerDelegateWrapper */ },
		{ /* #485 = 0x3C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000314 /* VideoSubscriberAccount.VSAccountManagerDelegate */ },
		{ /* #486 = 0x3CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600170E /* System.Void VideoSubscriberAccount.VSAccountManagerDelegate::.ctor() */ },
		{ /* #487 = 0x3CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000315 /* VideoSubscriberAccount.VSAccountManagerResult */ },
		{ /* #488 = 0x3CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000316 /* VideoSubscriberAccount.VSAccountMetadata */ },
		{ /* #489 = 0x3D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000318 /* VideoSubscriberAccount.VSAccountProviderResponse */ },
		{ /* #490 = 0x3D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200031F /* VideoSubscriberAccount.VSSubscription */ },
		{ /* #491 = 0x3D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000321 /* VideoSubscriberAccount.VSSubscriptionRegistrationCenter */ },
		{ /* #492 = 0x3D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000322 /* VideoSubscriberAccount.VSUserAccount */ },
		{ /* #493 = 0x3D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000327 /* UserNotifications.UNNotificationAttachment */ },
		{ /* #494 = 0x3DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000343 /* UserNotifications.UNNotificationTrigger */ },
		{ /* #495 = 0x3DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200032B /* UserNotifications.UNCalendarNotificationTrigger */ },
		{ /* #496 = 0x3DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012AD /* Foundation.INSMutableCopying */ },
		{ /* #497 = 0x3E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012AE /* Foundation.NSMutableCopyingWrapper */ },
		{ /* #498 = 0x3E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000338 /* UserNotifications.UNNotificationContent */ },
		{ /* #499 = 0x3E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200032E /* UserNotifications.UNMutableNotificationContent */ },
		{ /* #500 = 0x3E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200032F /* UserNotifications.UNNotification */ },
		{ /* #501 = 0x3E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000330 /* UserNotifications.UNNotificationAction */ },
		{ /* #502 = 0x3EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000331 /* UserNotifications.UNNotificationActionIcon */ },
		{ /* #503 = 0x3ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000336 /* UserNotifications.UNNotificationCategory */ },
		{ /* #504 = 0x3EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000339 /* UserNotifications.IUNNotificationContentProviding */ },
		{ /* #505 = 0x3F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200033A /* UserNotifications.UNNotificationContentProvidingWrapper */ },
		{ /* #506 = 0x3F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200033D /* UserNotifications.UNNotificationRequest */ },
		{ /* #507 = 0x3F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200033E /* UserNotifications.UNNotificationResponse */ },
		{ /* #508 = 0x3F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200033F /* UserNotifications.UNNotificationServiceExtension */ },
		{ /* #509 = 0x3F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000341 /* UserNotifications.UNNotificationSettings */ },
		{ /* #510 = 0x3FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000342 /* UserNotifications.UNNotificationSound */ },
		{ /* #511 = 0x3FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000344 /* UserNotifications.UNPushNotificationTrigger */ },
		{ /* #512 = 0x3FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000346 /* UserNotifications.UNTextInputNotificationAction */ },
		{ /* #513 = 0x401 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000347 /* UserNotifications.UNTextInputNotificationResponse */ },
		{ /* #514 = 0x403 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000348 /* UserNotifications.UNTimeIntervalNotificationTrigger */ },
		{ /* #515 = 0x405 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200034A /* UserNotifications.IUNUserNotificationCenterDelegate */ },
		{ /* #516 = 0x407 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200034C /* UserNotifications.UNUserNotificationCenterDelegateWrapper */ },
		{ /* #517 = 0x409 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200034D /* UserNotifications.UNUserNotificationCenterDelegate */ },
		{ /* #518 = 0x40B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6001885 /* System.Void UserNotifications.UNUserNotificationCenterDelegate::.ctor() */ },
		{ /* #519 = 0x40D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200037D /* StoreKit.SKRequest */ },
		{ /* #520 = 0x40F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000355 /* StoreKit.SKReceiptRefreshRequest */ },
		{ /* #521 = 0x411 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000356 /* StoreKit.SKPayment */ },
		{ /* #522 = 0x413 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200035A /* StoreKit.SKArcadeService */ },
		{ /* #523 = 0x415 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200035E /* StoreKit.SKDownload */ },
		{ /* #524 = 0x417 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000362 /* StoreKit.SKMutablePayment */ },
		{ /* #525 = 0x419 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000363 /* StoreKit.SKPaymentDiscount */ },
		{ /* #526 = 0x41B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000364 /* StoreKit.SKPaymentQueue */ },
		{ /* #527 = 0x41D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000365 /* StoreKit.ISKPaymentQueueDelegate */ },
		{ /* #528 = 0x41F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000367 /* StoreKit.SKPaymentQueueDelegateWrapper */ },
		{ /* #529 = 0x421 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000368 /* StoreKit.SKPaymentQueueDelegate */ },
		{ /* #530 = 0x423 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600194E /* System.Void StoreKit.SKPaymentQueueDelegate::.ctor() */ },
		{ /* #531 = 0x425 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000369 /* StoreKit.SKPaymentTransaction */ },
		{ /* #532 = 0x427 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200036A /* StoreKit.ISKPaymentTransactionObserver */ },
		{ /* #533 = 0x429 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200036C /* StoreKit.SKPaymentTransactionObserverWrapper */ },
		{ /* #534 = 0x42B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200036D /* StoreKit.SKPaymentTransactionObserver */ },
		{ /* #535 = 0x42D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6001968 /* System.Void StoreKit.SKPaymentTransactionObserver::.ctor() */ },
		{ /* #536 = 0x42F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200036F /* StoreKit.SKProduct */ },
		{ /* #537 = 0x431 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000370 /* StoreKit.SKProductDiscount */ },
		{ /* #538 = 0x433 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200037F /* StoreKit.ISKRequestDelegate */ },
		{ /* #539 = 0x435 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000381 /* StoreKit.SKRequestDelegateWrapper */ },
		{ /* #540 = 0x437 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000376 /* StoreKit.ISKProductsRequestDelegate */ },
		{ /* #541 = 0x439 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000377 /* StoreKit.SKProductsRequestDelegateWrapper */ },
		{ /* #542 = 0x43B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000382 /* StoreKit.SKRequestDelegate */ },
		{ /* #543 = 0x43D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60019E2 /* System.Void StoreKit.SKRequestDelegate::.ctor() */ },
		{ /* #544 = 0x43F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000378 /* StoreKit.SKProductsRequestDelegate */ },
		{ /* #545 = 0x441 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60019AA /* System.Void StoreKit.SKProductsRequestDelegate::.ctor() */ },
		{ /* #546 = 0x443 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000379 /* StoreKit.SKProductsResponse */ },
		{ /* #547 = 0x445 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200037C /* StoreKit.SKProductSubscriptionPeriod */ },
		{ /* #548 = 0x447 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000383 /* StoreKit.SKStorefront */ },
		{ /* #549 = 0x449 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000386 /* StoreKit.ISKStoreProductViewControllerDelegate */ },
		{ /* #550 = 0x44B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000388 /* StoreKit.SKStoreProductViewControllerDelegateWrapper */ },
		{ /* #551 = 0x44D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000389 /* StoreKit.SKStoreProductViewControllerDelegate */ },
		{ /* #552 = 0x44F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6001A0A /* System.Void StoreKit.SKStoreProductViewControllerDelegate::.ctor() */ },
		{ /* #553 = 0x451 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200038A /* StoreKit.SKStoreReviewController */ },
		{ /* #554 = 0x453 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200038D /* SpriteKit.SKAction */ },
		{ /* #555 = 0x455 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200038E /* SpriteKit.SKKeyframeSequence */ },
		{ /* #556 = 0x457 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200038F /* SpriteKit.SKNode */ },
		{ /* #557 = 0x459 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000390 /* SpriteKit.SKShapeNode */ },
		{ /* #558 = 0x45B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000391 /* SpriteKit.SKUniform */ },
		{ /* #559 = 0x45D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000392 /* SpriteKit.SKVideoNode */ },
		{ /* #560 = 0x45F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003DB /* SpriteKit.SKWarpGeometry */ },
		{ /* #561 = 0x461 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000393 /* SpriteKit.SKWarpGeometryGrid */ },
		{ /* #562 = 0x463 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000394 /* SpriteKit.SK3DNode */ },
		{ /* #563 = 0x465 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000396 /* SpriteKit.SKAttribute */ },
		{ /* #564 = 0x467 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000398 /* SpriteKit.SKAttributeValue */ },
		{ /* #565 = 0x469 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000399 /* SpriteKit.SKAudioNode */ },
		{ /* #566 = 0x46B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200039B /* SpriteKit.SKCameraNode */ },
		{ /* #567 = 0x46D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200039C /* SpriteKit.SKConstraint */ },
		{ /* #568 = 0x46F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200039D /* SpriteKit.SKCropNode */ },
		{ /* #569 = 0x471 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003D9 /* SpriteKit.ISKWarpable */ },
		{ /* #570 = 0x473 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003DA /* SpriteKit.SKWarpableWrapper */ },
		{ /* #571 = 0x475 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200039E /* SpriteKit.SKEffectNode */ },
		{ /* #572 = 0x477 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200039F /* SpriteKit.SKEmitterNode */ },
		{ /* #573 = 0x479 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003A0 /* SpriteKit.SKFieldNode */ },
		{ /* #574 = 0x47B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003A3 /* SpriteKit.SKLabelNode */ },
		{ /* #575 = 0x47D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003A5 /* SpriteKit.SKLightNode */ },
		{ /* #576 = 0x47F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003C4 /* SpriteKit.SKTexture */ },
		{ /* #577 = 0x481 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003A6 /* SpriteKit.SKMutableTexture */ },
		{ /* #578 = 0x483 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003A9 /* SpriteKit.SKPhysicsBody */ },
		{ /* #579 = 0x485 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003AA /* SpriteKit.SKPhysicsContact */ },
		{ /* #580 = 0x487 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003AB /* SpriteKit.ISKPhysicsContactDelegate */ },
		{ /* #581 = 0x489 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003AD /* SpriteKit.SKPhysicsContactDelegateWrapper */ },
		{ /* #582 = 0x48B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003AE /* SpriteKit.SKPhysicsContactDelegate */ },
		{ /* #583 = 0x48D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6001D4C /* System.Void SpriteKit.SKPhysicsContactDelegate::.ctor() */ },
		{ /* #584 = 0x48F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003AF /* SpriteKit.SKPhysicsJoint */ },
		{ /* #585 = 0x491 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003B0 /* SpriteKit.SKPhysicsJointFixed */ },
		{ /* #586 = 0x493 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003B1 /* SpriteKit.SKPhysicsJointLimit */ },
		{ /* #587 = 0x495 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003B2 /* SpriteKit.SKPhysicsJointPin */ },
		{ /* #588 = 0x497 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003B3 /* SpriteKit.SKPhysicsJointSliding */ },
		{ /* #589 = 0x499 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003B4 /* SpriteKit.SKPhysicsJointSpring */ },
		{ /* #590 = 0x49B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003B6 /* SpriteKit.SKRange */ },
		{ /* #591 = 0x49D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003B7 /* SpriteKit.SKReachConstraints */ },
		{ /* #592 = 0x49F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003B8 /* SpriteKit.SKReferenceNode */ },
		{ /* #593 = 0x4A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003B9 /* SpriteKit.SKRegion */ },
		{ /* #594 = 0x4A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003BA /* SpriteKit.SKRenderer */ },
		{ /* #595 = 0x4A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EF2 /* GameplayKit.IGKSceneRootNodeType */ },
		{ /* #596 = 0x4A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EF3 /* GameplayKit.GKSceneRootNodeTypeWrapper */ },
		{ /* #597 = 0x4A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003BC /* SpriteKit.SKScene */ },
		{ /* #598 = 0x4AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003BD /* SpriteKit.ISKSceneDelegate */ },
		{ /* #599 = 0x4AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003BF /* SpriteKit.SKSceneDelegateWrapper */ },
		{ /* #600 = 0x4AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003C0 /* SpriteKit.SKSceneDelegate */ },
		{ /* #601 = 0x4B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6001E34 /* System.Void SpriteKit.SKSceneDelegate::.ctor() */ },
		{ /* #602 = 0x4B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003C2 /* SpriteKit.SKShader */ },
		{ /* #603 = 0x4B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003C3 /* SpriteKit.SKSpriteNode */ },
		{ /* #604 = 0x4B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003C9 /* SpriteKit.SKTileDefinition */ },
		{ /* #605 = 0x4B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003CB /* SpriteKit.SKTileGroup */ },
		{ /* #606 = 0x4BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003CC /* SpriteKit.SKTileGroupRule */ },
		{ /* #607 = 0x4BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003CD /* SpriteKit.SKTileMapNode */ },
		{ /* #608 = 0x4BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003CE /* SpriteKit.SKTileSet */ },
		{ /* #609 = 0x4C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003D0 /* SpriteKit.SKTransformNode */ },
		{ /* #610 = 0x4C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003D1 /* SpriteKit.SKTransition */ },
		{ /* #611 = 0x4C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003D4 /* SpriteKit.SKView */ },
		{ /* #612 = 0x4C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003D5 /* SpriteKit.ISKViewDelegate */ },
		{ /* #613 = 0x4C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003D7 /* SpriteKit.SKViewDelegateWrapper */ },
		{ /* #614 = 0x4CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003D8 /* SpriteKit.SKViewDelegate */ },
		{ /* #615 = 0x4CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6001FA2 /* System.Void SpriteKit.SKViewDelegate::.ctor() */ },
		{ /* #616 = 0x4CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002072 /* AppKit.INSTextDelegate */ },
		{ /* #617 = 0x4D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002074 /* AppKit.NSTextDelegateWrapper */ },
		{ /* #618 = 0x4D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020D0 /* AppKit.INSTextViewDelegate */ },
		{ /* #619 = 0x4D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020D2 /* AppKit.NSTextViewDelegateWrapper */ },
		{ /* #620 = 0x4D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003E5 /* Social.SLComposeServiceViewController */ },
		{ /* #621 = 0x4D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003EC /* SharedWithYouCore.SWAction */ },
		{ /* #622 = 0x4DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003ED /* SharedWithYouCore.ISWCollaborationActionHandler */ },
		{ /* #623 = 0x4DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003EE /* SharedWithYouCore.SWCollaborationActionHandlerWrapper */ },
		{ /* #624 = 0x4DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003EF /* SharedWithYouCore.SWCollaborationCoordinator */ },
		{ /* #625 = 0x4E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003F0 /* SharedWithYouCore.SWCollaborationOption */ },
		{ /* #626 = 0x4E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003F1 /* SharedWithYouCore.SWCollaborationOptionsGroup */ },
		{ /* #627 = 0x4E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003F2 /* SharedWithYouCore.SWCollaborationOptionsPickerGroup */ },
		{ /* #628 = 0x4E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003F3 /* SharedWithYouCore.SWCollaborationShareOptions */ },
		{ /* #629 = 0x4E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003F4 /* SharedWithYouCore.SWPerson */ },
		{ /* #630 = 0x4EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003F5 /* SharedWithYouCore.SWPersonIdentity */ },
		{ /* #631 = 0x4ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003F6 /* SharedWithYouCore.SWPersonIdentityProof */ },
		{ /* #632 = 0x4EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003F7 /* SharedWithYouCore.SWSignedPersonIdentityProof */ },
		{ /* #633 = 0x4F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003F8 /* SharedWithYouCore.SWStartCollaborationAction */ },
		{ /* #634 = 0x4F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003F9 /* SharedWithYouCore.SWUpdateCollaborationParticipantsAction */ },
		{ /* #635 = 0x4F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000461 /* ScriptingBridge.ISBApplicationDelegate */ },
		{ /* #636 = 0x4F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000462 /* ScriptingBridge.SBApplicationDelegateWrapper */ },
		{ /* #637 = 0x4F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000463 /* ScriptingBridge.SBApplicationDelegate */ },
		{ /* #638 = 0x4FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6002569 /* System.Void ScriptingBridge.SBApplicationDelegate::.ctor() */ },
		{ /* #639 = 0x4FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B16 /* CloudKit.ICKRecordValue */ },
		{ /* #640 = 0x4FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B17 /* CloudKit.CKRecordValueWrapper */ },
		{ /* #641 = 0x501 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200116C /* Foundation.NSArray */ },
		{ /* #642 = 0x503 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012AB /* Foundation.NSMutableArray */ },
		{ /* #643 = 0x505 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000464 /* ScriptingBridge.SBElementArray */ },
		{ /* #644 = 0x507 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000465 /* ScriptingBridge.SBObject */ },
		{ /* #645 = 0x509 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000468 /* ScreenCaptureKit.SCContentFilter */ },
		{ /* #646 = 0x50B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000469 /* ScreenCaptureKit.SCDisplay */ },
		{ /* #647 = 0x50D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200046B /* ScreenCaptureKit.SCRunningApplication */ },
		{ /* #648 = 0x50F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200046E /* ScreenCaptureKit.SCStreamConfiguration */ },
		{ /* #649 = 0x511 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200046F /* ScreenCaptureKit.ISCStreamDelegate */ },
		{ /* #650 = 0x513 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000471 /* ScreenCaptureKit.SCStreamDelegateWrapper */ },
		{ /* #651 = 0x515 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000472 /* ScreenCaptureKit.SCStreamDelegate */ },
		{ /* #652 = 0x517 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60025E7 /* System.Void ScreenCaptureKit.SCStreamDelegate::.ctor() */ },
		{ /* #653 = 0x519 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000476 /* ScreenCaptureKit.ISCStreamOutput */ },
		{ /* #654 = 0x51B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000478 /* ScreenCaptureKit.SCStreamOutputWrapper */ },
		{ /* #655 = 0x51D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200047A /* ScreenCaptureKit.SCWindow */ },
		{ /* #656 = 0x51F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000497 /* SceneKit.ISCNAnimatable */ },
		{ /* #657 = 0x521 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000498 /* SceneKit.SCNAnimatableWrapper */ },
		{ /* #658 = 0x523 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004AA /* SceneKit.ISCNBoundingVolume */ },
		{ /* #659 = 0x525 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004AB /* SceneKit.SCNBoundingVolumeWrapper */ },
		{ /* #660 = 0x527 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200052A /* SceneKit.ISCNShadable */ },
		{ /* #661 = 0x529 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200052C /* SceneKit.SCNShadableWrapper */ },
		{ /* #662 = 0x52B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200047E /* SceneKit.SCNGeometry */ },
		{ /* #663 = 0x52D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200047B /* SceneKit.SCNText */ },
		{ /* #664 = 0x52F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200047C /* SceneKit.SCNAnimatable */ },
		{ /* #665 = 0x531 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600261E /* System.Void SceneKit.SCNAnimatable::.ctor() */ },
		{ /* #666 = 0x533 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200047D /* SceneKit.SCNAction */ },
		{ /* #667 = 0x535 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200047F /* SceneKit.SCNGeometrySource */ },
		{ /* #668 = 0x537 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000484 /* SceneKit.SCNParticleSystem */ },
		{ /* #669 = 0x539 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000485 /* SceneKit.SCNPhysicsShape */ },
		{ /* #670 = 0x53B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200048A /* SceneKit.SCNScene */ },
		{ /* #671 = 0x53D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200048C /* SceneKit.SCNSceneSource */ },
		{ /* #672 = 0x53F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200048D /* SceneKit.SCNSkinner */ },
		{ /* #673 = 0x541 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200048E /* SceneKit.SCNTechnique */ },
		{ /* #674 = 0x543 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004BE /* SceneKit.SCNConstraint */ },
		{ /* #675 = 0x545 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000492 /* SceneKit.SCNAccelerationConstraint */ },
		{ /* #676 = 0x547 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000493 /* SceneKit.ISCNActionable */ },
		{ /* #677 = 0x549 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000494 /* SceneKit.SCNActionableWrapper */ },
		{ /* #678 = 0x54B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000495 /* SceneKit.SCNActionable */ },
		{ /* #679 = 0x54D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6002A14 /* System.Void SceneKit.SCNActionable::.ctor() */ },
		{ /* #680 = 0x54F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200049D /* SceneKit.ISCNAnimationProtocol */ },
		{ /* #681 = 0x551 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200049E /* SceneKit.SCNAnimationProtocolWrapper */ },
		{ /* #682 = 0x553 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000499 /* SceneKit.SCNAnimation */ },
		{ /* #683 = 0x555 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200049A /* SceneKit.SCNAnimationEvent */ },
		{ /* #684 = 0x557 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200049C /* SceneKit.SCNAnimationPlayer */ },
		{ /* #685 = 0x559 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004A0 /* SceneKit.SCNAudioPlayer */ },
		{ /* #686 = 0x55B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004A1 /* SceneKit.SCNAudioSource */ },
		{ /* #687 = 0x55D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004A2 /* SceneKit.SCNAvoidOccluderConstraint */ },
		{ /* #688 = 0x55F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004A3 /* SceneKit.ISCNAvoidOccluderConstraintDelegate */ },
		{ /* #689 = 0x561 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004A5 /* SceneKit.SCNAvoidOccluderConstraintDelegateWrapper */ },
		{ /* #690 = 0x563 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004A6 /* SceneKit.SCNAvoidOccluderConstraintDelegate */ },
		{ /* #691 = 0x565 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6002ACD /* System.Void SceneKit.SCNAvoidOccluderConstraintDelegate::.ctor() */ },
		{ /* #692 = 0x567 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004A8 /* SceneKit.SCNBillboardConstraint */ },
		{ /* #693 = 0x569 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004AC /* SceneKit.SCNBoundingVolume */ },
		{ /* #694 = 0x56B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6002AE2 /* System.Void SceneKit.SCNBoundingVolume::.ctor() */ },
		{ /* #695 = 0x56D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004AD /* SceneKit.SCNBox */ },
		{ /* #696 = 0x56F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004AF /* SceneKit.ISCNBufferStream */ },
		{ /* #697 = 0x571 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004B0 /* SceneKit.SCNBufferStreamWrapper */ },
		{ /* #698 = 0x573 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000533 /* SceneKit.ISCNTechniqueSupport */ },
		{ /* #699 = 0x575 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000534 /* SceneKit.SCNTechniqueSupportWrapper */ },
		{ /* #700 = 0x577 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004B1 /* SceneKit.SCNCamera */ },
		{ /* #701 = 0x579 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004B2 /* SceneKit.ISCNCameraControlConfiguration */ },
		{ /* #702 = 0x57B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004B3 /* SceneKit.SCNCameraControlConfigurationWrapper */ },
		{ /* #703 = 0x57D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004B4 /* SceneKit.SCNCameraController */ },
		{ /* #704 = 0x57F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004B5 /* SceneKit.ISCNCameraControllerDelegate */ },
		{ /* #705 = 0x581 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004B7 /* SceneKit.SCNCameraControllerDelegateWrapper */ },
		{ /* #706 = 0x583 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004B8 /* SceneKit.SCNCameraControllerDelegate */ },
		{ /* #707 = 0x585 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6002BD1 /* System.Void SceneKit.SCNCameraControllerDelegate::.ctor() */ },
		{ /* #708 = 0x587 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004BA /* SceneKit.SCNCapsule */ },
		{ /* #709 = 0x589 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004BD /* SceneKit.SCNCone */ },
		{ /* #710 = 0x58B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004C0 /* SceneKit.SCNCylinder */ },
		{ /* #711 = 0x58D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004C2 /* SceneKit.SCNDistanceConstraint */ },
		{ /* #712 = 0x58F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004C7 /* SceneKit.SCNFloor */ },
		{ /* #713 = 0x591 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004C8 /* SceneKit.SCNGeometryElement */ },
		{ /* #714 = 0x593 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004CC /* SceneKit.SCNGeometryTessellator */ },
		{ /* #715 = 0x595 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004CF /* SceneKit.SCNHitTestResult */ },
		{ /* #716 = 0x597 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004D1 /* SceneKit.SCNIKConstraint */ },
		{ /* #717 = 0x599 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004D4 /* SceneKit.SCNLevelOfDetail */ },
		{ /* #718 = 0x59B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004D5 /* SceneKit.SCNLight */ },
		{ /* #719 = 0x59D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004DC /* SceneKit.SCNLookAtConstraint */ },
		{ /* #720 = 0x59F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004DD /* SceneKit.SCNMaterial */ },
		{ /* #721 = 0x5A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004DE /* SceneKit.SCNMaterialProperty */ },
		{ /* #722 = 0x5A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004DF /* SceneKit.SCNMorpher */ },
		{ /* #723 = 0x5A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004E3 /* SceneKit.ISCNNodeRendererDelegate */ },
		{ /* #724 = 0x5A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004E5 /* SceneKit.SCNNodeRendererDelegateWrapper */ },
		{ /* #725 = 0x5A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004E6 /* SceneKit.SCNNodeRendererDelegate */ },
		{ /* #726 = 0x5AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6002E47 /* System.Void SceneKit.SCNNodeRendererDelegate::.ctor() */ },
		{ /* #727 = 0x5AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004F0 /* SceneKit.SCNParticlePropertyController */ },
		{ /* #728 = 0x5AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004F3 /* SceneKit.SCNPhysicsBehavior */ },
		{ /* #729 = 0x5B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004F2 /* SceneKit.SCNPhysicsBallSocketJoint */ },
		{ /* #730 = 0x5B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004F4 /* SceneKit.SCNPhysicsBody */ },
		{ /* #731 = 0x5B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004F7 /* SceneKit.SCNPhysicsConeTwistJoint */ },
		{ /* #732 = 0x5B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004F8 /* SceneKit.SCNPhysicsContact */ },
		{ /* #733 = 0x5B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004F9 /* SceneKit.ISCNPhysicsContactDelegate */ },
		{ /* #734 = 0x5BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004FB /* SceneKit.SCNPhysicsContactDelegateWrapper */ },
		{ /* #735 = 0x5BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004FC /* SceneKit.SCNPhysicsContactDelegate */ },
		{ /* #736 = 0x5BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6002EE8 /* System.Void SceneKit.SCNPhysicsContactDelegate::.ctor() */ },
		{ /* #737 = 0x5C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004FD /* SceneKit.SCNPhysicsField */ },
		{ /* #738 = 0x5C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004FF /* SceneKit.SCNPhysicsHingeJoint */ },
		{ /* #739 = 0x5C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000504 /* SceneKit.SCNPhysicsSliderJoint */ },
		{ /* #740 = 0x5C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000507 /* SceneKit.SCNPhysicsVehicle */ },
		{ /* #741 = 0x5C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000508 /* SceneKit.SCNPhysicsVehicleWheel */ },
		{ /* #742 = 0x5CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200050B /* SceneKit.SCNPlane */ },
		{ /* #743 = 0x5CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200050C /* SceneKit.SCNProgram */ },
		{ /* #744 = 0x5CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200050D /* SceneKit.ISCNProgramDelegate */ },
		{ /* #745 = 0x5D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200050F /* SceneKit.SCNProgramDelegateWrapper */ },
		{ /* #746 = 0x5D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000510 /* SceneKit.SCNProgramDelegate */ },
		{ /* #747 = 0x5D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6002FE0 /* System.Void SceneKit.SCNProgramDelegate::.ctor() */ },
		{ /* #748 = 0x5D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000512 /* SceneKit.SCNPyramid */ },
		{ /* #749 = 0x5D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000482 /* SceneKit.SCNNode */ },
		{ /* #750 = 0x5DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000514 /* SceneKit.SCNReferenceNode */ },
		{ /* #751 = 0x5DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000519 /* SceneKit.SCNReplicatorConstraint */ },
		{ /* #752 = 0x5DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200051A /* SceneKit.ISCNSceneExportDelegate */ },
		{ /* #753 = 0x5E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200051C /* SceneKit.SCNSceneExportDelegateWrapper */ },
		{ /* #754 = 0x5E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200051D /* SceneKit.SCNSceneExportDelegate */ },
		{ /* #755 = 0x5E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6003076 /* System.Void SceneKit.SCNSceneExportDelegate::.ctor() */ },
		{ /* #756 = 0x5E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200051E /* SceneKit.ISCNSceneRenderer */ },
		{ /* #757 = 0x5E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000520 /* SceneKit.SCNSceneRendererWrapper */ },
		{ /* #758 = 0x5EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000521 /* SceneKit.SCNSceneRenderer */ },
		{ /* #759 = 0x5ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60030E1 /* System.Void SceneKit.SCNSceneRenderer::.ctor() */ },
		{ /* #760 = 0x5EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000522 /* SceneKit.ISCNSceneRendererDelegate */ },
		{ /* #761 = 0x5F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000524 /* SceneKit.SCNSceneRendererDelegateWrapper */ },
		{ /* #762 = 0x5F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000525 /* SceneKit.SCNSceneRendererDelegate */ },
		{ /* #763 = 0x5F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6003120 /* System.Void SceneKit.SCNSceneRendererDelegate::.ctor() */ },
		{ /* #764 = 0x5F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200052D /* SceneKit.SCNShadable */ },
		{ /* #765 = 0x5F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600314E /* System.Void SceneKit.SCNShadable::.ctor() */ },
		{ /* #766 = 0x5FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000530 /* SceneKit.SCNShape */ },
		{ /* #767 = 0x5FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000531 /* SceneKit.SCNSliderConstraint */ },
		{ /* #768 = 0x5FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000532 /* SceneKit.SCNSphere */ },
		{ /* #769 = 0x601 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000535 /* SceneKit.SCNTechniqueSupport */ },
		{ /* #770 = 0x603 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6003194 /* System.Void SceneKit.SCNTechniqueSupport::.ctor() */ },
		{ /* #771 = 0x605 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000537 /* SceneKit.SCNTimingFunction */ },
		{ /* #772 = 0x607 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000538 /* SceneKit.SCNTorus */ },
		{ /* #773 = 0x609 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000539 /* SceneKit.SCNTransaction */ },
		{ /* #774 = 0x60B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200053A /* SceneKit.SCNTransformConstraint */ },
		{ /* #775 = 0x60D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200053C /* SceneKit.SCNTube */ },
		{ /* #776 = 0x60F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F09 /* AppKit.INSMenuItemValidation */ },
		{ /* #777 = 0x611 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F0A /* AppKit.NSMenuItemValidationWrapper */ },
		{ /* #778 = 0x613 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D3B /* AppKit.NSWindow */ },
		{ /* #779 = 0x615 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F34 /* AppKit.NSPanel */ },
		{ /* #780 = 0x617 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200054E /* QuickLookUI.QLPreviewPanel */ },
		{ /* #781 = 0x619 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200054F /* QuickLookUI.QLFilePreviewRequest */ },
		{ /* #782 = 0x61B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000550 /* QuickLookUI.IQLPreviewingController */ },
		{ /* #783 = 0x61D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000552 /* QuickLookUI.QLPreviewingControllerWrapper */ },
		{ /* #784 = 0x61F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000553 /* QuickLookUI.IQLPreviewItem */ },
		{ /* #785 = 0x621 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000555 /* QuickLookUI.QLPreviewItemWrapper */ },
		{ /* #786 = 0x623 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000556 /* QuickLookUI.QLPreviewItem */ },
		{ /* #787 = 0x625 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600329D /* System.Void QuickLookUI.QLPreviewItem::.ctor() */ },
		{ /* #788 = 0x627 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000558 /* QuickLookUI.IQLPreviewPanelDataSource */ },
		{ /* #789 = 0x629 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000559 /* QuickLookUI.QLPreviewPanelDataSourceWrapper */ },
		{ /* #790 = 0x62B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200055A /* QuickLookUI.QLPreviewPanelDataSource */ },
		{ /* #791 = 0x62D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60032AC /* System.Void QuickLookUI.QLPreviewPanelDataSource::.ctor() */ },
		{ /* #792 = 0x62F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002136 /* AppKit.INSWindowDelegate */ },
		{ /* #793 = 0x631 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002138 /* AppKit.NSWindowDelegateWrapper */ },
		{ /* #794 = 0x633 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200055B /* QuickLookUI.IQLPreviewPanelDelegate */ },
		{ /* #795 = 0x635 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200055D /* QuickLookUI.QLPreviewPanelDelegateWrapper */ },
		{ /* #796 = 0x637 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200055E /* QuickLookUI.QLPreviewPanelDelegate */ },
		{ /* #797 = 0x639 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60032B5 /* System.Void QuickLookUI.QLPreviewPanelDelegate::.ctor() */ },
		{ /* #798 = 0x63B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200055F /* QuickLookUI.QLPreviewProvider */ },
		{ /* #799 = 0x63D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000560 /* QuickLookUI.QLPreviewReply */ },
		{ /* #800 = 0x63F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000561 /* QuickLookUI.QLPreviewReplyAttachment */ },
		{ /* #801 = 0x641 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000562 /* QuickLookUI.QLPreviewView */ },
		{ /* #802 = 0x643 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000578 /* Photos.PHChangeRequest */ },
		{ /* #803 = 0x645 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000581 /* Photos.PHAssetChangeRequest */ },
		{ /* #804 = 0x647 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000577 /* Photos.PHAssetCreationRequest */ },
		{ /* #805 = 0x649 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200057A /* Photos.PHLivePhoto */ },
		{ /* #806 = 0x64B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200057E /* Photos.PHAdjustmentData */ },
		{ /* #807 = 0x64D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005B3 /* Photos.PHObject */ },
		{ /* #808 = 0x64F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200057F /* Photos.PHAsset */ },
		{ /* #809 = 0x651 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000596 /* Photos.PHCollection */ },
		{ /* #810 = 0x653 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000582 /* Photos.PHAssetCollection */ },
		{ /* #811 = 0x655 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000583 /* Photos.PHAssetCollectionChangeRequest */ },
		{ /* #812 = 0x657 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200058B /* Photos.PHAssetResource */ },
		{ /* #813 = 0x659 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200058C /* Photos.PHAssetResourceCreationOptions */ },
		{ /* #814 = 0x65B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200058E /* Photos.PHAssetResourceRequestOptions */ },
		{ /* #815 = 0x65D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005A3 /* Photos.PHImageManager */ },
		{ /* #816 = 0x65F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000592 /* Photos.PHCachingImageManager */ },
		{ /* #817 = 0x661 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000593 /* Photos.PHChange */ },
		{ /* #818 = 0x663 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000594 /* Photos.PHCloudIdentifier */ },
		{ /* #819 = 0x665 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000595 /* Photos.PHCloudIdentifierMapping */ },
		{ /* #820 = 0x667 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000598 /* Photos.PHCollectionList */ },
		{ /* #821 = 0x669 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000599 /* Photos.PHCollectionListChangeRequest */ },
		{ /* #822 = 0x66B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200059C /* Photos.PHContentEditingInput */ },
		{ /* #823 = 0x66D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200059D /* Photos.PHContentEditingInputRequestOptions */ },
		{ /* #824 = 0x66F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200059E /* Photos.PHContentEditingOutput */ },
		{ /* #825 = 0x671 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200059F /* Photos.PHFetchOptions */ },
		{ /* #826 = 0x673 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005A0 /* Photos.PHFetchResultChangeDetails */ },
		{ /* #827 = 0x675 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005A4 /* Photos.PHImageRequestOptions */ },
		{ /* #828 = 0x677 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005AD /* Photos.IPHLivePhotoFrame */ },
		{ /* #829 = 0x679 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005AE /* Photos.PHLivePhotoFrameWrapper */ },
		{ /* #830 = 0x67B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005B1 /* Photos.PHLivePhotoRequestOptions */ },
		{ /* #831 = 0x67D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005B2 /* Photos.PHLocalIdentifierMapping */ },
		{ /* #832 = 0x67F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005B4 /* Photos.PHObjectChangeDetails */ },
		{ /* #833 = 0x681 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005B5 /* Photos.PHObjectPlaceholder */ },
		{ /* #834 = 0x683 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005B7 /* Photos.PHPersistentChange */ },
		{ /* #835 = 0x685 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005B8 /* Photos.PHPersistentChangeFetchResult */ },
		{ /* #836 = 0x687 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005B9 /* Photos.PHPersistentChangeToken */ },
		{ /* #837 = 0x689 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005BA /* Photos.PHPersistentObjectChangeDetails */ },
		{ /* #838 = 0x68B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005BC /* Photos.IPHPhotoLibraryAvailabilityObserver */ },
		{ /* #839 = 0x68D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005BD /* Photos.PHPhotoLibraryAvailabilityObserverWrapper */ },
		{ /* #840 = 0x68F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005BE /* Photos.IPHPhotoLibraryChangeObserver */ },
		{ /* #841 = 0x691 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005BF /* Photos.PHPhotoLibraryChangeObserverWrapper */ },
		{ /* #842 = 0x693 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005C0 /* Photos.PHPhotoLibraryChangeObserver */ },
		{ /* #843 = 0x695 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60035D1 /* System.Void Photos.PHPhotoLibraryChangeObserver::.ctor() */ },
		{ /* #844 = 0x697 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005C3 /* Photos.PHProject */ },
		{ /* #845 = 0x699 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005C4 /* Photos.PHProjectChangeRequest */ },
		{ /* #846 = 0x69B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005C8 /* Photos.PHVideoRequestOptions */ },
		{ /* #847 = 0x69D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005DA /* PdfKit.PdfBorder */ },
		{ /* #848 = 0x69F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005D9 /* PdfKit.PdfAnnotation */ },
		{ /* #849 = 0x6A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005DB /* PdfKit.PdfAnnotationMarkup */ },
		{ /* #850 = 0x6A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005DE /* PdfKit.PdfAction */ },
		{ /* #851 = 0x6A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005DF /* PdfKit.PdfActionGoTo */ },
		{ /* #852 = 0x6A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005E0 /* PdfKit.PdfActionNamed */ },
		{ /* #853 = 0x6A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005E2 /* PdfKit.PdfActionRemoteGoTo */ },
		{ /* #854 = 0x6AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005E3 /* PdfKit.PdfActionResetForm */ },
		{ /* #855 = 0x6AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005E4 /* PdfKit.PdfActionUrl */ },
		{ /* #856 = 0x6AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005E5 /* PdfKit.PdfAnnotationButtonWidget */ },
		{ /* #857 = 0x6B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005E6 /* PdfKit.PdfAnnotationChoiceWidget */ },
		{ /* #858 = 0x6B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005E7 /* PdfKit.PdfAnnotationCircle */ },
		{ /* #859 = 0x6B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005E8 /* PdfKit.PdfAnnotationFreeText */ },
		{ /* #860 = 0x6B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005EB /* PdfKit.PdfAnnotationInk */ },
		{ /* #861 = 0x6B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005EE /* PdfKit.PdfAnnotationLine */ },
		{ /* #862 = 0x6BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005F1 /* PdfKit.PdfAnnotationLink */ },
		{ /* #863 = 0x6BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005F2 /* PdfKit.PdfAnnotationPopup */ },
		{ /* #864 = 0x6BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005F3 /* PdfKit.PdfAnnotationSquare */ },
		{ /* #865 = 0x6C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005F4 /* PdfKit.PdfAnnotationStamp */ },
		{ /* #866 = 0x6C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005F7 /* PdfKit.PdfAnnotationText */ },
		{ /* #867 = 0x6C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005FA /* PdfKit.PdfAnnotationTextWidget */ },
		{ /* #868 = 0x6C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005FD /* PdfKit.PdfAppearanceCharacteristics */ },
		{ /* #869 = 0x6C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000602 /* PdfKit.PdfDestination */ },
		{ /* #870 = 0x6CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000609 /* PdfKit.IPdfDocumentDelegate */ },
		{ /* #871 = 0x6CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200060B /* PdfKit.PdfDocumentDelegateWrapper */ },
		{ /* #872 = 0x6CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200060C /* PdfKit.PdfDocumentDelegate */ },
		{ /* #873 = 0x6D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60038B7 /* System.Void PdfKit.PdfDocumentDelegate::.ctor() */ },
		{ /* #874 = 0x6D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000613 /* PdfKit.PdfOutline */ },
		{ /* #875 = 0x6D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000614 /* PdfKit.PdfPage */ },
		{ /* #876 = 0x6D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000617 /* PdfKit.IPdfPageOverlayViewProvider */ },
		{ /* #877 = 0x6D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000619 /* PdfKit.PdfPageOverlayViewProviderWrapper */ },
		{ /* #878 = 0x6DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200061B /* PdfKit.PdfSelection */ },
		{ /* #879 = 0x6DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000621 /* PdfKit.IPdfViewDelegate */ },
		{ /* #880 = 0x6DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000623 /* PdfKit.PdfViewDelegateWrapper */ },
		{ /* #881 = 0x6E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000624 /* PdfKit.PdfViewDelegate */ },
		{ /* #882 = 0x6E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60039FE /* System.Void PdfKit.PdfViewDelegate::.ctor() */ },
		{ /* #883 = 0x6E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200062C /* PassKit.PKPaymentRequest */ },
		{ /* #884 = 0x6E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000633 /* PassKit.PKAddSecureElementPassConfiguration */ },
		{ /* #885 = 0x6E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200062E /* PassKit.PKAddCarKeyPassConfiguration */ },
		{ /* #886 = 0x6EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000630 /* PassKit.PKAddPaymentPassRequest */ },
		{ /* #887 = 0x6ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000631 /* PassKit.PKAddPaymentPassRequestConfiguration */ },
		{ /* #888 = 0x6EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000639 /* PassKit.PKAutomaticReloadPaymentRequest */ },
		{ /* #889 = 0x6F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200067E /* PassKit.PKPaymentSummaryItem */ },
		{ /* #890 = 0x6F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200063A /* PassKit.PKAutomaticReloadPaymentSummaryItem */ },
		{ /* #891 = 0x6F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200063C /* PassKit.PKBarcodeEventConfigurationRequest */ },
		{ /* #892 = 0x6F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200063D /* PassKit.PKBarcodeEventMetadataRequest */ },
		{ /* #893 = 0x6F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200063E /* PassKit.PKBarcodeEventMetadataResponse */ },
		{ /* #894 = 0x6FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200063F /* PassKit.PKBarcodeEventSignatureRequest */ },
		{ /* #895 = 0x6FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000640 /* PassKit.PKBarcodeEventSignatureResponse */ },
		{ /* #896 = 0x6FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000641 /* PassKit.PKContact */ },
		{ /* #897 = 0x701 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000643 /* PassKit.PKDateComponentsRange */ },
		{ /* #898 = 0x703 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000644 /* PassKit.PKDeferredPaymentRequest */ },
		{ /* #899 = 0x705 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000645 /* PassKit.PKDeferredPaymentSummaryItem */ },
		{ /* #900 = 0x707 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000647 /* PassKit.PKIssuerProvisioningExtensionPassEntry */ },
		{ /* #901 = 0x709 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000648 /* PassKit.PKIssuerProvisioningExtensionPaymentPassEntry */ },
		{ /* #902 = 0x70B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000649 /* PassKit.PKIssuerProvisioningExtensionStatus */ },
		{ /* #903 = 0x70D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200064A /* PassKit.PKLabeledValue */ },
		{ /* #904 = 0x70F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200064C /* PassKit.PKObject */ },
		{ /* #905 = 0x711 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200064D /* PassKit.PKPass */ },
		{ /* #906 = 0x713 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000656 /* PassKit.PKPayment */ },
		{ /* #907 = 0x715 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000658 /* PassKit.IPKPaymentAuthorizationControllerDelegate */ },
		{ /* #908 = 0x717 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200065A /* PassKit.PKPaymentAuthorizationControllerDelegateWrapper */ },
		{ /* #909 = 0x719 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200065B /* PassKit.PKPaymentAuthorizationControllerDelegate */ },
		{ /* #910 = 0x71B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6003BCA /* System.Void PassKit.PKPaymentAuthorizationControllerDelegate::.ctor() */ },
		{ /* #911 = 0x71D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200065C /* PassKit.PKPaymentAuthorizationResult */ },
		{ /* #912 = 0x71F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000665 /* PassKit.IPKPaymentAuthorizationViewControllerDelegate */ },
		{ /* #913 = 0x721 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000667 /* PassKit.PKPaymentAuthorizationViewControllerDelegateWrapper */ },
		{ /* #914 = 0x723 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000668 /* PassKit.PKPaymentAuthorizationViewControllerDelegate */ },
		{ /* #915 = 0x725 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6003C28 /* System.Void PassKit.PKPaymentAuthorizationViewControllerDelegate::.ctor() */ },
		{ /* #916 = 0x727 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000669 /* PassKit.PKPaymentButton */ },
		{ /* #917 = 0x729 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200066F /* PassKit.PKPaymentInformationEventExtension */ },
		{ /* #918 = 0x72B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000670 /* PassKit.IPKPaymentInformationRequestHandling */ },
		{ /* #919 = 0x72D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000671 /* PassKit.PKPaymentInformationRequestHandlingWrapper */ },
		{ /* #920 = 0x72F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000672 /* PassKit.PKPaymentMerchantSession */ },
		{ /* #921 = 0x731 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000673 /* PassKit.PKPaymentMethod */ },
		{ /* #922 = 0x733 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000676 /* PassKit.PKPaymentOrderDetails */ },
		{ /* #923 = 0x735 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000685 /* PassKit.PKSecureElementPass */ },
		{ /* #924 = 0x737 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000677 /* PassKit.PKPaymentPass */ },
		{ /* #925 = 0x739 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200067D /* PassKit.PKPaymentRequestUpdate */ },
		{ /* #926 = 0x73B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000678 /* PassKit.PKPaymentRequestCouponCodeUpdate */ },
		{ /* #927 = 0x73D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000679 /* PassKit.PKPaymentRequestMerchantSessionUpdate */ },
		{ /* #928 = 0x73F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200067A /* PassKit.PKPaymentRequestPaymentMethodUpdate */ },
		{ /* #929 = 0x741 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200067B /* PassKit.PKPaymentRequestShippingContactUpdate */ },
		{ /* #930 = 0x743 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200067C /* PassKit.PKPaymentRequestShippingMethodUpdate */ },
		{ /* #931 = 0x745 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000680 /* PassKit.PKPaymentToken */ },
		{ /* #932 = 0x747 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000681 /* PassKit.PKPaymentTokenContext */ },
		{ /* #933 = 0x749 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000683 /* PassKit.PKRecurringPaymentRequest */ },
		{ /* #934 = 0x74B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000684 /* PassKit.PKRecurringPaymentSummaryItem */ },
		{ /* #935 = 0x74D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000687 /* PassKit.PKShareablePassMetadataPreview */ },
		{ /* #936 = 0x74F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200068B /* PassKit.PKShippingMethod */ },
		{ /* #937 = 0x751 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200068D /* PassKit.PKStoredValuePassBalance */ },
		{ /* #938 = 0x753 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000690 /* PassKit.PKStoredValuePassProperties */ },
		{ /* #939 = 0x755 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000692 /* PassKit.PKTransitPassProperties */ },
		{ /* #940 = 0x757 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000691 /* PassKit.PKSuicaPassProperties */ },
		{ /* #941 = 0x759 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000693 /* PassKit.IPKVehicleConnectionDelegate */ },
		{ /* #942 = 0x75B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000694 /* PassKit.PKVehicleConnectionDelegateWrapper */ },
		{ /* #943 = 0x75D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000695 /* PassKit.PKVehicleConnectionDelegate */ },
		{ /* #944 = 0x75F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6003D63 /* System.Void PassKit.PKVehicleConnectionDelegate::.ctor() */ },
		{ /* #945 = 0x761 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006B0 /* NetworkExtension.NEAppRule */ },
		{ /* #946 = 0x763 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006B9 /* NetworkExtension.NEDnsSettings */ },
		{ /* #947 = 0x765 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006B1 /* NetworkExtension.NEDnsOverHttpsSettings */ },
		{ /* #948 = 0x767 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006B2 /* NetworkExtension.NEDnsOverTlsSettings */ },
		{ /* #949 = 0x769 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000707 /* NetworkExtension.NEVpnProtocol */ },
		{ /* #950 = 0x76B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006B8 /* NetworkExtension.NEDnsProxyProviderProtocol */ },
		{ /* #951 = 0x76D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006F1 /* NetworkExtension.NETunnelNetworkSettings */ },
		{ /* #952 = 0x76F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006E7 /* NetworkExtension.NEPacketTunnelNetworkSettings */ },
		{ /* #953 = 0x771 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006BD /* NetworkExtension.NEEthernetTunnelNetworkSettings */ },
		{ /* #954 = 0x773 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006E9 /* NetworkExtension.NEProvider */ },
		{ /* #955 = 0x775 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006F2 /* NetworkExtension.NETunnelProvider */ },
		{ /* #956 = 0x777 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006E8 /* NetworkExtension.NEPacketTunnelProvider */ },
		{ /* #957 = 0x779 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006BE /* NetworkExtension.NEEthernetTunnelProvider */ },
		{ /* #958 = 0x77B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006BF /* NetworkExtension.NEEvaluateConnectionRule */ },
		{ /* #959 = 0x77D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006D6 /* NetworkExtension.NEFilterVerdict */ },
		{ /* #960 = 0x77F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006C4 /* NetworkExtension.NEFilterDataVerdict */ },
		{ /* #961 = 0x781 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006C5 /* NetworkExtension.NEFilterFlow */ },
		{ /* #962 = 0x783 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006CA /* NetworkExtension.NEFilterNewFlowVerdict */ },
		{ /* #963 = 0x785 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006CB /* NetworkExtension.NEFilterPacketContext */ },
		{ /* #964 = 0x787 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006CE /* NetworkExtension.NEFilterProvider */ },
		{ /* #965 = 0x789 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006CC /* NetworkExtension.NEFilterPacketProvider */ },
		{ /* #966 = 0x78B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006CF /* NetworkExtension.NEFilterProviderConfiguration */ },
		{ /* #967 = 0x78D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006D0 /* NetworkExtension.NEFilterReport */ },
		{ /* #968 = 0x78F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006D3 /* NetworkExtension.NEFilterRule */ },
		{ /* #969 = 0x791 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006D4 /* NetworkExtension.NEFilterSettings */ },
		{ /* #970 = 0x793 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006D5 /* NetworkExtension.NEFilterSocketFlow */ },
		{ /* #971 = 0x795 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006D7 /* NetworkExtension.NEFlowMetaData */ },
		{ /* #972 = 0x797 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006D8 /* NetworkExtension.NEIPv4Route */ },
		{ /* #973 = 0x799 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006D9 /* NetworkExtension.NEIPv4Settings */ },
		{ /* #974 = 0x79B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006DA /* NetworkExtension.NEIPv6Route */ },
		{ /* #975 = 0x79D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006DB /* NetworkExtension.NEIPv6Settings */ },
		{ /* #976 = 0x79F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006DC /* NetworkExtension.NENetworkRule */ },
		{ /* #977 = 0x7A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006DE /* NetworkExtension.NEOnDemandRule */ },
		{ /* #978 = 0x7A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006E0 /* NetworkExtension.NEOnDemandRuleConnect */ },
		{ /* #979 = 0x7A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006E1 /* NetworkExtension.NEOnDemandRuleDisconnect */ },
		{ /* #980 = 0x7A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006E2 /* NetworkExtension.NEOnDemandRuleEvaluateConnection */ },
		{ /* #981 = 0x7A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006E3 /* NetworkExtension.NEOnDemandRuleIgnore */ },
		{ /* #982 = 0x7AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006E5 /* NetworkExtension.NEPacket */ },
		{ /* #983 = 0x7AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006EB /* NetworkExtension.NEProxyServer */ },
		{ /* #984 = 0x7AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006EC /* NetworkExtension.NEProxySettings */ },
		{ /* #985 = 0x7B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006EF /* NetworkExtension.NETransparentProxyNetworkSettings */ },
		{ /* #986 = 0x7B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006AB /* NetworkExtension.NEAppProxyProvider */ },
		{ /* #987 = 0x7B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006F0 /* NetworkExtension.NETransparentProxyProvider */ },
		{ /* #988 = 0x7B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006F6 /* NetworkExtension.NETunnelProviderProtocol */ },
		{ /* #989 = 0x7B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006F9 /* NetworkExtension.NEVpnConnection */ },
		{ /* #990 = 0x7BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006F8 /* NetworkExtension.NETunnelProviderSession */ },
		{ /* #991 = 0x7BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000704 /* NetworkExtension.NEVpnIke2SecurityAssociationParameters */ },
		{ /* #992 = 0x7BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000709 /* NetworkExtension.NEVpnProtocolIpSec */ },
		{ /* #993 = 0x7C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000708 /* NetworkExtension.NEVpnProtocolIke2 */ },
		{ /* #994 = 0x7C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200070C /* NetworkExtension.NWEndpoint */ },
		{ /* #995 = 0x7C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200070B /* NetworkExtension.NWBonjourServiceEndpoint */ },
		{ /* #996 = 0x7C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200070D /* NetworkExtension.NWHostEndpoint */ },
		{ /* #997 = 0x7C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200070E /* NetworkExtension.NWPath */ },
		{ /* #998 = 0x7CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000711 /* NetworkExtension.INWTcpConnectionAuthenticationDelegate */ },
		{ /* #999 = 0x7CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000713 /* NetworkExtension.NWTcpConnectionAuthenticationDelegateWrapper */ },
		{ /* #1000 = 0x7CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000714 /* NetworkExtension.NWTcpConnectionAuthenticationDelegate */ },
		{ /* #1001 = 0x7D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6004242 /* System.Void NetworkExtension.NWTcpConnectionAuthenticationDelegate::.ctor() */ },
		{ /* #1002 = 0x7D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000716 /* NetworkExtension.NWTlsParameters */ },
		{ /* #1003 = 0x7D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000779 /* NaturalLanguage.NLModel */ },
		{ /* #1004 = 0x7D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200077E /* NaturalLanguage.NLGazetteer */ },
		{ /* #1005 = 0x7D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000780 /* NaturalLanguage.NLModelConfiguration */ },
		{ /* #1006 = 0x7DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000787 /* NaturalLanguage.NLTokenizer */ },
		{ /* #1007 = 0x7DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200078E /* MultipeerConnectivity.MCAdvertiserAssistant */ },
		{ /* #1008 = 0x7DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200078F /* MultipeerConnectivity.IMCAdvertiserAssistantDelegate */ },
		{ /* #1009 = 0x7E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000791 /* MultipeerConnectivity.MCAdvertiserAssistantDelegateWrapper */ },
		{ /* #1010 = 0x7E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000792 /* MultipeerConnectivity.MCAdvertiserAssistantDelegate */ },
		{ /* #1011 = 0x7E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60047C7 /* System.Void MultipeerConnectivity.MCAdvertiserAssistantDelegate::.ctor() */ },
		{ /* #1012 = 0x7E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007A1 /* MultipeerConnectivity.IMCNearbyServiceBrowserDelegate */ },
		{ /* #1013 = 0x7E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007A3 /* MultipeerConnectivity.MCNearbyServiceBrowserDelegateWrapper */ },
		{ /* #1014 = 0x7EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000793 /* MultipeerConnectivity.MCBrowserViewController */ },
		{ /* #1015 = 0x7ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000794 /* MultipeerConnectivity.IMCBrowserViewControllerDelegate */ },
		{ /* #1016 = 0x7EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000796 /* MultipeerConnectivity.MCBrowserViewControllerDelegateWrapper */ },
		{ /* #1017 = 0x7F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000797 /* MultipeerConnectivity.MCBrowserViewControllerDelegate */ },
		{ /* #1018 = 0x7F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60047E8 /* System.Void MultipeerConnectivity.MCBrowserViewControllerDelegate::.ctor() */ },
		{ /* #1019 = 0x7F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200079B /* MultipeerConnectivity.MCNearbyServiceAdvertiser */ },
		{ /* #1020 = 0x7F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200079C /* MultipeerConnectivity.IMCNearbyServiceAdvertiserDelegate */ },
		{ /* #1021 = 0x7F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200079E /* MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateWrapper */ },
		{ /* #1022 = 0x7FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200079F /* MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate */ },
		{ /* #1023 = 0x7FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6004802 /* System.Void MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate::.ctor() */ },
		{ /* #1024 = 0x7FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007A0 /* MultipeerConnectivity.MCNearbyServiceBrowser */ },
		{ /* #1025 = 0x801 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007A4 /* MultipeerConnectivity.MCNearbyServiceBrowserDelegate */ },
		{ /* #1026 = 0x803 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600481C /* System.Void MultipeerConnectivity.MCNearbyServiceBrowserDelegate::.ctor() */ },
		{ /* #1027 = 0x805 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007A5 /* MultipeerConnectivity.MCPeerID */ },
		{ /* #1028 = 0x807 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007A6 /* MultipeerConnectivity.IMCSessionDelegate */ },
		{ /* #1029 = 0x809 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007A8 /* MultipeerConnectivity.MCSessionDelegateWrapper */ },
		{ /* #1030 = 0x80B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007A9 /* MultipeerConnectivity.MCSessionDelegate */ },
		{ /* #1031 = 0x80D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6004837 /* System.Void MultipeerConnectivity.MCSessionDelegate::.ctor() */ },
		{ /* #1032 = 0x80F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007AF /* ModelIO.MDLAnimatedValue */ },
		{ /* #1033 = 0x811 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007AE /* ModelIO.MDLAnimatedQuaternion */ },
		{ /* #1034 = 0x813 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007B0 /* ModelIO.MDLAnimatedScalarArray */ },
		{ /* #1035 = 0x815 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007B1 /* ModelIO.MDLAnimatedVector3Array */ },
		{ /* #1036 = 0x817 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007B2 /* ModelIO.MDLAnimatedQuaternionArray */ },
		{ /* #1037 = 0x819 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007B3 /* ModelIO.MDLAnimatedScalar */ },
		{ /* #1038 = 0x81B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007B4 /* ModelIO.MDLAnimatedVector2 */ },
		{ /* #1039 = 0x81D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007B5 /* ModelIO.MDLAnimatedVector3 */ },
		{ /* #1040 = 0x81F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007B6 /* ModelIO.MDLAnimatedVector4 */ },
		{ /* #1041 = 0x821 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007B7 /* ModelIO.MDLAnimatedMatrix4x4 */ },
		{ /* #1042 = 0x823 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007B8 /* ModelIO.MDLMatrix4x4Array */ },
		{ /* #1043 = 0x825 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007BA /* ModelIO.MDLAsset */ },
		{ /* #1044 = 0x827 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007F0 /* ModelIO.IMDLNamed */ },
		{ /* #1045 = 0x829 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007F1 /* ModelIO.MDLNamedWrapper */ },
		{ /* #1046 = 0x82B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000805 /* ModelIO.MDLTexture */ },
		{ /* #1047 = 0x82D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007BC /* ModelIO.MDLNoiseTexture */ },
		{ /* #1048 = 0x82F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007CC /* ModelIO.IMDLComponent */ },
		{ /* #1049 = 0x831 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007CD /* ModelIO.MDLComponentWrapper */ },
		{ /* #1050 = 0x833 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000809 /* ModelIO.IMDLTransformComponent */ },
		{ /* #1051 = 0x835 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200080B /* ModelIO.MDLTransformComponentWrapper */ },
		{ /* #1052 = 0x837 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007C0 /* ModelIO.MDLTransform */ },
		{ /* #1053 = 0x839 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007C1 /* ModelIO.MDLVertexDescriptor */ },
		{ /* #1054 = 0x83B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007C3 /* ModelIO.MDLAnimationBindComponent */ },
		{ /* #1055 = 0x83D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007F4 /* ModelIO.MDLObject */ },
		{ /* #1056 = 0x83F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007D3 /* ModelIO.MDLLight */ },
		{ /* #1057 = 0x841 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007FB /* ModelIO.MDLPhysicallyPlausibleLight */ },
		{ /* #1058 = 0x843 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007C4 /* ModelIO.MDLAreaLight */ },
		{ /* #1059 = 0x845 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007C5 /* ModelIO.IMDLAssetResolver */ },
		{ /* #1060 = 0x847 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007C6 /* ModelIO.MDLAssetResolverWrapper */ },
		{ /* #1061 = 0x849 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007C7 /* ModelIO.MDLBundleAssetResolver */ },
		{ /* #1062 = 0x84B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007C8 /* ModelIO.MDLCamera */ },
		{ /* #1063 = 0x84D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007CA /* ModelIO.MDLCheckerboardTexture */ },
		{ /* #1064 = 0x84F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007CB /* ModelIO.MDLColorSwatchTexture */ },
		{ /* #1065 = 0x851 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007D1 /* ModelIO.IMDLJointAnimation */ },
		{ /* #1066 = 0x853 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007D2 /* ModelIO.MDLJointAnimationWrapper */ },
		{ /* #1067 = 0x855 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007D4 /* ModelIO.MDLLightProbe */ },
		{ /* #1068 = 0x857 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007D5 /* ModelIO.IMDLLightProbeIrradianceDataSource */ },
		{ /* #1069 = 0x859 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007D7 /* ModelIO.MDLLightProbeIrradianceDataSourceWrapper */ },
		{ /* #1070 = 0x85B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007D8 /* ModelIO.MDLLightProbeIrradianceDataSource */ },
		{ /* #1071 = 0x85D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6004A8E /* System.Void ModelIO.MDLLightProbeIrradianceDataSource::.ctor() */ },
		{ /* #1072 = 0x85F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007DA /* ModelIO.MDLMaterial */ },
		{ /* #1073 = 0x861 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007DD /* ModelIO.MDLMaterialProperty */ },
		{ /* #1074 = 0x863 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007DE /* ModelIO.MDLMaterialPropertyConnection */ },
		{ /* #1075 = 0x865 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007E0 /* ModelIO.MDLMaterialPropertyNode */ },
		{ /* #1076 = 0x867 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007DF /* ModelIO.MDLMaterialPropertyGraph */ },
		{ /* #1077 = 0x869 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007E5 /* ModelIO.IMDLMeshBuffer */ },
		{ /* #1078 = 0x86B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007E6 /* ModelIO.MDLMeshBufferWrapper */ },
		{ /* #1079 = 0x86D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007E7 /* ModelIO.IMDLMeshBufferAllocator */ },
		{ /* #1080 = 0x86F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007E8 /* ModelIO.MDLMeshBufferAllocatorWrapper */ },
		{ /* #1081 = 0x871 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007E9 /* ModelIO.MDLMeshBufferData */ },
		{ /* #1082 = 0x873 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007EA /* ModelIO.MDLMeshBufferDataAllocator */ },
		{ /* #1083 = 0x875 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007EB /* ModelIO.MDLMeshBufferMap */ },
		{ /* #1084 = 0x877 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007ED /* ModelIO.IMDLMeshBufferZone */ },
		{ /* #1085 = 0x879 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007EE /* ModelIO.MDLMeshBufferZoneWrapper */ },
		{ /* #1086 = 0x87B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007EF /* ModelIO.MDLMeshBufferZoneDefault */ },
		{ /* #1087 = 0x87D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007F3 /* ModelIO.MDLNormalMapTexture */ },
		{ /* #1088 = 0x87F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007F6 /* ModelIO.IMDLObjectContainerComponent */ },
		{ /* #1089 = 0x881 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007F7 /* ModelIO.MDLObjectContainerComponentWrapper */ },
		{ /* #1090 = 0x883 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007F5 /* ModelIO.MDLObjectContainer */ },
		{ /* #1091 = 0x885 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007F8 /* ModelIO.MDLPackedJointAnimation */ },
		{ /* #1092 = 0x887 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007F9 /* ModelIO.MDLPathAssetResolver */ },
		{ /* #1093 = 0x889 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007FA /* ModelIO.MDLPhotometricLight */ },
		{ /* #1094 = 0x88B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007FF /* ModelIO.MDLScatteringFunction */ },
		{ /* #1095 = 0x88D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007FC /* ModelIO.MDLPhysicallyPlausibleScatteringFunction */ },
		{ /* #1096 = 0x88F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007FE /* ModelIO.MDLRelativeAssetResolver */ },
		{ /* #1097 = 0x891 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000800 /* ModelIO.MDLSkeleton */ },
		{ /* #1098 = 0x893 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000801 /* ModelIO.MDLSkyCubeTexture */ },
		{ /* #1099 = 0x895 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000802 /* ModelIO.MDLStereoscopicCamera */ },
		{ /* #1100 = 0x897 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000803 /* ModelIO.MDLSubmesh */ },
		{ /* #1101 = 0x899 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000804 /* ModelIO.MDLSubmeshTopology */ },
		{ /* #1102 = 0x89B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000807 /* ModelIO.MDLTextureFilter */ },
		{ /* #1103 = 0x89D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000808 /* ModelIO.MDLTextureSampler */ },
		{ /* #1104 = 0x89F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200080D /* ModelIO.IMDLTransformOp */ },
		{ /* #1105 = 0x8A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200080E /* ModelIO.MDLTransformOpWrapper */ },
		{ /* #1106 = 0x8A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200080C /* ModelIO.MDLTransformMatrixOp */ },
		{ /* #1107 = 0x8A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000810 /* ModelIO.MDLTransformOrientOp */ },
		{ /* #1108 = 0x8A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000811 /* ModelIO.MDLTransformRotateOp */ },
		{ /* #1109 = 0x8A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000812 /* ModelIO.MDLTransformRotateXOp */ },
		{ /* #1110 = 0x8AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000813 /* ModelIO.MDLTransformRotateYOp */ },
		{ /* #1111 = 0x8AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000814 /* ModelIO.MDLTransformRotateZOp */ },
		{ /* #1112 = 0x8AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000815 /* ModelIO.MDLTransformScaleOp */ },
		{ /* #1113 = 0x8B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000816 /* ModelIO.MDLTransformStack */ },
		{ /* #1114 = 0x8B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000817 /* ModelIO.MDLTransformTranslateOp */ },
		{ /* #1115 = 0x8B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000818 /* ModelIO.MDLUrlTexture */ },
		{ /* #1116 = 0x8B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000819 /* ModelIO.MDLVertexAttribute */ },
		{ /* #1117 = 0x8B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200081A /* ModelIO.MDLVertexAttributeData */ },
		{ /* #1118 = 0x8BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200081C /* ModelIO.MDLVertexBufferLayout */ },
		{ /* #1119 = 0x8BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200081E /* ModelIO.MDLVoxelArray */ },
		{ /* #1120 = 0x8BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000821 /* MetricKit.MXMetricManager */ },
		{ /* #1121 = 0x8C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000822 /* MetricKit.MXAverage`1 */ },
		{ /* #1122 = 0x8C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000823 /* MetricKit.MXCallStackTree */ },
		{ /* #1123 = 0x8C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000826 /* MetricKit.MXDiagnostic */ },
		{ /* #1124 = 0x8C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000824 /* MetricKit.MXCpuExceptionDiagnostic */ },
		{ /* #1125 = 0x8C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000825 /* MetricKit.MXCrashDiagnostic */ },
		{ /* #1126 = 0x8CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000827 /* MetricKit.MXDiagnosticPayload */ },
		{ /* #1127 = 0x8CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000828 /* MetricKit.MXDiskWriteExceptionDiagnostic */ },
		{ /* #1128 = 0x8CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000829 /* MetricKit.MXHangDiagnostic */ },
		{ /* #1129 = 0x8D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200082A /* MetricKit.MXHistogram`1 */ },
		{ /* #1130 = 0x8D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200082B /* MetricKit.MXHistogramBucket`1 */ },
		{ /* #1131 = 0x8D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200082C /* MetricKit.MXMetaData */ },
		{ /* #1132 = 0x8D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200082D /* MetricKit.IMXMetricManagerSubscriber */ },
		{ /* #1133 = 0x8D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200082F /* MetricKit.MXMetricManagerSubscriberWrapper */ },
		{ /* #1134 = 0x8DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200084C /* MetalPerformanceShadersGraph.MPSGraph */ },
		{ /* #1135 = 0x8DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200084D /* MetalPerformanceShadersGraph.MPSGraphCompilationDescriptor */ },
		{ /* #1136 = 0x8DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200084E /* MetalPerformanceShadersGraph.MPSGraphConvolution2DOpDescriptor */ },
		{ /* #1137 = 0x8E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200084F /* MetalPerformanceShadersGraph.MPSGraphCreateSparseOpDescriptor */ },
		{ /* #1138 = 0x8E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000850 /* MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution2DOpDescriptor */ },
		{ /* #1139 = 0x8E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000852 /* MetalPerformanceShadersGraph.MPSGraphDevice */ },
		{ /* #1140 = 0x8E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000854 /* MetalPerformanceShadersGraph.MPSGraphExecutable */ },
		{ /* #1141 = 0x8E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000855 /* MetalPerformanceShadersGraph.MPSGraphExecutableExecutionDescriptor */ },
		{ /* #1142 = 0x8EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000856 /* MetalPerformanceShadersGraph.MPSGraphExecutionDescriptor */ },
		{ /* #1143 = 0x8ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000858 /* MetalPerformanceShadersGraph.MPSGraphOperation */ },
		{ /* #1144 = 0x8EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200085C /* MetalPerformanceShadersGraph.MPSGraphPooling2DOpDescriptor */ },
		{ /* #1145 = 0x8F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000860 /* MetalPerformanceShadersGraph.MPSGraphRandomOpDescriptor */ },
		{ /* #1146 = 0x8F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000869 /* MetalPerformanceShadersGraph.MPSGraphType */ },
		{ /* #1147 = 0x8F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000874 /* MetalPerformanceShaders.MPSCnnConvolutionDescriptor */ },
		{ /* #1148 = 0x8F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200088B /* MetalPerformanceShaders.MPSKernel */ },
		{ /* #1149 = 0x8F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008E9 /* MetalPerformanceShaders.MPSCnnKernel */ },
		{ /* #1150 = 0x8FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000875 /* MetalPerformanceShaders.MPSCnnBinaryConvolution */ },
		{ /* #1151 = 0x8FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000876 /* MetalPerformanceShaders.MPSCnnBinaryFullyConnected */ },
		{ /* #1152 = 0x8FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008FA /* MetalPerformanceShaders.MPSCnnNeuron */ },
		{ /* #1153 = 0x901 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000877 /* MetalPerformanceShaders.MPSCnnNeuronPReLU */ },
		{ /* #1154 = 0x903 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A25 /* MetalPerformanceShaders.MPSUnaryImageKernel */ },
		{ /* #1155 = 0x905 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200088A /* MetalPerformanceShaders.MPSImageScale */ },
		{ /* #1156 = 0x907 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200088C /* MetalPerformanceShaders.MPSImage */ },
		{ /* #1157 = 0x909 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200088D /* MetalPerformanceShaders.MPSImageDilate */ },
		{ /* #1158 = 0x90B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200088E /* MetalPerformanceShaders.MPSImageErode */ },
		{ /* #1159 = 0x90D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200088F /* MetalPerformanceShaders.MPSImageThresholdBinary */ },
		{ /* #1160 = 0x90F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000890 /* MetalPerformanceShaders.MPSImageThresholdBinaryInverse */ },
		{ /* #1161 = 0x911 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000891 /* MetalPerformanceShaders.MPSImageThresholdTruncate */ },
		{ /* #1162 = 0x913 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000892 /* MetalPerformanceShaders.MPSImageThresholdToZero */ },
		{ /* #1163 = 0x915 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000893 /* MetalPerformanceShaders.MPSImageThresholdToZeroInverse */ },
		{ /* #1164 = 0x917 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000894 /* MetalPerformanceShaders.MPSImageSobel */ },
		{ /* #1165 = 0x919 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000895 /* MetalPerformanceShaders.MPSCnnConvolution */ },
		{ /* #1166 = 0x91B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000896 /* MetalPerformanceShaders.MPSCnnFullyConnected */ },
		{ /* #1167 = 0x91D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000897 /* MetalPerformanceShaders.MPSImageConversion */ },
		{ /* #1168 = 0x91F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000898 /* MetalPerformanceShaders.MPSImagePyramid */ },
		{ /* #1169 = 0x921 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000899 /* MetalPerformanceShaders.MPSImageGaussianPyramid */ },
		{ /* #1170 = 0x923 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200089A /* MetalPerformanceShaders.MPSImageLaplacianPyramid */ },
		{ /* #1171 = 0x925 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200089B /* MetalPerformanceShaders.MPSImageLaplacianPyramidSubtract */ },
		{ /* #1172 = 0x927 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200089C /* MetalPerformanceShaders.MPSImageLaplacianPyramidAdd */ },
		{ /* #1173 = 0x929 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009BF /* MetalPerformanceShaders.MPSNNFilterNode */ },
		{ /* #1174 = 0x92B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008C9 /* MetalPerformanceShaders.MPSCnnConvolutionNode */ },
		{ /* #1175 = 0x92D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200089D /* MetalPerformanceShaders.MPSCnnBinaryConvolutionNode */ },
		{ /* #1176 = 0x92F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200089E /* MetalPerformanceShaders.MPSCnnBinaryFullyConnectedNode */ },
		{ /* #1177 = 0x931 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200089F /* MetalPerformanceShaders.MPSNDArray */ },
		{ /* #1178 = 0x933 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008A2 /* MetalPerformanceShaders.MPSStateResourceList */ },
		{ /* #1179 = 0x935 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008A4 /* MetalPerformanceShaders.MPSAccelerationStructureGroup */ },
		{ /* #1180 = 0x937 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008A9 /* MetalPerformanceShaders.MPSBinaryImageKernel */ },
		{ /* #1181 = 0x939 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008BE /* MetalPerformanceShaders.MPSCnnBinaryKernel */ },
		{ /* #1182 = 0x93B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008AD /* MetalPerformanceShaders.MPSCnnArithmetic */ },
		{ /* #1183 = 0x93D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008AB /* MetalPerformanceShaders.MPSCnnAdd */ },
		{ /* #1184 = 0x93F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008DF /* MetalPerformanceShaders.MPSCnnGradientKernel */ },
		{ /* #1185 = 0x941 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008AE /* MetalPerformanceShaders.MPSCnnArithmeticGradient */ },
		{ /* #1186 = 0x943 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008AC /* MetalPerformanceShaders.MPSCnnAddGradient */ },
		{ /* #1187 = 0x945 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A1C /* MetalPerformanceShaders.MPSState */ },
		{ /* #1188 = 0x947 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009B4 /* MetalPerformanceShaders.MPSNNBinaryGradientState */ },
		{ /* #1189 = 0x949 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008AF /* MetalPerformanceShaders.MPSCnnArithmeticGradientState */ },
		{ /* #1190 = 0x94B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008B0 /* MetalPerformanceShaders.MPSCnnBatchNormalization */ },
		{ /* #1191 = 0x94D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008B1 /* MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource */ },
		{ /* #1192 = 0x94F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008B3 /* MetalPerformanceShaders.MPSCnnBatchNormalizationDataSourceWrapper */ },
		{ /* #1193 = 0x951 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008B4 /* MetalPerformanceShaders.MPSCnnBatchNormalizationDataSource */ },
		{ /* #1194 = 0x953 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6005350 /* System.Void MetalPerformanceShaders.MPSCnnBatchNormalizationDataSource::.ctor() */ },
		{ /* #1195 = 0x955 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6005353 /* System.Void MetalPerformanceShaders.MPSCnnBatchNormalizationDataSource::.ctor(Foundation.NSCoder) */ },
		{ /* #1196 = 0x957 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008B6 /* MetalPerformanceShaders.MPSCnnBatchNormalizationGradient */ },
		{ /* #1197 = 0x959 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009C1 /* MetalPerformanceShaders.MPSNNGradientFilterNode */ },
		{ /* #1198 = 0x95B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A08 /* MetalPerformanceShaders.IMPSNNTrainableNode */ },
		{ /* #1199 = 0x95D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A09 /* MetalPerformanceShaders.MPSNNTrainableNodeWrapper */ },
		{ /* #1200 = 0x95F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008B7 /* MetalPerformanceShaders.MPSCnnBatchNormalizationGradientNode */ },
		{ /* #1201 = 0x961 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008B8 /* MetalPerformanceShaders.MPSCnnBatchNormalizationNode */ },
		{ /* #1202 = 0x963 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009C2 /* MetalPerformanceShaders.MPSNNGradientState */ },
		{ /* #1203 = 0x965 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008B9 /* MetalPerformanceShaders.MPSCnnBatchNormalizationState */ },
		{ /* #1204 = 0x967 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008BA /* MetalPerformanceShaders.MPSCnnBatchNormalizationStatistics */ },
		{ /* #1205 = 0x969 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008BB /* MetalPerformanceShaders.MPSCnnBatchNormalizationStatisticsGradient */ },
		{ /* #1206 = 0x96B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008BF /* MetalPerformanceShaders.IMPSCnnConvolutionDataSource */ },
		{ /* #1207 = 0x96D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008C1 /* MetalPerformanceShaders.MPSCnnConvolutionDataSourceWrapper */ },
		{ /* #1208 = 0x96F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008C2 /* MetalPerformanceShaders.MPSCnnConvolutionDataSource */ },
		{ /* #1209 = 0x971 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60053F1 /* System.Void MetalPerformanceShaders.MPSCnnConvolutionDataSource::.ctor() */ },
		{ /* #1210 = 0x973 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008C4 /* MetalPerformanceShaders.MPSCnnConvolutionGradient */ },
		{ /* #1211 = 0x975 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008C5 /* MetalPerformanceShaders.MPSCnnConvolutionGradientNode */ },
		{ /* #1212 = 0x977 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200097A /* MetalPerformanceShaders.IMPSImageSizeEncodingState */ },
		{ /* #1213 = 0x979 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200097B /* MetalPerformanceShaders.MPSImageSizeEncodingStateWrapper */ },
		{ /* #1214 = 0x97B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008C7 /* MetalPerformanceShaders.MPSCnnConvolutionGradientState */ },
		{ /* #1215 = 0x97D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A05 /* MetalPerformanceShaders.MPSNNStateNode */ },
		{ /* #1216 = 0x97F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009C3 /* MetalPerformanceShaders.MPSNNGradientStateNode */ },
		{ /* #1217 = 0x981 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008C8 /* MetalPerformanceShaders.MPSCnnConvolutionGradientStateNode */ },
		{ /* #1218 = 0x983 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008CA /* MetalPerformanceShaders.MPSCnnConvolutionStateNode */ },
		{ /* #1219 = 0x985 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008CB /* MetalPerformanceShaders.MPSCnnConvolutionTranspose */ },
		{ /* #1220 = 0x987 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008CC /* MetalPerformanceShaders.MPSCnnConvolutionTransposeNode */ },
		{ /* #1221 = 0x989 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008CD /* MetalPerformanceShaders.MPSCnnConvolutionWeightsAndBiasesState */ },
		{ /* #1222 = 0x98B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008CE /* MetalPerformanceShaders.MPSCnnCrossChannelNormalization */ },
		{ /* #1223 = 0x98D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008CF /* MetalPerformanceShaders.MPSCnnCrossChannelNormalizationGradient */ },
		{ /* #1224 = 0x98F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008D0 /* MetalPerformanceShaders.MPSCnnCrossChannelNormalizationGradientNode */ },
		{ /* #1225 = 0x991 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200091C /* MetalPerformanceShaders.MPSCnnNormalizationNode */ },
		{ /* #1226 = 0x993 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008D1 /* MetalPerformanceShaders.MPSCnnCrossChannelNormalizationNode */ },
		{ /* #1227 = 0x995 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008D2 /* MetalPerformanceShaders.MPSCnnDepthWiseConvolutionDescriptor */ },
		{ /* #1228 = 0x997 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200091D /* MetalPerformanceShaders.MPSCnnPooling */ },
		{ /* #1229 = 0x999 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008D3 /* MetalPerformanceShaders.MPSCnnDilatedPoolingMax */ },
		{ /* #1230 = 0x99B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000922 /* MetalPerformanceShaders.MPSCnnPoolingGradient */ },
		{ /* #1231 = 0x99D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008D4 /* MetalPerformanceShaders.MPSCnnDilatedPoolingMaxGradient */ },
		{ /* #1232 = 0x99F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000923 /* MetalPerformanceShaders.MPSCnnPoolingGradientNode */ },
		{ /* #1233 = 0x9A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008D5 /* MetalPerformanceShaders.MPSCnnDilatedPoolingMaxGradientNode */ },
		{ /* #1234 = 0x9A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008D6 /* MetalPerformanceShaders.MPSCnnDilatedPoolingMaxNode */ },
		{ /* #1235 = 0x9A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008D7 /* MetalPerformanceShaders.MPSCnnDivide */ },
		{ /* #1236 = 0x9A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008D8 /* MetalPerformanceShaders.MPSCnnDropout */ },
		{ /* #1237 = 0x9A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008D9 /* MetalPerformanceShaders.MPSCnnDropoutGradient */ },
		{ /* #1238 = 0x9AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008DA /* MetalPerformanceShaders.MPSCnnDropoutGradientNode */ },
		{ /* #1239 = 0x9AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008DB /* MetalPerformanceShaders.MPSCnnDropoutGradientState */ },
		{ /* #1240 = 0x9AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008DC /* MetalPerformanceShaders.MPSCnnDropoutNode */ },
		{ /* #1241 = 0x9B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008DD /* MetalPerformanceShaders.MPSCnnFullyConnectedGradient */ },
		{ /* #1242 = 0x9B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008DE /* MetalPerformanceShaders.MPSCnnFullyConnectedNode */ },
		{ /* #1243 = 0x9B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008E0 /* MetalPerformanceShaders.MPSCnnInstanceNormalization */ },
		{ /* #1244 = 0x9B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008E1 /* MetalPerformanceShaders.IMPSCnnInstanceNormalizationDataSource */ },
		{ /* #1245 = 0x9B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008E3 /* MetalPerformanceShaders.MPSCnnInstanceNormalizationDataSourceWrapper */ },
		{ /* #1246 = 0x9BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008E4 /* MetalPerformanceShaders.MPSCnnInstanceNormalizationDataSource */ },
		{ /* #1247 = 0x9BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600551C /* System.Void MetalPerformanceShaders.MPSCnnInstanceNormalizationDataSource::.ctor() */ },
		{ /* #1248 = 0x9BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600551F /* System.Void MetalPerformanceShaders.MPSCnnInstanceNormalizationDataSource::.ctor(Foundation.NSCoder) */ },
		{ /* #1249 = 0x9C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008E5 /* MetalPerformanceShaders.MPSCnnInstanceNormalizationGradient */ },
		{ /* #1250 = 0x9C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008E6 /* MetalPerformanceShaders.MPSCnnInstanceNormalizationGradientNode */ },
		{ /* #1251 = 0x9C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008E7 /* MetalPerformanceShaders.MPSCnnInstanceNormalizationGradientState */ },
		{ /* #1252 = 0x9C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008E8 /* MetalPerformanceShaders.MPSCnnInstanceNormalizationNode */ },
		{ /* #1253 = 0x9C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008EA /* MetalPerformanceShaders.MPSCnnLocalContrastNormalization */ },
		{ /* #1254 = 0x9CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008EB /* MetalPerformanceShaders.MPSCnnLocalContrastNormalizationGradient */ },
		{ /* #1255 = 0x9CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008EC /* MetalPerformanceShaders.MPSCnnLocalContrastNormalizationGradientNode */ },
		{ /* #1256 = 0x9CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008ED /* MetalPerformanceShaders.MPSCnnLocalContrastNormalizationNode */ },
		{ /* #1257 = 0x9D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008EE /* MetalPerformanceShaders.MPSCnnLogSoftMax */ },
		{ /* #1258 = 0x9D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008EF /* MetalPerformanceShaders.MPSCnnLogSoftMaxGradient */ },
		{ /* #1259 = 0x9D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008F0 /* MetalPerformanceShaders.MPSCnnLogSoftMaxGradientNode */ },
		{ /* #1260 = 0x9D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008F1 /* MetalPerformanceShaders.MPSCnnLogSoftMaxNode */ },
		{ /* #1261 = 0x9D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008F2 /* MetalPerformanceShaders.MPSCnnLoss */ },
		{ /* #1262 = 0x9DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008F3 /* MetalPerformanceShaders.MPSCnnLossDataDescriptor */ },
		{ /* #1263 = 0x9DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008F4 /* MetalPerformanceShaders.MPSCnnLossDescriptor */ },
		{ /* #1264 = 0x9DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008F5 /* MetalPerformanceShaders.MPSCnnLossLabels */ },
		{ /* #1265 = 0x9E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008F6 /* MetalPerformanceShaders.MPSCnnLossNode */ },
		{ /* #1266 = 0x9E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008F8 /* MetalPerformanceShaders.MPSCnnMultiply */ },
		{ /* #1267 = 0x9E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008F9 /* MetalPerformanceShaders.MPSCnnMultiplyGradient */ },
		{ /* #1268 = 0x9E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008FB /* MetalPerformanceShaders.MPSCnnNeuronAbsolute */ },
		{ /* #1269 = 0x9E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000909 /* MetalPerformanceShaders.MPSCnnNeuronNode */ },
		{ /* #1270 = 0x9EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008FC /* MetalPerformanceShaders.MPSCnnNeuronAbsoluteNode */ },
		{ /* #1271 = 0x9ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008FD /* MetalPerformanceShaders.MPSCnnNeuronElu */ },
		{ /* #1272 = 0x9EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008FE /* MetalPerformanceShaders.MPSCnnNeuronEluNode */ },
		{ /* #1273 = 0x9F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008FF /* MetalPerformanceShaders.MPSCnnNeuronExponential */ },
		{ /* #1274 = 0x9F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000900 /* MetalPerformanceShaders.MPSCnnNeuronExponentialNode */ },
		{ /* #1275 = 0x9F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000901 /* MetalPerformanceShaders.MPSCnnNeuronGradient */ },
		{ /* #1276 = 0x9F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000902 /* MetalPerformanceShaders.MPSCnnNeuronGradientNode */ },
		{ /* #1277 = 0x9F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000903 /* MetalPerformanceShaders.MPSCnnNeuronHardSigmoid */ },
		{ /* #1278 = 0x9FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000904 /* MetalPerformanceShaders.MPSCnnNeuronHardSigmoidNode */ },
		{ /* #1279 = 0x9FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000905 /* MetalPerformanceShaders.MPSCnnNeuronLinear */ },
		{ /* #1280 = 0x9FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000906 /* MetalPerformanceShaders.MPSCnnNeuronLinearNode */ },
		{ /* #1281 = 0xA01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000907 /* MetalPerformanceShaders.MPSCnnNeuronLogarithm */ },
		{ /* #1282 = 0xA03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000908 /* MetalPerformanceShaders.MPSCnnNeuronLogarithmNode */ },
		{ /* #1283 = 0xA05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200090A /* MetalPerformanceShaders.MPSCnnNeuronPower */ },
		{ /* #1284 = 0xA07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200090B /* MetalPerformanceShaders.MPSCnnNeuronPowerNode */ },
		{ /* #1285 = 0xA09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200090C /* MetalPerformanceShaders.MPSCnnNeuronPReLUNode */ },
		{ /* #1286 = 0xA0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200090D /* MetalPerformanceShaders.MPSCnnNeuronReLU */ },
		{ /* #1287 = 0xA0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200090E /* MetalPerformanceShaders.MPSCnnNeuronReLun */ },
		{ /* #1288 = 0xA0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200090F /* MetalPerformanceShaders.MPSCnnNeuronReLunNode */ },
		{ /* #1289 = 0xA11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000910 /* MetalPerformanceShaders.MPSCnnNeuronReLUNode */ },
		{ /* #1290 = 0xA13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000911 /* MetalPerformanceShaders.MPSCnnNeuronSigmoid */ },
		{ /* #1291 = 0xA15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000912 /* MetalPerformanceShaders.MPSCnnNeuronSigmoidNode */ },
		{ /* #1292 = 0xA17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000913 /* MetalPerformanceShaders.MPSCnnNeuronSoftPlus */ },
		{ /* #1293 = 0xA19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000914 /* MetalPerformanceShaders.MPSCnnNeuronSoftPlusNode */ },
		{ /* #1294 = 0xA1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000915 /* MetalPerformanceShaders.MPSCnnNeuronSoftSign */ },
		{ /* #1295 = 0xA1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000916 /* MetalPerformanceShaders.MPSCnnNeuronSoftSignNode */ },
		{ /* #1296 = 0xA1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000917 /* MetalPerformanceShaders.MPSCnnNeuronTanH */ },
		{ /* #1297 = 0xA21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000918 /* MetalPerformanceShaders.MPSCnnNeuronTanHNode */ },
		{ /* #1298 = 0xA23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200091A /* MetalPerformanceShaders.MPSCnnNormalizationGammaAndBetaState */ },
		{ /* #1299 = 0xA25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200091B /* MetalPerformanceShaders.MPSCnnNormalizationMeanAndVarianceState */ },
		{ /* #1300 = 0xA27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200091E /* MetalPerformanceShaders.MPSCnnPoolingAverage */ },
		{ /* #1301 = 0xA29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200091F /* MetalPerformanceShaders.MPSCnnPoolingAverageGradient */ },
		{ /* #1302 = 0xA2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000920 /* MetalPerformanceShaders.MPSCnnPoolingAverageGradientNode */ },
		{ /* #1303 = 0xA2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200092C /* MetalPerformanceShaders.MPSCnnPoolingNode */ },
		{ /* #1304 = 0xA2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000921 /* MetalPerformanceShaders.MPSCnnPoolingAverageNode */ },
		{ /* #1305 = 0xA31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000924 /* MetalPerformanceShaders.MPSCnnPoolingL2Norm */ },
		{ /* #1306 = 0xA33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000925 /* MetalPerformanceShaders.MPSCnnPoolingL2NormGradient */ },
		{ /* #1307 = 0xA35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000926 /* MetalPerformanceShaders.MPSCnnPoolingL2NormGradientNode */ },
		{ /* #1308 = 0xA37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000927 /* MetalPerformanceShaders.MPSCnnPoolingL2NormNode */ },
		{ /* #1309 = 0xA39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000928 /* MetalPerformanceShaders.MPSCnnPoolingMax */ },
		{ /* #1310 = 0xA3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000929 /* MetalPerformanceShaders.MPSCnnPoolingMaxGradient */ },
		{ /* #1311 = 0xA3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200092A /* MetalPerformanceShaders.MPSCnnPoolingMaxGradientNode */ },
		{ /* #1312 = 0xA3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200092B /* MetalPerformanceShaders.MPSCnnPoolingMaxNode */ },
		{ /* #1313 = 0xA41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200092E /* MetalPerformanceShaders.MPSCnnSoftMax */ },
		{ /* #1314 = 0xA43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200092F /* MetalPerformanceShaders.MPSCnnSoftMaxGradient */ },
		{ /* #1315 = 0xA45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000930 /* MetalPerformanceShaders.MPSCnnSoftMaxGradientNode */ },
		{ /* #1316 = 0xA47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000931 /* MetalPerformanceShaders.MPSCnnSoftMaxNode */ },
		{ /* #1317 = 0xA49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000932 /* MetalPerformanceShaders.MPSCnnSpatialNormalization */ },
		{ /* #1318 = 0xA4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000933 /* MetalPerformanceShaders.MPSCnnSpatialNormalizationGradient */ },
		{ /* #1319 = 0xA4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000934 /* MetalPerformanceShaders.MPSCnnSpatialNormalizationGradientNode */ },
		{ /* #1320 = 0xA4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000935 /* MetalPerformanceShaders.MPSCnnSpatialNormalizationNode */ },
		{ /* #1321 = 0xA51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000936 /* MetalPerformanceShaders.MPSCnnSubPixelConvolutionDescriptor */ },
		{ /* #1322 = 0xA53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000937 /* MetalPerformanceShaders.MPSCnnSubtract */ },
		{ /* #1323 = 0xA55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000938 /* MetalPerformanceShaders.MPSCnnSubtractGradient */ },
		{ /* #1324 = 0xA57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000939 /* MetalPerformanceShaders.MPSCnnUpsampling */ },
		{ /* #1325 = 0xA59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200093A /* MetalPerformanceShaders.MPSCnnUpsamplingBilinear */ },
		{ /* #1326 = 0xA5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200093E /* MetalPerformanceShaders.MPSCnnUpsamplingGradient */ },
		{ /* #1327 = 0xA5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200093B /* MetalPerformanceShaders.MPSCnnUpsamplingBilinearGradient */ },
		{ /* #1328 = 0xA5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200093C /* MetalPerformanceShaders.MPSCnnUpsamplingBilinearGradientNode */ },
		{ /* #1329 = 0xA61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200093D /* MetalPerformanceShaders.MPSCnnUpsamplingBilinearNode */ },
		{ /* #1330 = 0xA63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200093F /* MetalPerformanceShaders.MPSCnnUpsamplingNearest */ },
		{ /* #1331 = 0xA65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000940 /* MetalPerformanceShaders.MPSCnnUpsamplingNearestGradient */ },
		{ /* #1332 = 0xA67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000941 /* MetalPerformanceShaders.MPSCnnUpsamplingNearestGradientNode */ },
		{ /* #1333 = 0xA69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000942 /* MetalPerformanceShaders.MPSCnnUpsamplingNearestNode */ },
		{ /* #1334 = 0xA6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000944 /* MetalPerformanceShaders.MPSCnnYoloLoss */ },
		{ /* #1335 = 0xA6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000945 /* MetalPerformanceShaders.MPSCnnYoloLossDescriptor */ },
		{ /* #1336 = 0xA6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000946 /* MetalPerformanceShaders.MPSCnnYoloLossNode */ },
		{ /* #1337 = 0xA71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A99 /* Metal.IMTLCommandBuffer */ },
		{ /* #1338 = 0xA73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A9A /* Metal.MTLCommandBufferWrapper */ },
		{ /* #1339 = 0xA75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000947 /* MetalPerformanceShaders.MPSCommandBuffer */ },
		{ /* #1340 = 0xA77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200094C /* MetalPerformanceShaders.IMPSDeviceProvider */ },
		{ /* #1341 = 0xA79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200094D /* MetalPerformanceShaders.MPSDeviceProviderWrapper */ },
		{ /* #1342 = 0xA7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A12 /* MetalPerformanceShaders.MPSRnnDescriptor */ },
		{ /* #1343 = 0xA7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200094E /* MetalPerformanceShaders.MPSGRUDescriptor */ },
		{ /* #1344 = 0xA7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200094F /* MetalPerformanceShaders.IMPSHandle */ },
		{ /* #1345 = 0xA81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000950 /* MetalPerformanceShaders.MPSHandleWrapper */ },
		{ /* #1346 = 0xA83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000951 /* MetalPerformanceShaders.IMPSHeapProvider */ },
		{ /* #1347 = 0xA85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000953 /* MetalPerformanceShaders.MPSHeapProviderWrapper */ },
		{ /* #1348 = 0xA87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200095A /* MetalPerformanceShaders.MPSImageArithmetic */ },
		{ /* #1349 = 0xA89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000954 /* MetalPerformanceShaders.MPSImageAdd */ },
		{ /* #1350 = 0xA8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000955 /* MetalPerformanceShaders.IMPSImageAllocator */ },
		{ /* #1351 = 0xA8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000957 /* MetalPerformanceShaders.MPSImageAllocatorWrapper */ },
		{ /* #1352 = 0xA8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000958 /* MetalPerformanceShaders.MPSImageAreaMax */ },
		{ /* #1353 = 0xA91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000959 /* MetalPerformanceShaders.MPSImageAreaMin */ },
		{ /* #1354 = 0xA93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200095B /* MetalPerformanceShaders.MPSImageBilinearScale */ },
		{ /* #1355 = 0xA95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200095C /* MetalPerformanceShaders.MPSImageBox */ },
		{ /* #1356 = 0xA97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200095D /* MetalPerformanceShaders.MPSImageConvolution */ },
		{ /* #1357 = 0xA99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200095E /* MetalPerformanceShaders.MPSImageCopyToMatrix */ },
		{ /* #1358 = 0xA9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200095F /* MetalPerformanceShaders.MPSImageDescriptor */ },
		{ /* #1359 = 0xA9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000960 /* MetalPerformanceShaders.MPSImageDivide */ },
		{ /* #1360 = 0xA9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000962 /* MetalPerformanceShaders.MPSImageEuclideanDistanceTransform */ },
		{ /* #1361 = 0xAA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000964 /* MetalPerformanceShaders.MPSImageFindKeypoints */ },
		{ /* #1362 = 0xAA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000965 /* MetalPerformanceShaders.MPSImageGaussianBlur */ },
		{ /* #1363 = 0xAA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000966 /* MetalPerformanceShaders.MPSImageGuidedFilter */ },
		{ /* #1364 = 0xAA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000967 /* MetalPerformanceShaders.MPSImageHistogram */ },
		{ /* #1365 = 0xAA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000968 /* MetalPerformanceShaders.MPSImageHistogramEqualization */ },
		{ /* #1366 = 0xAAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000969 /* MetalPerformanceShaders.MPSImageHistogramSpecification */ },
		{ /* #1367 = 0xAAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200096A /* MetalPerformanceShaders.MPSImageIntegral */ },
		{ /* #1368 = 0xAAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200096B /* MetalPerformanceShaders.MPSImageIntegralOfSquares */ },
		{ /* #1369 = 0xAB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200096C /* MetalPerformanceShaders.MPSImageLanczosScale */ },
		{ /* #1370 = 0xAB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200096D /* MetalPerformanceShaders.MPSImageLaplacian */ },
		{ /* #1371 = 0xAB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200096E /* MetalPerformanceShaders.MPSImageMedian */ },
		{ /* #1372 = 0xAB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200096F /* MetalPerformanceShaders.MPSImageMultiply */ },
		{ /* #1373 = 0xAB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000970 /* MetalPerformanceShaders.MPSImageNormalizedHistogram */ },
		{ /* #1374 = 0xABB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000979 /* MetalPerformanceShaders.MPSImageReduceUnary */ },
		{ /* #1375 = 0xABD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000971 /* MetalPerformanceShaders.MPSImageReduceColumnMax */ },
		{ /* #1376 = 0xABF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000972 /* MetalPerformanceShaders.MPSImageReduceColumnMean */ },
		{ /* #1377 = 0xAC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000973 /* MetalPerformanceShaders.MPSImageReduceColumnMin */ },
		{ /* #1378 = 0xAC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000974 /* MetalPerformanceShaders.MPSImageReduceColumnSum */ },
		{ /* #1379 = 0xAC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000975 /* MetalPerformanceShaders.MPSImageReduceRowMax */ },
		{ /* #1380 = 0xAC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000976 /* MetalPerformanceShaders.MPSImageReduceRowMean */ },
		{ /* #1381 = 0xAC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000977 /* MetalPerformanceShaders.MPSImageReduceRowMin */ },
		{ /* #1382 = 0xACB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000978 /* MetalPerformanceShaders.MPSImageReduceRowSum */ },
		{ /* #1383 = 0xACD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200097C /* MetalPerformanceShaders.MPSImageStatisticsMean */ },
		{ /* #1384 = 0xACF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200097D /* MetalPerformanceShaders.MPSImageStatisticsMeanAndVariance */ },
		{ /* #1385 = 0xAD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200097E /* MetalPerformanceShaders.MPSImageStatisticsMinAndMax */ },
		{ /* #1386 = 0xAD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200097F /* MetalPerformanceShaders.MPSImageSubtract */ },
		{ /* #1387 = 0xAD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000980 /* MetalPerformanceShaders.MPSImageTent */ },
		{ /* #1388 = 0xAD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000981 /* MetalPerformanceShaders.IMPSImageTransformProvider */ },
		{ /* #1389 = 0xAD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000982 /* MetalPerformanceShaders.MPSImageTransformProviderWrapper */ },
		{ /* #1390 = 0xADB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000983 /* MetalPerformanceShaders.MPSImageTranspose */ },
		{ /* #1391 = 0xADD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008A3 /* MetalPerformanceShaders.MPSAccelerationStructure */ },
		{ /* #1392 = 0xADF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000985 /* MetalPerformanceShaders.MPSInstanceAccelerationStructure */ },
		{ /* #1393 = 0xAE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001173 /* Foundation.NSCoder */ },
		{ /* #1394 = 0xAE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001192 /* Foundation.NSKeyedUnarchiver */ },
		{ /* #1395 = 0xAE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000989 /* MetalPerformanceShaders.MPSKeyedUnarchiver */ },
		{ /* #1396 = 0xAE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200098A /* MetalPerformanceShaders.MPSLSTMDescriptor */ },
		{ /* #1397 = 0xAE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200098B /* MetalPerformanceShaders.MPSMatrix */ },
		{ /* #1398 = 0xAEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009A9 /* MetalPerformanceShaders.MPSMatrixUnaryKernel */ },
		{ /* #1399 = 0xAED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200098C /* MetalPerformanceShaders.MPSMatrixBatchNormalization */ },
		{ /* #1400 = 0xAEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200098E /* MetalPerformanceShaders.MPSMatrixBinaryKernel */ },
		{ /* #1401 = 0xAF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200098D /* MetalPerformanceShaders.MPSMatrixBatchNormalizationGradient */ },
		{ /* #1402 = 0xAF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200098F /* MetalPerformanceShaders.MPSMatrixCopy */ },
		{ /* #1403 = 0xAF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000990 /* MetalPerformanceShaders.MPSMatrixCopyDescriptor */ },
		{ /* #1404 = 0xAF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000991 /* MetalPerformanceShaders.MPSMatrixCopyToImage */ },
		{ /* #1405 = 0xAF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000992 /* MetalPerformanceShaders.MPSMatrixDecompositionCholesky */ },
		{ /* #1406 = 0xAFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000993 /* MetalPerformanceShaders.MPSMatrixDecompositionLU */ },
		{ /* #1407 = 0xAFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000995 /* MetalPerformanceShaders.MPSMatrixDescriptor */ },
		{ /* #1408 = 0xAFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000996 /* MetalPerformanceShaders.MPSMatrixFindTopK */ },
		{ /* #1409 = 0xB01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000997 /* MetalPerformanceShaders.MPSMatrixFullyConnected */ },
		{ /* #1410 = 0xB03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000998 /* MetalPerformanceShaders.MPSMatrixFullyConnectedGradient */ },
		{ /* #1411 = 0xB05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009A3 /* MetalPerformanceShaders.MPSMatrixSoftMax */ },
		{ /* #1412 = 0xB07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000999 /* MetalPerformanceShaders.MPSMatrixLogSoftMax */ },
		{ /* #1413 = 0xB09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009A4 /* MetalPerformanceShaders.MPSMatrixSoftMaxGradient */ },
		{ /* #1414 = 0xB0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200099A /* MetalPerformanceShaders.MPSMatrixLogSoftMaxGradient */ },
		{ /* #1415 = 0xB0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200099B /* MetalPerformanceShaders.MPSMatrixMultiplication */ },
		{ /* #1416 = 0xB0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200099C /* MetalPerformanceShaders.MPSMatrixNeuron */ },
		{ /* #1417 = 0xB11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200099D /* MetalPerformanceShaders.MPSMatrixNeuronGradient */ },
		{ /* #1418 = 0xB13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200099E /* MetalPerformanceShaders.MPSMatrixRandom */ },
		{ /* #1419 = 0xB15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009A0 /* MetalPerformanceShaders.MPSMatrixRandomDistributionDescriptor */ },
		{ /* #1420 = 0xB17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009A1 /* MetalPerformanceShaders.MPSMatrixRandomMtgp32 */ },
		{ /* #1421 = 0xB19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009A2 /* MetalPerformanceShaders.MPSMatrixRandomPhilox */ },
		{ /* #1422 = 0xB1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009A5 /* MetalPerformanceShaders.MPSMatrixSolveCholesky */ },
		{ /* #1423 = 0xB1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009A6 /* MetalPerformanceShaders.MPSMatrixSolveLU */ },
		{ /* #1424 = 0xB1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009A7 /* MetalPerformanceShaders.MPSMatrixSolveTriangular */ },
		{ /* #1425 = 0xB21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009A8 /* MetalPerformanceShaders.MPSMatrixSum */ },
		{ /* #1426 = 0xB23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009AA /* MetalPerformanceShaders.MPSMatrixVectorMultiplication */ },
		{ /* #1427 = 0xB25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009AB /* MetalPerformanceShaders.IMPSNDArrayAllocator */ },
		{ /* #1428 = 0xB27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009AC /* MetalPerformanceShaders.MPSNDArrayAllocatorWrapper */ },
		{ /* #1429 = 0xB29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009B0 /* MetalPerformanceShaders.MPSNNArithmeticGradientNode */ },
		{ /* #1430 = 0xB2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009AE /* MetalPerformanceShaders.MPSNNAdditionGradientNode */ },
		{ /* #1431 = 0xB2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009B3 /* MetalPerformanceShaders.MPSNNBinaryArithmeticNode */ },
		{ /* #1432 = 0xB2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009AF /* MetalPerformanceShaders.MPSNNAdditionNode */ },
		{ /* #1433 = 0xB31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009B5 /* MetalPerformanceShaders.MPSNNBinaryGradientStateNode */ },
		{ /* #1434 = 0xB33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009B1 /* MetalPerformanceShaders.MPSNNArithmeticGradientStateNode */ },
		{ /* #1435 = 0xB35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A03 /* MetalPerformanceShaders.MPSNNScaleNode */ },
		{ /* #1436 = 0xB37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009B2 /* MetalPerformanceShaders.MPSNNBilinearScaleNode */ },
		{ /* #1437 = 0xB39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009B6 /* MetalPerformanceShaders.MPSNNCompare */ },
		{ /* #1438 = 0xB3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009B7 /* MetalPerformanceShaders.MPSNNComparisonNode */ },
		{ /* #1439 = 0xB3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009B9 /* MetalPerformanceShaders.MPSNNConcatenationGradientNode */ },
		{ /* #1440 = 0xB3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009BA /* MetalPerformanceShaders.MPSNNConcatenationNode */ },
		{ /* #1441 = 0xB41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009BC /* MetalPerformanceShaders.MPSNNCropAndResizeBilinear */ },
		{ /* #1442 = 0xB43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009D4 /* MetalPerformanceShaders.IMPSNNPadding */ },
		{ /* #1443 = 0xB45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009D6 /* MetalPerformanceShaders.MPSNNPaddingWrapper */ },
		{ /* #1444 = 0xB47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009BD /* MetalPerformanceShaders.MPSNNDefaultPadding */ },
		{ /* #1445 = 0xB49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009BE /* MetalPerformanceShaders.MPSNNDivisionNode */ },
		{ /* #1446 = 0xB4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009C0 /* MetalPerformanceShaders.MPSNNForwardLossNode */ },
		{ /* #1447 = 0xB4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009C4 /* MetalPerformanceShaders.MPSNNImageNode */ },
		{ /* #1448 = 0xB4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009C5 /* MetalPerformanceShaders.MPSNNInitialGradientNode */ },
		{ /* #1449 = 0xB51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009C6 /* MetalPerformanceShaders.MPSNNLabelsNode */ },
		{ /* #1450 = 0xB53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009C7 /* MetalPerformanceShaders.MPSNNLanczosScaleNode */ },
		{ /* #1451 = 0xB55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009C8 /* MetalPerformanceShaders.IMPSNNLossCallback */ },
		{ /* #1452 = 0xB57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009C9 /* MetalPerformanceShaders.MPSNNLossCallbackWrapper */ },
		{ /* #1453 = 0xB59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009CA /* MetalPerformanceShaders.MPSNNLossGradientNode */ },
		{ /* #1454 = 0xB5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009CB /* MetalPerformanceShaders.MPSNNMultiplicationGradientNode */ },
		{ /* #1455 = 0xB5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009CC /* MetalPerformanceShaders.MPSNNMultiplicationNode */ },
		{ /* #1456 = 0xB5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009CD /* MetalPerformanceShaders.MPSNNNeuronDescriptor */ },
		{ /* #1457 = 0xB61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009CE /* MetalPerformanceShaders.MPSNNOptimizer */ },
		{ /* #1458 = 0xB63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009CF /* MetalPerformanceShaders.MPSNNOptimizerAdam */ },
		{ /* #1459 = 0xB65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009D0 /* MetalPerformanceShaders.MPSNNOptimizerDescriptor */ },
		{ /* #1460 = 0xB67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009D1 /* MetalPerformanceShaders.MPSNNOptimizerRmsProp */ },
		{ /* #1461 = 0xB69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009D2 /* MetalPerformanceShaders.MPSNNOptimizerStochasticGradientDescent */ },
		{ /* #1462 = 0xB6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009D3 /* MetalPerformanceShaders.MPSNNPad */ },
		{ /* #1463 = 0xB6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009D8 /* MetalPerformanceShaders.MPSNNPadGradient */ },
		{ /* #1464 = 0xB6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009D9 /* MetalPerformanceShaders.MPSNNPadGradientNode */ },
		{ /* #1465 = 0xB71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009DA /* MetalPerformanceShaders.MPSNNPadNode */ },
		{ /* #1466 = 0xB73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009DB /* MetalPerformanceShaders.MPSNNReduceBinary */ },
		{ /* #1467 = 0xB75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009EC /* MetalPerformanceShaders.MPSNNReduceUnary */ },
		{ /* #1468 = 0xB77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009DC /* MetalPerformanceShaders.MPSNNReduceColumnMax */ },
		{ /* #1469 = 0xB79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009DD /* MetalPerformanceShaders.MPSNNReduceColumnMean */ },
		{ /* #1470 = 0xB7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009DE /* MetalPerformanceShaders.MPSNNReduceColumnMin */ },
		{ /* #1471 = 0xB7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009DF /* MetalPerformanceShaders.MPSNNReduceColumnSum */ },
		{ /* #1472 = 0xB7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009E0 /* MetalPerformanceShaders.MPSNNReduceFeatureChannelsAndWeightsMean */ },
		{ /* #1473 = 0xB81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009E1 /* MetalPerformanceShaders.MPSNNReduceFeatureChannelsAndWeightsSum */ },
		{ /* #1474 = 0xB83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009E2 /* MetalPerformanceShaders.MPSNNReduceFeatureChannelsArgumentMax */ },
		{ /* #1475 = 0xB85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009E3 /* MetalPerformanceShaders.MPSNNReduceFeatureChannelsArgumentMin */ },
		{ /* #1476 = 0xB87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009E4 /* MetalPerformanceShaders.MPSNNReduceFeatureChannelsMax */ },
		{ /* #1477 = 0xB89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009E5 /* MetalPerformanceShaders.MPSNNReduceFeatureChannelsMean */ },
		{ /* #1478 = 0xB8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009E6 /* MetalPerformanceShaders.MPSNNReduceFeatureChannelsMin */ },
		{ /* #1479 = 0xB8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009E7 /* MetalPerformanceShaders.MPSNNReduceFeatureChannelsSum */ },
		{ /* #1480 = 0xB8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009E8 /* MetalPerformanceShaders.MPSNNReduceRowMax */ },
		{ /* #1481 = 0xB91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009E9 /* MetalPerformanceShaders.MPSNNReduceRowMean */ },
		{ /* #1482 = 0xB93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009EA /* MetalPerformanceShaders.MPSNNReduceRowMin */ },
		{ /* #1483 = 0xB95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009EB /* MetalPerformanceShaders.MPSNNReduceRowSum */ },
		{ /* #1484 = 0xB97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A0B /* MetalPerformanceShaders.MPSNNUnaryReductionNode */ },
		{ /* #1485 = 0xB99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009ED /* MetalPerformanceShaders.MPSNNReductionColumnMaxNode */ },
		{ /* #1486 = 0xB9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009EE /* MetalPerformanceShaders.MPSNNReductionColumnMeanNode */ },
		{ /* #1487 = 0xB9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009EF /* MetalPerformanceShaders.MPSNNReductionColumnMinNode */ },
		{ /* #1488 = 0xB9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009F0 /* MetalPerformanceShaders.MPSNNReductionColumnSumNode */ },
		{ /* #1489 = 0xBA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009F1 /* MetalPerformanceShaders.MPSNNReductionFeatureChannelsArgumentMaxNode */ },
		{ /* #1490 = 0xBA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009F2 /* MetalPerformanceShaders.MPSNNReductionFeatureChannelsArgumentMinNode */ },
		{ /* #1491 = 0xBA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009F3 /* MetalPerformanceShaders.MPSNNReductionFeatureChannelsMaxNode */ },
		{ /* #1492 = 0xBA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009F4 /* MetalPerformanceShaders.MPSNNReductionFeatureChannelsMeanNode */ },
		{ /* #1493 = 0xBA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009F5 /* MetalPerformanceShaders.MPSNNReductionFeatureChannelsMinNode */ },
		{ /* #1494 = 0xBAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009F6 /* MetalPerformanceShaders.MPSNNReductionFeatureChannelsSumNode */ },
		{ /* #1495 = 0xBAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009F7 /* MetalPerformanceShaders.MPSNNReductionRowMaxNode */ },
		{ /* #1496 = 0xBAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009F8 /* MetalPerformanceShaders.MPSNNReductionRowMeanNode */ },
		{ /* #1497 = 0xBB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009F9 /* MetalPerformanceShaders.MPSNNReductionRowMinNode */ },
		{ /* #1498 = 0xBB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009FA /* MetalPerformanceShaders.MPSNNReductionRowSumNode */ },
		{ /* #1499 = 0xBB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009FB /* MetalPerformanceShaders.MPSNNReductionSpatialMeanGradientNode */ },
		{ /* #1500 = 0xBB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009FC /* MetalPerformanceShaders.MPSNNReductionSpatialMeanNode */ },
		{ /* #1501 = 0xBB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009FE /* MetalPerformanceShaders.MPSNNReshape */ },
		{ /* #1502 = 0xBBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009FF /* MetalPerformanceShaders.MPSNNReshapeGradient */ },
		{ /* #1503 = 0xBBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A00 /* MetalPerformanceShaders.MPSNNReshapeGradientNode */ },
		{ /* #1504 = 0xBBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A01 /* MetalPerformanceShaders.MPSNNReshapeNode */ },
		{ /* #1505 = 0xBC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A02 /* MetalPerformanceShaders.MPSNNResizeBilinear */ },
		{ /* #1506 = 0xBC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A04 /* MetalPerformanceShaders.MPSNNSlice */ },
		{ /* #1507 = 0xBC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A06 /* MetalPerformanceShaders.MPSNNSubtractionGradientNode */ },
		{ /* #1508 = 0xBC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A07 /* MetalPerformanceShaders.MPSNNSubtractionNode */ },
		{ /* #1509 = 0xBC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A0C /* MetalPerformanceShaders.MPSPredicate */ },
		{ /* #1510 = 0xBCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A0F /* MetalPerformanceShaders.MPSRayIntersector */ },
		{ /* #1511 = 0xBCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A13 /* MetalPerformanceShaders.MPSRnnImageInferenceLayer */ },
		{ /* #1512 = 0xBCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A15 /* MetalPerformanceShaders.MPSRnnMatrixInferenceLayer */ },
		{ /* #1513 = 0xBD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A16 /* MetalPerformanceShaders.MPSRnnMatrixTrainingLayer */ },
		{ /* #1514 = 0xBD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A17 /* MetalPerformanceShaders.MPSRnnMatrixTrainingState */ },
		{ /* #1515 = 0xBD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A18 /* MetalPerformanceShaders.MPSRnnRecurrentImageState */ },
		{ /* #1516 = 0xBD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A19 /* MetalPerformanceShaders.MPSRnnRecurrentMatrixState */ },
		{ /* #1517 = 0xBD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A1B /* MetalPerformanceShaders.MPSRnnSingleGateDescriptor */ },
		{ /* #1518 = 0xBDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A1E /* MetalPerformanceShaders.MPSTemporaryImage */ },
		{ /* #1519 = 0xBDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A1F /* MetalPerformanceShaders.MPSTemporaryMatrix */ },
		{ /* #1520 = 0xBDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A20 /* MetalPerformanceShaders.MPSTemporaryNDArray */ },
		{ /* #1521 = 0xBE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A26 /* MetalPerformanceShaders.MPSVector */ },
		{ /* #1522 = 0xBE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A21 /* MetalPerformanceShaders.MPSTemporaryVector */ },
		{ /* #1523 = 0xBE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A23 /* MetalPerformanceShaders.MPSTriangleAccelerationStructure */ },
		{ /* #1524 = 0xBE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A27 /* MetalPerformanceShaders.MPSVectorDescriptor */ },
		{ /* #1525 = 0xBE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A2A /* MetalKit.MTKMesh */ },
		{ /* #1526 = 0xBEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A2B /* MetalKit.MTKMeshBufferAllocator */ },
		{ /* #1527 = 0xBED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A2D /* MetalKit.MTKMeshBuffer */ },
		{ /* #1528 = 0xBEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A2F /* MetalKit.MTKSubmesh */ },
		{ /* #1529 = 0xBF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A70 /* CoreAnimation.ICALayerDelegate */ },
		{ /* #1530 = 0xBF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A72 /* CoreAnimation.CALayerDelegateWrapper */ },
		{ /* #1531 = 0xBF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A37 /* MetalKit.MTKView */ },
		{ /* #1532 = 0xBF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A38 /* MetalKit.IMTKViewDelegate */ },
		{ /* #1533 = 0xBF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A39 /* MetalKit.MTKViewDelegateWrapper */ },
		{ /* #1534 = 0xBFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A3A /* MetalKit.MTKViewDelegate */ },
		{ /* #1535 = 0xBFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600615F /* System.Void MetalKit.MTKViewDelegate::.ctor() */ },
		{ /* #1536 = 0xBFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A54 /* Metal.MTLRenderPipelineColorAttachmentDescriptorArray */ },
		{ /* #1537 = 0xC01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A55 /* Metal.MTLRenderPassColorAttachmentDescriptorArray */ },
		{ /* #1538 = 0xC03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A56 /* Metal.MTLVertexAttributeDescriptorArray */ },
		{ /* #1539 = 0xC05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A57 /* Metal.MTLVertexBufferLayoutDescriptorArray */ },
		{ /* #1540 = 0xC07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A58 /* Metal.MTLBufferLayoutDescriptorArray */ },
		{ /* #1541 = 0xC09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A59 /* Metal.MTLAttributeDescriptorArray */ },
		{ /* #1542 = 0xC0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A5A /* Metal.MTLPipelineBufferDescriptorArray */ },
		{ /* #1543 = 0xC0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A5B /* Metal.MTLBlitPassSampleBufferAttachmentDescriptorArray */ },
		{ /* #1544 = 0xC0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A5D /* Metal.MTLComputePassSampleBufferAttachmentDescriptorArray */ },
		{ /* #1545 = 0xC11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A63 /* Metal.MTLRenderPassDescriptor */ },
		{ /* #1546 = 0xC13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A64 /* Metal.MTLRenderPassSampleBufferAttachmentDescriptorArray */ },
		{ /* #1547 = 0xC15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A65 /* Metal.MTLResourceStatePassSampleBufferAttachmentDescriptorArray */ },
		{ /* #1548 = 0xC17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A66 /* Metal.MTLVertexDescriptor */ },
		{ /* #1549 = 0xC19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B2E /* Metal.IMTLResource */ },
		{ /* #1550 = 0xC1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B2F /* Metal.MTLResourceWrapper */ },
		{ /* #1551 = 0xC1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A67 /* Metal.IMTLAccelerationStructure */ },
		{ /* #1552 = 0xC1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A68 /* Metal.MTLAccelerationStructureWrapper */ },
		{ /* #1553 = 0xC21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A6D /* Metal.MTLAccelerationStructureGeometryDescriptor */ },
		{ /* #1554 = 0xC23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A69 /* Metal.MTLAccelerationStructureBoundingBoxGeometryDescriptor */ },
		{ /* #1555 = 0xC25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AA2 /* Metal.IMTLCommandEncoder */ },
		{ /* #1556 = 0xC27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AA3 /* Metal.MTLCommandEncoderWrapper */ },
		{ /* #1557 = 0xC29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A6A /* Metal.IMTLAccelerationStructureCommandEncoder */ },
		{ /* #1558 = 0xC2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A6B /* Metal.MTLAccelerationStructureCommandEncoderWrapper */ },
		{ /* #1559 = 0xC2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A6C /* Metal.MTLAccelerationStructureDescriptor */ },
		{ /* #1560 = 0xC2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A70 /* Metal.MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor */ },
		{ /* #1561 = 0xC31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A71 /* Metal.MTLAccelerationStructureMotionTriangleGeometryDescriptor */ },
		{ /* #1562 = 0xC33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A72 /* Metal.MTLAccelerationStructureTriangleGeometryDescriptor */ },
		{ /* #1563 = 0xC35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A74 /* Metal.MTLArgument */ },
		{ /* #1564 = 0xC37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A77 /* Metal.MTLArgumentDescriptor */ },
		{ /* #1565 = 0xC39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A78 /* Metal.IMTLArgumentEncoder */ },
		{ /* #1566 = 0xC3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A79 /* Metal.MTLArgumentEncoderWrapper */ },
		{ /* #1567 = 0xC3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B5F /* Metal.MTLType */ },
		{ /* #1568 = 0xC3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A7B /* Metal.MTLArrayType */ },
		{ /* #1569 = 0xC41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A7C /* Metal.MTLAttribute */ },
		{ /* #1570 = 0xC43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A7D /* Metal.MTLAttributeDescriptor */ },
		{ /* #1571 = 0xC45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A80 /* Metal.IMTLBinaryArchive */ },
		{ /* #1572 = 0xC47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A81 /* Metal.MTLBinaryArchiveWrapper */ },
		{ /* #1573 = 0xC49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A82 /* Metal.MTLBinaryArchiveDescriptor */ },
		{ /* #1574 = 0xC4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A87 /* Metal.IMTLBlitCommandEncoder */ },
		{ /* #1575 = 0xC4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A89 /* Metal.MTLBlitCommandEncoderWrapper */ },
		{ /* #1576 = 0xC4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A8B /* Metal.MTLBlitPassDescriptor */ },
		{ /* #1577 = 0xC51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A8C /* Metal.MTLBlitPassSampleBufferAttachmentDescriptor */ },
		{ /* #1578 = 0xC53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A8D /* Metal.IMTLBuffer */ },
		{ /* #1579 = 0xC55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A8E /* Metal.MTLBufferWrapper */ },
		{ /* #1580 = 0xC57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A8F /* Metal.MTLBufferLayoutDescriptor */ },
		{ /* #1581 = 0xC59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A90 /* Metal.MTLCaptureDescriptor */ },
		{ /* #1582 = 0xC5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A94 /* Metal.MTLCaptureManager */ },
		{ /* #1583 = 0xC5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A95 /* Metal.IMTLCaptureScope */ },
		{ /* #1584 = 0xC5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A96 /* Metal.MTLCaptureScopeWrapper */ },
		{ /* #1585 = 0xC61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A97 /* Metal.MTLCaptureScope */ },
		{ /* #1586 = 0xC63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60063F8 /* System.Void Metal.MTLCaptureScope::.ctor() */ },
		{ /* #1587 = 0xC65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A9B /* Metal.MTLCommandBufferDescriptor */ },
		{ /* #1588 = 0xC67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A9C /* Metal.IMTLCommandBufferEncoderInfo */ },
		{ /* #1589 = 0xC69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A9D /* Metal.MTLCommandBufferEncoderInfoWrapper */ },
		{ /* #1590 = 0xC6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AA5 /* Metal.IMTLCommandQueue */ },
		{ /* #1591 = 0xC6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AA6 /* Metal.MTLCommandQueueWrapper */ },
		{ /* #1592 = 0xC6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AAA /* Metal.MTLCompileOptions */ },
		{ /* #1593 = 0xC71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AAB /* Metal.IMTLComputeCommandEncoder */ },
		{ /* #1594 = 0xC73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AAC /* Metal.MTLComputeCommandEncoderWrapper */ },
		{ /* #1595 = 0xC75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AAD /* Metal.MTLComputePassDescriptor */ },
		{ /* #1596 = 0xC77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AAE /* Metal.MTLComputePassSampleBufferAttachmentDescriptor */ },
		{ /* #1597 = 0xC79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AAF /* Metal.MTLComputePipelineDescriptor */ },
		{ /* #1598 = 0xC7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AB0 /* Metal.MTLComputePipelineReflection */ },
		{ /* #1599 = 0xC7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AB1 /* Metal.IMTLComputePipelineState */ },
		{ /* #1600 = 0xC7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AB2 /* Metal.MTLComputePipelineStateWrapper */ },
		{ /* #1601 = 0xC81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AB3 /* Metal.IMTLCounter */ },
		{ /* #1602 = 0xC83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AB4 /* Metal.MTLCounterWrapper */ },
		{ /* #1603 = 0xC85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AB5 /* Metal.IMTLCounterSampleBuffer */ },
		{ /* #1604 = 0xC87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AB6 /* Metal.MTLCounterSampleBufferWrapper */ },
		{ /* #1605 = 0xC89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AB7 /* Metal.MTLCounterSampleBufferDescriptor */ },
		{ /* #1606 = 0xC8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ABB /* Metal.IMTLCounterSet */ },
		{ /* #1607 = 0xC8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ABC /* Metal.MTLCounterSetWrapper */ },
		{ /* #1608 = 0xC8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AC1 /* Metal.MTLDepthStencilDescriptor */ },
		{ /* #1609 = 0xC91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AC2 /* Metal.IMTLDepthStencilState */ },
		{ /* #1610 = 0xC93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AC3 /* Metal.MTLDepthStencilStateWrapper */ },
		{ /* #1611 = 0xC95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AC4 /* Metal.IMTLDevice */ },
		{ /* #1612 = 0xC97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AC5 /* Metal.MTLDeviceWrapper */ },
		{ /* #1613 = 0xC99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AC8 /* Metal.IMTLDrawable */ },
		{ /* #1614 = 0xC9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AC9 /* Metal.MTLDrawableWrapper */ },
		{ /* #1615 = 0xC9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ACA /* Metal.MTLDrawable */ },
		{ /* #1616 = 0xC9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600664E /* System.Void Metal.MTLDrawable::.ctor() */ },
		{ /* #1617 = 0xCA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ACB /* Metal.IMTLDynamicLibrary */ },
		{ /* #1618 = 0xCA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ACC /* Metal.MTLDynamicLibraryWrapper */ },
		{ /* #1619 = 0xCA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ACF /* Metal.IMTLEvent */ },
		{ /* #1620 = 0xCA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AD0 /* Metal.MTLEventWrapper */ },
		{ /* #1621 = 0xCA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AD2 /* Metal.IMTLFence */ },
		{ /* #1622 = 0xCAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AD3 /* Metal.MTLFenceWrapper */ },
		{ /* #1623 = 0xCAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AD4 /* Metal.IMTLFunction */ },
		{ /* #1624 = 0xCAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AD5 /* Metal.MTLFunctionWrapper */ },
		{ /* #1625 = 0xCB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AD6 /* Metal.MTLFunctionConstant */ },
		{ /* #1626 = 0xCB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AD7 /* Metal.MTLFunctionConstantValues */ },
		{ /* #1627 = 0xCB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AD8 /* Metal.MTLFunctionDescriptor */ },
		{ /* #1628 = 0xCB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AD9 /* Metal.IMTLFunctionHandle */ },
		{ /* #1629 = 0xCB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ADA /* Metal.MTLFunctionHandleWrapper */ },
		{ /* #1630 = 0xCBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ADB /* Metal.IMTLFunctionLog */ },
		{ /* #1631 = 0xCBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ADC /* Metal.MTLFunctionLogWrapper */ },
		{ /* #1632 = 0xCBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ADD /* Metal.IMTLFunctionLogDebugLocation */ },
		{ /* #1633 = 0xCC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ADE /* Metal.MTLFunctionLogDebugLocationWrapper */ },
		{ /* #1634 = 0xCC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AE1 /* Metal.IMTLFunctionStitchingAttribute */ },
		{ /* #1635 = 0xCC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AE2 /* Metal.MTLFunctionStitchingAttributeWrapper */ },
		{ /* #1636 = 0xCC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AE6 /* Metal.IMTLFunctionStitchingNode */ },
		{ /* #1637 = 0xCC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AE7 /* Metal.MTLFunctionStitchingNodeWrapper */ },
		{ /* #1638 = 0xCCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AE3 /* Metal.MTLFunctionStitchingFunctionNode */ },
		{ /* #1639 = 0xCCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AE4 /* Metal.MTLFunctionStitchingGraph */ },
		{ /* #1640 = 0xCCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AE5 /* Metal.MTLFunctionStitchingInputNode */ },
		{ /* #1641 = 0xCD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AEB /* Metal.IMTLHeap */ },
		{ /* #1642 = 0xCD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AEC /* Metal.MTLHeapWrapper */ },
		{ /* #1643 = 0xCD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AED /* Metal.MTLHeapDescriptor */ },
		{ /* #1644 = 0xCD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AF0 /* Metal.IMTLIndirectCommandBuffer */ },
		{ /* #1645 = 0xCD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AF1 /* Metal.MTLIndirectCommandBufferWrapper */ },
		{ /* #1646 = 0xCDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AF2 /* Metal.MTLIndirectCommandBufferDescriptor */ },
		{ /* #1647 = 0xCDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AF4 /* Metal.IMTLIndirectComputeCommand */ },
		{ /* #1648 = 0xCDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AF5 /* Metal.MTLIndirectComputeCommandWrapper */ },
		{ /* #1649 = 0xCE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AF6 /* Metal.IMTLIndirectRenderCommand */ },
		{ /* #1650 = 0xCE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AF7 /* Metal.MTLIndirectRenderCommandWrapper */ },
		{ /* #1651 = 0xCE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AF8 /* Metal.MTLInstanceAccelerationStructureDescriptor */ },
		{ /* #1652 = 0xCE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AF9 /* Metal.MTLIntersectionFunctionDescriptor */ },
		{ /* #1653 = 0xCE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AFB /* Metal.IMTLIntersectionFunctionTable */ },
		{ /* #1654 = 0xCEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AFC /* Metal.MTLIntersectionFunctionTableWrapper */ },
		{ /* #1655 = 0xCED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AFD /* Metal.MTLIntersectionFunctionTableDescriptor */ },
		{ /* #1656 = 0xCEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000AFF /* Metal.IMTLLibrary */ },
		{ /* #1657 = 0xCF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B01 /* Metal.MTLLibraryWrapper */ },
		{ /* #1658 = 0xCF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B05 /* Metal.MTLLinkedFunctions */ },
		{ /* #1659 = 0xCF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B07 /* Metal.IMTLLogContainer */ },
		{ /* #1660 = 0xCF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B08 /* Metal.MTLLogContainerWrapper */ },
		{ /* #1661 = 0xCF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B0A /* Metal.MTLMotionKeyframeData */ },
		{ /* #1662 = 0xCFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B0E /* Metal.IMTLParallelRenderCommandEncoder */ },
		{ /* #1663 = 0xCFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B0F /* Metal.MTLParallelRenderCommandEncoderWrapper */ },
		{ /* #1664 = 0xCFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B11 /* Metal.MTLPipelineBufferDescriptor */ },
		{ /* #1665 = 0xD01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B14 /* Metal.MTLPointerType */ },
		{ /* #1666 = 0xD03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B15 /* Metal.MTLPrimitiveAccelerationStructureDescriptor */ },
		{ /* #1667 = 0xD05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B19 /* Metal.MTLRasterizationRateLayerArray */ },
		{ /* #1668 = 0xD07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B1A /* Metal.MTLRasterizationRateLayerDescriptor */ },
		{ /* #1669 = 0xD09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B1B /* Metal.IMTLRasterizationRateMap */ },
		{ /* #1670 = 0xD0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B1C /* Metal.MTLRasterizationRateMapWrapper */ },
		{ /* #1671 = 0xD0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B1D /* Metal.MTLRasterizationRateMapDescriptor */ },
		{ /* #1672 = 0xD0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B1E /* Metal.MTLRasterizationRateSampleArray */ },
		{ /* #1673 = 0xD11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B20 /* Metal.IMTLRenderCommandEncoder */ },
		{ /* #1674 = 0xD13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B21 /* Metal.MTLRenderCommandEncoderWrapper */ },
		{ /* #1675 = 0xD15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B22 /* Metal.MTLRenderPassAttachmentDescriptor */ },
		{ /* #1676 = 0xD17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B23 /* Metal.MTLRenderPassColorAttachmentDescriptor */ },
		{ /* #1677 = 0xD19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B24 /* Metal.MTLRenderPassDepthAttachmentDescriptor */ },
		{ /* #1678 = 0xD1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B25 /* Metal.MTLRenderPassSampleBufferAttachmentDescriptor */ },
		{ /* #1679 = 0xD1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B26 /* Metal.MTLRenderPassStencilAttachmentDescriptor */ },
		{ /* #1680 = 0xD1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B27 /* Metal.MTLRenderPipelineColorAttachmentDescriptor */ },
		{ /* #1681 = 0xD21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B28 /* Metal.MTLRenderPipelineDescriptor */ },
		{ /* #1682 = 0xD23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B29 /* Metal.MTLRenderPipelineFunctionsDescriptor */ },
		{ /* #1683 = 0xD25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B2A /* Metal.MTLRenderPipelineReflection */ },
		{ /* #1684 = 0xD27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B2B /* Metal.IMTLRenderPipelineState */ },
		{ /* #1685 = 0xD29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B2C /* Metal.MTLRenderPipelineStateWrapper */ },
		{ /* #1686 = 0xD2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B31 /* Metal.IMTLResourceStateCommandEncoder */ },
		{ /* #1687 = 0xD2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B33 /* Metal.MTLResourceStateCommandEncoderWrapper */ },
		{ /* #1688 = 0xD2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B34 /* Metal.MTLResourceStatePassDescriptor */ },
		{ /* #1689 = 0xD31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B35 /* Metal.MTLResourceStatePassSampleBufferAttachmentDescriptor */ },
		{ /* #1690 = 0xD33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B39 /* Metal.MTLSamplerDescriptor */ },
		{ /* #1691 = 0xD35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B3C /* Metal.IMTLSamplerState */ },
		{ /* #1692 = 0xD37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B3D /* Metal.MTLSamplerStateWrapper */ },
		{ /* #1693 = 0xD39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B3E /* Metal.IMTLSharedEvent */ },
		{ /* #1694 = 0xD3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B3F /* Metal.MTLSharedEventWrapper */ },
		{ /* #1695 = 0xD3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B40 /* Metal.MTLSharedEventHandle */ },
		{ /* #1696 = 0xD3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B41 /* Metal.MTLSharedEventListener */ },
		{ /* #1697 = 0xD41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B42 /* Metal.MTLSharedTextureHandle */ },
		{ /* #1698 = 0xD43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B45 /* Metal.MTLStageInputOutputDescriptor */ },
		{ /* #1699 = 0xD45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B46 /* Metal.MTLStencilDescriptor */ },
		{ /* #1700 = 0xD47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B49 /* Metal.MTLStitchedLibraryDescriptor */ },
		{ /* #1701 = 0xD49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B4D /* Metal.MTLStructMember */ },
		{ /* #1702 = 0xD4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B4E /* Metal.MTLStructType */ },
		{ /* #1703 = 0xD4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B53 /* Metal.IMTLTexture */ },
		{ /* #1704 = 0xD4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B55 /* Metal.MTLTextureWrapper */ },
		{ /* #1705 = 0xD51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B56 /* Metal.MTLTextureDescriptor */ },
		{ /* #1706 = 0xD53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B57 /* Metal.MTLTextureReferenceType */ },
		{ /* #1707 = 0xD55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B5B /* Metal.MTLTileRenderPipelineColorAttachmentDescriptor */ },
		{ /* #1708 = 0xD57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B5C /* Metal.MTLTileRenderPipelineColorAttachmentDescriptorArray */ },
		{ /* #1709 = 0xD59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B5D /* Metal.MTLTileRenderPipelineDescriptor */ },
		{ /* #1710 = 0xD5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B60 /* Metal.MTLVertexAttribute */ },
		{ /* #1711 = 0xD5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B61 /* Metal.MTLVertexAttributeDescriptor */ },
		{ /* #1712 = 0xD5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B62 /* Metal.MTLVertexBufferLayoutDescriptor */ },
		{ /* #1713 = 0xD61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B66 /* Metal.IMTLVisibleFunctionTable */ },
		{ /* #1714 = 0xD63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B67 /* Metal.MTLVisibleFunctionTableWrapper */ },
		{ /* #1715 = 0xD65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B68 /* Metal.MTLVisibleFunctionTableDescriptor */ },
		{ /* #1716 = 0xD67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B79 /* MediaPlayer.MPNowPlayingInfoCenter */ },
		{ /* #1717 = 0xD69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B9A /* MediaPlayer.MPRemoteCommandEvent */ },
		{ /* #1718 = 0xD6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B7D /* MediaPlayer.MPChangeLanguageOptionCommandEvent */ },
		{ /* #1719 = 0xD6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B98 /* MediaPlayer.MPRemoteCommand */ },
		{ /* #1720 = 0xD6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B7F /* MediaPlayer.MPChangePlaybackPositionCommand */ },
		{ /* #1721 = 0xD71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B80 /* MediaPlayer.MPChangePlaybackPositionCommandEvent */ },
		{ /* #1722 = 0xD73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B81 /* MediaPlayer.MPChangePlaybackRateCommand */ },
		{ /* #1723 = 0xD75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B82 /* MediaPlayer.MPChangePlaybackRateCommandEvent */ },
		{ /* #1724 = 0xD77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B83 /* MediaPlayer.MPChangeRepeatModeCommand */ },
		{ /* #1725 = 0xD79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B84 /* MediaPlayer.MPChangeRepeatModeCommandEvent */ },
		{ /* #1726 = 0xD7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B85 /* MediaPlayer.MPChangeShuffleModeCommand */ },
		{ /* #1727 = 0xD7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B86 /* MediaPlayer.MPChangeShuffleModeCommandEvent */ },
		{ /* #1728 = 0xD7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B87 /* MediaPlayer.MPContentItem */ },
		{ /* #1729 = 0xD81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B8A /* MediaPlayer.MPFeedbackCommand */ },
		{ /* #1730 = 0xD83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B8B /* MediaPlayer.MPFeedbackCommandEvent */ },
		{ /* #1731 = 0xD85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B8D /* MediaPlayer.MPMediaItem */ },
		{ /* #1732 = 0xD87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B8E /* MediaPlayer.MPMediaItemArtwork */ },
		{ /* #1733 = 0xD89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B91 /* MediaPlayer.MPNowPlayingInfoLanguageOption */ },
		{ /* #1734 = 0xD8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B92 /* MediaPlayer.MPNowPlayingInfoLanguageOptionGroup */ },
		{ /* #1735 = 0xD8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B96 /* MediaPlayer.MPRatingCommand */ },
		{ /* #1736 = 0xD8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B97 /* MediaPlayer.MPRatingCommandEvent */ },
		{ /* #1737 = 0xD91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B99 /* MediaPlayer.MPRemoteCommandCenter */ },
		{ /* #1738 = 0xD93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B9D /* MediaPlayer.MPSeekCommandEvent */ },
		{ /* #1739 = 0xD95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BA0 /* MediaPlayer.MPSkipIntervalCommandEvent */ },
		{ /* #1740 = 0xD97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BBE /* MapKit.IMKAnnotation */ },
		{ /* #1741 = 0xD99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BC0 /* MapKit.MKAnnotationWrapper */ },
		{ /* #1742 = 0xD9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C21 /* MapKit.MKShape */ },
		{ /* #1743 = 0xD9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BD7 /* MapKit.IMKGeoJsonObject */ },
		{ /* #1744 = 0xD9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BD8 /* MapKit.MKGeoJsonObjectWrapper */ },
		{ /* #1745 = 0xDA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BB2 /* MapKit.MKMultiPoint */ },
		{ /* #1746 = 0xDA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C0E /* MapKit.IMKOverlay */ },
		{ /* #1747 = 0xDA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C10 /* MapKit.MKOverlayWrapper */ },
		{ /* #1748 = 0xDA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BB6 /* MapKit.MKPolyline */ },
		{ /* #1749 = 0xDA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BAD /* MapKit.MKGeodesicPolyline */ },
		{ /* #1750 = 0xDAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BB1 /* MapKit.MKMapItem */ },
		{ /* #1751 = 0xDAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BB3 /* MapKit.MKOverlayRenderer */ },
		{ /* #1752 = 0xDAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BB5 /* MapKit.MKPolygon */ },
		{ /* #1753 = 0xDB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BC1 /* MapKit.MKAnnotation */ },
		{ /* #1754 = 0xDB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6006E37 /* System.Void MapKit.MKAnnotation::.ctor() */ },
		{ /* #1755 = 0xDB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BC2 /* MapKit.MKAnnotationView */ },
		{ /* #1756 = 0xDB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BC5 /* MapKit.MKCircle */ },
		{ /* #1757 = 0xDB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C13 /* MapKit.MKOverlayPathRenderer */ },
		{ /* #1758 = 0xDBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BC6 /* MapKit.MKCircleRenderer */ },
		{ /* #1759 = 0xDBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BC7 /* MapKit.MKClusterAnnotation */ },
		{ /* #1760 = 0xDBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BC8 /* MapKit.MKCompassButton */ },
		{ /* #1761 = 0xDC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BCA /* MapKit.MKDirectionsRequest */ },
		{ /* #1762 = 0xDC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BCB /* MapKit.MKDirectionsResponse */ },
		{ /* #1763 = 0xDC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001258 /* Foundation.NSFormatter */ },
		{ /* #1764 = 0xDC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BCE /* MapKit.MKDistanceFormatter */ },
		{ /* #1765 = 0xDC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BD3 /* MapKit.MKETAResponse */ },
		{ /* #1766 = 0xDCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BD5 /* MapKit.MKGeoJsonDecoder */ },
		{ /* #1767 = 0xDCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BD6 /* MapKit.MKGeoJsonFeature */ },
		{ /* #1768 = 0xDCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BF5 /* MapKit.MKMapConfiguration */ },
		{ /* #1769 = 0xDD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BDA /* MapKit.MKHybridMapConfiguration */ },
		{ /* #1770 = 0xDD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BDB /* MapKit.MKImageryMapConfiguration */ },
		{ /* #1771 = 0xDD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BDC /* MapKit.MKLocalPointsOfInterestRequest */ },
		{ /* #1772 = 0xDD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BDD /* MapKit.MKLocalSearchCompleter */ },
		{ /* #1773 = 0xDD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BDE /* MapKit.IMKLocalSearchCompleterDelegate */ },
		{ /* #1774 = 0xDDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BE0 /* MapKit.MKLocalSearchCompleterDelegateWrapper */ },
		{ /* #1775 = 0xDDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BE1 /* MapKit.MKLocalSearchCompleterDelegate */ },
		{ /* #1776 = 0xDDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6006F38 /* System.Void MapKit.MKLocalSearchCompleterDelegate::.ctor() */ },
		{ /* #1777 = 0xDE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BE3 /* MapKit.MKLocalSearchCompletion */ },
		{ /* #1778 = 0xDE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BE4 /* MapKit.MKLocalSearchRequest */ },
		{ /* #1779 = 0xDE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BE5 /* MapKit.MKLocalSearchResponse */ },
		{ /* #1780 = 0xDE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BE8 /* MapKit.MKLookAroundScene */ },
		{ /* #1781 = 0xDE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BEA /* MapKit.MKLookAroundSnapshot */ },
		{ /* #1782 = 0xDEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BEB /* MapKit.MKLookAroundSnapshotOptions */ },
		{ /* #1783 = 0xDED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BED /* MapKit.MKLookAroundViewController */ },
		{ /* #1784 = 0xDEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BEE /* MapKit.IMKLookAroundViewControllerDelegate */ },
		{ /* #1785 = 0xDF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BF0 /* MapKit.MKLookAroundViewControllerDelegateWrapper */ },
		{ /* #1786 = 0xDF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BF1 /* MapKit.MKLookAroundViewControllerDelegate */ },
		{ /* #1787 = 0xDF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6006FA4 /* System.Void MapKit.MKLookAroundViewControllerDelegate::.ctor() */ },
		{ /* #1788 = 0xDF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BF2 /* MapKit.MKMapCamera */ },
		{ /* #1789 = 0xDF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BF3 /* MapKit.MKMapCameraBoundary */ },
		{ /* #1790 = 0xDFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BF4 /* MapKit.MKMapCameraZoomRange */ },
		{ /* #1791 = 0xDFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BF7 /* MapKit.MKMapSnapshot */ },
		{ /* #1792 = 0xDFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BF8 /* MapKit.MKMapSnapshotOptions */ },
		{ /* #1793 = 0xE01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C05 /* MapKit.IMKMapViewDelegate */ },
		{ /* #1794 = 0xE03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C07 /* MapKit.MKMapViewDelegateWrapper */ },
		{ /* #1795 = 0xE05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C08 /* MapKit.MKMapViewDelegate */ },
		{ /* #1796 = 0xE07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60070DE /* System.Void MapKit.MKMapViewDelegate::.ctor() */ },
		{ /* #1797 = 0xE09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C09 /* MapKit.MKMarkerAnnotationView */ },
		{ /* #1798 = 0xE0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C0A /* MapKit.MKMultiPolygon */ },
		{ /* #1799 = 0xE0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C0B /* MapKit.MKMultiPolygonRenderer */ },
		{ /* #1800 = 0xE0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C0C /* MapKit.MKMultiPolyline */ },
		{ /* #1801 = 0xE11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C0D /* MapKit.MKMultiPolylineRenderer */ },
		{ /* #1802 = 0xE13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C11 /* MapKit.MKOverlay */ },
		{ /* #1803 = 0xE15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6007135 /* System.Void MapKit.MKOverlay::.ctor() */ },
		{ /* #1804 = 0xE17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C15 /* MapKit.MKPinAnnotationView */ },
		{ /* #1805 = 0xE19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C16 /* MapKit.MKPitchControl */ },
		{ /* #1806 = 0xE1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200162C /* CoreLocation.CLPlacemark */ },
		{ /* #1807 = 0xE1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C17 /* MapKit.MKPlacemark */ },
		{ /* #1808 = 0xE1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C18 /* MapKit.MKPointAnnotation */ },
		{ /* #1809 = 0xE21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C1C /* MapKit.MKPolygonRenderer */ },
		{ /* #1810 = 0xE23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C1D /* MapKit.MKPolylineRenderer */ },
		{ /* #1811 = 0xE25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C1E /* MapKit.MKRoute */ },
		{ /* #1812 = 0xE27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C1F /* MapKit.MKRouteStep */ },
		{ /* #1813 = 0xE29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C22 /* MapKit.MKStandardMapConfiguration */ },
		{ /* #1814 = 0xE2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C24 /* MapKit.MKTileOverlay */ },
		{ /* #1815 = 0xE2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C25 /* MapKit.MKTileOverlayRenderer */ },
		{ /* #1816 = 0xE2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C26 /* MapKit.MKUserLocation */ },
		{ /* #1817 = 0xE31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C27 /* MapKit.MKUserLocationView */ },
		{ /* #1818 = 0xE33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C29 /* MapKit.MKZoomControl */ },
		{ /* #1819 = 0xE35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C40 /* MLCompute.MLCActivationDescriptor */ },
		{ /* #1820 = 0xE37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C5F /* MLCompute.MLCLayer */ },
		{ /* #1821 = 0xE39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C41 /* MLCompute.MLCActivationLayer */ },
		{ /* #1822 = 0xE3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C6B /* MLCompute.MLCOptimizer */ },
		{ /* #1823 = 0xE3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C43 /* MLCompute.MLCAdamOptimizer */ },
		{ /* #1824 = 0xE3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C44 /* MLCompute.MLCAdamWOptimizer */ },
		{ /* #1825 = 0xE41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C45 /* MLCompute.MLCArithmeticLayer */ },
		{ /* #1826 = 0xE43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C47 /* MLCompute.MLCBatchNormalizationLayer */ },
		{ /* #1827 = 0xE45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C48 /* MLCompute.MLCComparisonLayer */ },
		{ /* #1828 = 0xE47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C4A /* MLCompute.MLCConcatenationLayer */ },
		{ /* #1829 = 0xE49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C4C /* MLCompute.MLCConvolutionLayer */ },
		{ /* #1830 = 0xE4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C4F /* MLCompute.MLCDevice */ },
		{ /* #1831 = 0xE4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C51 /* MLCompute.MLCDropoutLayer */ },
		{ /* #1832 = 0xE4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C52 /* MLCompute.MLCEmbeddingDescriptor */ },
		{ /* #1833 = 0xE51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C53 /* MLCompute.MLCEmbeddingLayer */ },
		{ /* #1834 = 0xE53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C55 /* MLCompute.MLCFullyConnectedLayer */ },
		{ /* #1835 = 0xE55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C56 /* MLCompute.MLCGatherLayer */ },
		{ /* #1836 = 0xE57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C58 /* MLCompute.MLCGramMatrixLayer */ },
		{ /* #1837 = 0xE59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C5B /* MLCompute.MLCGroupNormalizationLayer */ },
		{ /* #1838 = 0xE5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C5E /* MLCompute.MLCInstanceNormalizationLayer */ },
		{ /* #1839 = 0xE5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C61 /* MLCompute.MLCLossDescriptor */ },
		{ /* #1840 = 0xE5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C62 /* MLCompute.MLCLossLayer */ },
		{ /* #1841 = 0xE61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C64 /* MLCompute.MLCLstmDescriptor */ },
		{ /* #1842 = 0xE63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C65 /* MLCompute.MLCLstmLayer */ },
		{ /* #1843 = 0xE65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C67 /* MLCompute.MLCMatMulDescriptor */ },
		{ /* #1844 = 0xE67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C68 /* MLCompute.MLCMatMulLayer */ },
		{ /* #1845 = 0xE69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C69 /* MLCompute.MLCMultiheadAttentionDescriptor */ },
		{ /* #1846 = 0xE6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C6A /* MLCompute.MLCMultiheadAttentionLayer */ },
		{ /* #1847 = 0xE6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C6C /* MLCompute.MLCOptimizerDescriptor */ },
		{ /* #1848 = 0xE6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C70 /* MLCompute.MLCPlatform */ },
		{ /* #1849 = 0xE71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C72 /* MLCompute.MLCPoolingLayer */ },
		{ /* #1850 = 0xE73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C79 /* MLCompute.MLCRmsPropOptimizer */ },
		{ /* #1851 = 0xE75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C7B /* MLCompute.MLCScatterLayer */ },
		{ /* #1852 = 0xE77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C7C /* MLCompute.MLCSelectionLayer */ },
		{ /* #1853 = 0xE79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C7D /* MLCompute.MLCSgdOptimizer */ },
		{ /* #1854 = 0xE7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C7F /* MLCompute.MLCSoftmaxLayer */ },
		{ /* #1855 = 0xE7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C83 /* MLCompute.MLCTensorData */ },
		{ /* #1856 = 0xE7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C85 /* MLCompute.MLCTensorOptimizerDeviceData */ },
		{ /* #1857 = 0xE81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C86 /* MLCompute.MLCTensorParameter */ },
		{ /* #1858 = 0xE83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C8A /* MLCompute.MLCYoloLossDescriptor */ },
		{ /* #1859 = 0xE85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C8B /* MLCompute.MLCYoloLossLayer */ },
		{ /* #1860 = 0xE87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C8D /* JavaScriptCore.JSContext */ },
		{ /* #1861 = 0xE89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C8E /* JavaScriptCore.JSValue */ },
		{ /* #1862 = 0xE8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C90 /* JavaScriptCore.IJSExport */ },
		{ /* #1863 = 0xE8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C91 /* JavaScriptCore.JSExportWrapper */ },
		{ /* #1864 = 0xE8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C92 /* JavaScriptCore.JSExport */ },
		{ /* #1865 = 0xE91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60075F2 /* System.Void JavaScriptCore.JSExport::.ctor() */ },
		{ /* #1866 = 0xE93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C93 /* JavaScriptCore.JSManagedValue */ },
		{ /* #1867 = 0xE95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C97 /* JavaScriptCore.JSVirtualMachine */ },
		{ /* #1868 = 0xE97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C9A /* Intents.INCallRecord */ },
		{ /* #1869 = 0xE99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C9D /* Intents.INIntentResolutionResult */ },
		{ /* #1870 = 0xE9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C9B /* Intents.INCallRecordTypeResolutionResult */ },
		{ /* #1871 = 0xE9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D0E /* Intents.IINSpeakable */ },
		{ /* #1872 = 0xE9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D10 /* Intents.INSpeakableWrapper */ },
		{ /* #1873 = 0xEA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C9F /* Intents.INSpeakableString */ },
		{ /* #1874 = 0xEA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CA1 /* Intents.INAirline */ },
		{ /* #1875 = 0xEA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CA2 /* Intents.INAirport */ },
		{ /* #1876 = 0xEA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CA3 /* Intents.INAirportGate */ },
		{ /* #1877 = 0xEA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CD3 /* Intents.INIntent */ },
		{ /* #1878 = 0xEAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CA4 /* Intents.INAnswerCallIntent */ },
		{ /* #1879 = 0xEAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CA5 /* Intents.IINAnswerCallIntentHandling */ },
		{ /* #1880 = 0xEAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CA7 /* Intents.INAnswerCallIntentHandlingWrapper */ },
		{ /* #1881 = 0xEB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CDC /* Intents.INIntentResponse */ },
		{ /* #1882 = 0xEB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CA8 /* Intents.INAnswerCallIntentResponse */ },
		{ /* #1883 = 0xEB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CF7 /* Intents.INReservation */ },
		{ /* #1884 = 0xEB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CAA /* Intents.INBoatReservation */ },
		{ /* #1885 = 0xEB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CAB /* Intents.INBoatTrip */ },
		{ /* #1886 = 0xEBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CAC /* Intents.INBooleanResolutionResult */ },
		{ /* #1887 = 0xEBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CAD /* Intents.INBusReservation */ },
		{ /* #1888 = 0xEBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CAE /* Intents.INBusTrip */ },
		{ /* #1889 = 0xEC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CB2 /* Intents.INCallCapabilityResolutionResult */ },
		{ /* #1890 = 0xEC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CB4 /* Intents.INCallDestinationTypeResolutionResult */ },
		{ /* #1891 = 0xEC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CB5 /* Intents.INCallGroup */ },
		{ /* #1892 = 0xEC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CB6 /* Intents.INCallRecordFilter */ },
		{ /* #1893 = 0xEC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CB7 /* Intents.INCallRecordResolutionResult */ },
		{ /* #1894 = 0xECB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CBA /* Intents.INCallRecordTypeOptionsResolutionResult */ },
		{ /* #1895 = 0xECD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CBB /* Intents.INCurrencyAmount */ },
		{ /* #1896 = 0xECF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CBC /* Intents.INDateComponentsRange */ },
		{ /* #1897 = 0xED1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CBD /* Intents.INDateComponentsResolutionResult */ },
		{ /* #1898 = 0xED3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CBE /* Intents.INEnergyResolutionResult */ },
		{ /* #1899 = 0xED5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CBF /* Intents.INEnumResolutionResult */ },
		{ /* #1900 = 0xED7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CD7 /* Intents.IINIntentHandlerProviding */ },
		{ /* #1901 = 0xED9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CD8 /* Intents.INIntentHandlerProvidingWrapper */ },
		{ /* #1902 = 0xEDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CC0 /* Intents.INExtension */ },
		{ /* #1903 = 0xEDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CC1 /* Intents.INFile */ },
		{ /* #1904 = 0xEDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CC2 /* Intents.INFileResolutionResult */ },
		{ /* #1905 = 0xEE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CC3 /* Intents.INFlight */ },
		{ /* #1906 = 0xEE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CC4 /* Intents.INFlightReservation */ },
		{ /* #1907 = 0xEE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CC5 /* Intents.INFocusStatus */ },
		{ /* #1908 = 0xEE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CC8 /* Intents.INGetReservationDetailsIntent */ },
		{ /* #1909 = 0xEE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CC9 /* Intents.INGetReservationDetailsIntentResponse */ },
		{ /* #1910 = 0xEEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CCB /* Intents.INHangUpCallIntent */ },
		{ /* #1911 = 0xEED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CCC /* Intents.IINHangUpCallIntentHandling */ },
		{ /* #1912 = 0xEEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CCE /* Intents.INHangUpCallIntentHandlingWrapper */ },
		{ /* #1913 = 0xEF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CCF /* Intents.INHangUpCallIntentResponse */ },
		{ /* #1914 = 0xEF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CD1 /* Intents.INImage */ },
		{ /* #1915 = 0xEF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CD2 /* Intents.INIntegerResolutionResult */ },
		{ /* #1916 = 0xEF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CD4 /* Intents.INIntentDonationMetadata */ },
		{ /* #1917 = 0xEF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CDF /* Intents.INLengthResolutionResult */ },
		{ /* #1918 = 0xEFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CE0 /* Intents.INLodgingReservation */ },
		{ /* #1919 = 0xEFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CE1 /* Intents.INMassResolutionResult */ },
		{ /* #1920 = 0xEFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CE2 /* Intents.INObject */ },
		{ /* #1921 = 0xF01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CE3 /* Intents.INObjectCollection`1 */ },
		{ /* #1922 = 0xF03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CE4 /* Intents.INObjectResolutionResult */ },
		{ /* #1923 = 0xF05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CE5 /* Intents.INObjectSection`1 */ },
		{ /* #1924 = 0xF07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CE7 /* Intents.INOutgoingMessageTypeResolutionResult */ },
		{ /* #1925 = 0xF09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CE8 /* Intents.INPaymentMethod */ },
		{ /* #1926 = 0xF0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CE9 /* Intents.INPaymentMethodResolutionResult */ },
		{ /* #1927 = 0xF0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CEB /* Intents.INPersonHandle */ },
		{ /* #1928 = 0xF0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CF1 /* Intents.INPersonResolutionResult */ },
		{ /* #1929 = 0xF11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CF3 /* Intents.INPlacemarkResolutionResult */ },
		{ /* #1930 = 0xF13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CF5 /* Intents.INRentalCar */ },
		{ /* #1931 = 0xF15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CF6 /* Intents.INRentalCarReservation */ },
		{ /* #1932 = 0xF17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CF8 /* Intents.INReservationAction */ },
		{ /* #1933 = 0xF19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CFB /* Intents.INRestaurantReservation */ },
		{ /* #1934 = 0xF1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CFC /* Intents.INSeat */ },
		{ /* #1935 = 0xF1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CFD /* Intents.INSendMessageAttachment */ },
		{ /* #1936 = 0xF1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CFE /* Intents.INSendMessageIntent */ },
		{ /* #1937 = 0xF21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CFF /* Intents.INSendMessageIntentDonationMetadata */ },
		{ /* #1938 = 0xF23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D00 /* Intents.IINSendMessageIntentHandling */ },
		{ /* #1939 = 0xF25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D02 /* Intents.INSendMessageIntentHandlingWrapper */ },
		{ /* #1940 = 0xF27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D03 /* Intents.INSendMessageIntentResponse */ },
		{ /* #1941 = 0xF29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D05 /* Intents.INSendMessageRecipientResolutionResult */ },
		{ /* #1942 = 0xF2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D07 /* Intents.INShareFocusStatusIntent */ },
		{ /* #1943 = 0xF2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D08 /* Intents.IINShareFocusStatusIntentHandling */ },
		{ /* #1944 = 0xF2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D0A /* Intents.INShareFocusStatusIntentHandlingWrapper */ },
		{ /* #1945 = 0xF31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D0B /* Intents.INShareFocusStatusIntentResponse */ },
		{ /* #1946 = 0xF33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D0D /* Intents.INShortcut */ },
		{ /* #1947 = 0xF35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D11 /* Intents.INSpeedResolutionResult */ },
		{ /* #1948 = 0xF37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D12 /* Intents.INStartCallCallRecordToCallBackResolutionResult */ },
		{ /* #1949 = 0xF39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D14 /* Intents.INStartCallIntent */ },
		{ /* #1950 = 0xF3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D15 /* Intents.INStringResolutionResult */ },
		{ /* #1951 = 0xF3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D16 /* Intents.INTemperatureResolutionResult */ },
		{ /* #1952 = 0xF3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D18 /* Intents.INTimeIntervalResolutionResult */ },
		{ /* #1953 = 0xF41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D19 /* Intents.INTrainReservation */ },
		{ /* #1954 = 0xF43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D1A /* Intents.INTrainTrip */ },
		{ /* #1955 = 0xF45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D1B /* Intents.INUrlResolutionResult */ },
		{ /* #1956 = 0xF47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D1C /* Intents.INVoiceShortcut */ },
		{ /* #1957 = 0xF49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D1E /* Intents.INVolumeResolutionResult */ },
		{ /* #1958 = 0xF4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D2E /* ImageKit.IIKCameraDeviceViewDelegate */ },
		{ /* #1959 = 0xF4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D30 /* ImageKit.IKCameraDeviceViewDelegateWrapper */ },
		{ /* #1960 = 0xF4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D31 /* ImageKit.IKCameraDeviceViewDelegate */ },
		{ /* #1961 = 0xF51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6007A78 /* System.Void ImageKit.IKCameraDeviceViewDelegate::.ctor() */ },
		{ /* #1962 = 0xF53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D35 /* ImageKit.IIKDeviceBrowserViewDelegate */ },
		{ /* #1963 = 0xF55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D37 /* ImageKit.IKDeviceBrowserViewDelegateWrapper */ },
		{ /* #1964 = 0xF57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D38 /* ImageKit.IKDeviceBrowserViewDelegate */ },
		{ /* #1965 = 0xF59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6007AA6 /* System.Void ImageKit.IKDeviceBrowserViewDelegate::.ctor() */ },
		{ /* #1966 = 0xF5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D3A /* ImageKit.IKFilterBrowserView */ },
		{ /* #1967 = 0xF5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D3B /* ImageKit.IIKFilterCustomUIProvider */ },
		{ /* #1968 = 0xF5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D3C /* ImageKit.IKFilterCustomUIProviderWrapper */ },
		{ /* #1969 = 0xF61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D3D /* ImageKit.IKFilterCustomUIProvider */ },
		{ /* #1970 = 0xF63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6007ACC /* System.Void ImageKit.IKFilterCustomUIProvider::.ctor() */ },
		{ /* #1971 = 0xF65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D3E /* ImageKit.IKFilterUIView */ },
		{ /* #1972 = 0xF67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D3F /* ImageKit.IKImageBrowserCell */ },
		{ /* #1973 = 0xF69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D43 /* ImageKit.IKImageBrowserDataSource */ },
		{ /* #1974 = 0xF6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6007B02 /* System.Void ImageKit.IKImageBrowserDataSource::.ctor() */ },
		{ /* #1975 = 0xF6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D47 /* ImageKit.IKImageBrowserDelegate */ },
		{ /* #1976 = 0xF6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6007B17 /* System.Void ImageKit.IKImageBrowserDelegate::.ctor() */ },
		{ /* #1977 = 0xF71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D4B /* ImageKit.IKImageBrowserItem */ },
		{ /* #1978 = 0xF73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6007B29 /* System.Void ImageKit.IKImageBrowserItem::.ctor() */ },
		{ /* #1979 = 0xF75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D50 /* ImageKit.IKImageEditPanel */ },
		{ /* #1980 = 0xF77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D51 /* ImageKit.IIKImageEditPanelDataSource */ },
		{ /* #1981 = 0xF79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D53 /* ImageKit.IKImageEditPanelDataSourceWrapper */ },
		{ /* #1982 = 0xF7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D54 /* ImageKit.IKImageEditPanelDataSource */ },
		{ /* #1983 = 0xF7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6007BBE /* System.Void ImageKit.IKImageEditPanelDataSource::.ctor() */ },
		{ /* #1984 = 0xF7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D55 /* ImageKit.IKImageView */ },
		{ /* #1985 = 0xF81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D58 /* ImageKit.IKPictureTaker */ },
		{ /* #1986 = 0xF83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D5D /* ImageKit.IKSaveOptionsDelegate */ },
		{ /* #1987 = 0xF85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6007C3E /* System.Void ImageKit.IKSaveOptionsDelegate::.ctor() */ },
		{ /* #1988 = 0xF87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D63 /* ImageKit.IIKScannerDeviceViewDelegate */ },
		{ /* #1989 = 0xF89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D65 /* ImageKit.IKScannerDeviceViewDelegateWrapper */ },
		{ /* #1990 = 0xF8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D66 /* ImageKit.IKScannerDeviceViewDelegate */ },
		{ /* #1991 = 0xF8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6007C8C /* System.Void ImageKit.IKScannerDeviceViewDelegate::.ctor() */ },
		{ /* #1992 = 0xF8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D67 /* ImageKit.IKSlideshow */ },
		{ /* #1993 = 0xF91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D68 /* ImageKit.IIKSlideshowDataSource */ },
		{ /* #1994 = 0xF93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D6A /* ImageKit.IKSlideshowDataSourceWrapper */ },
		{ /* #1995 = 0xF95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D6B /* ImageKit.IKSlideshowDataSource */ },
		{ /* #1996 = 0xF97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6007CBD /* System.Void ImageKit.IKSlideshowDataSource::.ctor() */ },
		{ /* #1997 = 0xF99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DA7 /* ImageCaptureCore.IICDeviceDelegate */ },
		{ /* #1998 = 0xF9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DA9 /* ImageCaptureCore.ICDeviceDelegateWrapper */ },
		{ /* #1999 = 0xF9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D94 /* ImageCaptureCore.IICCameraDeviceDelegate */ },
		{ /* #2000 = 0xF9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D96 /* ImageCaptureCore.ICCameraDeviceDelegateWrapper */ },
		{ /* #2001 = 0xFA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D97 /* ImageCaptureCore.ICCameraDeviceDelegate */ },
		{ /* #2002 = 0xFA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60080C6 /* System.Void ImageCaptureCore.ICCameraDeviceDelegate::.ctor() */ },
		{ /* #2003 = 0xFA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D98 /* ImageCaptureCore.IICCameraDeviceDownloadDelegate */ },
		{ /* #2004 = 0xFA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D9A /* ImageCaptureCore.ICCameraDeviceDownloadDelegateWrapper */ },
		{ /* #2005 = 0xFA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D9B /* ImageCaptureCore.ICCameraDeviceDownloadDelegate */ },
		{ /* #2006 = 0xFAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60080E4 /* System.Void ImageCaptureCore.ICCameraDeviceDownloadDelegate::.ctor() */ },
		{ /* #2007 = 0xFAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D9F /* ImageCaptureCore.ICCameraItem */ },
		{ /* #2008 = 0xFAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D9D /* ImageCaptureCore.ICCameraFile */ },
		{ /* #2009 = 0xFB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D9E /* ImageCaptureCore.ICCameraFolder */ },
		{ /* #2010 = 0xFB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DA0 /* ImageCaptureCore.ICDevice */ },
		{ /* #2011 = 0xFB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DA1 /* ImageCaptureCore.ICDeviceBrowser */ },
		{ /* #2012 = 0xFB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DA2 /* ImageCaptureCore.IICDeviceBrowserDelegate */ },
		{ /* #2013 = 0xFB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DA4 /* ImageCaptureCore.ICDeviceBrowserDelegateWrapper */ },
		{ /* #2014 = 0xFBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DA5 /* ImageCaptureCore.ICDeviceBrowserDelegate */ },
		{ /* #2015 = 0xFBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008153 /* System.Void ImageCaptureCore.ICDeviceBrowserDelegate::.ctor() */ },
		{ /* #2016 = 0xFBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DAA /* ImageCaptureCore.ICDeviceDelegate */ },
		{ /* #2017 = 0xFC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008170 /* System.Void ImageCaptureCore.ICDeviceDelegate::.ctor() */ },
		{ /* #2018 = 0xFC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DB1 /* ImageCaptureCore.ICScannerBandData */ },
		{ /* #2019 = 0xFC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DB4 /* ImageCaptureCore.ICScannerDevice */ },
		{ /* #2020 = 0xFC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DB5 /* ImageCaptureCore.IICScannerDeviceDelegate */ },
		{ /* #2021 = 0xFC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DB7 /* ImageCaptureCore.ICScannerDeviceDelegateWrapper */ },
		{ /* #2022 = 0xFCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DB8 /* ImageCaptureCore.ICScannerDeviceDelegate */ },
		{ /* #2023 = 0xFCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60081B4 /* System.Void ImageCaptureCore.ICScannerDeviceDelegate::.ctor() */ },
		{ /* #2024 = 0xFCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DBA /* ImageCaptureCore.ICScannerFeature */ },
		{ /* #2025 = 0xFD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DBB /* ImageCaptureCore.ICScannerFeatureBoolean */ },
		{ /* #2026 = 0xFD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DBC /* ImageCaptureCore.ICScannerFeatureEnumeration */ },
		{ /* #2027 = 0xFD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DBD /* ImageCaptureCore.ICScannerFeatureRange */ },
		{ /* #2028 = 0xFD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DBE /* ImageCaptureCore.ICScannerFeatureTemplate */ },
		{ /* #2029 = 0xFD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DC0 /* ImageCaptureCore.ICScannerFunctionalUnit */ },
		{ /* #2030 = 0xFDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DC1 /* ImageCaptureCore.ICScannerFunctionalUnitDocumentFeeder */ },
		{ /* #2031 = 0xFDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DC2 /* ImageCaptureCore.ICScannerFunctionalUnitFlatbed */ },
		{ /* #2032 = 0xFDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DC3 /* ImageCaptureCore.ICScannerFunctionalUnitNegativeTransparency */ },
		{ /* #2033 = 0xFE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DC4 /* ImageCaptureCore.ICScannerFunctionalUnitPositiveTransparency */ },
		{ /* #2034 = 0xFE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DD1 /* IOSurface.IOSurface */ },
		{ /* #2035 = 0xFE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E55 /* HealthKit.HKQuery */ },
		{ /* #2036 = 0xFE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DD4 /* HealthKit.HKAnchoredObjectQuery */ },
		{ /* #2037 = 0xFE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E49 /* HealthKit.HKObjectType */ },
		{ /* #2038 = 0xFEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E5A /* HealthKit.HKSampleType */ },
		{ /* #2039 = 0xFED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DD7 /* HealthKit.HKQuantityType */ },
		{ /* #2040 = 0xFEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DD8 /* HealthKit.HKCategoryType */ },
		{ /* #2041 = 0xFF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DD9 /* HealthKit.HKCharacteristicType */ },
		{ /* #2042 = 0xFF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DDA /* HealthKit.HKCorrelationType */ },
		{ /* #2043 = 0xFF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DDB /* HealthKit.HKDocumentType */ },
		{ /* #2044 = 0xFF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DDC /* HealthKit.HKSampleQuery */ },
		{ /* #2045 = 0xFF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DDD /* HealthKit.HKUnit */ },
		{ /* #2046 = 0xFFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DDF /* HealthKit.HKActivityMoveModeObject */ },
		{ /* #2047 = 0xFFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DE0 /* HealthKit.HKActivitySummary */ },
		{ /* #2048 = 0xFFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DE1 /* HealthKit.HKActivitySummaryQuery */ },
		{ /* #2049 = 0x1001 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DE2 /* HealthKit.HKActivitySummaryType */ },
		{ /* #2050 = 0x1003 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DE5 /* HealthKit.HKAttachment */ },
		{ /* #2051 = 0x1005 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E48 /* HealthKit.HKObject */ },
		{ /* #2052 = 0x1007 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E59 /* HealthKit.HKSample */ },
		{ /* #2053 = 0x1009 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DE7 /* HealthKit.HKAudiogramSample */ },
		{ /* #2054 = 0x100B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DE8 /* HealthKit.HKAudiogramSampleType */ },
		{ /* #2055 = 0x100D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DE9 /* HealthKit.HKAudiogramSensitivityPoint */ },
		{ /* #2056 = 0x100F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DED /* HealthKit.HKBiologicalSexObject */ },
		{ /* #2057 = 0x1011 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DF0 /* HealthKit.HKBloodTypeObject */ },
		{ /* #2058 = 0x1013 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DF2 /* HealthKit.HKCategorySample */ },
		{ /* #2059 = 0x1015 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E06 /* HealthKit.HKCdaDocument */ },
		{ /* #2060 = 0x1017 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E20 /* HealthKit.HKDocumentSample */ },
		{ /* #2061 = 0x1019 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E07 /* HealthKit.HKCdaDocumentSample */ },
		{ /* #2062 = 0x101B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E0A /* HealthKit.HKClinicalRecord */ },
		{ /* #2063 = 0x101D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E0B /* HealthKit.HKClinicalType */ },
		{ /* #2064 = 0x101F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E3E /* HealthKit.HKLensSpecification */ },
		{ /* #2065 = 0x1021 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E0E /* HealthKit.HKContactsLensSpecification */ },
		{ /* #2066 = 0x1023 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E72 /* HealthKit.HKVisionPrescription */ },
		{ /* #2067 = 0x1025 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E0F /* HealthKit.HKContactsPrescription */ },
		{ /* #2068 = 0x1027 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E10 /* HealthKit.HKCorrelation */ },
		{ /* #2069 = 0x1029 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E11 /* HealthKit.HKCorrelationQuery */ },
		{ /* #2070 = 0x102B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E50 /* HealthKit.HKQuantitySample */ },
		{ /* #2071 = 0x102D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E14 /* HealthKit.HKCumulativeQuantitySample */ },
		{ /* #2072 = 0x102F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E15 /* HealthKit.HKCumulativeQuantitySeriesSample */ },
		{ /* #2073 = 0x1031 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E18 /* HealthKit.HKDeletedObject */ },
		{ /* #2074 = 0x1033 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E1B /* HealthKit.HKDevice */ },
		{ /* #2075 = 0x1035 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E1E /* HealthKit.HKDiscreteQuantitySample */ },
		{ /* #2076 = 0x1037 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E1F /* HealthKit.HKDocumentQuery */ },
		{ /* #2077 = 0x1039 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E23 /* HealthKit.HKElectrocardiogram */ },
		{ /* #2078 = 0x103B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E26 /* HealthKit.HKElectrocardiogramQuery */ },
		{ /* #2079 = 0x103D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E28 /* HealthKit.HKElectrocardiogramType */ },
		{ /* #2080 = 0x103F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E29 /* HealthKit.HKElectrocardiogramVoltageMeasurement */ },
		{ /* #2081 = 0x1041 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E2E /* HealthKit.HKFhirResource */ },
		{ /* #2082 = 0x1043 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E31 /* HealthKit.HKFhirVersion */ },
		{ /* #2083 = 0x1045 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E33 /* HealthKit.HKFitzpatrickSkinTypeObject */ },
		{ /* #2084 = 0x1047 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E34 /* HealthKit.HKGlassesLensSpecification */ },
		{ /* #2085 = 0x1049 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E35 /* HealthKit.HKGlassesPrescription */ },
		{ /* #2086 = 0x104B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E38 /* HealthKit.HKHeartbeatSeriesQuery */ },
		{ /* #2087 = 0x104D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E5C /* HealthKit.HKSeriesSample */ },
		{ /* #2088 = 0x104F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E39 /* HealthKit.HKHeartbeatSeriesSample */ },
		{ /* #2089 = 0x1051 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E7C /* HealthKit.HKWorkoutBuilder */ },
		{ /* #2090 = 0x1053 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E3F /* HealthKit.HKLiveWorkoutBuilder */ },
		{ /* #2091 = 0x1055 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E40 /* HealthKit.IHKLiveWorkoutBuilderDelegate */ },
		{ /* #2092 = 0x1057 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E42 /* HealthKit.HKLiveWorkoutBuilderDelegateWrapper */ },
		{ /* #2093 = 0x1059 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E43 /* HealthKit.HKLiveWorkoutBuilderDelegate */ },
		{ /* #2094 = 0x105B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60085A7 /* System.Void HealthKit.HKLiveWorkoutBuilderDelegate::.ctor() */ },
		{ /* #2095 = 0x105D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E44 /* HealthKit.HKLiveWorkoutDataSource */ },
		{ /* #2096 = 0x105F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E4A /* HealthKit.HKObserverQuery */ },
		{ /* #2097 = 0x1061 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E4C /* HealthKit.HKPrescriptionType */ },
		{ /* #2098 = 0x1063 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E4E /* HealthKit.HKQuantity */ },
		{ /* #2099 = 0x1065 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E52 /* HealthKit.HKQuantitySeriesSampleQuery */ },
		{ /* #2100 = 0x1067 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E56 /* HealthKit.HKQueryAnchor */ },
		{ /* #2101 = 0x1069 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E57 /* HealthKit.HKQueryDescriptor */ },
		{ /* #2102 = 0x106B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E5B /* HealthKit.HKSeriesBuilder */ },
		{ /* #2103 = 0x106D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E5D /* HealthKit.HKSeriesType */ },
		{ /* #2104 = 0x106F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E5E /* HealthKit.HKSource */ },
		{ /* #2105 = 0x1071 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E5F /* HealthKit.HKSourceQuery */ },
		{ /* #2106 = 0x1073 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E60 /* HealthKit.HKSourceRevision */ },
		{ /* #2107 = 0x1075 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E62 /* HealthKit.HKStatistics */ },
		{ /* #2108 = 0x1077 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E63 /* HealthKit.HKStatisticsCollection */ },
		{ /* #2109 = 0x1079 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E64 /* HealthKit.HKStatisticsCollectionQuery */ },
		{ /* #2110 = 0x107B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E66 /* HealthKit.HKStatisticsQuery */ },
		{ /* #2111 = 0x107D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E6A /* HealthKit.HKVerifiableClinicalRecord */ },
		{ /* #2112 = 0x107F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E70 /* HealthKit.HKVerifiableClinicalRecordSubject */ },
		{ /* #2113 = 0x1081 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E74 /* HealthKit.HKVisionPrism */ },
		{ /* #2114 = 0x1083 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E78 /* HealthKit.HKWheelchairUseObject */ },
		{ /* #2115 = 0x1085 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E79 /* HealthKit.HKWorkout */ },
		{ /* #2116 = 0x1087 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E7A /* HealthKit.HKWorkoutActivity */ },
		{ /* #2117 = 0x1089 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E7D /* HealthKit.HKWorkoutConfiguration */ },
		{ /* #2118 = 0x108B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E7E /* HealthKit.HKWorkoutEvent */ },
		{ /* #2119 = 0x108D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E80 /* HealthKit.HKWorkoutRoute */ },
		{ /* #2120 = 0x108F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E82 /* HealthKit.HKWorkoutRouteQuery */ },
		{ /* #2121 = 0x1091 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E83 /* HealthKit.HKWorkoutSession */ },
		{ /* #2122 = 0x1093 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E84 /* HealthKit.IHKWorkoutSessionDelegate */ },
		{ /* #2123 = 0x1095 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E86 /* HealthKit.HKWorkoutSessionDelegateWrapper */ },
		{ /* #2124 = 0x1097 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E87 /* HealthKit.HKWorkoutSessionDelegate */ },
		{ /* #2125 = 0x1099 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008907 /* System.Void HealthKit.HKWorkoutSessionDelegate::.ctor() */ },
		{ /* #2126 = 0x109B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E8B /* HealthKit.HKWorkoutType */ },
		{ /* #2127 = 0x109D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EA9 /* GameplayKit.GKBehavior */ },
		{ /* #2128 = 0x109F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EAA /* GameplayKit.GKComponentSystem`1 */ },
		{ /* #2129 = 0x10A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EAB /* GameplayKit.GKCompositeBehavior */ },
		{ /* #2130 = 0x10A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EAC /* GameplayKit.GKEntity */ },
		{ /* #2131 = 0x10A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ED3 /* GameplayKit.GKGraph */ },
		{ /* #2132 = 0x10A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EAE /* GameplayKit.GKGridGraph */ },
		{ /* #2133 = 0x10A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EAF /* GameplayKit.GKObstacleGraph */ },
		{ /* #2134 = 0x10AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EB1 /* GameplayKit.GKPath */ },
		{ /* #2135 = 0x10AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EE2 /* GameplayKit.GKObstacle */ },
		{ /* #2136 = 0x10AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EB2 /* GameplayKit.GKPolygonObstacle */ },
		{ /* #2137 = 0x10B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EB6 /* GameplayKit.GKState */ },
		{ /* #2138 = 0x10B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EB7 /* GameplayKit.GKStateMachine */ },
		{ /* #2139 = 0x10B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EC5 /* GameplayKit.GKComponent */ },
		{ /* #2140 = 0x10B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EB9 /* GameplayKit.GKAgent */ },
		{ /* #2141 = 0x10B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EBA /* GameplayKit.GKAgent2D */ },
		{ /* #2142 = 0x10BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EBB /* GameplayKit.GKAgent3D */ },
		{ /* #2143 = 0x10BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EBC /* GameplayKit.IGKAgentDelegate */ },
		{ /* #2144 = 0x10BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EBE /* GameplayKit.GKAgentDelegateWrapper */ },
		{ /* #2145 = 0x10C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EBF /* GameplayKit.GKAgentDelegate */ },
		{ /* #2146 = 0x10C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008A85 /* System.Void GameplayKit.GKAgentDelegate::.ctor() */ },
		{ /* #2147 = 0x10C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EE8 /* GameplayKit.IGKRandom */ },
		{ /* #2148 = 0x10C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EE9 /* GameplayKit.GKRandomWrapper */ },
		{ /* #2149 = 0x10C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EEB /* GameplayKit.GKRandomSource */ },
		{ /* #2150 = 0x10CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EC0 /* GameplayKit.GKARC4RandomSource */ },
		{ /* #2151 = 0x10CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EE0 /* GameplayKit.GKNoiseSource */ },
		{ /* #2152 = 0x10CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EC4 /* GameplayKit.GKCoherentNoiseSource */ },
		{ /* #2153 = 0x10D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EC1 /* GameplayKit.GKBillowNoiseSource */ },
		{ /* #2154 = 0x10D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EC2 /* GameplayKit.GKCheckerboardNoiseSource */ },
		{ /* #2155 = 0x10D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EC3 /* GameplayKit.GKCircleObstacle */ },
		{ /* #2156 = 0x10D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EC6 /* GameplayKit.GKConstantNoiseSource */ },
		{ /* #2157 = 0x10D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EC7 /* GameplayKit.GKCylindersNoiseSource */ },
		{ /* #2158 = 0x10DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EC8 /* GameplayKit.GKDecisionNode */ },
		{ /* #2159 = 0x10DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EC9 /* GameplayKit.GKDecisionTree */ },
		{ /* #2160 = 0x10DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ECA /* GameplayKit.IGKGameModel */ },
		{ /* #2161 = 0x10E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ECC /* GameplayKit.GKGameModelWrapper */ },
		{ /* #2162 = 0x10E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ECD /* GameplayKit.IGKGameModelPlayer */ },
		{ /* #2163 = 0x10E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ECE /* GameplayKit.GKGameModelPlayerWrapper */ },
		{ /* #2164 = 0x10E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ECF /* GameplayKit.IGKGameModelUpdate */ },
		{ /* #2165 = 0x10E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ED0 /* GameplayKit.GKGameModelUpdateWrapper */ },
		{ /* #2166 = 0x10EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EEA /* GameplayKit.GKRandomDistribution */ },
		{ /* #2167 = 0x10ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ED1 /* GameplayKit.GKGaussianDistribution */ },
		{ /* #2168 = 0x10EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ED2 /* GameplayKit.GKGoal */ },
		{ /* #2169 = 0x10F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ED4 /* GameplayKit.GKGraphNode */ },
		{ /* #2170 = 0x10F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ED5 /* GameplayKit.GKGraphNode2D */ },
		{ /* #2171 = 0x10F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ED6 /* GameplayKit.GKGraphNode3D */ },
		{ /* #2172 = 0x10F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ED7 /* GameplayKit.GKGridGraphNode */ },
		{ /* #2173 = 0x10F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ED8 /* GameplayKit.GKLinearCongruentialRandomSource */ },
		{ /* #2174 = 0x10FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000ED9 /* GameplayKit.GKMersenneTwisterRandomSource */ },
		{ /* #2175 = 0x10FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EDA /* GameplayKit.GKMeshGraph`1 */ },
		{ /* #2176 = 0x10FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EF9 /* GameplayKit.IGKStrategist */ },
		{ /* #2177 = 0x1101 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EFA /* GameplayKit.GKStrategistWrapper */ },
		{ /* #2178 = 0x1103 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EDC /* GameplayKit.GKMinMaxStrategist */ },
		{ /* #2179 = 0x1105 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EDD /* GameplayKit.GKMonteCarloStrategist */ },
		{ /* #2180 = 0x1107 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EDE /* GameplayKit.GKNoise */ },
		{ /* #2181 = 0x1109 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EDF /* GameplayKit.GKNoiseMap */ },
		{ /* #2182 = 0x110B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EEF /* GameplayKit.GKRule */ },
		{ /* #2183 = 0x110D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EE1 /* GameplayKit.GKNSPredicateRule */ },
		{ /* #2184 = 0x110F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EE3 /* GameplayKit.GKOctree`1 */ },
		{ /* #2185 = 0x1111 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EE4 /* GameplayKit.GKOctreeNode */ },
		{ /* #2186 = 0x1113 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EE5 /* GameplayKit.GKPerlinNoiseSource */ },
		{ /* #2187 = 0x1115 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EE6 /* GameplayKit.GKQuadTree */ },
		{ /* #2188 = 0x1117 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EE7 /* GameplayKit.GKQuadTreeNode */ },
		{ /* #2189 = 0x1119 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EEC /* GameplayKit.GKRidgedNoiseSource */ },
		{ /* #2190 = 0x111B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EED /* GameplayKit.GKRTree`1 */ },
		{ /* #2191 = 0x111D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EF0 /* GameplayKit.GKRuleSystem */ },
		{ /* #2192 = 0x111F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EF1 /* GameplayKit.GKScene */ },
		{ /* #2193 = 0x1121 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EF4 /* GameplayKit.GKSCNNodeComponent */ },
		{ /* #2194 = 0x1123 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EF5 /* GameplayKit.GKShuffledDistribution */ },
		{ /* #2195 = 0x1125 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EF6 /* GameplayKit.GKSKNodeComponent */ },
		{ /* #2196 = 0x1127 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EF7 /* GameplayKit.GKSphereObstacle */ },
		{ /* #2197 = 0x1129 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EF8 /* GameplayKit.GKSpheresNoiseSource */ },
		{ /* #2198 = 0x112B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EFB /* GameplayKit.GKVoronoiNoiseSource */ },
		{ /* #2199 = 0x112D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EFE /* GameKit.GKVoiceChat */ },
		{ /* #2200 = 0x112F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F00 /* GameKit.GKTurnBasedExchangeReply */ },
		{ /* #2201 = 0x1131 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F03 /* GameKit.GKAccessPoint */ },
		{ /* #2202 = 0x1133 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F01 /* GameKit.GKChallenge */ },
		{ /* #2203 = 0x1135 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F07 /* GameKit.GKAchievementChallenge */ },
		{ /* #2204 = 0x1137 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F0A /* GameKit.IGKAchievementViewControllerDelegate */ },
		{ /* #2205 = 0x1139 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F0B /* GameKit.GKAchievementViewControllerDelegateWrapper */ },
		{ /* #2206 = 0x113B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F0C /* GameKit.GKAchievementViewControllerDelegate */ },
		{ /* #2207 = 0x113D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008DA2 /* System.Void GameKit.GKAchievementViewControllerDelegate::.ctor() */ },
		{ /* #2208 = 0x113F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F0D /* GameKit.GKBasePlayer */ },
		{ /* #2209 = 0x1141 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F0F /* GameKit.IGKChallengeEventHandlerDelegate */ },
		{ /* #2210 = 0x1143 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F11 /* GameKit.GKChallengeEventHandlerDelegateWrapper */ },
		{ /* #2211 = 0x1145 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F12 /* GameKit.GKChallengeEventHandlerDelegate */ },
		{ /* #2212 = 0x1147 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008DD0 /* System.Void GameKit.GKChallengeEventHandlerDelegate::.ctor() */ },
		{ /* #2213 = 0x1149 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F13 /* GameKit.IGKChallengeListener */ },
		{ /* #2214 = 0x114B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F15 /* GameKit.GKChallengeListenerWrapper */ },
		{ /* #2215 = 0x114D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F16 /* GameKit.GKChallengeListener */ },
		{ /* #2216 = 0x114F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008DDF /* System.Void GameKit.GKChallengeListener::.ctor() */ },
		{ /* #2217 = 0x1151 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F8D /* GameKit.IGKViewController */ },
		{ /* #2218 = 0x1153 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F8E /* GameKit.GKViewControllerWrapper */ },
		{ /* #2219 = 0x1155 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F18 /* GameKit.GKChallengesViewController */ },
		{ /* #2220 = 0x1157 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F19 /* GameKit.IGKChallengesViewControllerDelegate */ },
		{ /* #2221 = 0x1159 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F1A /* GameKit.GKChallengesViewControllerDelegateWrapper */ },
		{ /* #2222 = 0x115B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F1B /* GameKit.GKChallengesViewControllerDelegate */ },
		{ /* #2223 = 0x115D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008DF3 /* System.Void GameKit.GKChallengesViewControllerDelegate::.ctor() */ },
		{ /* #2224 = 0x115F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F1C /* GameKit.GKCloudPlayer */ },
		{ /* #2225 = 0x1161 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F1E /* GameKit.GKDialogController */ },
		{ /* #2226 = 0x1163 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F22 /* GameKit.IGKFriendRequestComposeViewControllerDelegate */ },
		{ /* #2227 = 0x1165 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F23 /* GameKit.GKFriendRequestComposeViewControllerDelegateWrapper */ },
		{ /* #2228 = 0x1167 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F24 /* GameKit.GKFriendRequestComposeViewControllerDelegate */ },
		{ /* #2229 = 0x1169 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008E23 /* System.Void GameKit.GKFriendRequestComposeViewControllerDelegate::.ctor() */ },
		{ /* #2230 = 0x116B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F26 /* GameKit.IGKGameCenterControllerDelegate */ },
		{ /* #2231 = 0x116D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F27 /* GameKit.GKGameCenterControllerDelegateWrapper */ },
		{ /* #2232 = 0x116F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F28 /* GameKit.GKGameCenterControllerDelegate */ },
		{ /* #2233 = 0x1171 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008E2A /* System.Void GameKit.GKGameCenterControllerDelegate::.ctor() */ },
		{ /* #2234 = 0x1173 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F2E /* GameKit.IGKGameSessionEventListener */ },
		{ /* #2235 = 0x1175 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F30 /* GameKit.GKGameSessionEventListenerWrapper */ },
		{ /* #2236 = 0x1177 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F31 /* GameKit.GKInvite */ },
		{ /* #2237 = 0x1179 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F33 /* GameKit.IGKInviteEventListener */ },
		{ /* #2238 = 0x117B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F35 /* GameKit.GKInviteEventListenerWrapper */ },
		{ /* #2239 = 0x117D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F36 /* GameKit.GKInviteEventListener */ },
		{ /* #2240 = 0x117F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008E85 /* System.Void GameKit.GKInviteEventListener::.ctor() */ },
		{ /* #2241 = 0x1181 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F3E /* GameKit.GKLeaderboardScore */ },
		{ /* #2242 = 0x1183 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F43 /* GameKit.IGKLeaderboardViewControllerDelegate */ },
		{ /* #2243 = 0x1185 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F44 /* GameKit.GKLeaderboardViewControllerDelegateWrapper */ },
		{ /* #2244 = 0x1187 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F45 /* GameKit.GKLeaderboardViewControllerDelegate */ },
		{ /* #2245 = 0x1189 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008F0D /* System.Void GameKit.GKLeaderboardViewControllerDelegate::.ctor() */ },
		{ /* #2246 = 0x118B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F6B /* GameKit.IGKSavedGameListener */ },
		{ /* #2247 = 0x118D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F6D /* GameKit.GKSavedGameListenerWrapper */ },
		{ /* #2248 = 0x118F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F7E /* GameKit.IGKTurnBasedEventListener */ },
		{ /* #2249 = 0x1191 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F80 /* GameKit.GKTurnBasedEventListenerWrapper */ },
		{ /* #2250 = 0x1193 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F49 /* GameKit.IGKLocalPlayerListener */ },
		{ /* #2251 = 0x1195 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F4A /* GameKit.GKLocalPlayerListenerWrapper */ },
		{ /* #2252 = 0x1197 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F4B /* GameKit.GKLocalPlayerListener */ },
		{ /* #2253 = 0x1199 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008F5B /* System.Void GameKit.GKLocalPlayerListener::.ctor() */ },
		{ /* #2254 = 0x119B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F52 /* GameKit.IGKMatchDelegate */ },
		{ /* #2255 = 0x119D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F54 /* GameKit.GKMatchDelegateWrapper */ },
		{ /* #2256 = 0x119F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F55 /* GameKit.GKMatchDelegate */ },
		{ /* #2257 = 0x11A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6008F94 /* System.Void GameKit.GKMatchDelegate::.ctor() */ },
		{ /* #2258 = 0x11A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F5D /* GameKit.IGKMatchmakerViewControllerDelegate */ },
		{ /* #2259 = 0x11A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F5F /* GameKit.GKMatchmakerViewControllerDelegateWrapper */ },
		{ /* #2260 = 0x11A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F60 /* GameKit.GKMatchmakerViewControllerDelegate */ },
		{ /* #2261 = 0x11A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009001 /* System.Void GameKit.GKMatchmakerViewControllerDelegate::.ctor() */ },
		{ /* #2262 = 0x11AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F62 /* GameKit.GKMatchRequest */ },
		{ /* #2263 = 0x11AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F6E /* GameKit.GKSavedGameListener */ },
		{ /* #2264 = 0x11AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009055 /* System.Void GameKit.GKSavedGameListener::.ctor() */ },
		{ /* #2265 = 0x11B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F70 /* GameKit.GKScoreChallenge */ },
		{ /* #2266 = 0x11B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F72 /* GameKit.GKSession */ },
		{ /* #2267 = 0x11B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F73 /* GameKit.IGKSessionDelegate */ },
		{ /* #2268 = 0x11B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F75 /* GameKit.GKSessionDelegateWrapper */ },
		{ /* #2269 = 0x11B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F76 /* GameKit.GKSessionDelegate */ },
		{ /* #2270 = 0x11BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60090A9 /* System.Void GameKit.GKSessionDelegate::.ctor() */ },
		{ /* #2271 = 0x11BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F79 /* GameKit.GKTurnBasedEventHandler */ },
		{ /* #2272 = 0x11BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F7A /* GameKit.IGKTurnBasedEventHandlerDelegate */ },
		{ /* #2273 = 0x11C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F7C /* GameKit.GKTurnBasedEventHandlerDelegateWrapper */ },
		{ /* #2274 = 0x11C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F7D /* GameKit.GKTurnBasedEventHandlerDelegate */ },
		{ /* #2275 = 0x11C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60090C2 /* System.Void GameKit.GKTurnBasedEventHandlerDelegate::.ctor() */ },
		{ /* #2276 = 0x11C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F81 /* GameKit.GKTurnBasedEventListener */ },
		{ /* #2277 = 0x11C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60090D1 /* System.Void GameKit.GKTurnBasedEventListener::.ctor() */ },
		{ /* #2278 = 0x11CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F84 /* GameKit.GKTurnBasedMatchmakerViewController */ },
		{ /* #2279 = 0x11CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F85 /* GameKit.IGKTurnBasedMatchmakerViewControllerDelegate */ },
		{ /* #2280 = 0x11CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F87 /* GameKit.GKTurnBasedMatchmakerViewControllerDelegateWrapper */ },
		{ /* #2281 = 0x11D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F88 /* GameKit.GKTurnBasedMatchmakerViewControllerDelegate */ },
		{ /* #2282 = 0x11D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009130 /* System.Void GameKit.GKTurnBasedMatchmakerViewControllerDelegate::.ctor() */ },
		{ /* #2283 = 0x11D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F8B /* GameKit.GKTurnBasedParticipant */ },
		{ /* #2284 = 0x11D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FF4 /* GameController.GCPhysicalInputProfile */ },
		{ /* #2285 = 0x11D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FDC /* GameController.GCExtendedGamepad */ },
		{ /* #2286 = 0x11DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FAC /* GameController.GCExtendedGamepadSnapshot */ },
		{ /* #2287 = 0x11DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FDE /* GameController.GCGamepad */ },
		{ /* #2288 = 0x11DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FAE /* GameController.GCGamepadSnapshot */ },
		{ /* #2289 = 0x11E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FED /* GameController.GCMicroGamepad */ },
		{ /* #2290 = 0x11E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FB1 /* GameController.GCMicroGamepadSnapshot */ },
		{ /* #2291 = 0x11E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FF2 /* GameController.IGCPhysicalInputElement */ },
		{ /* #2292 = 0x11E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FF3 /* GameController.GCPhysicalInputElementWrapper */ },
		{ /* #2293 = 0x11E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FB7 /* GameController.IGCAxisElement */ },
		{ /* #2294 = 0x11EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FB8 /* GameController.GCAxisElementWrapper */ },
		{ /* #2295 = 0x11ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FB9 /* GameController.IGCAxisInput */ },
		{ /* #2296 = 0x11EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FBA /* GameController.GCAxisInputWrapper */ },
		{ /* #2297 = 0x11F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FBB /* GameController.IGCButtonElement */ },
		{ /* #2298 = 0x11F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FBC /* GameController.GCButtonElementWrapper */ },
		{ /* #2299 = 0x11F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FBD /* GameController.GCColor */ },
		{ /* #2300 = 0x11F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FC1 /* GameController.GCControllerElement */ },
		{ /* #2301 = 0x11F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FBE /* GameController.GCControllerAxisInput */ },
		{ /* #2302 = 0x11FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FBF /* GameController.GCControllerButtonInput */ },
		{ /* #2303 = 0x11FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FC0 /* GameController.GCControllerDirectionPad */ },
		{ /* #2304 = 0x11FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FC3 /* GameController.GCControllerTouchpad */ },
		{ /* #2305 = 0x1201 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FC5 /* GameController.IGCDevice */ },
		{ /* #2306 = 0x1203 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FC6 /* GameController.GCDeviceWrapper */ },
		{ /* #2307 = 0x1205 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FC7 /* GameController.GCDeviceBattery */ },
		{ /* #2308 = 0x1207 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FC9 /* GameController.GCDeviceCursor */ },
		{ /* #2309 = 0x1209 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FCA /* GameController.GCDeviceHaptics */ },
		{ /* #2310 = 0x120B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FCB /* GameController.GCDeviceLight */ },
		{ /* #2311 = 0x120D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FCF /* GameController.IGCDevicePhysicalInputState */ },
		{ /* #2312 = 0x120F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FD0 /* GameController.GCDevicePhysicalInputStateWrapper */ },
		{ /* #2313 = 0x1211 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FCC /* GameController.IGCDevicePhysicalInput */ },
		{ /* #2314 = 0x1213 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FCD /* GameController.GCDevicePhysicalInputWrapper */ },
		{ /* #2315 = 0x1215 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FD1 /* GameController.IGCDevicePhysicalInputStateDiff */ },
		{ /* #2316 = 0x1217 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FD2 /* GameController.GCDevicePhysicalInputStateDiffWrapper */ },
		{ /* #2317 = 0x1219 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FD3 /* GameController.GCDirectionalGamepad */ },
		{ /* #2318 = 0x121B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FD4 /* GameController.IGCDirectionPadElement */ },
		{ /* #2319 = 0x121D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FD5 /* GameController.GCDirectionPadElementWrapper */ },
		{ /* #2320 = 0x121F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FD6 /* GameController.GCDualSenseAdaptiveTrigger */ },
		{ /* #2321 = 0x1221 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FD9 /* GameController.GCDualSenseGamepad */ },
		{ /* #2322 = 0x1223 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FDA /* GameController.GCDualShockGamepad */ },
		{ /* #2323 = 0x1225 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FDB /* GameController.GCEventViewController */ },
		{ /* #2324 = 0x1227 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FDF /* GameController.GCGearShifterElement */ },
		{ /* #2325 = 0x1229 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FE9 /* GameController.GCKeyboardInput */ },
		{ /* #2326 = 0x122B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FEB /* GameController.IGCLinearInput */ },
		{ /* #2327 = 0x122D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FEC /* GameController.GCLinearInputWrapper */ },
		{ /* #2328 = 0x122F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FEF /* GameController.GCMotion */ },
		{ /* #2329 = 0x1231 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FF1 /* GameController.GCMouseInput */ },
		{ /* #2330 = 0x1233 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FF5 /* GameController.IGCPressedStateInput */ },
		{ /* #2331 = 0x1235 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FF6 /* GameController.GCPressedStateInputWrapper */ },
		{ /* #2332 = 0x1237 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FFA /* GameController.GCRacingWheelInputState */ },
		{ /* #2333 = 0x1239 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FF9 /* GameController.GCRacingWheelInput */ },
		{ /* #2334 = 0x123B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FFB /* GameController.IGCRelativeInput */ },
		{ /* #2335 = 0x123D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FFC /* GameController.GCRelativeInputWrapper */ },
		{ /* #2336 = 0x123F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FFD /* GameController.GCSteeringWheelElement */ },
		{ /* #2337 = 0x1241 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FFE /* GameController.IGCSwitchElement */ },
		{ /* #2338 = 0x1243 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FFF /* GameController.GCSwitchElementWrapper */ },
		{ /* #2339 = 0x1245 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001000 /* GameController.IGCSwitchPositionInput */ },
		{ /* #2340 = 0x1247 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001001 /* GameController.GCSwitchPositionInputWrapper */ },
		{ /* #2341 = 0x1249 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001003 /* GameController.IGCTouchedStateInput */ },
		{ /* #2342 = 0x124B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001004 /* GameController.GCTouchedStateInputWrapper */ },
		{ /* #2343 = 0x124D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001006 /* GameController.GCXboxGamepad */ },
		{ /* #2344 = 0x124F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001020 /* GLKit.GLKMesh */ },
		{ /* #2345 = 0x1251 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200102D /* GLKit.IGLKNamedEffect */ },
		{ /* #2346 = 0x1253 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200102E /* GLKit.GLKNamedEffectWrapper */ },
		{ /* #2347 = 0x1255 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001023 /* GLKit.GLKBaseEffect */ },
		{ /* #2348 = 0x1257 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001024 /* GLKit.GLKEffectProperty */ },
		{ /* #2349 = 0x1259 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001025 /* GLKit.GLKEffectPropertyFog */ },
		{ /* #2350 = 0x125B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001026 /* GLKit.GLKEffectPropertyLight */ },
		{ /* #2351 = 0x125D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001027 /* GLKit.GLKEffectPropertyMaterial */ },
		{ /* #2352 = 0x125F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001028 /* GLKit.GLKEffectPropertyTexture */ },
		{ /* #2353 = 0x1261 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001029 /* GLKit.GLKEffectPropertyTransform */ },
		{ /* #2354 = 0x1263 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200102A /* GLKit.GLKMeshBuffer */ },
		{ /* #2355 = 0x1265 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200102B /* GLKit.GLKMeshBufferAllocator */ },
		{ /* #2356 = 0x1267 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200102F /* GLKit.GLKNamedEffect */ },
		{ /* #2357 = 0x1269 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60096A7 /* System.Void GLKit.GLKNamedEffect::.ctor() */ },
		{ /* #2358 = 0x126B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001030 /* GLKit.GLKReflectionMapEffect */ },
		{ /* #2359 = 0x126D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001031 /* GLKit.GLKSkyboxEffect */ },
		{ /* #2360 = 0x126F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001032 /* GLKit.GLKSubmesh */ },
		{ /* #2361 = 0x1271 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001033 /* GLKit.GLKTextureInfo */ },
		{ /* #2362 = 0x1273 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010EF /* WebKit.WebScriptObject */ },
		{ /* #2363 = 0x1275 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010C0 /* WebKit.DomObject */ },
		{ /* #2364 = 0x1277 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200107D /* WebKit.IDomEventTarget */ },
		{ /* #2365 = 0x1279 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200107E /* WebKit.DomEventTargetWrapper */ },
		{ /* #2366 = 0x127B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200103A /* WebKit.DomNode */ },
		{ /* #2367 = 0x127D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001076 /* WebKit.DomElement */ },
		{ /* #2368 = 0x127F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200108E /* WebKit.DomHtmlElement */ },
		{ /* #2369 = 0x1281 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001036 /* WebKit.DomHtmlSelectElement */ },
		{ /* #2370 = 0x1283 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001037 /* WebKit.DomHtmlOptionsCollection */ },
		{ /* #2371 = 0x1285 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200103D /* WebKit.DomCssRuleList */ },
		{ /* #2372 = 0x1287 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200103E /* WebKit.DomCssStyleDeclaration */ },
		{ /* #2373 = 0x1289 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200103F /* WebKit.DomHtmlCollection */ },
		{ /* #2374 = 0x128B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001040 /* WebKit.DomMediaList */ },
		{ /* #2375 = 0x128D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001041 /* WebKit.DomNamedNodeMap */ },
		{ /* #2376 = 0x128F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001042 /* WebKit.DomNodeList */ },
		{ /* #2377 = 0x1291 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001043 /* WebKit.DomStyleSheetList */ },
		{ /* #2378 = 0x1293 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001044 /* WebKit.WKPreferences */ },
		{ /* #2379 = 0x1295 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001045 /* WebKit.WKWindowFeatures */ },
		{ /* #2380 = 0x1297 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001046 /* WebKit.WebFrame */ },
		{ /* #2381 = 0x1299 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010E6 /* WebKit.IWebPolicyDelegate */ },
		{ /* #2382 = 0x129B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010E8 /* WebKit.WebPolicyDelegateWrapper */ },
		{ /* #2383 = 0x129D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001049 /* WebKit.WebPolicyDelegate */ },
		{ /* #2384 = 0x129F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009874 /* System.Void WebKit.WebPolicyDelegate::.ctor() */ },
		{ /* #2385 = 0x12A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001060 /* WebKit.DomAbstractView */ },
		{ /* #2386 = 0x12A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001061 /* WebKit.DomAttr */ },
		{ /* #2387 = 0x12A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001062 /* WebKit.DomBlob */ },
		{ /* #2388 = 0x12A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001064 /* WebKit.DomCharacterData */ },
		{ /* #2389 = 0x12A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010C7 /* WebKit.DomText */ },
		{ /* #2390 = 0x12AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001063 /* WebKit.DomCDataSection */ },
		{ /* #2391 = 0x12AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001065 /* WebKit.DomComment */ },
		{ /* #2392 = 0x12AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200106A /* WebKit.DomCssRule */ },
		{ /* #2393 = 0x12B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001066 /* WebKit.DomCssCharsetRule */ },
		{ /* #2394 = 0x12B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001067 /* WebKit.DomCssFontFaceRule */ },
		{ /* #2395 = 0x12B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001068 /* WebKit.DomCssMediaRule */ },
		{ /* #2396 = 0x12B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001069 /* WebKit.DomCssPageRule */ },
		{ /* #2397 = 0x12B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200106C /* WebKit.DomCssStyleRule */ },
		{ /* #2398 = 0x12BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010C6 /* WebKit.DomStyleSheet */ },
		{ /* #2399 = 0x12BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200106D /* WebKit.DomCssStyleSheet */ },
		{ /* #2400 = 0x12BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200106E /* WebKit.DomCssUnknownRule */ },
		{ /* #2401 = 0x12C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200106F /* WebKit.DomCssValue */ },
		{ /* #2402 = 0x12C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001072 /* WebKit.DomDocument */ },
		{ /* #2403 = 0x12C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001073 /* WebKit.DomDocumentFragment */ },
		{ /* #2404 = 0x12C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001075 /* WebKit.DomDocumentType */ },
		{ /* #2405 = 0x12C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001077 /* WebKit.DomEntityReference */ },
		{ /* #2406 = 0x12CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001078 /* WebKit.DomEvent */ },
		{ /* #2407 = 0x12CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001079 /* WebKit.IDomEventListener */ },
		{ /* #2408 = 0x12CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200107A /* WebKit.DomEventListenerWrapper */ },
		{ /* #2409 = 0x12D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200107B /* WebKit.DomEventListener */ },
		{ /* #2410 = 0x12D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009B1F /* System.Void WebKit.DomEventListener::.ctor() */ },
		{ /* #2411 = 0x12D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200107F /* WebKit.DomEventTarget */ },
		{ /* #2412 = 0x12D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009B2B /* System.Void WebKit.DomEventTarget::.ctor() */ },
		{ /* #2413 = 0x12D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001080 /* WebKit.DomFile */ },
		{ /* #2414 = 0x12DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001081 /* WebKit.DomFileList */ },
		{ /* #2415 = 0x12DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001082 /* WebKit.DomHtmlAnchorElement */ },
		{ /* #2416 = 0x12DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001083 /* WebKit.DomHtmlAppletElement */ },
		{ /* #2417 = 0x12E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001084 /* WebKit.DomHtmlAreaElement */ },
		{ /* #2418 = 0x12E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001085 /* WebKit.DomHtmlBaseElement */ },
		{ /* #2419 = 0x12E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001086 /* WebKit.DomHtmlBaseFontElement */ },
		{ /* #2420 = 0x12E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001087 /* WebKit.DomHtmlBodyElement */ },
		{ /* #2421 = 0x12E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001088 /* WebKit.DomHtmlBRElement */ },
		{ /* #2422 = 0x12EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001089 /* WebKit.DomHtmlButtonElement */ },
		{ /* #2423 = 0x12ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200108A /* WebKit.DomHtmlDirectoryElement */ },
		{ /* #2424 = 0x12EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200108B /* WebKit.DomHtmlDivElement */ },
		{ /* #2425 = 0x12F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200108C /* WebKit.DomHtmlDListElement */ },
		{ /* #2426 = 0x12F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200108D /* WebKit.DomHtmlDocument */ },
		{ /* #2427 = 0x12F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200108F /* WebKit.DomHtmlEmbedElement */ },
		{ /* #2428 = 0x12F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001090 /* WebKit.DomHtmlFieldSetElement */ },
		{ /* #2429 = 0x12F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001091 /* WebKit.DomHtmlFontElement */ },
		{ /* #2430 = 0x12FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001092 /* WebKit.DomHtmlFormElement */ },
		{ /* #2431 = 0x12FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001093 /* WebKit.DomHtmlFrameElement */ },
		{ /* #2432 = 0x12FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001094 /* WebKit.DomHtmlFrameSetElement */ },
		{ /* #2433 = 0x1301 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001095 /* WebKit.DomHtmlHeadElement */ },
		{ /* #2434 = 0x1303 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001096 /* WebKit.DomHtmlHeadingElement */ },
		{ /* #2435 = 0x1305 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001097 /* WebKit.DomHtmlHRElement */ },
		{ /* #2436 = 0x1307 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001098 /* WebKit.DomHtmlHtmlElement */ },
		{ /* #2437 = 0x1309 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001099 /* WebKit.DomHtmlIFrameElement */ },
		{ /* #2438 = 0x130B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200109A /* WebKit.DomHtmlImageElement */ },
		{ /* #2439 = 0x130D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200109B /* WebKit.DomHtmlInputElement */ },
		{ /* #2440 = 0x130F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200109C /* WebKit.DomHtmlLabelElement */ },
		{ /* #2441 = 0x1311 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200109D /* WebKit.DomHtmlLegendElement */ },
		{ /* #2442 = 0x1313 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200109E /* WebKit.DomHtmlLIElement */ },
		{ /* #2443 = 0x1315 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200109F /* WebKit.DomHtmlLinkElement */ },
		{ /* #2444 = 0x1317 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010A0 /* WebKit.DomHtmlMapElement */ },
		{ /* #2445 = 0x1319 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010A1 /* WebKit.DomHtmlMarqueeElement */ },
		{ /* #2446 = 0x131B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010A2 /* WebKit.DomHtmlMenuElement */ },
		{ /* #2447 = 0x131D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010A3 /* WebKit.DomHtmlMetaElement */ },
		{ /* #2448 = 0x131F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010A4 /* WebKit.DomHtmlModElement */ },
		{ /* #2449 = 0x1321 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010A5 /* WebKit.DomHtmlObjectElement */ },
		{ /* #2450 = 0x1323 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010A6 /* WebKit.DomHtmlOListElement */ },
		{ /* #2451 = 0x1325 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010A7 /* WebKit.DomHtmlOptGroupElement */ },
		{ /* #2452 = 0x1327 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010A8 /* WebKit.DomHtmlOptionElement */ },
		{ /* #2453 = 0x1329 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010A9 /* WebKit.DomHtmlParagraphElement */ },
		{ /* #2454 = 0x132B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010AA /* WebKit.DomHtmlParamElement */ },
		{ /* #2455 = 0x132D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010AB /* WebKit.DomHtmlPreElement */ },
		{ /* #2456 = 0x132F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010AC /* WebKit.DomHtmlQuoteElement */ },
		{ /* #2457 = 0x1331 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010AD /* WebKit.DomHtmlScriptElement */ },
		{ /* #2458 = 0x1333 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010AE /* WebKit.DomHtmlStyleElement */ },
		{ /* #2459 = 0x1335 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010AF /* WebKit.DomHtmlTableCaptionElement */ },
		{ /* #2460 = 0x1337 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010B0 /* WebKit.DomHtmlTableCellElement */ },
		{ /* #2461 = 0x1339 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010B1 /* WebKit.DomHtmlTableColElement */ },
		{ /* #2462 = 0x133B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010B2 /* WebKit.DomHtmlTableElement */ },
		{ /* #2463 = 0x133D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010B3 /* WebKit.DomHtmlTableRowElement */ },
		{ /* #2464 = 0x133F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010B4 /* WebKit.DomHtmlTableSectionElement */ },
		{ /* #2465 = 0x1341 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010B5 /* WebKit.DomHtmlTextAreaElement */ },
		{ /* #2466 = 0x1343 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010B6 /* WebKit.DomImplementation */ },
		{ /* #2467 = 0x1345 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010B7 /* WebKit.DomImportCssRule */ },
		{ /* #2468 = 0x1347 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010C8 /* WebKit.DomUIEvent */ },
		{ /* #2469 = 0x1349 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010B8 /* WebKit.DomKeyboardEvent */ },
		{ /* #2470 = 0x134B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010BA /* WebKit.DomMouseEvent */ },
		{ /* #2471 = 0x134D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010BB /* WebKit.IDomNodeFilter */ },
		{ /* #2472 = 0x134F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010BC /* WebKit.DomNodeFilterWrapper */ },
		{ /* #2473 = 0x1351 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010BD /* WebKit.DomNodeFilter */ },
		{ /* #2474 = 0x1353 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009EBC /* System.Void WebKit.DomNodeFilter::.ctor() */ },
		{ /* #2475 = 0x1355 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010BE /* WebKit.DomNodeIterator */ },
		{ /* #2476 = 0x1357 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010C1 /* WebKit.DomOverflowEvent */ },
		{ /* #2477 = 0x1359 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010C2 /* WebKit.DomProcessingInstruction */ },
		{ /* #2478 = 0x135B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010C3 /* WebKit.DomProgressEvent */ },
		{ /* #2479 = 0x135D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010C4 /* WebKit.DomRange */ },
		{ /* #2480 = 0x135F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010C9 /* WebKit.DomWheelEvent */ },
		{ /* #2481 = 0x1361 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010CA /* WebKit.WebArchive */ },
		{ /* #2482 = 0x1363 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010CB /* WebKit.WebBackForwardList */ },
		{ /* #2483 = 0x1365 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010CD /* WebKit.WebDataSource */ },
		{ /* #2484 = 0x1367 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010CE /* WebKit.IWebDocumentRepresentation */ },
		{ /* #2485 = 0x1369 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010CF /* WebKit.WebDocumentRepresentationWrapper */ },
		{ /* #2486 = 0x136B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010D0 /* WebKit.WebDocumentRepresentation */ },
		{ /* #2487 = 0x136D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009F7A /* System.Void WebKit.WebDocumentRepresentation::.ctor() */ },
		{ /* #2488 = 0x136F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011CD /* Foundation.NSUrlDownload */ },
		{ /* #2489 = 0x1371 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010D1 /* WebKit.WebDownload */ },
		{ /* #2490 = 0x1373 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010D2 /* WebKit.IWebDownloadDelegate */ },
		{ /* #2491 = 0x1375 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010D4 /* WebKit.WebDownloadDelegateWrapper */ },
		{ /* #2492 = 0x1377 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010D5 /* WebKit.WebDownloadDelegate */ },
		{ /* #2493 = 0x1379 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009F8B /* System.Void WebKit.WebDownloadDelegate::.ctor() */ },
		{ /* #2494 = 0x137B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010D8 /* WebKit.IWebFrameLoadDelegate */ },
		{ /* #2495 = 0x137D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010DA /* WebKit.WebFrameLoadDelegateWrapper */ },
		{ /* #2496 = 0x137F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010DB /* WebKit.WebFrameLoadDelegate */ },
		{ /* #2497 = 0x1381 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009F9F /* System.Void WebKit.WebFrameLoadDelegate::.ctor() */ },
		{ /* #2498 = 0x1383 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010DC /* WebKit.WebFrameView */ },
		{ /* #2499 = 0x1385 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010DD /* WebKit.WebHistory */ },
		{ /* #2500 = 0x1387 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010E0 /* WebKit.IWebOpenPanelResultListener */ },
		{ /* #2501 = 0x1389 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010E1 /* WebKit.WebOpenPanelResultListenerWrapper */ },
		{ /* #2502 = 0x138B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010E2 /* WebKit.WebOpenPanelResultListener */ },
		{ /* #2503 = 0x138D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009FE9 /* System.Void WebKit.WebOpenPanelResultListener::.ctor() */ },
		{ /* #2504 = 0x138F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010E3 /* WebKit.IWebPolicyDecisionListener */ },
		{ /* #2505 = 0x1391 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010E4 /* WebKit.WebPolicyDecisionListenerWrapper */ },
		{ /* #2506 = 0x1393 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010E5 /* WebKit.WebPolicyDecisionListener */ },
		{ /* #2507 = 0x1395 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6009FF6 /* System.Void WebKit.WebPolicyDecisionListener::.ctor() */ },
		{ /* #2508 = 0x1397 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010E9 /* WebKit.WebPreferences */ },
		{ /* #2509 = 0x1399 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010EA /* WebKit.WebResource */ },
		{ /* #2510 = 0x139B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010EB /* WebKit.IWebResourceLoadDelegate */ },
		{ /* #2511 = 0x139D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010ED /* WebKit.WebResourceLoadDelegateWrapper */ },
		{ /* #2512 = 0x139F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010EE /* WebKit.WebResourceLoadDelegate */ },
		{ /* #2513 = 0x13A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A057 /* System.Void WebKit.WebResourceLoadDelegate::.ctor() */ },
		{ /* #2514 = 0x13A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010F0 /* WebKit.IWebUIDelegate */ },
		{ /* #2515 = 0x13A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010F2 /* WebKit.WebUIDelegateWrapper */ },
		{ /* #2516 = 0x13A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010F3 /* WebKit.WebUIDelegate */ },
		{ /* #2517 = 0x13A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A09C /* System.Void WebKit.WebUIDelegate::.ctor() */ },
		{ /* #2518 = 0x13AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001117 /* WebKit.WKBackForwardList */ },
		{ /* #2519 = 0x13AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001118 /* WebKit.WKBackForwardListItem */ },
		{ /* #2520 = 0x13AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200111A /* WebKit.WKContentRuleList */ },
		{ /* #2521 = 0x13B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200111C /* WebKit.WKContentWorld */ },
		{ /* #2522 = 0x13B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200111F /* WebKit.IWKDownloadDelegate */ },
		{ /* #2523 = 0x13B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001121 /* WebKit.WKDownloadDelegateWrapper */ },
		{ /* #2524 = 0x13B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001122 /* WebKit.WKDownloadDelegate */ },
		{ /* #2525 = 0x13B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A1B2 /* System.Void WebKit.WKDownloadDelegate::.ctor() */ },
		{ /* #2526 = 0x13BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001126 /* WebKit.WKFindConfiguration */ },
		{ /* #2527 = 0x13BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001127 /* WebKit.WKFindResult */ },
		{ /* #2528 = 0x13BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001128 /* WebKit.WKFrameInfo */ },
		{ /* #2529 = 0x13C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200112B /* WebKit.IWKHttpCookieStoreObserver */ },
		{ /* #2530 = 0x13C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200112D /* WebKit.WKHttpCookieStoreObserverWrapper */ },
		{ /* #2531 = 0x13C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001131 /* WebKit.WKNavigation */ },
		{ /* #2532 = 0x13C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001132 /* WebKit.WKNavigationAction */ },
		{ /* #2533 = 0x13C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001134 /* WebKit.IWKNavigationDelegate */ },
		{ /* #2534 = 0x13CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001136 /* WebKit.WKNavigationDelegateWrapper */ },
		{ /* #2535 = 0x13CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001137 /* WebKit.WKNavigationDelegate */ },
		{ /* #2536 = 0x13CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A207 /* System.Void WebKit.WKNavigationDelegate::.ctor() */ },
		{ /* #2537 = 0x13D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001138 /* WebKit.WKNavigationResponse */ },
		{ /* #2538 = 0x13D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200113B /* WebKit.WKOpenPanelParameters */ },
		{ /* #2539 = 0x13D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200113C /* WebKit.WKPdfConfiguration */ },
		{ /* #2540 = 0x13D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200113E /* WebKit.WKProcessPool */ },
		{ /* #2541 = 0x13D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200113F /* WebKit.WKScriptMessage */ },
		{ /* #2542 = 0x13DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001140 /* WebKit.IWKScriptMessageHandler */ },
		{ /* #2543 = 0x13DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001141 /* WebKit.WKScriptMessageHandlerWrapper */ },
		{ /* #2544 = 0x13DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001142 /* WebKit.WKScriptMessageHandler */ },
		{ /* #2545 = 0x13E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A244 /* System.Void WebKit.WKScriptMessageHandler::.ctor() */ },
		{ /* #2546 = 0x13E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001143 /* WebKit.IWKScriptMessageHandlerWithReply */ },
		{ /* #2547 = 0x13E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001144 /* WebKit.WKScriptMessageHandlerWithReplyWrapper */ },
		{ /* #2548 = 0x13E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001145 /* WebKit.WKSecurityOrigin */ },
		{ /* #2549 = 0x13E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001146 /* WebKit.WKSnapshotConfiguration */ },
		{ /* #2550 = 0x13EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001147 /* WebKit.IWKUIDelegate */ },
		{ /* #2551 = 0x13ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001149 /* WebKit.WKUIDelegateWrapper */ },
		{ /* #2552 = 0x13EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200114A /* WebKit.WKUIDelegate */ },
		{ /* #2553 = 0x13F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A267 /* System.Void WebKit.WKUIDelegate::.ctor() */ },
		{ /* #2554 = 0x13F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200114B /* WebKit.IWKUrlSchemeHandler */ },
		{ /* #2555 = 0x13F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200114C /* WebKit.WKUrlSchemeHandlerWrapper */ },
		{ /* #2556 = 0x13F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200114D /* WebKit.IWKUrlSchemeTask */ },
		{ /* #2557 = 0x13F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200114E /* WebKit.WKUrlSchemeTaskWrapper */ },
		{ /* #2558 = 0x13FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200114F /* WebKit.WKUserContentController */ },
		{ /* #2559 = 0x13FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001150 /* WebKit.WKUserScript */ },
		{ /* #2560 = 0x13FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001152 /* WebKit.WKWebpagePreferences */ },
		{ /* #2561 = 0x1401 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001153 /* WebKit.WKWebsiteDataRecord */ },
		{ /* #2562 = 0x1403 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001156 /* WebKit.WKWebViewConfiguration */ },
		{ /* #2563 = 0x1405 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001163 /* Foundation.NSDispatcher */ },
		{ /* #2564 = 0x1407 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A342 /* System.Void Foundation.NSDispatcher::Apply() */ },
		{ /* #2565 = 0x1409 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A341 /* System.Void Foundation.NSDispatcher::.ctor() */ },
		{ /* #2566 = 0x140B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001164 /* Foundation.NSActionDispatcher */ },
		{ /* #2567 = 0x140D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A345 /* System.Void Foundation.NSActionDispatcher::Apply() */ },
		{ /* #2568 = 0x140F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001165 /* Foundation.NSSynchronizationContextDispatcher */ },
		{ /* #2569 = 0x1411 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A347 /* System.Void Foundation.NSSynchronizationContextDispatcher::Apply() */ },
		{ /* #2570 = 0x1413 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001166 /* Foundation.NSTimerActionDispatcher */ },
		{ /* #2571 = 0x1415 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A349 /* System.Void Foundation.NSTimerActionDispatcher::Fire(Foundation.NSTimer) */ },
		{ /* #2572 = 0x1417 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001167 /* Foundation.NSAsyncDispatcher */ },
		{ /* #2573 = 0x1419 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A34C /* System.Void Foundation.NSAsyncDispatcher::Apply() */ },
		{ /* #2574 = 0x141B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A34B /* System.Void Foundation.NSAsyncDispatcher::.ctor() */ },
		{ /* #2575 = 0x141D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001168 /* Foundation.NSAsyncActionDispatcher */ },
		{ /* #2576 = 0x141F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A34E /* System.Void Foundation.NSAsyncActionDispatcher::Apply() */ },
		{ /* #2577 = 0x1421 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001169 /* Foundation.NSAsyncSynchronizationContextDispatcher */ },
		{ /* #2578 = 0x1423 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A350 /* System.Void Foundation.NSAsyncSynchronizationContextDispatcher::Apply() */ },
		{ /* #2579 = 0x1425 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200116B /* Foundation.NSAppleEventDescriptor */ },
		{ /* #2580 = 0x1427 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001170 /* Foundation.NSBundle */ },
		{ /* #2581 = 0x1429 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001174 /* Foundation.NSConnection */ },
		{ /* #2582 = 0x142B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001176 /* Foundation.NSDate */ },
		{ /* #2583 = 0x142D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001177 /* Foundation.NSDateComponents */ },
		{ /* #2584 = 0x142F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200131F /* Foundation.NSUnit */ },
		{ /* #2585 = 0x1431 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200117B /* Foundation.NSDimension */ },
		{ /* #2586 = 0x1433 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200117C /* Foundation.NSDirectoryEnumerator */ },
		{ /* #2587 = 0x1435 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200117F /* Foundation.NSError */ },
		{ /* #2588 = 0x1437 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001181 /* Foundation.NSExpression */ },
		{ /* #2589 = 0x1439 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001249 /* Foundation.INSFileManagerDelegate */ },
		{ /* #2590 = 0x143B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200124A /* Foundation.NSFileManagerDelegateWrapper */ },
		{ /* #2591 = 0x143D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001189 /* Foundation.NSFileManagerDelegate */ },
		{ /* #2592 = 0x143F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600A7EB /* System.Void Foundation.NSFileManagerDelegate::.ctor() */ },
		{ /* #2593 = 0x1441 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200118C /* Foundation.NSHttpCookie */ },
		{ /* #2594 = 0x1443 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011C2 /* Foundation.NSStream */ },
		{ /* #2595 = 0x1445 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200118F /* Foundation.NSInputStream */ },
		{ /* #2596 = 0x1447 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001194 /* Foundation.NSMetadataItem */ },
		{ /* #2597 = 0x1449 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F3C /* AppKit.INSPasteboardReading */ },
		{ /* #2598 = 0x144B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F3D /* AppKit.NSPasteboardReadingWrapper */ },
		{ /* #2599 = 0x144D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F42 /* AppKit.INSPasteboardWriting */ },
		{ /* #2600 = 0x144F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F44 /* AppKit.NSPasteboardWritingWrapper */ },
		{ /* #2601 = 0x1451 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200116E /* Foundation.NSAttributedString */ },
		{ /* #2602 = 0x1453 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001196 /* Foundation.NSMutableAttributedString */ },
		{ /* #2603 = 0x1455 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011AA /* Foundation.NSOrderedSet */ },
		{ /* #2604 = 0x1457 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011AB /* Foundation.NSMutableOrderedSet */ },
		{ /* #2605 = 0x1459 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011BD /* Foundation.NSSet */ },
		{ /* #2606 = 0x145B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200119B /* Foundation.NSMutableSet */ },
		{ /* #2607 = 0x145D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200126C /* Foundation.INSItemProviderReading */ },
		{ /* #2608 = 0x145F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200126D /* Foundation.NSItemProviderReadingWrapper */ },
		{ /* #2609 = 0x1461 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200126F /* Foundation.INSItemProviderWriting */ },
		{ /* #2610 = 0x1463 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001271 /* Foundation.NSItemProviderWritingWrapper */ },
		{ /* #2611 = 0x1465 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011C3 /* Foundation.NSString */ },
		{ /* #2612 = 0x1467 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200119D /* Foundation.NSMutableString */ },
		{ /* #2613 = 0x1469 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200119E /* Foundation.NSUrlRequest */ },
		{ /* #2614 = 0x146B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200119F /* Foundation.NSMutableUrlRequest */ },
		{ /* #2615 = 0x146D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011A1 /* Foundation.InternalNSNotificationHandler */ },
		{ /* #2616 = 0x146F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ABBF /* System.Void Foundation.InternalNSNotificationHandler::Post(Foundation.NSNotification) */ },
		{ /* #2617 = 0x1471 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A57 /* CoreAnimation.ICAAction */ },
		{ /* #2618 = 0x1473 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A58 /* CoreAnimation.CAActionWrapper */ },
		{ /* #2619 = 0x1475 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011A4 /* Foundation.NSNull */ },
		{ /* #2620 = 0x1477 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011D5 /* Foundation.NSValue */ },
		{ /* #2621 = 0x1479 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019C5 /* CoreData.INSFetchRequestResult */ },
		{ /* #2622 = 0x147B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019C6 /* CoreData.NSFetchRequestResultWrapper */ },
		{ /* #2623 = 0x147D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011A5 /* Foundation.NSNumber */ },
		{ /* #2624 = 0x147F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011AD /* Foundation.NSOutputStream */ },
		{ /* #2625 = 0x1481 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011AE /* Foundation.NSPredicate */ },
		{ /* #2626 = 0x1483 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011B0 /* Foundation.NSPropertyListSerialization */ },
		{ /* #2627 = 0x1485 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011B1 /* Foundation.NSProxy */ },
		{ /* #2628 = 0x1487 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011B3 /* Foundation.NSRunLoop */ },
		{ /* #2629 = 0x1489 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011B8 /* Foundation.NSScriptCommandDescription */ },
		{ /* #2630 = 0x148B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011C5 /* Foundation.NSTimeZone */ },
		{ /* #2631 = 0x148D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011C6 /* Foundation.NSTimer */ },
		{ /* #2632 = 0x148F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011CA /* Foundation.NSUrlComponents */ },
		{ /* #2633 = 0x1491 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011CC /* Foundation.NSUrlCredential */ },
		{ /* #2634 = 0x1493 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011CE /* Foundation.NSUrlProtectionSpace */ },
		{ /* #2635 = 0x1495 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011CF /* Foundation.NSUrlProtocol */ },
		{ /* #2636 = 0x1497 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011D4 /* Foundation.NSUuid */ },
		{ /* #2637 = 0x1499 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011D6 /* Foundation.NSXpcConnection */ },
		{ /* #2638 = 0x149B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011D7 /* Foundation.NSXpcInterface */ },
		{ /* #2639 = 0x149D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011E6 /* Foundation.NSAffineTransform */ },
		{ /* #2640 = 0x149F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011E8 /* Foundation.NSAppleEventManager */ },
		{ /* #2641 = 0x14A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011EA /* Foundation.NSAppleScript */ },
		{ /* #2642 = 0x14A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011F1 /* Foundation.NSAttributedStringMarkdownParsingOptions */ },
		{ /* #2643 = 0x14A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011F2 /* Foundation.NSAttributedStringMarkdownSourcePosition */ },
		{ /* #2644 = 0x14A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011F5 /* Foundation.NSAutoreleasePool */ },
		{ /* #2645 = 0x14A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011F7 /* Foundation.NSBackgroundActivityScheduler */ },
		{ /* #2646 = 0x14AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011F8 /* Foundation.NSBindingSelectionMarker */ },
		{ /* #2647 = 0x14AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012CE /* Foundation.NSOperation */ },
		{ /* #2648 = 0x14AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011F9 /* Foundation.NSBlockOperation */ },
		{ /* #2649 = 0x14B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011FB /* Foundation.NSByteCountFormatter */ },
		{ /* #2650 = 0x14B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001200 /* Foundation.INSCacheDelegate */ },
		{ /* #2651 = 0x14B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001202 /* Foundation.NSCacheDelegateWrapper */ },
		{ /* #2652 = 0x14B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001203 /* Foundation.NSCacheDelegate */ },
		{ /* #2653 = 0x14B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B3E1 /* System.Void Foundation.NSCacheDelegate::.ctor() */ },
		{ /* #2654 = 0x14BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001204 /* Foundation.NSCachedUrlResponse */ },
		{ /* #2655 = 0x14BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001206 /* Foundation.NSCalendarDate */ },
		{ /* #2656 = 0x14BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001209 /* Foundation.NSCharacterSet */ },
		{ /* #2657 = 0x14C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200120D /* Foundation.NSCoding */ },
		{ /* #2658 = 0x14C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B432 /* System.Void Foundation.NSCoding::.ctor() */ },
		{ /* #2659 = 0x14C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B435 /* System.Void Foundation.NSCoding::.ctor(Foundation.NSCoder) */ },
		{ /* #2660 = 0x14C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200120F /* Foundation.NSComparisonPredicate */ },
		{ /* #2661 = 0x14C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001213 /* Foundation.NSCompoundPredicate */ },
		{ /* #2662 = 0x14CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001292 /* Foundation.INSLocking */ },
		{ /* #2663 = 0x14CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001293 /* Foundation.NSLockingWrapper */ },
		{ /* #2664 = 0x14CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001215 /* Foundation.NSCondition */ },
		{ /* #2665 = 0x14D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001216 /* Foundation.NSConditionLock */ },
		{ /* #2666 = 0x14D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001217 /* Foundation.INSConnectionDelegate */ },
		{ /* #2667 = 0x14D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001219 /* Foundation.NSConnectionDelegateWrapper */ },
		{ /* #2668 = 0x14D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200121A /* Foundation.NSConnectionDelegate */ },
		{ /* #2669 = 0x14D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B479 /* System.Void Foundation.NSConnectionDelegate::.ctor() */ },
		{ /* #2670 = 0x14DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200121D /* Foundation.NSCopying */ },
		{ /* #2671 = 0x14DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B485 /* System.Void Foundation.NSCopying::.ctor() */ },
		{ /* #2672 = 0x14DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012F7 /* Foundation.NSRegularExpression */ },
		{ /* #2673 = 0x14E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001221 /* Foundation.NSDataDetector */ },
		{ /* #2674 = 0x14E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001225 /* Foundation.NSDateComponentsFormatter */ },
		{ /* #2675 = 0x14E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001228 /* Foundation.NSDateFormatter */ },
		{ /* #2676 = 0x14E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200122B /* Foundation.NSDateInterval */ },
		{ /* #2677 = 0x14E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200122C /* Foundation.NSDateIntervalFormatter */ },
		{ /* #2678 = 0x14EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200122E /* Foundation.NSDecimalNumber */ },
		{ /* #2679 = 0x14ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001231 /* Foundation.INSDiscardableContent */ },
		{ /* #2680 = 0x14EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001232 /* Foundation.NSDiscardableContentWrapper */ },
		{ /* #2681 = 0x14F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001233 /* Foundation.NSDistantObjectRequest */ },
		{ /* #2682 = 0x14F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001234 /* Foundation.NSDistributedLock */ },
		{ /* #2683 = 0x14F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011A2 /* Foundation.NSNotificationCenter */ },
		{ /* #2684 = 0x14F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001235 /* Foundation.NSDistributedNotificationCenter */ },
		{ /* #2685 = 0x14F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001238 /* Foundation.NSEnergyFormatter */ },
		{ /* #2686 = 0x14FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200123C /* Foundation.NSException */ },
		{ /* #2687 = 0x14FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200123F /* Foundation.NSExtensionItem */ },
		{ /* #2688 = 0x14FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001242 /* Foundation.NSExtensionRequestHandling */ },
		{ /* #2689 = 0x1501 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B5C3 /* System.Void Foundation.NSExtensionRequestHandling::.ctor() */ },
		{ /* #2690 = 0x1503 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001243 /* Foundation.NSFileAccessIntent */ },
		{ /* #2691 = 0x1505 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001244 /* Foundation.NSFileCoordinator */ },
		{ /* #2692 = 0x1507 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200124D /* Foundation.INSFilePresenter */ },
		{ /* #2693 = 0x1509 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200124F /* Foundation.NSFilePresenterWrapper */ },
		{ /* #2694 = 0x150B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001250 /* Foundation.NSFilePresenter */ },
		{ /* #2695 = 0x150D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B639 /* System.Void Foundation.NSFilePresenter::.ctor() */ },
		{ /* #2696 = 0x150F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001251 /* Foundation.NSFileProviderService */ },
		{ /* #2697 = 0x1511 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001255 /* Foundation.NSFileWrapper */ },
		{ /* #2698 = 0x1513 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200135E /* Foundation.NSUrlResponse */ },
		{ /* #2699 = 0x1515 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001260 /* Foundation.NSHttpUrlResponse */ },
		{ /* #2700 = 0x1517 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001261 /* Foundation.NSInflectionRule */ },
		{ /* #2701 = 0x1519 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001262 /* Foundation.NSInflectionRuleExplicit */ },
		{ /* #2702 = 0x151B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001264 /* Foundation.NSInvocation */ },
		{ /* #2703 = 0x151D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001266 /* Foundation.NSIso8601DateFormatter */ },
		{ /* #2704 = 0x151F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001274 /* Foundation.NSJsonSerialization */ },
		{ /* #2705 = 0x1521 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001277 /* Foundation.INSKeyedArchiverDelegate */ },
		{ /* #2706 = 0x1523 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001279 /* Foundation.NSKeyedArchiverDelegateWrapper */ },
		{ /* #2707 = 0x1525 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200127A /* Foundation.NSKeyedArchiverDelegate */ },
		{ /* #2708 = 0x1527 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B71C /* System.Void Foundation.NSKeyedArchiverDelegate::.ctor() */ },
		{ /* #2709 = 0x1529 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200127B /* Foundation.INSKeyedUnarchiverDelegate */ },
		{ /* #2710 = 0x152B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200127D /* Foundation.NSKeyedUnarchiverDelegateWrapper */ },
		{ /* #2711 = 0x152D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200127E /* Foundation.NSKeyedUnarchiverDelegate */ },
		{ /* #2712 = 0x152F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B72A /* System.Void Foundation.NSKeyedUnarchiverDelegate::.ctor() */ },
		{ /* #2713 = 0x1531 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001284 /* Foundation.NSLengthFormatter */ },
		{ /* #2714 = 0x1533 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200128A /* Foundation.NSLinguisticTagger */ },
		{ /* #2715 = 0x1535 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200128F /* Foundation.NSListFormatter */ },
		{ /* #2716 = 0x1537 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001291 /* Foundation.NSLock */ },
		{ /* #2717 = 0x1539 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012D9 /* Foundation.NSPort */ },
		{ /* #2718 = 0x153B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001294 /* Foundation.NSMachPort */ },
		{ /* #2719 = 0x153D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012DA /* Foundation.INSPortDelegate */ },
		{ /* #2720 = 0x153F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012DC /* Foundation.NSPortDelegateWrapper */ },
		{ /* #2721 = 0x1541 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001295 /* Foundation.INSMachPortDelegate */ },
		{ /* #2722 = 0x1543 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001297 /* Foundation.NSMachPortDelegateWrapper */ },
		{ /* #2723 = 0x1545 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012DD /* Foundation.NSPortDelegate */ },
		{ /* #2724 = 0x1547 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BB35 /* System.Void Foundation.NSPortDelegate::.ctor() */ },
		{ /* #2725 = 0x1549 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001298 /* Foundation.NSMachPortDelegate */ },
		{ /* #2726 = 0x154B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B7C5 /* System.Void Foundation.NSMachPortDelegate::.ctor() */ },
		{ /* #2727 = 0x154D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200129A /* Foundation.NSMassFormatter */ },
		{ /* #2728 = 0x154F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200129E /* Foundation.NSMeasurement`1 */ },
		{ /* #2729 = 0x1551 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200129F /* Foundation.NSMeasurementFormatter */ },
		{ /* #2730 = 0x1553 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012A2 /* Foundation.NSMetadataQueryAttributeValueTuple */ },
		{ /* #2731 = 0x1555 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012A3 /* Foundation.INSMetadataQueryDelegate */ },
		{ /* #2732 = 0x1557 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012A5 /* Foundation.NSMetadataQueryDelegateWrapper */ },
		{ /* #2733 = 0x1559 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012A6 /* Foundation.NSMetadataQueryDelegate */ },
		{ /* #2734 = 0x155B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B8F5 /* System.Void Foundation.NSMetadataQueryDelegate::.ctor() */ },
		{ /* #2735 = 0x155D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012A7 /* Foundation.NSMetadataQueryResultGroup */ },
		{ /* #2736 = 0x155F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012A8 /* Foundation.NSMethodSignature */ },
		{ /* #2737 = 0x1561 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012A9 /* Foundation.NSMorphology */ },
		{ /* #2738 = 0x1563 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012AA /* Foundation.NSMorphologyCustomPronoun */ },
		{ /* #2739 = 0x1565 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012AC /* Foundation.NSMutableCharacterSet */ },
		{ /* #2740 = 0x1567 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012AF /* Foundation.NSMutableCopying */ },
		{ /* #2741 = 0x1569 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B970 /* System.Void Foundation.NSMutableCopying::.ctor() */ },
		{ /* #2742 = 0x156B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200118E /* Foundation.NSIndexSet */ },
		{ /* #2743 = 0x156D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012B0 /* Foundation.NSMutableIndexSet */ },
		{ /* #2744 = 0x156F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012B7 /* Foundation.INSNetServiceBrowserDelegate */ },
		{ /* #2745 = 0x1571 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012B9 /* Foundation.NSNetServiceBrowserDelegateWrapper */ },
		{ /* #2746 = 0x1573 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012BA /* Foundation.NSNetServiceBrowserDelegate */ },
		{ /* #2747 = 0x1575 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B9C8 /* System.Void Foundation.NSNetServiceBrowserDelegate::.ctor() */ },
		{ /* #2748 = 0x1577 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012BB /* Foundation.INSNetServiceDelegate */ },
		{ /* #2749 = 0x1579 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012BD /* Foundation.NSNetServiceDelegateWrapper */ },
		{ /* #2750 = 0x157B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012BE /* Foundation.NSNetServiceDelegate */ },
		{ /* #2751 = 0x157D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600B9DC /* System.Void Foundation.NSNetServiceDelegate::.ctor() */ },
		{ /* #2752 = 0x157F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012C1 /* Foundation.NSNotification */ },
		{ /* #2753 = 0x1581 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012C4 /* Foundation.NSNotificationQueue */ },
		{ /* #2754 = 0x1583 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012C6 /* Foundation.NSNumberFormatter */ },
		{ /* #2755 = 0x1585 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012CB /* Foundation.INSObjectProtocol */ },
		{ /* #2756 = 0x1587 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012CD /* Foundation.NSObjectProtocolWrapper */ },
		{ /* #2757 = 0x1589 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012EE /* Foundation.INSProgressReporting */ },
		{ /* #2758 = 0x158B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012EF /* Foundation.NSProgressReportingWrapper */ },
		{ /* #2759 = 0x158D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012CF /* Foundation.NSOperationQueue */ },
		{ /* #2760 = 0x158F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012D2 /* Foundation.NSOrthography */ },
		{ /* #2761 = 0x1591 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012D4 /* Foundation.NSPersonNameComponents */ },
		{ /* #2762 = 0x1593 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012D5 /* Foundation.NSPersonNameComponentsFormatter */ },
		{ /* #2763 = 0x1595 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012D8 /* Foundation.NSPipe */ },
		{ /* #2764 = 0x1597 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012DE /* Foundation.NSPortMessage */ },
		{ /* #2765 = 0x1599 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012DF /* Foundation.NSPortNameServer */ },
		{ /* #2766 = 0x159B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012E8 /* Foundation.NSPresentationIntent */ },
		{ /* #2767 = 0x159D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001175 /* Foundation.NSData */ },
		{ /* #2768 = 0x159F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001197 /* Foundation.NSMutableData */ },
		{ /* #2769 = 0x15A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012F4 /* Foundation.NSPurgeableData */ },
		{ /* #2770 = 0x15A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012F6 /* Foundation.NSRecursiveLock */ },
		{ /* #2771 = 0x15A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012F9 /* Foundation.NSRelativeDateTimeFormatter */ },
		{ /* #2772 = 0x15A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012FE /* Foundation.NSScriptCommand */ },
		{ /* #2773 = 0x15A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001304 /* Foundation.NSSortDescriptor */ },
		{ /* #2774 = 0x15AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001308 /* Foundation.INSStreamDelegate */ },
		{ /* #2775 = 0x15AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200130A /* Foundation.NSStreamDelegateWrapper */ },
		{ /* #2776 = 0x15AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200130B /* Foundation.NSStreamDelegate */ },
		{ /* #2777 = 0x15B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BC13 /* System.Void Foundation.NSStreamDelegate::.ctor() */ },
		{ /* #2778 = 0x15B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001318 /* Foundation.NSTextCheckingResult */ },
		{ /* #2779 = 0x15B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001320 /* Foundation.NSUnitAcceleration */ },
		{ /* #2780 = 0x15B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001321 /* Foundation.NSUnitAngle */ },
		{ /* #2781 = 0x15B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001322 /* Foundation.NSUnitArea */ },
		{ /* #2782 = 0x15BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001323 /* Foundation.NSUnitConcentrationMass */ },
		{ /* #2783 = 0x15BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001324 /* Foundation.NSUnitConverter */ },
		{ /* #2784 = 0x15BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001325 /* Foundation.NSUnitConverterLinear */ },
		{ /* #2785 = 0x15C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001326 /* Foundation.NSUnitDispersion */ },
		{ /* #2786 = 0x15C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001327 /* Foundation.NSUnitDuration */ },
		{ /* #2787 = 0x15C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001328 /* Foundation.NSUnitElectricCharge */ },
		{ /* #2788 = 0x15C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001329 /* Foundation.NSUnitElectricCurrent */ },
		{ /* #2789 = 0x15C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200132A /* Foundation.NSUnitElectricPotentialDifference */ },
		{ /* #2790 = 0x15CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200132B /* Foundation.NSUnitElectricResistance */ },
		{ /* #2791 = 0x15CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200132C /* Foundation.NSUnitEnergy */ },
		{ /* #2792 = 0x15CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200132D /* Foundation.NSUnitFrequency */ },
		{ /* #2793 = 0x15D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200132E /* Foundation.NSUnitFuelEfficiency */ },
		{ /* #2794 = 0x15D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200132F /* Foundation.NSUnitIlluminance */ },
		{ /* #2795 = 0x15D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001330 /* Foundation.NSUnitInformationStorage */ },
		{ /* #2796 = 0x15D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001331 /* Foundation.NSUnitLength */ },
		{ /* #2797 = 0x15D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001332 /* Foundation.NSUnitMass */ },
		{ /* #2798 = 0x15DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001333 /* Foundation.NSUnitPower */ },
		{ /* #2799 = 0x15DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001334 /* Foundation.NSUnitPressure */ },
		{ /* #2800 = 0x15DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001335 /* Foundation.NSUnitSpeed */ },
		{ /* #2801 = 0x15E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001336 /* Foundation.NSUnitTemperature */ },
		{ /* #2802 = 0x15E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001337 /* Foundation.NSUnitVolume */ },
		{ /* #2803 = 0x15E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001339 /* Foundation.NSUrlAuthenticationChallenge */ },
		{ /* #2804 = 0x15E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200133A /* Foundation.INSUrlAuthenticationChallengeSender */ },
		{ /* #2805 = 0x15E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200133C /* Foundation.NSUrlAuthenticationChallengeSenderWrapper */ },
		{ /* #2806 = 0x15EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001346 /* Foundation.INSUrlConnectionDelegate */ },
		{ /* #2807 = 0x15ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001348 /* Foundation.NSUrlConnectionDelegateWrapper */ },
		{ /* #2808 = 0x15EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001342 /* Foundation.INSUrlConnectionDataDelegate */ },
		{ /* #2809 = 0x15F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001344 /* Foundation.NSUrlConnectionDataDelegateWrapper */ },
		{ /* #2810 = 0x15F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001349 /* Foundation.NSUrlConnectionDelegate */ },
		{ /* #2811 = 0x15F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BE7F /* System.Void Foundation.NSUrlConnectionDelegate::.ctor() */ },
		{ /* #2812 = 0x15F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001345 /* Foundation.NSUrlConnectionDataDelegate */ },
		{ /* #2813 = 0x15F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BE6E /* System.Void Foundation.NSUrlConnectionDataDelegate::.ctor() */ },
		{ /* #2814 = 0x15FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200134A /* Foundation.INSUrlConnectionDownloadDelegate */ },
		{ /* #2815 = 0x15FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200134C /* Foundation.NSUrlConnectionDownloadDelegateWrapper */ },
		{ /* #2816 = 0x15FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200134D /* Foundation.NSUrlConnectionDownloadDelegate */ },
		{ /* #2817 = 0x1601 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BE8D /* System.Void Foundation.NSUrlConnectionDownloadDelegate::.ctor() */ },
		{ /* #2818 = 0x1603 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001350 /* Foundation.INSUrlDownloadDelegate */ },
		{ /* #2819 = 0x1605 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001352 /* Foundation.NSUrlDownloadDelegateWrapper */ },
		{ /* #2820 = 0x1607 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001353 /* Foundation.NSUrlDownloadDelegate */ },
		{ /* #2821 = 0x1609 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BEB5 /* System.Void Foundation.NSUrlDownloadDelegate::.ctor() */ },
		{ /* #2822 = 0x160B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001357 /* Foundation.INSUrlProtocolClient */ },
		{ /* #2823 = 0x160D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001358 /* Foundation.NSUrlProtocolClientWrapper */ },
		{ /* #2824 = 0x160F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001359 /* Foundation.NSUrlQueryItem */ },
		{ /* #2825 = 0x1611 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200136A /* Foundation.INSUrlSessionDelegate */ },
		{ /* #2826 = 0x1613 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200136C /* Foundation.NSUrlSessionDelegateWrapper */ },
		{ /* #2827 = 0x1615 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200137B /* Foundation.INSUrlSessionTaskDelegate */ },
		{ /* #2828 = 0x1617 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200137D /* Foundation.NSUrlSessionTaskDelegateWrapper */ },
		{ /* #2829 = 0x1619 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001364 /* Foundation.INSUrlSessionDataDelegate */ },
		{ /* #2830 = 0x161B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001366 /* Foundation.NSUrlSessionDataDelegateWrapper */ },
		{ /* #2831 = 0x161D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200136D /* Foundation.NSUrlSessionDelegate */ },
		{ /* #2832 = 0x161F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BF4E /* System.Void Foundation.NSUrlSessionDelegate::.ctor() */ },
		{ /* #2833 = 0x1621 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200137E /* Foundation.NSUrlSessionTaskDelegate */ },
		{ /* #2834 = 0x1623 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BFB3 /* System.Void Foundation.NSUrlSessionTaskDelegate::.ctor() */ },
		{ /* #2835 = 0x1625 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001367 /* Foundation.NSUrlSessionDataDelegate */ },
		{ /* #2836 = 0x1627 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BF3D /* System.Void Foundation.NSUrlSessionDataDelegate::.ctor() */ },
		{ /* #2837 = 0x1629 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200137A /* Foundation.NSUrlSessionTask */ },
		{ /* #2838 = 0x162B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001368 /* Foundation.NSUrlSessionDataTask */ },
		{ /* #2839 = 0x162D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200136E /* Foundation.INSUrlSessionDownloadDelegate */ },
		{ /* #2840 = 0x162F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001370 /* Foundation.NSUrlSessionDownloadDelegateWrapper */ },
		{ /* #2841 = 0x1631 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001371 /* Foundation.NSUrlSessionDownloadDelegate */ },
		{ /* #2842 = 0x1633 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BF59 /* System.Void Foundation.NSUrlSessionDownloadDelegate::.ctor() */ },
		{ /* #2843 = 0x1635 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001372 /* Foundation.NSUrlSessionDownloadTask */ },
		{ /* #2844 = 0x1637 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001374 /* Foundation.INSUrlSessionStreamDelegate */ },
		{ /* #2845 = 0x1639 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001376 /* Foundation.NSUrlSessionStreamDelegateWrapper */ },
		{ /* #2846 = 0x163B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001377 /* Foundation.NSUrlSessionStreamDelegate */ },
		{ /* #2847 = 0x163D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BF6B /* System.Void Foundation.NSUrlSessionStreamDelegate::.ctor() */ },
		{ /* #2848 = 0x163F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200137F /* Foundation.NSUrlSessionTaskMetrics */ },
		{ /* #2849 = 0x1641 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001384 /* Foundation.NSUrlSessionTaskTransactionMetrics */ },
		{ /* #2850 = 0x1643 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001385 /* Foundation.NSUrlSessionUploadTask */ },
		{ /* #2851 = 0x1645 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001387 /* Foundation.INSUrlSessionWebSocketDelegate */ },
		{ /* #2852 = 0x1647 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001389 /* Foundation.NSUrlSessionWebSocketDelegateWrapper */ },
		{ /* #2853 = 0x1649 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200138A /* Foundation.NSUrlSessionWebSocketDelegate */ },
		{ /* #2854 = 0x164B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600BFF9 /* System.Void Foundation.NSUrlSessionWebSocketDelegate::.ctor() */ },
		{ /* #2855 = 0x164D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200138B /* Foundation.NSUrlSessionWebSocketMessage */ },
		{ /* #2856 = 0x164F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001392 /* Foundation.INSUserActivityDelegate */ },
		{ /* #2857 = 0x1651 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001394 /* Foundation.NSUserActivityDelegateWrapper */ },
		{ /* #2858 = 0x1653 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001395 /* Foundation.NSUserActivityDelegate */ },
		{ /* #2859 = 0x1655 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600C063 /* System.Void Foundation.NSUserActivityDelegate::.ctor() */ },
		{ /* #2860 = 0x1657 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001397 /* Foundation.NSUserNotification */ },
		{ /* #2861 = 0x1659 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001398 /* Foundation.NSUserNotificationAction */ },
		{ /* #2862 = 0x165B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200139D /* Foundation.INSUserNotificationCenterDelegate */ },
		{ /* #2863 = 0x165D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200139F /* Foundation.NSUserNotificationCenterDelegateWrapper */ },
		{ /* #2864 = 0x165F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013A0 /* Foundation.NSUserNotificationCenterDelegate */ },
		{ /* #2865 = 0x1661 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600C0C7 /* System.Void Foundation.NSUserNotificationCenterDelegate::.ctor() */ },
		{ /* #2866 = 0x1663 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013A1 /* Foundation.NSValueTransformer */ },
		{ /* #2867 = 0x1665 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013A5 /* Foundation.NSXpcListener */ },
		{ /* #2868 = 0x1667 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013A6 /* Foundation.INSXpcListenerDelegate */ },
		{ /* #2869 = 0x1669 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013A8 /* Foundation.NSXpcListenerDelegateWrapper */ },
		{ /* #2870 = 0x166B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013A9 /* Foundation.NSXpcListenerDelegate */ },
		{ /* #2871 = 0x166D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600C0F3 /* System.Void Foundation.NSXpcListenerDelegate::.ctor() */ },
		{ /* #2872 = 0x166F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013AA /* Foundation.NSXpcListenerEndpoint */ },
		{ /* #2873 = 0x1671 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013E4 /* FinderSync.IFIFinderSyncProtocol */ },
		{ /* #2874 = 0x1673 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013E6 /* FinderSync.FIFinderSyncProtocolWrapper */ },
		{ /* #2875 = 0x1675 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013E9 /* FileProvider.INSFileProviderChangeObserver */ },
		{ /* #2876 = 0x1677 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013EB /* FileProvider.NSFileProviderChangeObserverWrapper */ },
		{ /* #2877 = 0x1679 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013EE /* FileProvider.INSFileProviderCustomAction */ },
		{ /* #2878 = 0x167B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013EF /* FileProvider.NSFileProviderCustomActionWrapper */ },
		{ /* #2879 = 0x167D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013F3 /* FileProvider.INSFileProviderDomainState */ },
		{ /* #2880 = 0x167F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013F4 /* FileProvider.NSFileProviderDomainStateWrapper */ },
		{ /* #2881 = 0x1681 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013F6 /* FileProvider.NSFileProviderDomainVersion */ },
		{ /* #2882 = 0x1683 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013F7 /* FileProvider.INSFileProviderEnumerating */ },
		{ /* #2883 = 0x1685 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013F8 /* FileProvider.NSFileProviderEnumeratingWrapper */ },
		{ /* #2884 = 0x1687 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013F9 /* FileProvider.INSFileProviderEnumerationObserver */ },
		{ /* #2885 = 0x1689 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013FB /* FileProvider.NSFileProviderEnumerationObserverWrapper */ },
		{ /* #2886 = 0x168B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013FC /* FileProvider.INSFileProviderEnumerator */ },
		{ /* #2887 = 0x168D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013FE /* FileProvider.NSFileProviderEnumeratorWrapper */ },
		{ /* #2888 = 0x168F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001405 /* FileProvider.INSFileProviderIncrementalContentFetching */ },
		{ /* #2889 = 0x1691 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001406 /* FileProvider.NSFileProviderIncrementalContentFetchingWrapper */ },
		{ /* #2890 = 0x1693 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001407 /* FileProvider.INSFileProviderItem */ },
		{ /* #2891 = 0x1695 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001409 /* FileProvider.NSFileProviderItemWrapper */ },
		{ /* #2892 = 0x1697 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200140D /* FileProvider.NSFileProviderItemVersion */ },
		{ /* #2893 = 0x1699 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001415 /* FileProvider.INSFileProviderPartialContentFetching */ },
		{ /* #2894 = 0x169B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001416 /* FileProvider.NSFileProviderPartialContentFetchingWrapper */ },
		{ /* #2895 = 0x169D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001417 /* FileProvider.INSFileProviderPendingSetEnumerator */ },
		{ /* #2896 = 0x169F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001419 /* FileProvider.NSFileProviderPendingSetEnumeratorWrapper */ },
		{ /* #2897 = 0x16A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200141A /* FileProvider.INSFileProviderReplicatedExtension */ },
		{ /* #2898 = 0x16A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200141C /* FileProvider.NSFileProviderReplicatedExtensionWrapper */ },
		{ /* #2899 = 0x16A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200141D /* FileProvider.NSFileProviderRequest */ },
		{ /* #2900 = 0x16A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200141E /* FileProvider.INSFileProviderServiceSource */ },
		{ /* #2901 = 0x16A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001420 /* FileProvider.NSFileProviderServiceSourceWrapper */ },
		{ /* #2902 = 0x16AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001421 /* FileProvider.INSFileProviderServicing */ },
		{ /* #2903 = 0x16AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001422 /* FileProvider.NSFileProviderServicingWrapper */ },
		{ /* #2904 = 0x16AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001433 /* FileProvider.INSFileProviderTestingOperation */ },
		{ /* #2905 = 0x16B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001434 /* FileProvider.NSFileProviderTestingOperationWrapper */ },
		{ /* #2906 = 0x16B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001423 /* FileProvider.INSFileProviderTestingChildrenEnumeration */ },
		{ /* #2907 = 0x16B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001424 /* FileProvider.NSFileProviderTestingChildrenEnumerationWrapper */ },
		{ /* #2908 = 0x16B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001425 /* FileProvider.INSFileProviderTestingCollisionResolution */ },
		{ /* #2909 = 0x16B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001426 /* FileProvider.NSFileProviderTestingCollisionResolutionWrapper */ },
		{ /* #2910 = 0x16BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001427 /* FileProvider.INSFileProviderTestingContentFetch */ },
		{ /* #2911 = 0x16BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001428 /* FileProvider.NSFileProviderTestingContentFetchWrapper */ },
		{ /* #2912 = 0x16BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001429 /* FileProvider.INSFileProviderTestingCreation */ },
		{ /* #2913 = 0x16C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200142A /* FileProvider.NSFileProviderTestingCreationWrapper */ },
		{ /* #2914 = 0x16C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200142B /* FileProvider.INSFileProviderTestingDeletion */ },
		{ /* #2915 = 0x16C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200142C /* FileProvider.NSFileProviderTestingDeletionWrapper */ },
		{ /* #2916 = 0x16C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200142D /* FileProvider.INSFileProviderTestingIngestion */ },
		{ /* #2917 = 0x16C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200142E /* FileProvider.NSFileProviderTestingIngestionWrapper */ },
		{ /* #2918 = 0x16CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200142F /* FileProvider.INSFileProviderTestingLookup */ },
		{ /* #2919 = 0x16CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001430 /* FileProvider.NSFileProviderTestingLookupWrapper */ },
		{ /* #2920 = 0x16CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001431 /* FileProvider.INSFileProviderTestingModification */ },
		{ /* #2921 = 0x16D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001432 /* FileProvider.NSFileProviderTestingModificationWrapper */ },
		{ /* #2922 = 0x16D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001437 /* FileProvider.INSFileProviderThumbnailing */ },
		{ /* #2923 = 0x16D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001438 /* FileProvider.NSFileProviderThumbnailingWrapper */ },
		{ /* #2924 = 0x16D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001439 /* FileProvider.INSFileProviderUserInteractionSuppressing */ },
		{ /* #2925 = 0x16D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200143A /* FileProvider.NSFileProviderUserInteractionSuppressingWrapper */ },
		{ /* #2926 = 0x16DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001452 /* EventKit.EKObject */ },
		{ /* #2927 = 0x16DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001440 /* EventKit.EKAlarm */ },
		{ /* #2928 = 0x16DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001447 /* EventKit.EKCalendarItem */ },
		{ /* #2929 = 0x16E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001441 /* EventKit.EKReminder */ },
		{ /* #2930 = 0x16E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001445 /* EventKit.EKCalendar */ },
		{ /* #2931 = 0x16E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200144E /* EventKit.EKEvent */ },
		{ /* #2932 = 0x16E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001453 /* EventKit.EKParticipant */ },
		{ /* #2933 = 0x16E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001458 /* EventKit.EKRecurrenceDayOfWeek */ },
		{ /* #2934 = 0x16EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001459 /* EventKit.EKRecurrenceEnd */ },
		{ /* #2935 = 0x16ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200145B /* EventKit.EKRecurrenceRule */ },
		{ /* #2936 = 0x16EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200145D /* EventKit.EKSource */ },
		{ /* #2937 = 0x16F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001460 /* EventKit.EKStructuredLocation */ },
		{ /* #2938 = 0x16F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001461 /* EventKit.EKVirtualConferenceDescriptor */ },
		{ /* #2939 = 0x16F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001463 /* EventKit.EKVirtualConferenceRoomTypeDescriptor */ },
		{ /* #2940 = 0x16F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001464 /* EventKit.EKVirtualConferenceUrlDescriptor */ },
		{ /* #2941 = 0x16F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001469 /* CoreWlan.CWConfiguration */ },
		{ /* #2942 = 0x16FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200146C /* CoreWlan.CWChannel */ },
		{ /* #2943 = 0x16FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001470 /* CoreWlan.ICWEventDelegate */ },
		{ /* #2944 = 0x16FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001472 /* CoreWlan.CWEventDelegateWrapper */ },
		{ /* #2945 = 0x1701 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001473 /* CoreWlan.CWEventDelegate */ },
		{ /* #2946 = 0x1703 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600C548 /* System.Void CoreWlan.CWEventDelegate::.ctor() */ },
		{ /* #2947 = 0x1705 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001478 /* CoreWlan.CWMutableConfiguration */ },
		{ /* #2948 = 0x1707 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200147B /* CoreWlan.CWNetworkProfile */ },
		{ /* #2949 = 0x1709 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001479 /* CoreWlan.CWMutableNetworkProfile */ },
		{ /* #2950 = 0x170B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200147A /* CoreWlan.CWNetwork */ },
		{ /* #2951 = 0x170D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001480 /* CoreWlan.CWWiFiClient */ },
		{ /* #2952 = 0x170F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001529 /* CoreSpotlight.CSSearchQueryContext */ },
		{ /* #2953 = 0x1711 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200152A /* CoreSpotlight.CSSearchableItemAttributeSet */ },
		{ /* #2954 = 0x1713 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200152B /* CoreSpotlight.CSCustomAttributeKey */ },
		{ /* #2955 = 0x1715 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200152C /* CoreSpotlight.CSImportExtension */ },
		{ /* #2956 = 0x1717 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001536 /* CoreSpotlight.ICSSearchableIndexDelegate */ },
		{ /* #2957 = 0x1719 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001538 /* CoreSpotlight.CSSearchableIndexDelegateWrapper */ },
		{ /* #2958 = 0x171B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200152F /* CoreSpotlight.CSIndexExtensionRequestHandler */ },
		{ /* #2959 = 0x171D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001530 /* CoreSpotlight.CSLocalizedString */ },
		{ /* #2960 = 0x171F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001532 /* CoreSpotlight.CSPerson */ },
		{ /* #2961 = 0x1721 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001539 /* CoreSpotlight.CSSearchableIndexDelegate */ },
		{ /* #2962 = 0x1723 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600CCDB /* System.Void CoreSpotlight.CSSearchableIndexDelegate::.ctor() */ },
		{ /* #2963 = 0x1725 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200153A /* CoreSpotlight.CSSearchableItem */ },
		{ /* #2964 = 0x1727 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200153B /* CoreSpotlight.CSSearchQuery */ },
		{ /* #2965 = 0x1729 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200153F /* CoreSpotlight.CSSuggestion */ },
		{ /* #2966 = 0x172B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001541 /* CoreSpotlight.CSUserQuery */ },
		{ /* #2967 = 0x172D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001542 /* CoreSpotlight.CSUserQueryContext */ },
		{ /* #2968 = 0x172F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200155F /* CoreMotion.CMLogItem */ },
		{ /* #2969 = 0x1731 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001557 /* CoreMotion.CMAccelerometerData */ },
		{ /* #2970 = 0x1733 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001558 /* CoreMotion.CMAttitude */ },
		{ /* #2971 = 0x1735 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200155A /* CoreMotion.CMDeviceMotion */ },
		{ /* #2972 = 0x1737 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200155E /* CoreMotion.CMGyroData */ },
		{ /* #2973 = 0x1739 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001560 /* CoreMotion.CMMagnetometerData */ },
		{ /* #2974 = 0x173B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001562 /* CoreMotion.CMPedometerData */ },
		{ /* #2975 = 0x173D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001563 /* CoreMotion.CMPedometerEvent */ },
		{ /* #2976 = 0x173F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001583 /* CoreMidi.MidiCIDeviceInfo */ },
		{ /* #2977 = 0x1741 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001584 /* CoreMidi.MidiCIDiscoveredNode */ },
		{ /* #2978 = 0x1743 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001585 /* CoreMidi.MidiCIDiscoveryManager */ },
		{ /* #2979 = 0x1745 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001586 /* CoreMidi.MidiCIProfile */ },
		{ /* #2980 = 0x1747 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001587 /* CoreMidi.IMidiCIProfileResponderDelegate */ },
		{ /* #2981 = 0x1749 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001589 /* CoreMidi.MidiCIProfileResponderDelegateWrapper */ },
		{ /* #2982 = 0x174B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200158A /* CoreMidi.MidiCIProfileResponderDelegate */ },
		{ /* #2983 = 0x174D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D00F /* System.Void CoreMidi.MidiCIProfileResponderDelegate::.ctor() */ },
		{ /* #2984 = 0x174F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200158B /* CoreMidi.MidiCIProfileState */ },
		{ /* #2985 = 0x1751 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200158D /* CoreMidi.MidiCISession */ },
		{ /* #2986 = 0x1753 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001590 /* CoreMidi.MidiNetworkConnection */ },
		{ /* #2987 = 0x1755 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001592 /* CoreMidi.MidiNetworkHost */ },
		{ /* #2988 = 0x1757 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001593 /* CoreMidi.MidiNetworkSession */ },
		{ /* #2989 = 0x1759 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015E2 /* CoreML.IMLFeatureProvider */ },
		{ /* #2990 = 0x175B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015E3 /* CoreML.MLFeatureProviderWrapper */ },
		{ /* #2991 = 0x175D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015D2 /* CoreML.MLDictionaryFeatureProvider */ },
		{ /* #2992 = 0x175F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015D4 /* CoreML.MLMultiArrayConstraint */ },
		{ /* #2993 = 0x1761 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015D6 /* CoreML.IMLBatchProvider */ },
		{ /* #2994 = 0x1763 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015D7 /* CoreML.MLBatchProviderWrapper */ },
		{ /* #2995 = 0x1765 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015D5 /* CoreML.MLArrayBatchProvider */ },
		{ /* #2996 = 0x1767 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015D9 /* CoreML.IMLCustomLayer */ },
		{ /* #2997 = 0x1769 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015DB /* CoreML.MLCustomLayerWrapper */ },
		{ /* #2998 = 0x176B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015DC /* CoreML.IMLCustomModel */ },
		{ /* #2999 = 0x176D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015DE /* CoreML.MLCustomModelWrapper */ },
		{ /* #3000 = 0x176F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015DF /* CoreML.MLCustomModel */ },
		{ /* #3001 = 0x1771 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D34A /* System.Void CoreML.MLCustomModel::.ctor() */ },
		{ /* #3002 = 0x1773 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D34D /* System.Void CoreML.MLCustomModel::.ctor(CoreML.MLModelDescription,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,Foundation.NSError&) */ },
		{ /* #3003 = 0x1775 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015E0 /* CoreML.MLDictionaryConstraint */ },
		{ /* #3004 = 0x1777 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015E1 /* CoreML.MLFeatureDescription */ },
		{ /* #3005 = 0x1779 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015E5 /* CoreML.MLFeatureValue */ },
		{ /* #3006 = 0x177B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015E8 /* CoreML.MLImageConstraint */ },
		{ /* #3007 = 0x177D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015E9 /* CoreML.MLImageSize */ },
		{ /* #3008 = 0x177F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015EA /* CoreML.MLImageSizeConstraint */ },
		{ /* #3009 = 0x1781 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015EC /* CoreML.MLKey */ },
		{ /* #3010 = 0x1783 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015ED /* CoreML.MLMetricKey */ },
		{ /* #3011 = 0x1785 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015F1 /* CoreML.MLModelAsset */ },
		{ /* #3012 = 0x1787 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015F3 /* CoreML.MLModelCollectionEntry */ },
		{ /* #3013 = 0x1789 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015F4 /* CoreML.MLModelConfiguration */ },
		{ /* #3014 = 0x178B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015F5 /* CoreML.MLModelDescription */ },
		{ /* #3015 = 0x178D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015FD /* CoreML.MLMultiArrayShapeConstraint */ },
		{ /* #3016 = 0x178F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015FF /* CoreML.MLNumericConstraint */ },
		{ /* #3017 = 0x1791 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001600 /* CoreML.MLParameterDescription */ },
		{ /* #3018 = 0x1793 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001601 /* CoreML.MLParameterKey */ },
		{ /* #3019 = 0x1795 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001602 /* CoreML.MLPredictionOptions */ },
		{ /* #3020 = 0x1797 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001603 /* CoreML.MLSequence */ },
		{ /* #3021 = 0x1799 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001604 /* CoreML.MLSequenceConstraint */ },
		{ /* #3022 = 0x179B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001605 /* CoreML.MLTask */ },
		{ /* #3023 = 0x179D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001607 /* CoreML.MLUpdateContext */ },
		{ /* #3024 = 0x179F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001609 /* CoreML.MLUpdateProgressHandlers */ },
		{ /* #3025 = 0x17A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200160A /* CoreML.MLUpdateTask */ },
		{ /* #3026 = 0x17A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200160B /* CoreML.IMLWritable */ },
		{ /* #3027 = 0x17A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200160C /* CoreML.MLWritableWrapper */ },
		{ /* #3028 = 0x17A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001612 /* CoreLocation.CLBeacon */ },
		{ /* #3029 = 0x17A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001613 /* CoreLocation.CLBeaconIdentityConstraint */ },
		{ /* #3030 = 0x17AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200162E /* CoreLocation.CLRegion */ },
		{ /* #3031 = 0x17AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001614 /* CoreLocation.CLBeaconRegion */ },
		{ /* #3032 = 0x17AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001615 /* CoreLocation.CLCircularRegion */ },
		{ /* #3033 = 0x17B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001618 /* CoreLocation.CLFloor */ },
		{ /* #3034 = 0x17B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200161A /* CoreLocation.CLHeading */ },
		{ /* #3035 = 0x17B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200161B /* CoreLocation.CLLocation */ },
		{ /* #3036 = 0x17B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001627 /* CoreLocation.ICLLocationManagerDelegate */ },
		{ /* #3037 = 0x17B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001629 /* CoreLocation.CLLocationManagerDelegateWrapper */ },
		{ /* #3038 = 0x17BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200162A /* CoreLocation.CLLocationManagerDelegate */ },
		{ /* #3039 = 0x17BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D5DB /* System.Void CoreLocation.CLLocationManagerDelegate::.ctor() */ },
		{ /* #3040 = 0x17BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200162B /* CoreLocation.CLLocationSourceInformation */ },
		{ /* #3041 = 0x17C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001630 /* CoreLocation.CLVisit */ },
		{ /* #3042 = 0x17C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001633 /* CoreImage.CIColor */ },
		{ /* #3043 = 0x17C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001635 /* CoreImage.CIContext */ },
		{ /* #3044 = 0x17C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001637 /* CoreImage.CIDetector */ },
		{ /* #3045 = 0x17C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001639 /* CoreImage.CIFilter */ },
		{ /* #3046 = 0x17CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200163B /* CoreImage.CIImage */ },
		{ /* #3047 = 0x17CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001641 /* CoreImage.CISampler */ },
		{ /* #3048 = 0x17CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001642 /* CoreImage.CIVector */ },
		{ /* #3049 = 0x17D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200174E /* CoreImage.ICIFilterProtocol */ },
		{ /* #3050 = 0x17D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200174F /* CoreImage.CIFilterProtocolWrapper */ },
		{ /* #3051 = 0x17D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018B8 /* CoreImage.ICITransitionFilterProtocol */ },
		{ /* #3052 = 0x17D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018B9 /* CoreImage.CITransitionFilterProtocolWrapper */ },
		{ /* #3053 = 0x17D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001644 /* CoreImage.ICIAccordionFoldTransitionProtocol */ },
		{ /* #3054 = 0x17DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001645 /* CoreImage.CIAccordionFoldTransitionProtocolWrapper */ },
		{ /* #3055 = 0x17DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001643 /* CoreImage.CIAccordionFoldTransition */ },
		{ /* #3056 = 0x17DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D822 /* System.Single CoreImage.CIAccordionFoldTransition::get_BottomHeight() */ },
		{ /* #3057 = 0x17E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D823 /* System.Void CoreImage.CIAccordionFoldTransition::set_BottomHeight(System.Single) */ },
		{ /* #3058 = 0x17E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D824 /* System.Single CoreImage.CIAccordionFoldTransition::get_FoldCount() */ },
		{ /* #3059 = 0x17E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D825 /* System.Void CoreImage.CIAccordionFoldTransition::set_FoldCount(System.Single) */ },
		{ /* #3060 = 0x17E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D826 /* System.Single CoreImage.CIAccordionFoldTransition::get_FoldShadowAmount() */ },
		{ /* #3061 = 0x17E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D827 /* System.Void CoreImage.CIAccordionFoldTransition::set_FoldShadowAmount(System.Single) */ },
		{ /* #3062 = 0x17EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D828 /* CoreImage.CIImage CoreImage.CIAccordionFoldTransition::get_InputImage() */ },
		{ /* #3063 = 0x17ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D829 /* System.Void CoreImage.CIAccordionFoldTransition::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3064 = 0x17EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D82A /* CoreImage.CIImage CoreImage.CIAccordionFoldTransition::get_TargetImage() */ },
		{ /* #3065 = 0x17F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D82B /* System.Void CoreImage.CIAccordionFoldTransition::set_TargetImage(CoreImage.CIImage) */ },
		{ /* #3066 = 0x17F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D82C /* System.Single CoreImage.CIAccordionFoldTransition::get_Time() */ },
		{ /* #3067 = 0x17F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D82D /* System.Void CoreImage.CIAccordionFoldTransition::set_Time(System.Single) */ },
		{ /* #3068 = 0x17F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D82E /* CoreImage.CIImage CoreImage.CIAccordionFoldTransition::get_OutputImage() */ },
		{ /* #3069 = 0x17F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D81E /* System.Void CoreImage.CIAccordionFoldTransition::.ctor() */ },
		{ /* #3070 = 0x17FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D821 /* System.Void CoreImage.CIAccordionFoldTransition::.ctor(Foundation.NSCoder) */ },
		{ /* #3071 = 0x17FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016E9 /* CoreImage.CICompositingFilter */ },
		{ /* #3072 = 0x17FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD94 /* System.Void CoreImage.CICompositingFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #3073 = 0x1801 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001646 /* CoreImage.CIAdditionCompositing */ },
		{ /* #3074 = 0x1803 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D843 /* System.Void CoreImage.CIAdditionCompositing::.ctor() */ },
		{ /* #3075 = 0x1805 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D846 /* System.Void CoreImage.CIAdditionCompositing::.ctor(Foundation.NSCoder) */ },
		{ /* #3076 = 0x1807 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200164A /* CoreImage.CIAffineFilter */ },
		{ /* #3077 = 0x1809 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D85E /* CoreImage.CIImage CoreImage.CIAffineFilter::get_OutputImage() */ },
		{ /* #3078 = 0x180B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D85C /* System.Void CoreImage.CIAffineFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #3079 = 0x180D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001648 /* CoreImage.ICIAffineClampProtocol */ },
		{ /* #3080 = 0x180F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001649 /* CoreImage.CIAffineClampProtocolWrapper */ },
		{ /* #3081 = 0x1811 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001647 /* CoreImage.CIAffineClamp */ },
		{ /* #3082 = 0x1813 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D84B /* CoreImage.CIImage CoreImage.CIAffineClamp::get_InputImage() */ },
		{ /* #3083 = 0x1815 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D84C /* System.Void CoreImage.CIAffineClamp::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3084 = 0x1817 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D84D /* CoreGraphics.CGAffineTransform CoreImage.CIAffineClamp::get_Transform() */ },
		{ /* #3085 = 0x1819 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D84E /* System.Void CoreImage.CIAffineClamp::set_Transform(CoreGraphics.CGAffineTransform) */ },
		{ /* #3086 = 0x181B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D84F /* CoreImage.CIImage CoreImage.CIAffineClamp::get_OutputImage() */ },
		{ /* #3087 = 0x181D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D847 /* System.Void CoreImage.CIAffineClamp::.ctor() */ },
		{ /* #3088 = 0x181F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D84A /* System.Void CoreImage.CIAffineClamp::.ctor(Foundation.NSCoder) */ },
		{ /* #3089 = 0x1821 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200164C /* CoreImage.ICIAffineTileProtocol */ },
		{ /* #3090 = 0x1823 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200164D /* CoreImage.CIAffineTileProtocolWrapper */ },
		{ /* #3091 = 0x1825 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200164B /* CoreImage.CIAffineTile */ },
		{ /* #3092 = 0x1827 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D863 /* CoreImage.CIImage CoreImage.CIAffineTile::get_InputImage() */ },
		{ /* #3093 = 0x1829 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D864 /* System.Void CoreImage.CIAffineTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3094 = 0x182B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D865 /* CoreGraphics.CGAffineTransform CoreImage.CIAffineTile::get_Transform() */ },
		{ /* #3095 = 0x182D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D866 /* System.Void CoreImage.CIAffineTile::set_Transform(CoreGraphics.CGAffineTransform) */ },
		{ /* #3096 = 0x182F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D867 /* CoreImage.CIImage CoreImage.CIAffineTile::get_OutputImage() */ },
		{ /* #3097 = 0x1831 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D85F /* System.Void CoreImage.CIAffineTile::.ctor() */ },
		{ /* #3098 = 0x1833 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D862 /* System.Void CoreImage.CIAffineTile::.ctor(Foundation.NSCoder) */ },
		{ /* #3099 = 0x1835 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200164E /* CoreImage.CIAffineTransform */ },
		{ /* #3100 = 0x1837 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D872 /* System.Void CoreImage.CIAffineTransform::.ctor() */ },
		{ /* #3101 = 0x1839 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D875 /* System.Void CoreImage.CIAffineTransform::.ctor(Foundation.NSCoder) */ },
		{ /* #3102 = 0x183B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200185D /* CoreImage.CIReductionFilter */ },
		{ /* #3103 = 0x183D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB5C /* System.Void CoreImage.CIReductionFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #3104 = 0x183F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200164F /* CoreImage.CIAreaAverage */ },
		{ /* #3105 = 0x1841 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D87A /* System.Void CoreImage.CIAreaAverage::.ctor() */ },
		{ /* #3106 = 0x1843 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D87D /* System.Void CoreImage.CIAreaAverage::.ctor(Foundation.NSCoder) */ },
		{ /* #3107 = 0x1845 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001650 /* CoreImage.ICIAreaAverageProtocol */ },
		{ /* #3108 = 0x1847 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001651 /* CoreImage.CIAreaAverageProtocolWrapper */ },
		{ /* #3109 = 0x1849 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200166A /* CoreImage.ICIAreaReductionFilterProtocol */ },
		{ /* #3110 = 0x184B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200166B /* CoreImage.CIAreaReductionFilterProtocolWrapper */ },
		{ /* #3111 = 0x184D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001653 /* CoreImage.ICIAreaHistogramProtocol */ },
		{ /* #3112 = 0x184F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001654 /* CoreImage.CIAreaHistogramProtocolWrapper */ },
		{ /* #3113 = 0x1851 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001652 /* CoreImage.CIAreaHistogram */ },
		{ /* #3114 = 0x1853 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D88B /* System.Single CoreImage.CIAreaHistogram::get_Scale() */ },
		{ /* #3115 = 0x1855 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D88C /* System.Void CoreImage.CIAreaHistogram::set_Scale(System.Single) */ },
		{ /* #3116 = 0x1857 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D88D /* System.IntPtr CoreImage.CIAreaHistogram::get_InputCount() */ },
		{ /* #3117 = 0x1859 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D88E /* System.Void CoreImage.CIAreaHistogram::set_InputCount(System.IntPtr) */ },
		{ /* #3118 = 0x185B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D88F /* CoreImage.CIImage CoreImage.CIAreaHistogram::get_InputImage() */ },
		{ /* #3119 = 0x185D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D890 /* System.Void CoreImage.CIAreaHistogram::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3120 = 0x185F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D891 /* CoreGraphics.CGRect CoreImage.CIAreaHistogram::get_InputExtent() */ },
		{ /* #3121 = 0x1861 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D892 /* System.Void CoreImage.CIAreaHistogram::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #3122 = 0x1863 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D893 /* CoreImage.CIImage CoreImage.CIAreaHistogram::get_OutputImage() */ },
		{ /* #3123 = 0x1865 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D882 /* System.Void CoreImage.CIAreaHistogram::.ctor() */ },
		{ /* #3124 = 0x1867 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D885 /* System.Void CoreImage.CIAreaHistogram::.ctor(Foundation.NSCoder) */ },
		{ /* #3125 = 0x1869 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001656 /* CoreImage.ICIAreaLogarithmicHistogramProtocol */ },
		{ /* #3126 = 0x186B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001657 /* CoreImage.CIAreaLogarithmicHistogramProtocolWrapper */ },
		{ /* #3127 = 0x186D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001655 /* CoreImage.CIAreaLogarithmicHistogram */ },
		{ /* #3128 = 0x186F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8A6 /* System.Single CoreImage.CIAreaLogarithmicHistogram::get_Scale() */ },
		{ /* #3129 = 0x1871 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8A7 /* System.Void CoreImage.CIAreaLogarithmicHistogram::set_Scale(System.Single) */ },
		{ /* #3130 = 0x1873 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8A8 /* System.IntPtr CoreImage.CIAreaLogarithmicHistogram::get_Count() */ },
		{ /* #3131 = 0x1875 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8A9 /* System.Void CoreImage.CIAreaLogarithmicHistogram::set_Count(System.IntPtr) */ },
		{ /* #3132 = 0x1877 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8AA /* System.Single CoreImage.CIAreaLogarithmicHistogram::get_MinimumStop() */ },
		{ /* #3133 = 0x1879 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8AB /* System.Void CoreImage.CIAreaLogarithmicHistogram::set_MinimumStop(System.Single) */ },
		{ /* #3134 = 0x187B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8AC /* System.Single CoreImage.CIAreaLogarithmicHistogram::get_MaximumStop() */ },
		{ /* #3135 = 0x187D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8AD /* System.Void CoreImage.CIAreaLogarithmicHistogram::set_MaximumStop(System.Single) */ },
		{ /* #3136 = 0x187F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8AE /* CoreImage.CIImage CoreImage.CIAreaLogarithmicHistogram::get_InputImage() */ },
		{ /* #3137 = 0x1881 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8AF /* System.Void CoreImage.CIAreaLogarithmicHistogram::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3138 = 0x1883 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8B0 /* CoreGraphics.CGRect CoreImage.CIAreaLogarithmicHistogram::get_InputExtent() */ },
		{ /* #3139 = 0x1885 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8B1 /* System.Void CoreImage.CIAreaLogarithmicHistogram::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #3140 = 0x1887 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8B2 /* CoreImage.CIImage CoreImage.CIAreaLogarithmicHistogram::get_OutputImage() */ },
		{ /* #3141 = 0x1889 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8A2 /* System.Void CoreImage.CIAreaLogarithmicHistogram::.ctor() */ },
		{ /* #3142 = 0x188B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8A5 /* System.Void CoreImage.CIAreaLogarithmicHistogram::.ctor(Foundation.NSCoder) */ },
		{ /* #3143 = 0x188D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200165C /* CoreImage.ICIAreaMaximumProtocol */ },
		{ /* #3144 = 0x188F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200165D /* CoreImage.CIAreaMaximumProtocolWrapper */ },
		{ /* #3145 = 0x1891 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001658 /* CoreImage.CIAreaMaximum */ },
		{ /* #3146 = 0x1893 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8CE /* CoreImage.CIImage CoreImage.CIAreaMaximum::get_InputImage() */ },
		{ /* #3147 = 0x1895 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8CF /* System.Void CoreImage.CIAreaMaximum::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3148 = 0x1897 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8D0 /* CoreGraphics.CGRect CoreImage.CIAreaMaximum::get_InputExtent() */ },
		{ /* #3149 = 0x1899 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8D1 /* System.Void CoreImage.CIAreaMaximum::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #3150 = 0x189B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8D2 /* CoreImage.CIImage CoreImage.CIAreaMaximum::get_OutputImage() */ },
		{ /* #3151 = 0x189D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8C9 /* System.Void CoreImage.CIAreaMaximum::.ctor() */ },
		{ /* #3152 = 0x189F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8CC /* System.Void CoreImage.CIAreaMaximum::.ctor(Foundation.NSCoder) */ },
		{ /* #3153 = 0x18A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200165A /* CoreImage.ICIAreaMaximumAlphaProtocol */ },
		{ /* #3154 = 0x18A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200165B /* CoreImage.CIAreaMaximumAlphaProtocolWrapper */ },
		{ /* #3155 = 0x18A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001659 /* CoreImage.CIAreaMaximumAlpha */ },
		{ /* #3156 = 0x18A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8D7 /* CoreImage.CIImage CoreImage.CIAreaMaximumAlpha::get_InputImage() */ },
		{ /* #3157 = 0x18A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8D8 /* System.Void CoreImage.CIAreaMaximumAlpha::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3158 = 0x18AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8D9 /* CoreGraphics.CGRect CoreImage.CIAreaMaximumAlpha::get_InputExtent() */ },
		{ /* #3159 = 0x18AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8DA /* System.Void CoreImage.CIAreaMaximumAlpha::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #3160 = 0x18AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8DB /* CoreImage.CIImage CoreImage.CIAreaMaximumAlpha::get_OutputImage() */ },
		{ /* #3161 = 0x18B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8D3 /* System.Void CoreImage.CIAreaMaximumAlpha::.ctor() */ },
		{ /* #3162 = 0x18B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8D6 /* System.Void CoreImage.CIAreaMaximumAlpha::.ctor(Foundation.NSCoder) */ },
		{ /* #3163 = 0x18B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200165E /* CoreImage.CIAreaMinimum */ },
		{ /* #3164 = 0x18B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8EC /* CoreImage.CIImage CoreImage.CIAreaMinimum::get_InputImage() */ },
		{ /* #3165 = 0x18B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8ED /* System.Void CoreImage.CIAreaMinimum::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3166 = 0x18BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8EE /* CoreGraphics.CGRect CoreImage.CIAreaMinimum::get_InputExtent() */ },
		{ /* #3167 = 0x18BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8EF /* System.Void CoreImage.CIAreaMinimum::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #3168 = 0x18BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8F0 /* CoreImage.CIImage CoreImage.CIAreaMinimum::get_OutputImage() */ },
		{ /* #3169 = 0x18C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8E8 /* System.Void CoreImage.CIAreaMinimum::.ctor() */ },
		{ /* #3170 = 0x18C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8EB /* System.Void CoreImage.CIAreaMinimum::.ctor(Foundation.NSCoder) */ },
		{ /* #3171 = 0x18C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200165F /* CoreImage.CIAreaMinimumAlpha */ },
		{ /* #3172 = 0x18C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8F5 /* CoreImage.CIImage CoreImage.CIAreaMinimumAlpha::get_InputImage() */ },
		{ /* #3173 = 0x18C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8F6 /* System.Void CoreImage.CIAreaMinimumAlpha::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3174 = 0x18CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8F7 /* CoreGraphics.CGRect CoreImage.CIAreaMinimumAlpha::get_InputExtent() */ },
		{ /* #3175 = 0x18CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8F8 /* System.Void CoreImage.CIAreaMinimumAlpha::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #3176 = 0x18CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8F9 /* CoreImage.CIImage CoreImage.CIAreaMinimumAlpha::get_OutputImage() */ },
		{ /* #3177 = 0x18D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8F1 /* System.Void CoreImage.CIAreaMinimumAlpha::.ctor() */ },
		{ /* #3178 = 0x18D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D8F4 /* System.Void CoreImage.CIAreaMinimumAlpha::.ctor(Foundation.NSCoder) */ },
		{ /* #3179 = 0x18D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001660 /* CoreImage.ICIAreaMinimumAlphaProtocol */ },
		{ /* #3180 = 0x18D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001661 /* CoreImage.CIAreaMinimumAlphaProtocolWrapper */ },
		{ /* #3181 = 0x18D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001662 /* CoreImage.ICIAreaMinimumProtocol */ },
		{ /* #3182 = 0x18DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001663 /* CoreImage.CIAreaMinimumProtocolWrapper */ },
		{ /* #3183 = 0x18DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001664 /* CoreImage.CIAreaMinMax */ },
		{ /* #3184 = 0x18DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D90C /* CoreImage.CIImage CoreImage.CIAreaMinMax::get_InputImage() */ },
		{ /* #3185 = 0x18E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D90D /* System.Void CoreImage.CIAreaMinMax::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3186 = 0x18E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D90E /* CoreGraphics.CGRect CoreImage.CIAreaMinMax::get_InputExtent() */ },
		{ /* #3187 = 0x18E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D90F /* System.Void CoreImage.CIAreaMinMax::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #3188 = 0x18E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D910 /* CoreImage.CIImage CoreImage.CIAreaMinMax::get_OutputImage() */ },
		{ /* #3189 = 0x18E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D906 /* System.Void CoreImage.CIAreaMinMax::.ctor() */ },
		{ /* #3190 = 0x18EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D909 /* System.Void CoreImage.CIAreaMinMax::.ctor(Foundation.NSCoder) */ },
		{ /* #3191 = 0x18ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001665 /* CoreImage.ICIAreaMinMaxProtocol */ },
		{ /* #3192 = 0x18EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001666 /* CoreImage.CIAreaMinMaxProtocolWrapper */ },
		{ /* #3193 = 0x18F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001668 /* CoreImage.ICIAreaMinMaxRedProtocol */ },
		{ /* #3194 = 0x18F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001669 /* CoreImage.CIAreaMinMaxRedProtocolWrapper */ },
		{ /* #3195 = 0x18F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001667 /* CoreImage.CIAreaMinMaxRed */ },
		{ /* #3196 = 0x18F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D91D /* CoreImage.CIImage CoreImage.CIAreaMinMaxRed::get_InputImage() */ },
		{ /* #3197 = 0x18F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D91E /* System.Void CoreImage.CIAreaMinMaxRed::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3198 = 0x18FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D91F /* CoreGraphics.CGRect CoreImage.CIAreaMinMaxRed::get_InputExtent() */ },
		{ /* #3199 = 0x18FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D920 /* System.Void CoreImage.CIAreaMinMaxRed::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #3200 = 0x18FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D921 /* CoreImage.CIImage CoreImage.CIAreaMinMaxRed::get_OutputImage() */ },
		{ /* #3201 = 0x1901 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D917 /* System.Void CoreImage.CIAreaMinMaxRed::.ctor() */ },
		{ /* #3202 = 0x1903 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D91A /* System.Void CoreImage.CIAreaMinMaxRed::.ctor(Foundation.NSCoder) */ },
		{ /* #3203 = 0x1905 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001794 /* CoreImage.CIImageGenerator */ },
		{ /* #3204 = 0x1907 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E3BC /* System.Void CoreImage.CIImageGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #3205 = 0x1909 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200166D /* CoreImage.ICIAttributedTextImageGeneratorProtocol */ },
		{ /* #3206 = 0x190B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200166F /* CoreImage.CIAttributedTextImageGeneratorProtocolWrapper */ },
		{ /* #3207 = 0x190D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200166C /* CoreImage.CIAttributedTextImageGenerator */ },
		{ /* #3208 = 0x190F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D936 /* Foundation.NSAttributedString CoreImage.CIAttributedTextImageGenerator::get_Text() */ },
		{ /* #3209 = 0x1911 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D937 /* System.Void CoreImage.CIAttributedTextImageGenerator::set_Text(Foundation.NSAttributedString) */ },
		{ /* #3210 = 0x1913 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D938 /* System.Single CoreImage.CIAttributedTextImageGenerator::get_ScaleFactor() */ },
		{ /* #3211 = 0x1915 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D939 /* System.Void CoreImage.CIAttributedTextImageGenerator::set_ScaleFactor(System.Single) */ },
		{ /* #3212 = 0x1917 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D93A /* System.Single CoreImage.CIAttributedTextImageGenerator::get_Padding() */ },
		{ /* #3213 = 0x1919 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D93B /* System.Void CoreImage.CIAttributedTextImageGenerator::set_Padding(System.Single) */ },
		{ /* #3214 = 0x191B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D93C /* CoreImage.CIImage CoreImage.CIAttributedTextImageGenerator::get_OutputImage() */ },
		{ /* #3215 = 0x191D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D932 /* System.Void CoreImage.CIAttributedTextImageGenerator::.ctor() */ },
		{ /* #3216 = 0x191F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D935 /* System.Void CoreImage.CIAttributedTextImageGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #3217 = 0x1921 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001674 /* CoreImage.CIBarcodeDescriptor */ },
		{ /* #3218 = 0x1923 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001670 /* CoreImage.CIAztecCodeDescriptor */ },
		{ /* #3219 = 0x1925 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016A9 /* CoreImage.CICodeGenerator */ },
		{ /* #3220 = 0x1927 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBA0 /* System.Void CoreImage.CICodeGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #3221 = 0x1929 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001672 /* CoreImage.ICIAztecCodeGeneratorProtocol */ },
		{ /* #3222 = 0x192B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001673 /* CoreImage.CIAztecCodeGeneratorProtocolWrapper */ },
		{ /* #3223 = 0x192D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001671 /* CoreImage.CIAztecCodeGenerator */ },
		{ /* #3224 = 0x192F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D95A /* Foundation.NSData CoreImage.CIAztecCodeGenerator::get_Message() */ },
		{ /* #3225 = 0x1931 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D95B /* System.Void CoreImage.CIAztecCodeGenerator::set_Message(Foundation.NSData) */ },
		{ /* #3226 = 0x1933 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D95C /* System.Single CoreImage.CIAztecCodeGenerator::get_CorrectionLevel() */ },
		{ /* #3227 = 0x1935 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D95D /* System.Void CoreImage.CIAztecCodeGenerator::set_CorrectionLevel(System.Single) */ },
		{ /* #3228 = 0x1937 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D95E /* System.Single CoreImage.CIAztecCodeGenerator::get_InputLayers() */ },
		{ /* #3229 = 0x1939 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D95F /* System.Void CoreImage.CIAztecCodeGenerator::set_InputLayers(System.Single) */ },
		{ /* #3230 = 0x193B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D960 /* System.Single CoreImage.CIAztecCodeGenerator::get_InputCompactStyle() */ },
		{ /* #3231 = 0x193D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D961 /* System.Void CoreImage.CIAztecCodeGenerator::set_InputCompactStyle(System.Single) */ },
		{ /* #3232 = 0x193F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D962 /* CoreImage.CIImage CoreImage.CIAztecCodeGenerator::get_OutputImage() */ },
		{ /* #3233 = 0x1941 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D955 /* System.Void CoreImage.CIAztecCodeGenerator::.ctor() */ },
		{ /* #3234 = 0x1943 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D958 /* System.Void CoreImage.CIAztecCodeGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #3235 = 0x1945 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001676 /* CoreImage.ICIBarcodeGeneratorProtocol */ },
		{ /* #3236 = 0x1947 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001677 /* CoreImage.CIBarcodeGeneratorProtocolWrapper */ },
		{ /* #3237 = 0x1949 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001675 /* CoreImage.CIBarcodeGenerator */ },
		{ /* #3238 = 0x194B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D986 /* CoreImage.CIBarcodeDescriptor CoreImage.CIBarcodeGenerator::get_BarcodeDescriptor() */ },
		{ /* #3239 = 0x194D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D987 /* System.Void CoreImage.CIBarcodeGenerator::set_BarcodeDescriptor(CoreImage.CIBarcodeDescriptor) */ },
		{ /* #3240 = 0x194F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D988 /* CoreImage.CIImage CoreImage.CIBarcodeGenerator::get_OutputImage() */ },
		{ /* #3241 = 0x1951 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D97D /* System.Void CoreImage.CIBarcodeGenerator::.ctor() */ },
		{ /* #3242 = 0x1953 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D980 /* System.Void CoreImage.CIBarcodeGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #3243 = 0x1955 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018B7 /* CoreImage.CITransitionFilter */ },
		{ /* #3244 = 0x1957 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEE8 /* CoreImage.CIImage CoreImage.CITransitionFilter::get_InputImage() */ },
		{ /* #3245 = 0x1959 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEE9 /* System.Void CoreImage.CITransitionFilter::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3246 = 0x195B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEEA /* CoreImage.CIImage CoreImage.CITransitionFilter::get_TargetImage() */ },
		{ /* #3247 = 0x195D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEEB /* System.Void CoreImage.CITransitionFilter::set_TargetImage(CoreImage.CIImage) */ },
		{ /* #3248 = 0x195F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEEC /* System.Single CoreImage.CITransitionFilter::get_Time() */ },
		{ /* #3249 = 0x1961 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEED /* System.Void CoreImage.CITransitionFilter::set_Time(System.Single) */ },
		{ /* #3250 = 0x1963 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEEE /* CoreImage.CIImage CoreImage.CITransitionFilter::get_OutputImage() */ },
		{ /* #3251 = 0x1965 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEE6 /* System.Void CoreImage.CITransitionFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #3252 = 0x1967 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001678 /* CoreImage.CIBarsSwipeTransition */ },
		{ /* #3253 = 0x1969 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D98F /* System.Void CoreImage.CIBarsSwipeTransition::.ctor() */ },
		{ /* #3254 = 0x196B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D992 /* System.Void CoreImage.CIBarsSwipeTransition::.ctor(Foundation.NSCoder) */ },
		{ /* #3255 = 0x196D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001679 /* CoreImage.ICIBarsSwipeTransitionProtocol */ },
		{ /* #3256 = 0x196F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200167A /* CoreImage.CIBarsSwipeTransitionProtocolWrapper */ },
		{ /* #3257 = 0x1971 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200167C /* CoreImage.ICIBicubicScaleTransformProtocol */ },
		{ /* #3258 = 0x1973 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200167D /* CoreImage.CIBicubicScaleTransformProtocolWrapper */ },
		{ /* #3259 = 0x1975 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200167B /* CoreImage.CIBicubicScaleTransform */ },
		{ /* #3260 = 0x1977 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9B1 /* CoreImage.CIImage CoreImage.CIBicubicScaleTransform::get_InputImage() */ },
		{ /* #3261 = 0x1979 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9B2 /* System.Void CoreImage.CIBicubicScaleTransform::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3262 = 0x197B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9B3 /* System.Single CoreImage.CIBicubicScaleTransform::get_Scale() */ },
		{ /* #3263 = 0x197D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9B4 /* System.Void CoreImage.CIBicubicScaleTransform::set_Scale(System.Single) */ },
		{ /* #3264 = 0x197F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9B5 /* System.Single CoreImage.CIBicubicScaleTransform::get_AspectRatio() */ },
		{ /* #3265 = 0x1981 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9B6 /* System.Void CoreImage.CIBicubicScaleTransform::set_AspectRatio(System.Single) */ },
		{ /* #3266 = 0x1983 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9B7 /* System.Single CoreImage.CIBicubicScaleTransform::get_ParameterB() */ },
		{ /* #3267 = 0x1985 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9B8 /* System.Void CoreImage.CIBicubicScaleTransform::set_ParameterB(System.Single) */ },
		{ /* #3268 = 0x1987 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9B9 /* System.Single CoreImage.CIBicubicScaleTransform::get_ParameterC() */ },
		{ /* #3269 = 0x1989 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9BA /* System.Void CoreImage.CIBicubicScaleTransform::set_ParameterC(System.Single) */ },
		{ /* #3270 = 0x198B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9BB /* CoreImage.CIImage CoreImage.CIBicubicScaleTransform::get_OutputImage() */ },
		{ /* #3271 = 0x198D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9AD /* System.Void CoreImage.CIBicubicScaleTransform::.ctor() */ },
		{ /* #3272 = 0x198F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9B0 /* System.Void CoreImage.CIBicubicScaleTransform::.ctor(Foundation.NSCoder) */ },
		{ /* #3273 = 0x1991 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200167E /* CoreImage.CIBlendFilter */ },
		{ /* #3274 = 0x1993 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600D9D4 /* System.Void CoreImage.CIBlendFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #3275 = 0x1995 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017A7 /* CoreImage.CIKernel */ },
		{ /* #3276 = 0x1997 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016CB /* CoreImage.CIColorKernel */ },
		{ /* #3277 = 0x1999 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200167F /* CoreImage.CIBlendKernel */ },
		{ /* #3278 = 0x199B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001683 /* CoreImage.ICIBlendWithMaskProtocol */ },
		{ /* #3279 = 0x199D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001684 /* CoreImage.CIBlendWithMaskProtocolWrapper */ },
		{ /* #3280 = 0x199F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001682 /* CoreImage.CIBlendWithMask */ },
		{ /* #3281 = 0x19A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA17 /* CoreImage.CIImage CoreImage.CIBlendWithMask::get_InputImage() */ },
		{ /* #3282 = 0x19A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA18 /* System.Void CoreImage.CIBlendWithMask::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3283 = 0x19A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA19 /* CoreImage.CIImage CoreImage.CIBlendWithMask::get_BackgroundImage() */ },
		{ /* #3284 = 0x19A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA1A /* System.Void CoreImage.CIBlendWithMask::set_BackgroundImage(CoreImage.CIImage) */ },
		{ /* #3285 = 0x19A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA1B /* CoreImage.CIImage CoreImage.CIBlendWithMask::get_MaskImage() */ },
		{ /* #3286 = 0x19AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA1C /* System.Void CoreImage.CIBlendWithMask::set_MaskImage(CoreImage.CIImage) */ },
		{ /* #3287 = 0x19AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA1D /* CoreImage.CIImage CoreImage.CIBlendWithMask::get_OutputImage() */ },
		{ /* #3288 = 0x19AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA12 /* System.Void CoreImage.CIBlendWithMask::.ctor() */ },
		{ /* #3289 = 0x19B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA15 /* System.Void CoreImage.CIBlendWithMask::.ctor(Foundation.NSCoder) */ },
		{ /* #3290 = 0x19B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001680 /* CoreImage.CIBlendWithAlphaMask */ },
		{ /* #3291 = 0x19B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA0A /* System.Void CoreImage.CIBlendWithAlphaMask::.ctor() */ },
		{ /* #3292 = 0x19B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA0D /* System.Void CoreImage.CIBlendWithAlphaMask::.ctor(Foundation.NSCoder) */ },
		{ /* #3293 = 0x19B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001681 /* CoreImage.CIBlendWithBlueMask */ },
		{ /* #3294 = 0x19BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA0E /* System.Void CoreImage.CIBlendWithBlueMask::.ctor() */ },
		{ /* #3295 = 0x19BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA11 /* System.Void CoreImage.CIBlendWithBlueMask::.ctor(Foundation.NSCoder) */ },
		{ /* #3296 = 0x19BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001685 /* CoreImage.CIBlendWithRedMask */ },
		{ /* #3297 = 0x19C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA2C /* System.Void CoreImage.CIBlendWithRedMask::.ctor() */ },
		{ /* #3298 = 0x19C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA2F /* System.Void CoreImage.CIBlendWithRedMask::.ctor(Foundation.NSCoder) */ },
		{ /* #3299 = 0x19C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001687 /* CoreImage.ICIBloomProtocol */ },
		{ /* #3300 = 0x19C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001688 /* CoreImage.CIBloomProtocolWrapper */ },
		{ /* #3301 = 0x19C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001686 /* CoreImage.CIBloom */ },
		{ /* #3302 = 0x19CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA34 /* CoreImage.CIImage CoreImage.CIBloom::get_InputImage() */ },
		{ /* #3303 = 0x19CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA35 /* System.Void CoreImage.CIBloom::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3304 = 0x19CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA36 /* System.Single CoreImage.CIBloom::get_Radius() */ },
		{ /* #3305 = 0x19D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA37 /* System.Void CoreImage.CIBloom::set_Radius(System.Single) */ },
		{ /* #3306 = 0x19D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA38 /* System.Single CoreImage.CIBloom::get_Intensity() */ },
		{ /* #3307 = 0x19D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA39 /* System.Void CoreImage.CIBloom::set_Intensity(System.Single) */ },
		{ /* #3308 = 0x19D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA3A /* CoreImage.CIImage CoreImage.CIBloom::get_OutputImage() */ },
		{ /* #3309 = 0x19D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA30 /* System.Void CoreImage.CIBloom::.ctor() */ },
		{ /* #3310 = 0x19DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA33 /* System.Void CoreImage.CIBloom::.ctor(Foundation.NSCoder) */ },
		{ /* #3311 = 0x19DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017C2 /* CoreImage.CILinearBlur */ },
		{ /* #3312 = 0x19DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E577 /* System.Void CoreImage.CILinearBlur::.ctor(Foundation.NSCoder) */ },
		{ /* #3313 = 0x19E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200168A /* CoreImage.ICIBokehBlurProtocol */ },
		{ /* #3314 = 0x19E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200168B /* CoreImage.CIBokehBlurProtocolWrapper */ },
		{ /* #3315 = 0x19E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001689 /* CoreImage.CIBokehBlur */ },
		{ /* #3316 = 0x19E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA4D /* CoreImage.CIImage CoreImage.CIBokehBlur::get_InputImage() */ },
		{ /* #3317 = 0x19E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA4E /* System.Void CoreImage.CIBokehBlur::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3318 = 0x19EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA4F /* System.Single CoreImage.CIBokehBlur::get_Radius() */ },
		{ /* #3319 = 0x19ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA50 /* System.Void CoreImage.CIBokehBlur::set_Radius(System.Single) */ },
		{ /* #3320 = 0x19EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA51 /* System.Single CoreImage.CIBokehBlur::get_RingAmount() */ },
		{ /* #3321 = 0x19F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA52 /* System.Void CoreImage.CIBokehBlur::set_RingAmount(System.Single) */ },
		{ /* #3322 = 0x19F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA53 /* System.Single CoreImage.CIBokehBlur::get_RingSize() */ },
		{ /* #3323 = 0x19F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA54 /* System.Void CoreImage.CIBokehBlur::set_RingSize(System.Single) */ },
		{ /* #3324 = 0x19F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA55 /* System.Single CoreImage.CIBokehBlur::get_Softness() */ },
		{ /* #3325 = 0x19F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA56 /* System.Void CoreImage.CIBokehBlur::set_Softness(System.Single) */ },
		{ /* #3326 = 0x19FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA57 /* CoreImage.CIImage CoreImage.CIBokehBlur::get_OutputImage() */ },
		{ /* #3327 = 0x19FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA49 /* System.Void CoreImage.CIBokehBlur::.ctor() */ },
		{ /* #3328 = 0x19FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA4C /* System.Void CoreImage.CIBokehBlur::.ctor(Foundation.NSCoder) */ },
		{ /* #3329 = 0x1A01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200168D /* CoreImage.ICIBoxBlurProtocol */ },
		{ /* #3330 = 0x1A03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200168E /* CoreImage.CIBoxBlurProtocolWrapper */ },
		{ /* #3331 = 0x1A05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200168C /* CoreImage.CIBoxBlur */ },
		{ /* #3332 = 0x1A07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA72 /* CoreImage.CIImage CoreImage.CIBoxBlur::get_InputImage() */ },
		{ /* #3333 = 0x1A09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA73 /* System.Void CoreImage.CIBoxBlur::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3334 = 0x1A0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA74 /* System.Single CoreImage.CIBoxBlur::get_Radius() */ },
		{ /* #3335 = 0x1A0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA75 /* System.Void CoreImage.CIBoxBlur::set_Radius(System.Single) */ },
		{ /* #3336 = 0x1A0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA76 /* CoreImage.CIImage CoreImage.CIBoxBlur::get_OutputImage() */ },
		{ /* #3337 = 0x1A11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA6E /* System.Void CoreImage.CIBoxBlur::.ctor() */ },
		{ /* #3338 = 0x1A13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA71 /* System.Void CoreImage.CIBoxBlur::.ctor(Foundation.NSCoder) */ },
		{ /* #3339 = 0x1A15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001722 /* CoreImage.CIDistortionFilter */ },
		{ /* #3340 = 0x1A17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF6C /* System.Void CoreImage.CIDistortionFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #3341 = 0x1A19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001693 /* CoreImage.ICIBumpDistortionProtocol */ },
		{ /* #3342 = 0x1A1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001694 /* CoreImage.CIBumpDistortionProtocolWrapper */ },
		{ /* #3343 = 0x1A1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200168F /* CoreImage.CIBumpDistortion */ },
		{ /* #3344 = 0x1A1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA85 /* CoreImage.CIImage CoreImage.CIBumpDistortion::get_InputImage() */ },
		{ /* #3345 = 0x1A21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA86 /* System.Void CoreImage.CIBumpDistortion::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3346 = 0x1A23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA87 /* CoreGraphics.CGPoint CoreImage.CIBumpDistortion::get_InputCenter() */ },
		{ /* #3347 = 0x1A25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA88 /* System.Void CoreImage.CIBumpDistortion::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #3348 = 0x1A27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA89 /* System.Single CoreImage.CIBumpDistortion::get_Radius() */ },
		{ /* #3349 = 0x1A29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA8A /* System.Void CoreImage.CIBumpDistortion::set_Radius(System.Single) */ },
		{ /* #3350 = 0x1A2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA8B /* System.Single CoreImage.CIBumpDistortion::get_Scale() */ },
		{ /* #3351 = 0x1A2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA8C /* System.Void CoreImage.CIBumpDistortion::set_Scale(System.Single) */ },
		{ /* #3352 = 0x1A2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA8D /* CoreImage.CIImage CoreImage.CIBumpDistortion::get_OutputImage() */ },
		{ /* #3353 = 0x1A31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA81 /* System.Void CoreImage.CIBumpDistortion::.ctor() */ },
		{ /* #3354 = 0x1A33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA84 /* System.Void CoreImage.CIBumpDistortion::.ctor(Foundation.NSCoder) */ },
		{ /* #3355 = 0x1A35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001691 /* CoreImage.ICIBumpDistortionLinearProtocol */ },
		{ /* #3356 = 0x1A37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001692 /* CoreImage.CIBumpDistortionLinearProtocolWrapper */ },
		{ /* #3357 = 0x1A39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001690 /* CoreImage.CIBumpDistortionLinear */ },
		{ /* #3358 = 0x1A3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA92 /* CoreImage.CIImage CoreImage.CIBumpDistortionLinear::get_InputImage() */ },
		{ /* #3359 = 0x1A3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA93 /* System.Void CoreImage.CIBumpDistortionLinear::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3360 = 0x1A3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA94 /* CoreGraphics.CGPoint CoreImage.CIBumpDistortionLinear::get_InputCenter() */ },
		{ /* #3361 = 0x1A41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA95 /* System.Void CoreImage.CIBumpDistortionLinear::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #3362 = 0x1A43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA96 /* System.Single CoreImage.CIBumpDistortionLinear::get_Radius() */ },
		{ /* #3363 = 0x1A45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA97 /* System.Void CoreImage.CIBumpDistortionLinear::set_Radius(System.Single) */ },
		{ /* #3364 = 0x1A47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA98 /* System.Single CoreImage.CIBumpDistortionLinear::get_Angle() */ },
		{ /* #3365 = 0x1A49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA99 /* System.Void CoreImage.CIBumpDistortionLinear::set_Angle(System.Single) */ },
		{ /* #3366 = 0x1A4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA9A /* System.Single CoreImage.CIBumpDistortionLinear::get_Scale() */ },
		{ /* #3367 = 0x1A4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA9B /* System.Void CoreImage.CIBumpDistortionLinear::set_Scale(System.Single) */ },
		{ /* #3368 = 0x1A4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA9C /* CoreImage.CIImage CoreImage.CIBumpDistortionLinear::get_OutputImage() */ },
		{ /* #3369 = 0x1A51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA8E /* System.Void CoreImage.CIBumpDistortionLinear::.ctor() */ },
		{ /* #3370 = 0x1A53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DA91 /* System.Void CoreImage.CIBumpDistortionLinear::.ctor(Foundation.NSCoder) */ },
		{ /* #3371 = 0x1A55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001695 /* CoreImage.CICameraCalibrationLensCorrection */ },
		{ /* #3372 = 0x1A57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAC5 /* System.Void CoreImage.CICameraCalibrationLensCorrection::.ctor() */ },
		{ /* #3373 = 0x1A59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAC8 /* System.Void CoreImage.CICameraCalibrationLensCorrection::.ctor(Foundation.NSCoder) */ },
		{ /* #3374 = 0x1A5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001697 /* CoreImage.ICICheckerboardGeneratorProtocol */ },
		{ /* #3375 = 0x1A5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001698 /* CoreImage.CICheckerboardGeneratorProtocolWrapper */ },
		{ /* #3376 = 0x1A5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001696 /* CoreImage.CICheckerboardGenerator */ },
		{ /* #3377 = 0x1A61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAD3 /* CoreGraphics.CGPoint CoreImage.CICheckerboardGenerator::get_InputCenter() */ },
		{ /* #3378 = 0x1A63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAD4 /* System.Void CoreImage.CICheckerboardGenerator::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #3379 = 0x1A65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAD5 /* CoreImage.CIColor CoreImage.CICheckerboardGenerator::get_Color0() */ },
		{ /* #3380 = 0x1A67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAD6 /* System.Void CoreImage.CICheckerboardGenerator::set_Color0(CoreImage.CIColor) */ },
		{ /* #3381 = 0x1A69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAD7 /* CoreImage.CIColor CoreImage.CICheckerboardGenerator::get_Color1() */ },
		{ /* #3382 = 0x1A6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAD8 /* System.Void CoreImage.CICheckerboardGenerator::set_Color1(CoreImage.CIColor) */ },
		{ /* #3383 = 0x1A6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAD9 /* System.Single CoreImage.CICheckerboardGenerator::get_Width() */ },
		{ /* #3384 = 0x1A6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DADA /* System.Void CoreImage.CICheckerboardGenerator::set_Width(System.Single) */ },
		{ /* #3385 = 0x1A71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DADB /* System.Single CoreImage.CICheckerboardGenerator::get_Sharpness() */ },
		{ /* #3386 = 0x1A73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DADC /* System.Void CoreImage.CICheckerboardGenerator::set_Sharpness(System.Single) */ },
		{ /* #3387 = 0x1A75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DADD /* CoreImage.CIImage CoreImage.CICheckerboardGenerator::get_OutputImage() */ },
		{ /* #3388 = 0x1A77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DACF /* System.Void CoreImage.CICheckerboardGenerator::.ctor() */ },
		{ /* #3389 = 0x1A79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAD2 /* System.Void CoreImage.CICheckerboardGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #3390 = 0x1A7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200169A /* CoreImage.ICICircleSplashDistortionProtocol */ },
		{ /* #3391 = 0x1A7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200169B /* CoreImage.CICircleSplashDistortionProtocolWrapper */ },
		{ /* #3392 = 0x1A7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001699 /* CoreImage.CICircleSplashDistortion */ },
		{ /* #3393 = 0x1A81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAF8 /* CoreImage.CIImage CoreImage.CICircleSplashDistortion::get_InputImage() */ },
		{ /* #3394 = 0x1A83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAF9 /* System.Void CoreImage.CICircleSplashDistortion::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3395 = 0x1A85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAFA /* CoreGraphics.CGPoint CoreImage.CICircleSplashDistortion::get_InputCenter() */ },
		{ /* #3396 = 0x1A87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAFB /* System.Void CoreImage.CICircleSplashDistortion::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #3397 = 0x1A89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAFC /* System.Single CoreImage.CICircleSplashDistortion::get_Radius() */ },
		{ /* #3398 = 0x1A8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAFD /* System.Void CoreImage.CICircleSplashDistortion::set_Radius(System.Single) */ },
		{ /* #3399 = 0x1A8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAFE /* CoreImage.CIImage CoreImage.CICircleSplashDistortion::get_OutputImage() */ },
		{ /* #3400 = 0x1A8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAF4 /* System.Void CoreImage.CICircleSplashDistortion::.ctor() */ },
		{ /* #3401 = 0x1A91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DAF7 /* System.Void CoreImage.CICircleSplashDistortion::.ctor(Foundation.NSCoder) */ },
		{ /* #3402 = 0x1A93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001871 /* CoreImage.CIScreenFilter */ },
		{ /* #3403 = 0x1A95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBFE /* System.Void CoreImage.CIScreenFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #3404 = 0x1A97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200169D /* CoreImage.ICICircularScreenProtocol */ },
		{ /* #3405 = 0x1A99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200169E /* CoreImage.CICircularScreenProtocolWrapper */ },
		{ /* #3406 = 0x1A9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200169C /* CoreImage.CICircularScreen */ },
		{ /* #3407 = 0x1A9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB11 /* CoreImage.CIImage CoreImage.CICircularScreen::get_InputImage() */ },
		{ /* #3408 = 0x1A9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB12 /* System.Void CoreImage.CICircularScreen::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3409 = 0x1AA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB13 /* CoreGraphics.CGPoint CoreImage.CICircularScreen::get_InputCenter() */ },
		{ /* #3410 = 0x1AA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB14 /* System.Void CoreImage.CICircularScreen::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #3411 = 0x1AA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB15 /* System.Single CoreImage.CICircularScreen::get_Width() */ },
		{ /* #3412 = 0x1AA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB16 /* System.Void CoreImage.CICircularScreen::set_Width(System.Single) */ },
		{ /* #3413 = 0x1AA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB17 /* System.Single CoreImage.CICircularScreen::get_Sharpness() */ },
		{ /* #3414 = 0x1AAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB18 /* System.Void CoreImage.CICircularScreen::set_Sharpness(System.Single) */ },
		{ /* #3415 = 0x1AAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB19 /* CoreImage.CIImage CoreImage.CICircularScreen::get_OutputImage() */ },
		{ /* #3416 = 0x1AAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB0D /* System.Void CoreImage.CICircularScreen::.ctor() */ },
		{ /* #3417 = 0x1AB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB10 /* System.Void CoreImage.CICircularScreen::.ctor(Foundation.NSCoder) */ },
		{ /* #3418 = 0x1AB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016A0 /* CoreImage.ICICircularWrapProtocol */ },
		{ /* #3419 = 0x1AB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016A1 /* CoreImage.CICircularWrapProtocolWrapper */ },
		{ /* #3420 = 0x1AB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200169F /* CoreImage.CICircularWrap */ },
		{ /* #3421 = 0x1AB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB30 /* CoreImage.CIImage CoreImage.CICircularWrap::get_InputImage() */ },
		{ /* #3422 = 0x1ABB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB31 /* System.Void CoreImage.CICircularWrap::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3423 = 0x1ABD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB32 /* CoreGraphics.CGPoint CoreImage.CICircularWrap::get_InputCenter() */ },
		{ /* #3424 = 0x1ABF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB33 /* System.Void CoreImage.CICircularWrap::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #3425 = 0x1AC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB34 /* System.Single CoreImage.CICircularWrap::get_Radius() */ },
		{ /* #3426 = 0x1AC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB35 /* System.Void CoreImage.CICircularWrap::set_Radius(System.Single) */ },
		{ /* #3427 = 0x1AC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB36 /* System.Single CoreImage.CICircularWrap::get_Angle() */ },
		{ /* #3428 = 0x1AC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB37 /* System.Void CoreImage.CICircularWrap::set_Angle(System.Single) */ },
		{ /* #3429 = 0x1AC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB38 /* CoreImage.CIImage CoreImage.CICircularWrap::get_OutputImage() */ },
		{ /* #3430 = 0x1ACB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB2C /* System.Void CoreImage.CICircularWrap::.ctor() */ },
		{ /* #3431 = 0x1ACD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB2F /* System.Void CoreImage.CICircularWrap::.ctor(Foundation.NSCoder) */ },
		{ /* #3432 = 0x1ACF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016A2 /* CoreImage.CIClamp */ },
		{ /* #3433 = 0x1AD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB4B /* System.Void CoreImage.CIClamp::.ctor() */ },
		{ /* #3434 = 0x1AD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB4E /* System.Void CoreImage.CIClamp::.ctor(Foundation.NSCoder) */ },
		{ /* #3435 = 0x1AD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016A4 /* CoreImage.ICICmykHalftoneProtocol */ },
		{ /* #3436 = 0x1AD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016A5 /* CoreImage.CICmykHalftoneProtocolWrapper */ },
		{ /* #3437 = 0x1AD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016A3 /* CoreImage.CICmykHalftone */ },
		{ /* #3438 = 0x1ADB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB57 /* CoreImage.CIImage CoreImage.CICmykHalftone::get_InputImage() */ },
		{ /* #3439 = 0x1ADD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB58 /* System.Void CoreImage.CICmykHalftone::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3440 = 0x1ADF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB59 /* CoreGraphics.CGPoint CoreImage.CICmykHalftone::get_InputCenter() */ },
		{ /* #3441 = 0x1AE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB5A /* System.Void CoreImage.CICmykHalftone::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #3442 = 0x1AE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB5B /* System.Single CoreImage.CICmykHalftone::get_Width() */ },
		{ /* #3443 = 0x1AE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB5C /* System.Void CoreImage.CICmykHalftone::set_Width(System.Single) */ },
		{ /* #3444 = 0x1AE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB5D /* System.Single CoreImage.CICmykHalftone::get_Angle() */ },
		{ /* #3445 = 0x1AE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB5E /* System.Void CoreImage.CICmykHalftone::set_Angle(System.Single) */ },
		{ /* #3446 = 0x1AEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB5F /* System.Single CoreImage.CICmykHalftone::get_Sharpness() */ },
		{ /* #3447 = 0x1AED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB60 /* System.Void CoreImage.CICmykHalftone::set_Sharpness(System.Single) */ },
		{ /* #3448 = 0x1AEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB61 /* System.Single CoreImage.CICmykHalftone::get_GrayComponentReplacement() */ },
		{ /* #3449 = 0x1AF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB62 /* System.Void CoreImage.CICmykHalftone::set_GrayComponentReplacement(System.Single) */ },
		{ /* #3450 = 0x1AF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB63 /* System.Single CoreImage.CICmykHalftone::get_UnderColorRemoval() */ },
		{ /* #3451 = 0x1AF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB64 /* System.Void CoreImage.CICmykHalftone::set_UnderColorRemoval(System.Single) */ },
		{ /* #3452 = 0x1AF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB65 /* CoreImage.CIImage CoreImage.CICmykHalftone::get_OutputImage() */ },
		{ /* #3453 = 0x1AF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB53 /* System.Void CoreImage.CICmykHalftone::.ctor() */ },
		{ /* #3454 = 0x1AFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB56 /* System.Void CoreImage.CICmykHalftone::.ctor(Foundation.NSCoder) */ },
		{ /* #3455 = 0x1AFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016A7 /* CoreImage.ICICode128BarcodeGeneratorProtocol */ },
		{ /* #3456 = 0x1AFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016A8 /* CoreImage.CICode128BarcodeGeneratorProtocolWrapper */ },
		{ /* #3457 = 0x1B01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016A6 /* CoreImage.CICode128BarcodeGenerator */ },
		{ /* #3458 = 0x1B03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB89 /* Foundation.NSData CoreImage.CICode128BarcodeGenerator::get_Message() */ },
		{ /* #3459 = 0x1B05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB8A /* System.Void CoreImage.CICode128BarcodeGenerator::set_Message(Foundation.NSData) */ },
		{ /* #3460 = 0x1B07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB8B /* System.Single CoreImage.CICode128BarcodeGenerator::get_QuietSpace() */ },
		{ /* #3461 = 0x1B09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB8C /* System.Void CoreImage.CICode128BarcodeGenerator::set_QuietSpace(System.Single) */ },
		{ /* #3462 = 0x1B0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB8D /* System.Single CoreImage.CICode128BarcodeGenerator::get_BarcodeHeight() */ },
		{ /* #3463 = 0x1B0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB8E /* System.Void CoreImage.CICode128BarcodeGenerator::set_BarcodeHeight(System.Single) */ },
		{ /* #3464 = 0x1B0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB8F /* CoreImage.CIImage CoreImage.CICode128BarcodeGenerator::get_OutputImage() */ },
		{ /* #3465 = 0x1B11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB84 /* System.Void CoreImage.CICode128BarcodeGenerator::.ctor() */ },
		{ /* #3466 = 0x1B13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DB87 /* System.Void CoreImage.CICode128BarcodeGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #3467 = 0x1B15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016AB /* CoreImage.ICIColorAbsoluteDifferenceProtocol */ },
		{ /* #3468 = 0x1B17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016AC /* CoreImage.CIColorAbsoluteDifferenceProtocolWrapper */ },
		{ /* #3469 = 0x1B19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016AA /* CoreImage.CIColorAbsoluteDifference */ },
		{ /* #3470 = 0x1B1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBA8 /* CoreImage.CIImage CoreImage.CIColorAbsoluteDifference::get_InputImage() */ },
		{ /* #3471 = 0x1B1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBA9 /* System.Void CoreImage.CIColorAbsoluteDifference::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3472 = 0x1B1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBAA /* CoreImage.CIImage CoreImage.CIColorAbsoluteDifference::get_Image2() */ },
		{ /* #3473 = 0x1B21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBAB /* System.Void CoreImage.CIColorAbsoluteDifference::set_Image2(CoreImage.CIImage) */ },
		{ /* #3474 = 0x1B23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBAC /* CoreImage.CIImage CoreImage.CIColorAbsoluteDifference::get_OutputImage() */ },
		{ /* #3475 = 0x1B25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBA4 /* System.Void CoreImage.CIColorAbsoluteDifference::.ctor() */ },
		{ /* #3476 = 0x1B27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBA7 /* System.Void CoreImage.CIColorAbsoluteDifference::.ctor(Foundation.NSCoder) */ },
		{ /* #3477 = 0x1B29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016AD /* CoreImage.CIColorBlendMode */ },
		{ /* #3478 = 0x1B2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBB7 /* System.Void CoreImage.CIColorBlendMode::.ctor() */ },
		{ /* #3479 = 0x1B2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBBA /* System.Void CoreImage.CIColorBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #3480 = 0x1B2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016AE /* CoreImage.CIColorBurnBlendMode */ },
		{ /* #3481 = 0x1B31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBBB /* System.Void CoreImage.CIColorBurnBlendMode::.ctor() */ },
		{ /* #3482 = 0x1B33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBBE /* System.Void CoreImage.CIColorBurnBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #3483 = 0x1B35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016B0 /* CoreImage.ICIColorClampProtocol */ },
		{ /* #3484 = 0x1B37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016B1 /* CoreImage.CIColorClampProtocolWrapper */ },
		{ /* #3485 = 0x1B39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016AF /* CoreImage.CIColorClamp */ },
		{ /* #3486 = 0x1B3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBC3 /* CoreImage.CIImage CoreImage.CIColorClamp::get_InputImage() */ },
		{ /* #3487 = 0x1B3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBC4 /* System.Void CoreImage.CIColorClamp::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3488 = 0x1B3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBC5 /* CoreImage.CIVector CoreImage.CIColorClamp::get_MinComponents() */ },
		{ /* #3489 = 0x1B41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBC6 /* System.Void CoreImage.CIColorClamp::set_MinComponents(CoreImage.CIVector) */ },
		{ /* #3490 = 0x1B43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBC7 /* CoreImage.CIVector CoreImage.CIColorClamp::get_MaxComponents() */ },
		{ /* #3491 = 0x1B45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBC8 /* System.Void CoreImage.CIColorClamp::set_MaxComponents(CoreImage.CIVector) */ },
		{ /* #3492 = 0x1B47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBC9 /* CoreImage.CIImage CoreImage.CIColorClamp::get_OutputImage() */ },
		{ /* #3493 = 0x1B49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBBF /* System.Void CoreImage.CIColorClamp::.ctor() */ },
		{ /* #3494 = 0x1B4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBC2 /* System.Void CoreImage.CIColorClamp::.ctor(Foundation.NSCoder) */ },
		{ /* #3495 = 0x1B4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016B3 /* CoreImage.ICIColorControlsProtocol */ },
		{ /* #3496 = 0x1B4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016B4 /* CoreImage.CIColorControlsProtocolWrapper */ },
		{ /* #3497 = 0x1B51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016B2 /* CoreImage.CIColorControls */ },
		{ /* #3498 = 0x1B53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBDC /* CoreImage.CIImage CoreImage.CIColorControls::get_InputImage() */ },
		{ /* #3499 = 0x1B55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBDD /* System.Void CoreImage.CIColorControls::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3500 = 0x1B57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBDE /* System.Single CoreImage.CIColorControls::get_Saturation() */ },
		{ /* #3501 = 0x1B59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBDF /* System.Void CoreImage.CIColorControls::set_Saturation(System.Single) */ },
		{ /* #3502 = 0x1B5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBE0 /* System.Single CoreImage.CIColorControls::get_Brightness() */ },
		{ /* #3503 = 0x1B5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBE1 /* System.Void CoreImage.CIColorControls::set_Brightness(System.Single) */ },
		{ /* #3504 = 0x1B5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBE2 /* System.Single CoreImage.CIColorControls::get_Contrast() */ },
		{ /* #3505 = 0x1B61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBE3 /* System.Void CoreImage.CIColorControls::set_Contrast(System.Single) */ },
		{ /* #3506 = 0x1B63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBE4 /* CoreImage.CIImage CoreImage.CIColorControls::get_OutputImage() */ },
		{ /* #3507 = 0x1B65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBD8 /* System.Void CoreImage.CIColorControls::.ctor() */ },
		{ /* #3508 = 0x1B67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBDB /* System.Void CoreImage.CIColorControls::.ctor(Foundation.NSCoder) */ },
		{ /* #3509 = 0x1B69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016B6 /* CoreImage.ICIColorCrossPolynomialProtocol */ },
		{ /* #3510 = 0x1B6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016B7 /* CoreImage.CIColorCrossPolynomialProtocolWrapper */ },
		{ /* #3511 = 0x1B6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016B5 /* CoreImage.CIColorCrossPolynomial */ },
		{ /* #3512 = 0x1B6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBFC /* CoreImage.CIImage CoreImage.CIColorCrossPolynomial::get_InputImage() */ },
		{ /* #3513 = 0x1B71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBFD /* System.Void CoreImage.CIColorCrossPolynomial::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3514 = 0x1B73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBFE /* CoreImage.CIVector CoreImage.CIColorCrossPolynomial::get_RedCoefficients() */ },
		{ /* #3515 = 0x1B75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBFF /* System.Void CoreImage.CIColorCrossPolynomial::set_RedCoefficients(CoreImage.CIVector) */ },
		{ /* #3516 = 0x1B77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC00 /* CoreImage.CIVector CoreImage.CIColorCrossPolynomial::get_GreenCoefficients() */ },
		{ /* #3517 = 0x1B79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC01 /* System.Void CoreImage.CIColorCrossPolynomial::set_GreenCoefficients(CoreImage.CIVector) */ },
		{ /* #3518 = 0x1B7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC02 /* CoreImage.CIVector CoreImage.CIColorCrossPolynomial::get_BlueCoefficients() */ },
		{ /* #3519 = 0x1B7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC03 /* System.Void CoreImage.CIColorCrossPolynomial::set_BlueCoefficients(CoreImage.CIVector) */ },
		{ /* #3520 = 0x1B7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC04 /* CoreImage.CIImage CoreImage.CIColorCrossPolynomial::get_OutputImage() */ },
		{ /* #3521 = 0x1B81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBF7 /* System.Void CoreImage.CIColorCrossPolynomial::.ctor() */ },
		{ /* #3522 = 0x1B83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DBFA /* System.Void CoreImage.CIColorCrossPolynomial::.ctor(Foundation.NSCoder) */ },
		{ /* #3523 = 0x1B85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016B9 /* CoreImage.ICIColorCubeProtocol */ },
		{ /* #3524 = 0x1B87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016BB /* CoreImage.CIColorCubeProtocolWrapper */ },
		{ /* #3525 = 0x1B89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016B8 /* CoreImage.CIColorCube */ },
		{ /* #3526 = 0x1B8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC1C /* CoreImage.CIImage CoreImage.CIColorCube::get_InputImage() */ },
		{ /* #3527 = 0x1B8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC1D /* System.Void CoreImage.CIColorCube::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3528 = 0x1B8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC1E /* System.Single CoreImage.CIColorCube::get_CubeDimension() */ },
		{ /* #3529 = 0x1B91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC1F /* System.Void CoreImage.CIColorCube::set_CubeDimension(System.Single) */ },
		{ /* #3530 = 0x1B93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC20 /* Foundation.NSData CoreImage.CIColorCube::get_CubeData() */ },
		{ /* #3531 = 0x1B95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC21 /* System.Void CoreImage.CIColorCube::set_CubeData(Foundation.NSData) */ },
		{ /* #3532 = 0x1B97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC22 /* System.Boolean CoreImage.CIColorCube::get_Extrapolate() */ },
		{ /* #3533 = 0x1B99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC23 /* System.Void CoreImage.CIColorCube::set_Extrapolate(System.Boolean) */ },
		{ /* #3534 = 0x1B9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC24 /* CoreImage.CIImage CoreImage.CIColorCube::get_OutputImage() */ },
		{ /* #3535 = 0x1B9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC17 /* System.Void CoreImage.CIColorCube::.ctor() */ },
		{ /* #3536 = 0x1B9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC1A /* System.Void CoreImage.CIColorCube::.ctor(Foundation.NSCoder) */ },
		{ /* #3537 = 0x1BA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016BD /* CoreImage.ICIColorCubesMixedWithMaskProtocol */ },
		{ /* #3538 = 0x1BA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016BF /* CoreImage.CIColorCubesMixedWithMaskProtocolWrapper */ },
		{ /* #3539 = 0x1BA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016BC /* CoreImage.CIColorCubesMixedWithMask */ },
		{ /* #3540 = 0x1BA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC39 /* CoreImage.CIImage CoreImage.CIColorCubesMixedWithMask::get_InputImage() */ },
		{ /* #3541 = 0x1BA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC3A /* System.Void CoreImage.CIColorCubesMixedWithMask::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3542 = 0x1BAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC3B /* CoreImage.CIImage CoreImage.CIColorCubesMixedWithMask::get_MaskImage() */ },
		{ /* #3543 = 0x1BAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC3C /* System.Void CoreImage.CIColorCubesMixedWithMask::set_MaskImage(CoreImage.CIImage) */ },
		{ /* #3544 = 0x1BAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC3D /* System.Single CoreImage.CIColorCubesMixedWithMask::get_CubeDimension() */ },
		{ /* #3545 = 0x1BB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC3E /* System.Void CoreImage.CIColorCubesMixedWithMask::set_CubeDimension(System.Single) */ },
		{ /* #3546 = 0x1BB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC3F /* Foundation.NSData CoreImage.CIColorCubesMixedWithMask::get_Cube0Data() */ },
		{ /* #3547 = 0x1BB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC40 /* System.Void CoreImage.CIColorCubesMixedWithMask::set_Cube0Data(Foundation.NSData) */ },
		{ /* #3548 = 0x1BB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC41 /* Foundation.NSData CoreImage.CIColorCubesMixedWithMask::get_Cube1Data() */ },
		{ /* #3549 = 0x1BB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC42 /* System.Void CoreImage.CIColorCubesMixedWithMask::set_Cube1Data(Foundation.NSData) */ },
		{ /* #3550 = 0x1BBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC43 /* CoreGraphics.CGColorSpace CoreImage.CIColorCubesMixedWithMask::get_ColorSpace() */ },
		{ /* #3551 = 0x1BBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC44 /* System.Void CoreImage.CIColorCubesMixedWithMask::set_ColorSpace(CoreGraphics.CGColorSpace) */ },
		{ /* #3552 = 0x1BBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC45 /* System.Boolean CoreImage.CIColorCubesMixedWithMask::get_Extrapolate() */ },
		{ /* #3553 = 0x1BC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC46 /* System.Void CoreImage.CIColorCubesMixedWithMask::set_Extrapolate(System.Boolean) */ },
		{ /* #3554 = 0x1BC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC47 /* CoreImage.CIImage CoreImage.CIColorCubesMixedWithMask::get_OutputImage() */ },
		{ /* #3555 = 0x1BC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC35 /* System.Void CoreImage.CIColorCubesMixedWithMask::.ctor() */ },
		{ /* #3556 = 0x1BC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC38 /* System.Void CoreImage.CIColorCubesMixedWithMask::.ctor(Foundation.NSCoder) */ },
		{ /* #3557 = 0x1BC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016C1 /* CoreImage.ICIColorCubeWithColorSpaceProtocol */ },
		{ /* #3558 = 0x1BCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016C3 /* CoreImage.CIColorCubeWithColorSpaceProtocolWrapper */ },
		{ /* #3559 = 0x1BCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016C0 /* CoreImage.CIColorCubeWithColorSpace */ },
		{ /* #3560 = 0x1BCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC68 /* CoreImage.CIImage CoreImage.CIColorCubeWithColorSpace::get_InputImage() */ },
		{ /* #3561 = 0x1BD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC69 /* System.Void CoreImage.CIColorCubeWithColorSpace::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3562 = 0x1BD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC6A /* System.Single CoreImage.CIColorCubeWithColorSpace::get_CubeDimension() */ },
		{ /* #3563 = 0x1BD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC6B /* System.Void CoreImage.CIColorCubeWithColorSpace::set_CubeDimension(System.Single) */ },
		{ /* #3564 = 0x1BD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC6C /* Foundation.NSData CoreImage.CIColorCubeWithColorSpace::get_CubeData() */ },
		{ /* #3565 = 0x1BD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC6D /* System.Void CoreImage.CIColorCubeWithColorSpace::set_CubeData(Foundation.NSData) */ },
		{ /* #3566 = 0x1BDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC6E /* CoreGraphics.CGColorSpace CoreImage.CIColorCubeWithColorSpace::get_ColorSpace() */ },
		{ /* #3567 = 0x1BDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC6F /* System.Void CoreImage.CIColorCubeWithColorSpace::set_ColorSpace(CoreGraphics.CGColorSpace) */ },
		{ /* #3568 = 0x1BDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC70 /* System.Boolean CoreImage.CIColorCubeWithColorSpace::get_Extrapolate() */ },
		{ /* #3569 = 0x1BE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC71 /* System.Void CoreImage.CIColorCubeWithColorSpace::set_Extrapolate(System.Boolean) */ },
		{ /* #3570 = 0x1BE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC72 /* CoreImage.CIImage CoreImage.CIColorCubeWithColorSpace::get_OutputImage() */ },
		{ /* #3571 = 0x1BE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC64 /* System.Void CoreImage.CIColorCubeWithColorSpace::.ctor() */ },
		{ /* #3572 = 0x1BE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC67 /* System.Void CoreImage.CIColorCubeWithColorSpace::.ctor(Foundation.NSCoder) */ },
		{ /* #3573 = 0x1BE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016C5 /* CoreImage.ICIColorCurvesProtocol */ },
		{ /* #3574 = 0x1BEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016C6 /* CoreImage.CIColorCurvesProtocolWrapper */ },
		{ /* #3575 = 0x1BED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016C4 /* CoreImage.CIColorCurves */ },
		{ /* #3576 = 0x1BEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC8B /* CoreImage.CIImage CoreImage.CIColorCurves::get_InputImage() */ },
		{ /* #3577 = 0x1BF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC8C /* System.Void CoreImage.CIColorCurves::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3578 = 0x1BF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC8D /* Foundation.NSData CoreImage.CIColorCurves::get_CurvesData() */ },
		{ /* #3579 = 0x1BF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC8E /* System.Void CoreImage.CIColorCurves::set_CurvesData(Foundation.NSData) */ },
		{ /* #3580 = 0x1BF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC8F /* CoreImage.CIVector CoreImage.CIColorCurves::get_CurvesDomain() */ },
		{ /* #3581 = 0x1BF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC90 /* System.Void CoreImage.CIColorCurves::set_CurvesDomain(CoreImage.CIVector) */ },
		{ /* #3582 = 0x1BFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC91 /* CoreGraphics.CGColorSpace CoreImage.CIColorCurves::get_ColorSpace() */ },
		{ /* #3583 = 0x1BFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC92 /* System.Void CoreImage.CIColorCurves::set_ColorSpace(CoreGraphics.CGColorSpace) */ },
		{ /* #3584 = 0x1BFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC93 /* CoreImage.CIImage CoreImage.CIColorCurves::get_OutputImage() */ },
		{ /* #3585 = 0x1C01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC87 /* System.Void CoreImage.CIColorCurves::.ctor() */ },
		{ /* #3586 = 0x1C03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DC8A /* System.Void CoreImage.CIColorCurves::.ctor(Foundation.NSCoder) */ },
		{ /* #3587 = 0x1C05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016C7 /* CoreImage.CIColorDodgeBlendMode */ },
		{ /* #3588 = 0x1C07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCA6 /* System.Void CoreImage.CIColorDodgeBlendMode::.ctor() */ },
		{ /* #3589 = 0x1C09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCA9 /* System.Void CoreImage.CIColorDodgeBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #3590 = 0x1C0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016C9 /* CoreImage.ICIColorInvertProtocol */ },
		{ /* #3591 = 0x1C0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016CA /* CoreImage.CIColorInvertProtocolWrapper */ },
		{ /* #3592 = 0x1C0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016C8 /* CoreImage.CIColorInvert */ },
		{ /* #3593 = 0x1C11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCAE /* CoreImage.CIImage CoreImage.CIColorInvert::get_InputImage() */ },
		{ /* #3594 = 0x1C13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCAF /* System.Void CoreImage.CIColorInvert::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3595 = 0x1C15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCB0 /* CoreImage.CIImage CoreImage.CIColorInvert::get_OutputImage() */ },
		{ /* #3596 = 0x1C17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCAA /* System.Void CoreImage.CIColorInvert::.ctor() */ },
		{ /* #3597 = 0x1C19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCAD /* System.Void CoreImage.CIColorInvert::.ctor(Foundation.NSCoder) */ },
		{ /* #3598 = 0x1C1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016CD /* CoreImage.ICIColorMapProtocol */ },
		{ /* #3599 = 0x1C1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016CE /* CoreImage.CIColorMapProtocolWrapper */ },
		{ /* #3600 = 0x1C1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016CC /* CoreImage.CIColorMap */ },
		{ /* #3601 = 0x1C21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCC1 /* CoreImage.CIImage CoreImage.CIColorMap::get_InputImage() */ },
		{ /* #3602 = 0x1C23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCC2 /* System.Void CoreImage.CIColorMap::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3603 = 0x1C25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCC3 /* CoreImage.CIImage CoreImage.CIColorMap::get_GradientImage() */ },
		{ /* #3604 = 0x1C27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCC4 /* System.Void CoreImage.CIColorMap::set_GradientImage(CoreImage.CIImage) */ },
		{ /* #3605 = 0x1C29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCC5 /* CoreImage.CIImage CoreImage.CIColorMap::get_OutputImage() */ },
		{ /* #3606 = 0x1C2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCBD /* System.Void CoreImage.CIColorMap::.ctor() */ },
		{ /* #3607 = 0x1C2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCC0 /* System.Void CoreImage.CIColorMap::.ctor(Foundation.NSCoder) */ },
		{ /* #3608 = 0x1C2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016D0 /* CoreImage.ICIColorMatrixProtocol */ },
		{ /* #3609 = 0x1C31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016D1 /* CoreImage.CIColorMatrixProtocolWrapper */ },
		{ /* #3610 = 0x1C33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016CF /* CoreImage.CIColorMatrix */ },
		{ /* #3611 = 0x1C35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCD4 /* CoreImage.CIImage CoreImage.CIColorMatrix::get_InputImage() */ },
		{ /* #3612 = 0x1C37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCD5 /* System.Void CoreImage.CIColorMatrix::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3613 = 0x1C39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCD6 /* CoreImage.CIVector CoreImage.CIColorMatrix::get_RVector() */ },
		{ /* #3614 = 0x1C3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCD7 /* System.Void CoreImage.CIColorMatrix::set_RVector(CoreImage.CIVector) */ },
		{ /* #3615 = 0x1C3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCD8 /* CoreImage.CIVector CoreImage.CIColorMatrix::get_GVector() */ },
		{ /* #3616 = 0x1C3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCD9 /* System.Void CoreImage.CIColorMatrix::set_GVector(CoreImage.CIVector) */ },
		{ /* #3617 = 0x1C41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCDA /* CoreImage.CIVector CoreImage.CIColorMatrix::get_BVector() */ },
		{ /* #3618 = 0x1C43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCDB /* System.Void CoreImage.CIColorMatrix::set_BVector(CoreImage.CIVector) */ },
		{ /* #3619 = 0x1C45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCDC /* CoreImage.CIVector CoreImage.CIColorMatrix::get_AVector() */ },
		{ /* #3620 = 0x1C47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCDD /* System.Void CoreImage.CIColorMatrix::set_AVector(CoreImage.CIVector) */ },
		{ /* #3621 = 0x1C49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCDE /* CoreImage.CIVector CoreImage.CIColorMatrix::get_BiasVector() */ },
		{ /* #3622 = 0x1C4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCDF /* System.Void CoreImage.CIColorMatrix::set_BiasVector(CoreImage.CIVector) */ },
		{ /* #3623 = 0x1C4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCE0 /* CoreImage.CIImage CoreImage.CIColorMatrix::get_OutputImage() */ },
		{ /* #3624 = 0x1C4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCD0 /* System.Void CoreImage.CIColorMatrix::.ctor() */ },
		{ /* #3625 = 0x1C51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCD3 /* System.Void CoreImage.CIColorMatrix::.ctor(Foundation.NSCoder) */ },
		{ /* #3626 = 0x1C53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016D3 /* CoreImage.ICIColorMonochromeProtocol */ },
		{ /* #3627 = 0x1C55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016D4 /* CoreImage.CIColorMonochromeProtocolWrapper */ },
		{ /* #3628 = 0x1C57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016D2 /* CoreImage.CIColorMonochrome */ },
		{ /* #3629 = 0x1C59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCFF /* CoreImage.CIImage CoreImage.CIColorMonochrome::get_InputImage() */ },
		{ /* #3630 = 0x1C5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD00 /* System.Void CoreImage.CIColorMonochrome::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3631 = 0x1C5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD01 /* CoreImage.CIColor CoreImage.CIColorMonochrome::get_Color() */ },
		{ /* #3632 = 0x1C5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD02 /* System.Void CoreImage.CIColorMonochrome::set_Color(CoreImage.CIColor) */ },
		{ /* #3633 = 0x1C61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD03 /* System.Single CoreImage.CIColorMonochrome::get_Intensity() */ },
		{ /* #3634 = 0x1C63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD04 /* System.Void CoreImage.CIColorMonochrome::set_Intensity(System.Single) */ },
		{ /* #3635 = 0x1C65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD05 /* CoreImage.CIImage CoreImage.CIColorMonochrome::get_OutputImage() */ },
		{ /* #3636 = 0x1C67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCFB /* System.Void CoreImage.CIColorMonochrome::.ctor() */ },
		{ /* #3637 = 0x1C69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DCFE /* System.Void CoreImage.CIColorMonochrome::.ctor(Foundation.NSCoder) */ },
		{ /* #3638 = 0x1C6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016D6 /* CoreImage.ICIColorPolynomialProtocol */ },
		{ /* #3639 = 0x1C6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016D7 /* CoreImage.CIColorPolynomialProtocolWrapper */ },
		{ /* #3640 = 0x1C6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016D5 /* CoreImage.CIColorPolynomial */ },
		{ /* #3641 = 0x1C71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD18 /* CoreImage.CIImage CoreImage.CIColorPolynomial::get_InputImage() */ },
		{ /* #3642 = 0x1C73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD19 /* System.Void CoreImage.CIColorPolynomial::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3643 = 0x1C75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD1A /* CoreImage.CIVector CoreImage.CIColorPolynomial::get_RedCoefficients() */ },
		{ /* #3644 = 0x1C77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD1B /* System.Void CoreImage.CIColorPolynomial::set_RedCoefficients(CoreImage.CIVector) */ },
		{ /* #3645 = 0x1C79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD1C /* CoreImage.CIVector CoreImage.CIColorPolynomial::get_GreenCoefficients() */ },
		{ /* #3646 = 0x1C7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD1D /* System.Void CoreImage.CIColorPolynomial::set_GreenCoefficients(CoreImage.CIVector) */ },
		{ /* #3647 = 0x1C7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD1E /* CoreImage.CIVector CoreImage.CIColorPolynomial::get_BlueCoefficients() */ },
		{ /* #3648 = 0x1C7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD1F /* System.Void CoreImage.CIColorPolynomial::set_BlueCoefficients(CoreImage.CIVector) */ },
		{ /* #3649 = 0x1C81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD20 /* CoreImage.CIVector CoreImage.CIColorPolynomial::get_AlphaCoefficients() */ },
		{ /* #3650 = 0x1C83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD21 /* System.Void CoreImage.CIColorPolynomial::set_AlphaCoefficients(CoreImage.CIVector) */ },
		{ /* #3651 = 0x1C85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD22 /* CoreImage.CIImage CoreImage.CIColorPolynomial::get_OutputImage() */ },
		{ /* #3652 = 0x1C87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD14 /* System.Void CoreImage.CIColorPolynomial::.ctor() */ },
		{ /* #3653 = 0x1C89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD17 /* System.Void CoreImage.CIColorPolynomial::.ctor(Foundation.NSCoder) */ },
		{ /* #3654 = 0x1C8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016D9 /* CoreImage.ICIColorPosterizeProtocol */ },
		{ /* #3655 = 0x1C8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016DA /* CoreImage.CIColorPosterizeProtocolWrapper */ },
		{ /* #3656 = 0x1C8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016D8 /* CoreImage.CIColorPosterize */ },
		{ /* #3657 = 0x1C91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD3D /* CoreImage.CIImage CoreImage.CIColorPosterize::get_InputImage() */ },
		{ /* #3658 = 0x1C93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD3E /* System.Void CoreImage.CIColorPosterize::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3659 = 0x1C95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD3F /* System.Single CoreImage.CIColorPosterize::get_Levels() */ },
		{ /* #3660 = 0x1C97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD40 /* System.Void CoreImage.CIColorPosterize::set_Levels(System.Single) */ },
		{ /* #3661 = 0x1C99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD41 /* CoreImage.CIImage CoreImage.CIColorPosterize::get_OutputImage() */ },
		{ /* #3662 = 0x1C9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD39 /* System.Void CoreImage.CIColorPosterize::.ctor() */ },
		{ /* #3663 = 0x1C9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD3C /* System.Void CoreImage.CIColorPosterize::.ctor(Foundation.NSCoder) */ },
		{ /* #3664 = 0x1C9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016DF /* CoreImage.ICIColorThresholdProtocol */ },
		{ /* #3665 = 0x1CA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016E0 /* CoreImage.CIColorThresholdProtocolWrapper */ },
		{ /* #3666 = 0x1CA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016DB /* CoreImage.CIColorThreshold */ },
		{ /* #3667 = 0x1CA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD50 /* CoreImage.CIImage CoreImage.CIColorThreshold::get_InputImage() */ },
		{ /* #3668 = 0x1CA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD51 /* System.Void CoreImage.CIColorThreshold::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3669 = 0x1CA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD52 /* System.Single CoreImage.CIColorThreshold::get_Threshold() */ },
		{ /* #3670 = 0x1CAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD53 /* System.Void CoreImage.CIColorThreshold::set_Threshold(System.Single) */ },
		{ /* #3671 = 0x1CAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD54 /* CoreImage.CIImage CoreImage.CIColorThreshold::get_OutputImage() */ },
		{ /* #3672 = 0x1CAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD4C /* System.Void CoreImage.CIColorThreshold::.ctor() */ },
		{ /* #3673 = 0x1CB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD4F /* System.Void CoreImage.CIColorThreshold::.ctor(Foundation.NSCoder) */ },
		{ /* #3674 = 0x1CB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016DD /* CoreImage.ICIColorThresholdOtsuProtocol */ },
		{ /* #3675 = 0x1CB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016DE /* CoreImage.CIColorThresholdOtsuProtocolWrapper */ },
		{ /* #3676 = 0x1CB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016DC /* CoreImage.CIColorThresholdOtsu */ },
		{ /* #3677 = 0x1CB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD59 /* CoreImage.CIImage CoreImage.CIColorThresholdOtsu::get_InputImage() */ },
		{ /* #3678 = 0x1CBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD5A /* System.Void CoreImage.CIColorThresholdOtsu::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3679 = 0x1CBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD5B /* CoreImage.CIImage CoreImage.CIColorThresholdOtsu::get_OutputImage() */ },
		{ /* #3680 = 0x1CBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD55 /* System.Void CoreImage.CIColorThresholdOtsu::.ctor() */ },
		{ /* #3681 = 0x1CC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD58 /* System.Void CoreImage.CIColorThresholdOtsu::.ctor(Foundation.NSCoder) */ },
		{ /* #3682 = 0x1CC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016E2 /* CoreImage.ICIColumnAverageProtocol */ },
		{ /* #3683 = 0x1CC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016E3 /* CoreImage.CIColumnAverageProtocolWrapper */ },
		{ /* #3684 = 0x1CC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016E1 /* CoreImage.CIColumnAverage */ },
		{ /* #3685 = 0x1CC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD70 /* CoreImage.CIImage CoreImage.CIColumnAverage::get_InputImage() */ },
		{ /* #3686 = 0x1CCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD71 /* System.Void CoreImage.CIColumnAverage::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3687 = 0x1CCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD72 /* CoreGraphics.CGRect CoreImage.CIColumnAverage::get_InputExtent() */ },
		{ /* #3688 = 0x1CCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD73 /* System.Void CoreImage.CIColumnAverage::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #3689 = 0x1CD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD74 /* CoreImage.CIImage CoreImage.CIColumnAverage::get_OutputImage() */ },
		{ /* #3690 = 0x1CD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD6C /* System.Void CoreImage.CIColumnAverage::.ctor() */ },
		{ /* #3691 = 0x1CD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD6F /* System.Void CoreImage.CIColumnAverage::.ctor(Foundation.NSCoder) */ },
		{ /* #3692 = 0x1CD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016E5 /* CoreImage.ICIComicEffectProtocol */ },
		{ /* #3693 = 0x1CD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016E6 /* CoreImage.CIComicEffectProtocolWrapper */ },
		{ /* #3694 = 0x1CDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016E4 /* CoreImage.CIComicEffect */ },
		{ /* #3695 = 0x1CDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD7F /* CoreImage.CIImage CoreImage.CIComicEffect::get_InputImage() */ },
		{ /* #3696 = 0x1CDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD80 /* System.Void CoreImage.CIComicEffect::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3697 = 0x1CE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD81 /* CoreImage.CIImage CoreImage.CIComicEffect::get_OutputImage() */ },
		{ /* #3698 = 0x1CE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD7B /* System.Void CoreImage.CIComicEffect::.ctor() */ },
		{ /* #3699 = 0x1CE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD7E /* System.Void CoreImage.CIComicEffect::.ctor(Foundation.NSCoder) */ },
		{ /* #3700 = 0x1CE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016E7 /* CoreImage.ICICompositeOperationProtocol */ },
		{ /* #3701 = 0x1CE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016E8 /* CoreImage.CICompositeOperationProtocolWrapper */ },
		{ /* #3702 = 0x1CEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016EA /* CoreImage.CIConstantColorGenerator */ },
		{ /* #3703 = 0x1CED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD9A /* System.Void CoreImage.CIConstantColorGenerator::.ctor() */ },
		{ /* #3704 = 0x1CEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DD9D /* System.Void CoreImage.CIConstantColorGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #3705 = 0x1CF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016EE /* CoreImage.ICIConvertLabProtocol */ },
		{ /* #3706 = 0x1CF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016EF /* CoreImage.CIConvertLabProtocolWrapper */ },
		{ /* #3707 = 0x1CF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016F5 /* CoreImage.CIConvolutionCore */ },
		{ /* #3708 = 0x1CF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDE0 /* System.Void CoreImage.CIConvolutionCore::.ctor(Foundation.NSCoder) */ },
		{ /* #3709 = 0x1CF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016F0 /* CoreImage.CIConvolution3X3 */ },
		{ /* #3710 = 0x1CFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDCA /* System.Void CoreImage.CIConvolution3X3::.ctor() */ },
		{ /* #3711 = 0x1CFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDCD /* System.Void CoreImage.CIConvolution3X3::.ctor(Foundation.NSCoder) */ },
		{ /* #3712 = 0x1CFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016F1 /* CoreImage.CIConvolution5X5 */ },
		{ /* #3713 = 0x1D01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDCE /* System.Void CoreImage.CIConvolution5X5::.ctor() */ },
		{ /* #3714 = 0x1D03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDD1 /* System.Void CoreImage.CIConvolution5X5::.ctor(Foundation.NSCoder) */ },
		{ /* #3715 = 0x1D05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016F2 /* CoreImage.CIConvolution7X7 */ },
		{ /* #3716 = 0x1D07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDD2 /* System.Void CoreImage.CIConvolution7X7::.ctor() */ },
		{ /* #3717 = 0x1D09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDD5 /* System.Void CoreImage.CIConvolution7X7::.ctor(Foundation.NSCoder) */ },
		{ /* #3718 = 0x1D0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016F3 /* CoreImage.CIConvolution9Horizontal */ },
		{ /* #3719 = 0x1D0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDD6 /* System.Void CoreImage.CIConvolution9Horizontal::.ctor() */ },
		{ /* #3720 = 0x1D0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDD9 /* System.Void CoreImage.CIConvolution9Horizontal::.ctor(Foundation.NSCoder) */ },
		{ /* #3721 = 0x1D11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016F4 /* CoreImage.CIConvolution9Vertical */ },
		{ /* #3722 = 0x1D13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDDA /* System.Void CoreImage.CIConvolution9Vertical::.ctor() */ },
		{ /* #3723 = 0x1D15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDDD /* System.Void CoreImage.CIConvolution9Vertical::.ctor(Foundation.NSCoder) */ },
		{ /* #3724 = 0x1D17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016F6 /* CoreImage.ICIConvolutionProtocol */ },
		{ /* #3725 = 0x1D19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016F7 /* CoreImage.CIConvolutionProtocolWrapper */ },
		{ /* #3726 = 0x1D1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016F8 /* CoreImage.CIConvolutionRGB3X3 */ },
		{ /* #3727 = 0x1D1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE00 /* CoreImage.CIImage CoreImage.CIConvolutionRGB3X3::get_OutputImage() */ },
		{ /* #3728 = 0x1D1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDF6 /* System.Void CoreImage.CIConvolutionRGB3X3::.ctor() */ },
		{ /* #3729 = 0x1D21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DDF9 /* System.Void CoreImage.CIConvolutionRGB3X3::.ctor(Foundation.NSCoder) */ },
		{ /* #3730 = 0x1D23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016F9 /* CoreImage.CIConvolutionRGB5X5 */ },
		{ /* #3731 = 0x1D25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE0B /* CoreImage.CIImage CoreImage.CIConvolutionRGB5X5::get_OutputImage() */ },
		{ /* #3732 = 0x1D27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE01 /* System.Void CoreImage.CIConvolutionRGB5X5::.ctor() */ },
		{ /* #3733 = 0x1D29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE04 /* System.Void CoreImage.CIConvolutionRGB5X5::.ctor(Foundation.NSCoder) */ },
		{ /* #3734 = 0x1D2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016FA /* CoreImage.CIConvolutionRGB7X7 */ },
		{ /* #3735 = 0x1D2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE16 /* CoreImage.CIImage CoreImage.CIConvolutionRGB7X7::get_OutputImage() */ },
		{ /* #3736 = 0x1D2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE0C /* System.Void CoreImage.CIConvolutionRGB7X7::.ctor() */ },
		{ /* #3737 = 0x1D31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE0F /* System.Void CoreImage.CIConvolutionRGB7X7::.ctor(Foundation.NSCoder) */ },
		{ /* #3738 = 0x1D33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016FB /* CoreImage.CIConvolutionRGB9Horizontal */ },
		{ /* #3739 = 0x1D35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE21 /* CoreImage.CIImage CoreImage.CIConvolutionRGB9Horizontal::get_OutputImage() */ },
		{ /* #3740 = 0x1D37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE17 /* System.Void CoreImage.CIConvolutionRGB9Horizontal::.ctor() */ },
		{ /* #3741 = 0x1D39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE1A /* System.Void CoreImage.CIConvolutionRGB9Horizontal::.ctor(Foundation.NSCoder) */ },
		{ /* #3742 = 0x1D3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016FC /* CoreImage.CIConvolutionRGB9Vertical */ },
		{ /* #3743 = 0x1D3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE2C /* CoreImage.CIImage CoreImage.CIConvolutionRGB9Vertical::get_OutputImage() */ },
		{ /* #3744 = 0x1D3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE22 /* System.Void CoreImage.CIConvolutionRGB9Vertical::.ctor() */ },
		{ /* #3745 = 0x1D41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE25 /* System.Void CoreImage.CIConvolutionRGB9Vertical::.ctor(Foundation.NSCoder) */ },
		{ /* #3746 = 0x1D43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016FD /* CoreImage.CICopyMachineTransition */ },
		{ /* #3747 = 0x1D45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE2D /* System.Void CoreImage.CICopyMachineTransition::.ctor() */ },
		{ /* #3748 = 0x1D47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE30 /* System.Void CoreImage.CICopyMachineTransition::.ctor(Foundation.NSCoder) */ },
		{ /* #3749 = 0x1D49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016FE /* CoreImage.ICICopyMachineTransitionProtocol */ },
		{ /* #3750 = 0x1D4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20016FF /* CoreImage.CICopyMachineTransitionProtocolWrapper */ },
		{ /* #3751 = 0x1D4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001700 /* CoreImage.CICoreMLModelFilter */ },
		{ /* #3752 = 0x1D4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE51 /* System.Void CoreImage.CICoreMLModelFilter::.ctor() */ },
		{ /* #3753 = 0x1D51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE54 /* System.Void CoreImage.CICoreMLModelFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #3754 = 0x1D53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001701 /* CoreImage.ICICoreMLModelProtocol */ },
		{ /* #3755 = 0x1D55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001702 /* CoreImage.CICoreMLModelProtocolWrapper */ },
		{ /* #3756 = 0x1D57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001703 /* CoreImage.CICrop */ },
		{ /* #3757 = 0x1D59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE6F /* System.Void CoreImage.CICrop::.ctor() */ },
		{ /* #3758 = 0x1D5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE72 /* System.Void CoreImage.CICrop::.ctor(Foundation.NSCoder) */ },
		{ /* #3759 = 0x1D5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001705 /* CoreImage.ICICrystallizeProtocol */ },
		{ /* #3760 = 0x1D5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001706 /* CoreImage.CICrystallizeProtocolWrapper */ },
		{ /* #3761 = 0x1D61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001704 /* CoreImage.CICrystallize */ },
		{ /* #3762 = 0x1D63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE7B /* CoreImage.CIImage CoreImage.CICrystallize::get_InputImage() */ },
		{ /* #3763 = 0x1D65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE7C /* System.Void CoreImage.CICrystallize::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3764 = 0x1D67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE7D /* System.Single CoreImage.CICrystallize::get_Radius() */ },
		{ /* #3765 = 0x1D69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE7E /* System.Void CoreImage.CICrystallize::set_Radius(System.Single) */ },
		{ /* #3766 = 0x1D6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE7F /* CoreGraphics.CGPoint CoreImage.CICrystallize::get_InputCenter() */ },
		{ /* #3767 = 0x1D6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE80 /* System.Void CoreImage.CICrystallize::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #3768 = 0x1D6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE81 /* CoreImage.CIImage CoreImage.CICrystallize::get_OutputImage() */ },
		{ /* #3769 = 0x1D71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE77 /* System.Void CoreImage.CICrystallize::.ctor() */ },
		{ /* #3770 = 0x1D73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE7A /* System.Void CoreImage.CICrystallize::.ctor(Foundation.NSCoder) */ },
		{ /* #3771 = 0x1D75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001707 /* CoreImage.CIDarkenBlendMode */ },
		{ /* #3772 = 0x1D77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE90 /* System.Void CoreImage.CIDarkenBlendMode::.ctor() */ },
		{ /* #3773 = 0x1D79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DE93 /* System.Void CoreImage.CIDarkenBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #3774 = 0x1D7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001708 /* CoreImage.CIDataMatrixCodeDescriptor */ },
		{ /* #3775 = 0x1D7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200170A /* CoreImage.CIDepthBlurEffect */ },
		{ /* #3776 = 0x1D7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DEA0 /* System.Void CoreImage.CIDepthBlurEffect::.ctor() */ },
		{ /* #3777 = 0x1D81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DEA3 /* System.Void CoreImage.CIDepthBlurEffect::.ctor(Foundation.NSCoder) */ },
		{ /* #3778 = 0x1D83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200170B /* CoreImage.CIDepthDisparityConverter */ },
		{ /* #3779 = 0x1D85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DEC8 /* System.Void CoreImage.CIDepthDisparityConverter::.ctor(Foundation.NSCoder) */ },
		{ /* #3780 = 0x1D87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200170D /* CoreImage.ICIDepthOfFieldProtocol */ },
		{ /* #3781 = 0x1D89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200170E /* CoreImage.CIDepthOfFieldProtocolWrapper */ },
		{ /* #3782 = 0x1D8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200170C /* CoreImage.CIDepthOfField */ },
		{ /* #3783 = 0x1D8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DECE /* CoreImage.CIImage CoreImage.CIDepthOfField::get_InputImage() */ },
		{ /* #3784 = 0x1D8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DECF /* System.Void CoreImage.CIDepthOfField::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3785 = 0x1D91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DED0 /* CoreGraphics.CGPoint CoreImage.CIDepthOfField::get_InputPoint0() */ },
		{ /* #3786 = 0x1D93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DED1 /* System.Void CoreImage.CIDepthOfField::set_InputPoint0(CoreGraphics.CGPoint) */ },
		{ /* #3787 = 0x1D95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DED2 /* CoreGraphics.CGPoint CoreImage.CIDepthOfField::get_InputPoint1() */ },
		{ /* #3788 = 0x1D97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DED3 /* System.Void CoreImage.CIDepthOfField::set_InputPoint1(CoreGraphics.CGPoint) */ },
		{ /* #3789 = 0x1D99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DED4 /* System.Single CoreImage.CIDepthOfField::get_Saturation() */ },
		{ /* #3790 = 0x1D9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DED5 /* System.Void CoreImage.CIDepthOfField::set_Saturation(System.Single) */ },
		{ /* #3791 = 0x1D9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DED6 /* System.Single CoreImage.CIDepthOfField::get_UnsharpMaskRadius() */ },
		{ /* #3792 = 0x1D9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DED7 /* System.Void CoreImage.CIDepthOfField::set_UnsharpMaskRadius(System.Single) */ },
		{ /* #3793 = 0x1DA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DED8 /* System.Single CoreImage.CIDepthOfField::get_UnsharpMaskIntensity() */ },
		{ /* #3794 = 0x1DA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DED9 /* System.Void CoreImage.CIDepthOfField::set_UnsharpMaskIntensity(System.Single) */ },
		{ /* #3795 = 0x1DA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DEDA /* System.Single CoreImage.CIDepthOfField::get_Radius() */ },
		{ /* #3796 = 0x1DA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DEDB /* System.Void CoreImage.CIDepthOfField::set_Radius(System.Single) */ },
		{ /* #3797 = 0x1DA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DEDC /* CoreImage.CIImage CoreImage.CIDepthOfField::get_OutputImage() */ },
		{ /* #3798 = 0x1DAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DECA /* System.Void CoreImage.CIDepthOfField::.ctor() */ },
		{ /* #3799 = 0x1DAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DECD /* System.Void CoreImage.CIDepthOfField::.ctor(Foundation.NSCoder) */ },
		{ /* #3800 = 0x1DAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001710 /* CoreImage.ICIDepthToDisparityProtocol */ },
		{ /* #3801 = 0x1DB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001711 /* CoreImage.CIDepthToDisparityProtocolWrapper */ },
		{ /* #3802 = 0x1DB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200170F /* CoreImage.CIDepthToDisparity */ },
		{ /* #3803 = 0x1DB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DEFF /* CoreImage.CIImage CoreImage.CIDepthToDisparity::get_InputImage() */ },
		{ /* #3804 = 0x1DB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF00 /* System.Void CoreImage.CIDepthToDisparity::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3805 = 0x1DB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF01 /* CoreImage.CIImage CoreImage.CIDepthToDisparity::get_OutputImage() */ },
		{ /* #3806 = 0x1DBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DEFB /* System.Void CoreImage.CIDepthToDisparity::.ctor() */ },
		{ /* #3807 = 0x1DBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DEFE /* System.Void CoreImage.CIDepthToDisparity::.ctor(Foundation.NSCoder) */ },
		{ /* #3808 = 0x1DBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001712 /* CoreImage.CIDifferenceBlendMode */ },
		{ /* #3809 = 0x1DC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF08 /* System.Void CoreImage.CIDifferenceBlendMode::.ctor() */ },
		{ /* #3810 = 0x1DC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF0B /* System.Void CoreImage.CIDifferenceBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #3811 = 0x1DC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001714 /* CoreImage.ICIDiscBlurProtocol */ },
		{ /* #3812 = 0x1DC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001715 /* CoreImage.CIDiscBlurProtocolWrapper */ },
		{ /* #3813 = 0x1DC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001713 /* CoreImage.CIDiscBlur */ },
		{ /* #3814 = 0x1DCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF10 /* CoreImage.CIImage CoreImage.CIDiscBlur::get_InputImage() */ },
		{ /* #3815 = 0x1DCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF11 /* System.Void CoreImage.CIDiscBlur::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3816 = 0x1DCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF12 /* System.Single CoreImage.CIDiscBlur::get_Radius() */ },
		{ /* #3817 = 0x1DD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF13 /* System.Void CoreImage.CIDiscBlur::set_Radius(System.Single) */ },
		{ /* #3818 = 0x1DD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF14 /* CoreImage.CIImage CoreImage.CIDiscBlur::get_OutputImage() */ },
		{ /* #3819 = 0x1DD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF0C /* System.Void CoreImage.CIDiscBlur::.ctor() */ },
		{ /* #3820 = 0x1DD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF0F /* System.Void CoreImage.CIDiscBlur::.ctor(Foundation.NSCoder) */ },
		{ /* #3821 = 0x1DD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001717 /* CoreImage.ICIDisintegrateWithMaskTransitionProtocol */ },
		{ /* #3822 = 0x1DDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001718 /* CoreImage.CIDisintegrateWithMaskTransitionProtocolWrapper */ },
		{ /* #3823 = 0x1DDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001716 /* CoreImage.CIDisintegrateWithMaskTransition */ },
		{ /* #3824 = 0x1DDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF23 /* CoreImage.CIImage CoreImage.CIDisintegrateWithMaskTransition::get_MaskImage() */ },
		{ /* #3825 = 0x1DE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF24 /* System.Void CoreImage.CIDisintegrateWithMaskTransition::set_MaskImage(CoreImage.CIImage) */ },
		{ /* #3826 = 0x1DE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF25 /* System.Single CoreImage.CIDisintegrateWithMaskTransition::get_ShadowRadius() */ },
		{ /* #3827 = 0x1DE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF26 /* System.Void CoreImage.CIDisintegrateWithMaskTransition::set_ShadowRadius(System.Single) */ },
		{ /* #3828 = 0x1DE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF27 /* System.Single CoreImage.CIDisintegrateWithMaskTransition::get_ShadowDensity() */ },
		{ /* #3829 = 0x1DE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF28 /* System.Void CoreImage.CIDisintegrateWithMaskTransition::set_ShadowDensity(System.Single) */ },
		{ /* #3830 = 0x1DEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF29 /* CoreGraphics.CGPoint CoreImage.CIDisintegrateWithMaskTransition::get_InputShadowOffset() */ },
		{ /* #3831 = 0x1DED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF2A /* System.Void CoreImage.CIDisintegrateWithMaskTransition::set_InputShadowOffset(CoreGraphics.CGPoint) */ },
		{ /* #3832 = 0x1DEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF2B /* CoreImage.CIImage CoreImage.CIDisintegrateWithMaskTransition::get_OutputImage() */ },
		{ /* #3833 = 0x1DF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF1F /* System.Void CoreImage.CIDisintegrateWithMaskTransition::.ctor() */ },
		{ /* #3834 = 0x1DF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF22 /* System.Void CoreImage.CIDisintegrateWithMaskTransition::.ctor(Foundation.NSCoder) */ },
		{ /* #3835 = 0x1DF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200171A /* CoreImage.ICIDisparityToDepthProtocol */ },
		{ /* #3836 = 0x1DF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200171B /* CoreImage.CIDisparityToDepthProtocolWrapper */ },
		{ /* #3837 = 0x1DF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001719 /* CoreImage.CIDisparityToDepth */ },
		{ /* #3838 = 0x1DFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF42 /* CoreImage.CIImage CoreImage.CIDisparityToDepth::get_InputImage() */ },
		{ /* #3839 = 0x1DFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF43 /* System.Void CoreImage.CIDisparityToDepth::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3840 = 0x1DFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF44 /* CoreImage.CIImage CoreImage.CIDisparityToDepth::get_OutputImage() */ },
		{ /* #3841 = 0x1E01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF3E /* System.Void CoreImage.CIDisparityToDepth::.ctor() */ },
		{ /* #3842 = 0x1E03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF41 /* System.Void CoreImage.CIDisparityToDepth::.ctor(Foundation.NSCoder) */ },
		{ /* #3843 = 0x1E05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200171D /* CoreImage.ICIDisplacementDistortionProtocol */ },
		{ /* #3844 = 0x1E07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200171E /* CoreImage.CIDisplacementDistortionProtocolWrapper */ },
		{ /* #3845 = 0x1E09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200171C /* CoreImage.CIDisplacementDistortion */ },
		{ /* #3846 = 0x1E0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF4F /* CoreImage.CIImage CoreImage.CIDisplacementDistortion::get_InputImage() */ },
		{ /* #3847 = 0x1E0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF50 /* System.Void CoreImage.CIDisplacementDistortion::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3848 = 0x1E0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF51 /* CoreImage.CIImage CoreImage.CIDisplacementDistortion::get_DisplacementImage() */ },
		{ /* #3849 = 0x1E11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF52 /* System.Void CoreImage.CIDisplacementDistortion::set_DisplacementImage(CoreImage.CIImage) */ },
		{ /* #3850 = 0x1E13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF53 /* System.Single CoreImage.CIDisplacementDistortion::get_Scale() */ },
		{ /* #3851 = 0x1E15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF54 /* System.Void CoreImage.CIDisplacementDistortion::set_Scale(System.Single) */ },
		{ /* #3852 = 0x1E17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF55 /* CoreImage.CIImage CoreImage.CIDisplacementDistortion::get_OutputImage() */ },
		{ /* #3853 = 0x1E19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF4B /* System.Void CoreImage.CIDisplacementDistortion::.ctor() */ },
		{ /* #3854 = 0x1E1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF4E /* System.Void CoreImage.CIDisplacementDistortion::.ctor(Foundation.NSCoder) */ },
		{ /* #3855 = 0x1E1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200171F /* CoreImage.CIDissolveTransition */ },
		{ /* #3856 = 0x1E1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF64 /* System.Void CoreImage.CIDissolveTransition::.ctor() */ },
		{ /* #3857 = 0x1E21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF67 /* System.Void CoreImage.CIDissolveTransition::.ctor(Foundation.NSCoder) */ },
		{ /* #3858 = 0x1E23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001720 /* CoreImage.ICIDissolveTransitionProtocol */ },
		{ /* #3859 = 0x1E25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001721 /* CoreImage.CIDissolveTransitionProtocolWrapper */ },
		{ /* #3860 = 0x1E27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001724 /* CoreImage.ICIDitherProtocol */ },
		{ /* #3861 = 0x1E29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001725 /* CoreImage.CIDitherProtocolWrapper */ },
		{ /* #3862 = 0x1E2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001723 /* CoreImage.CIDither */ },
		{ /* #3863 = 0x1E2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF76 /* CoreImage.CIImage CoreImage.CIDither::get_InputImage() */ },
		{ /* #3864 = 0x1E2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF77 /* System.Void CoreImage.CIDither::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3865 = 0x1E31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF78 /* System.Single CoreImage.CIDither::get_Intensity() */ },
		{ /* #3866 = 0x1E33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF79 /* System.Void CoreImage.CIDither::set_Intensity(System.Single) */ },
		{ /* #3867 = 0x1E35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF7A /* CoreImage.CIImage CoreImage.CIDither::get_OutputImage() */ },
		{ /* #3868 = 0x1E37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF72 /* System.Void CoreImage.CIDither::.ctor() */ },
		{ /* #3869 = 0x1E39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF75 /* System.Void CoreImage.CIDither::.ctor(Foundation.NSCoder) */ },
		{ /* #3870 = 0x1E3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001726 /* CoreImage.CIDivideBlendMode */ },
		{ /* #3871 = 0x1E3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF85 /* System.Void CoreImage.CIDivideBlendMode::.ctor() */ },
		{ /* #3872 = 0x1E3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF88 /* System.Void CoreImage.CIDivideBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #3873 = 0x1E41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001728 /* CoreImage.ICIDocumentEnhancerProtocol */ },
		{ /* #3874 = 0x1E43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001729 /* CoreImage.CIDocumentEnhancerProtocolWrapper */ },
		{ /* #3875 = 0x1E45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001727 /* CoreImage.CIDocumentEnhancer */ },
		{ /* #3876 = 0x1E47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF8D /* CoreImage.CIImage CoreImage.CIDocumentEnhancer::get_InputImage() */ },
		{ /* #3877 = 0x1E49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF8E /* System.Void CoreImage.CIDocumentEnhancer::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3878 = 0x1E4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF8F /* System.Single CoreImage.CIDocumentEnhancer::get_Amount() */ },
		{ /* #3879 = 0x1E4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF90 /* System.Void CoreImage.CIDocumentEnhancer::set_Amount(System.Single) */ },
		{ /* #3880 = 0x1E4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF91 /* CoreImage.CIImage CoreImage.CIDocumentEnhancer::get_OutputImage() */ },
		{ /* #3881 = 0x1E51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF89 /* System.Void CoreImage.CIDocumentEnhancer::.ctor() */ },
		{ /* #3882 = 0x1E53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF8C /* System.Void CoreImage.CIDocumentEnhancer::.ctor(Foundation.NSCoder) */ },
		{ /* #3883 = 0x1E55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200172B /* CoreImage.ICIDotScreenProtocol */ },
		{ /* #3884 = 0x1E57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200172C /* CoreImage.CIDotScreenProtocolWrapper */ },
		{ /* #3885 = 0x1E59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200172A /* CoreImage.CIDotScreen */ },
		{ /* #3886 = 0x1E5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFA0 /* CoreImage.CIImage CoreImage.CIDotScreen::get_InputImage() */ },
		{ /* #3887 = 0x1E5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFA1 /* System.Void CoreImage.CIDotScreen::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3888 = 0x1E5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFA2 /* CoreGraphics.CGPoint CoreImage.CIDotScreen::get_InputCenter() */ },
		{ /* #3889 = 0x1E61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFA3 /* System.Void CoreImage.CIDotScreen::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #3890 = 0x1E63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFA4 /* System.Single CoreImage.CIDotScreen::get_Angle() */ },
		{ /* #3891 = 0x1E65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFA5 /* System.Void CoreImage.CIDotScreen::set_Angle(System.Single) */ },
		{ /* #3892 = 0x1E67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFA6 /* System.Single CoreImage.CIDotScreen::get_Width() */ },
		{ /* #3893 = 0x1E69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFA7 /* System.Void CoreImage.CIDotScreen::set_Width(System.Single) */ },
		{ /* #3894 = 0x1E6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFA8 /* System.Single CoreImage.CIDotScreen::get_Sharpness() */ },
		{ /* #3895 = 0x1E6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFA9 /* System.Void CoreImage.CIDotScreen::set_Sharpness(System.Single) */ },
		{ /* #3896 = 0x1E6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFAA /* CoreImage.CIImage CoreImage.CIDotScreen::get_OutputImage() */ },
		{ /* #3897 = 0x1E71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF9C /* System.Void CoreImage.CIDotScreen::.ctor() */ },
		{ /* #3898 = 0x1E73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DF9F /* System.Void CoreImage.CIDotScreen::.ctor(Foundation.NSCoder) */ },
		{ /* #3899 = 0x1E75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200172E /* CoreImage.ICIDrosteProtocol */ },
		{ /* #3900 = 0x1E77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200172F /* CoreImage.CIDrosteProtocolWrapper */ },
		{ /* #3901 = 0x1E79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200172D /* CoreImage.CIDroste */ },
		{ /* #3902 = 0x1E7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFC5 /* CoreImage.CIImage CoreImage.CIDroste::get_InputImage() */ },
		{ /* #3903 = 0x1E7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFC6 /* System.Void CoreImage.CIDroste::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3904 = 0x1E7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFC7 /* CoreGraphics.CGPoint CoreImage.CIDroste::get_InputInsetPoint0() */ },
		{ /* #3905 = 0x1E81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFC8 /* System.Void CoreImage.CIDroste::set_InputInsetPoint0(CoreGraphics.CGPoint) */ },
		{ /* #3906 = 0x1E83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFC9 /* CoreGraphics.CGPoint CoreImage.CIDroste::get_InputInsetPoint1() */ },
		{ /* #3907 = 0x1E85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFCA /* System.Void CoreImage.CIDroste::set_InputInsetPoint1(CoreGraphics.CGPoint) */ },
		{ /* #3908 = 0x1E87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFCB /* System.Single CoreImage.CIDroste::get_Strands() */ },
		{ /* #3909 = 0x1E89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFCC /* System.Void CoreImage.CIDroste::set_Strands(System.Single) */ },
		{ /* #3910 = 0x1E8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFCD /* System.Single CoreImage.CIDroste::get_Periodicity() */ },
		{ /* #3911 = 0x1E8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFCE /* System.Void CoreImage.CIDroste::set_Periodicity(System.Single) */ },
		{ /* #3912 = 0x1E8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFCF /* System.Single CoreImage.CIDroste::get_Rotation() */ },
		{ /* #3913 = 0x1E91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFD0 /* System.Void CoreImage.CIDroste::set_Rotation(System.Single) */ },
		{ /* #3914 = 0x1E93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFD1 /* System.Single CoreImage.CIDroste::get_Zoom() */ },
		{ /* #3915 = 0x1E95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFD2 /* System.Void CoreImage.CIDroste::set_Zoom(System.Single) */ },
		{ /* #3916 = 0x1E97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFD3 /* CoreImage.CIImage CoreImage.CIDroste::get_OutputImage() */ },
		{ /* #3917 = 0x1E99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFC1 /* System.Void CoreImage.CIDroste::.ctor() */ },
		{ /* #3918 = 0x1E9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFC4 /* System.Void CoreImage.CIDroste::.ctor(Foundation.NSCoder) */ },
		{ /* #3919 = 0x1E9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001731 /* CoreImage.ICIEdgePreserveUpsampleProtocol */ },
		{ /* #3920 = 0x1E9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001732 /* CoreImage.CIEdgePreserveUpsampleProtocolWrapper */ },
		{ /* #3921 = 0x1EA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001730 /* CoreImage.CIEdgePreserveUpsampleFilter */ },
		{ /* #3922 = 0x1EA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFF6 /* CoreImage.CIImage CoreImage.CIEdgePreserveUpsampleFilter::get_InputImage() */ },
		{ /* #3923 = 0x1EA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFF7 /* System.Void CoreImage.CIEdgePreserveUpsampleFilter::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3924 = 0x1EA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFF8 /* CoreImage.CIImage CoreImage.CIEdgePreserveUpsampleFilter::get_SmallImage() */ },
		{ /* #3925 = 0x1EA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFF9 /* System.Void CoreImage.CIEdgePreserveUpsampleFilter::set_SmallImage(CoreImage.CIImage) */ },
		{ /* #3926 = 0x1EAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFFA /* System.Single CoreImage.CIEdgePreserveUpsampleFilter::get_SpatialSigma() */ },
		{ /* #3927 = 0x1EAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFFB /* System.Void CoreImage.CIEdgePreserveUpsampleFilter::set_SpatialSigma(System.Single) */ },
		{ /* #3928 = 0x1EAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFFC /* System.Single CoreImage.CIEdgePreserveUpsampleFilter::get_LumaSigma() */ },
		{ /* #3929 = 0x1EB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFFD /* System.Void CoreImage.CIEdgePreserveUpsampleFilter::set_LumaSigma(System.Single) */ },
		{ /* #3930 = 0x1EB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFFE /* CoreImage.CIImage CoreImage.CIEdgePreserveUpsampleFilter::get_OutputImage() */ },
		{ /* #3931 = 0x1EB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFF2 /* System.Void CoreImage.CIEdgePreserveUpsampleFilter::.ctor() */ },
		{ /* #3932 = 0x1EB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600DFF5 /* System.Void CoreImage.CIEdgePreserveUpsampleFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #3933 = 0x1EB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001734 /* CoreImage.ICIEdgesProtocol */ },
		{ /* #3934 = 0x1EBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001735 /* CoreImage.CIEdgesProtocolWrapper */ },
		{ /* #3935 = 0x1EBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001733 /* CoreImage.CIEdges */ },
		{ /* #3936 = 0x1EBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E015 /* CoreImage.CIImage CoreImage.CIEdges::get_InputImage() */ },
		{ /* #3937 = 0x1EC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E016 /* System.Void CoreImage.CIEdges::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3938 = 0x1EC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E017 /* System.Single CoreImage.CIEdges::get_Intensity() */ },
		{ /* #3939 = 0x1EC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E018 /* System.Void CoreImage.CIEdges::set_Intensity(System.Single) */ },
		{ /* #3940 = 0x1EC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E019 /* CoreImage.CIImage CoreImage.CIEdges::get_OutputImage() */ },
		{ /* #3941 = 0x1EC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E011 /* System.Void CoreImage.CIEdges::.ctor() */ },
		{ /* #3942 = 0x1ECB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E014 /* System.Void CoreImage.CIEdges::.ctor(Foundation.NSCoder) */ },
		{ /* #3943 = 0x1ECD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001737 /* CoreImage.ICIEdgeWorkProtocol */ },
		{ /* #3944 = 0x1ECF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001738 /* CoreImage.CIEdgeWorkProtocolWrapper */ },
		{ /* #3945 = 0x1ED1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001736 /* CoreImage.CIEdgeWork */ },
		{ /* #3946 = 0x1ED3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E028 /* CoreImage.CIImage CoreImage.CIEdgeWork::get_InputImage() */ },
		{ /* #3947 = 0x1ED5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E029 /* System.Void CoreImage.CIEdgeWork::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3948 = 0x1ED7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E02A /* System.Single CoreImage.CIEdgeWork::get_Radius() */ },
		{ /* #3949 = 0x1ED9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E02B /* System.Void CoreImage.CIEdgeWork::set_Radius(System.Single) */ },
		{ /* #3950 = 0x1EDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E02C /* CoreImage.CIImage CoreImage.CIEdgeWork::get_OutputImage() */ },
		{ /* #3951 = 0x1EDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E024 /* System.Void CoreImage.CIEdgeWork::.ctor() */ },
		{ /* #3952 = 0x1EDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E027 /* System.Void CoreImage.CIEdgeWork::.ctor(Foundation.NSCoder) */ },
		{ /* #3953 = 0x1EE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018B0 /* CoreImage.CITileFilter */ },
		{ /* #3954 = 0x1EE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE8C /* System.Void CoreImage.CITileFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #3955 = 0x1EE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200173A /* CoreImage.ICIEightfoldReflectedTileProtocol */ },
		{ /* #3956 = 0x1EE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200173B /* CoreImage.CIEightfoldReflectedTileProtocolWrapper */ },
		{ /* #3957 = 0x1EE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001739 /* CoreImage.CIEightfoldReflectedTile */ },
		{ /* #3958 = 0x1EEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E03B /* CoreImage.CIImage CoreImage.CIEightfoldReflectedTile::get_InputImage() */ },
		{ /* #3959 = 0x1EED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E03C /* System.Void CoreImage.CIEightfoldReflectedTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3960 = 0x1EEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E03D /* CoreGraphics.CGPoint CoreImage.CIEightfoldReflectedTile::get_InputCenter() */ },
		{ /* #3961 = 0x1EF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E03E /* System.Void CoreImage.CIEightfoldReflectedTile::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #3962 = 0x1EF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E03F /* System.Single CoreImage.CIEightfoldReflectedTile::get_Angle() */ },
		{ /* #3963 = 0x1EF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E040 /* System.Void CoreImage.CIEightfoldReflectedTile::set_Angle(System.Single) */ },
		{ /* #3964 = 0x1EF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E041 /* System.Single CoreImage.CIEightfoldReflectedTile::get_Width() */ },
		{ /* #3965 = 0x1EF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E042 /* System.Void CoreImage.CIEightfoldReflectedTile::set_Width(System.Single) */ },
		{ /* #3966 = 0x1EFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E043 /* CoreImage.CIImage CoreImage.CIEightfoldReflectedTile::get_OutputImage() */ },
		{ /* #3967 = 0x1EFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E037 /* System.Void CoreImage.CIEightfoldReflectedTile::.ctor() */ },
		{ /* #3968 = 0x1EFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E03A /* System.Void CoreImage.CIEightfoldReflectedTile::.ctor(Foundation.NSCoder) */ },
		{ /* #3969 = 0x1F01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200173C /* CoreImage.CIExclusionBlendMode */ },
		{ /* #3970 = 0x1F03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E056 /* System.Void CoreImage.CIExclusionBlendMode::.ctor() */ },
		{ /* #3971 = 0x1F05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E059 /* System.Void CoreImage.CIExclusionBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #3972 = 0x1F07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200173E /* CoreImage.ICIExposureAdjustProtocol */ },
		{ /* #3973 = 0x1F09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200173F /* CoreImage.CIExposureAdjustProtocolWrapper */ },
		{ /* #3974 = 0x1F0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200173D /* CoreImage.CIExposureAdjust */ },
		{ /* #3975 = 0x1F0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E05E /* CoreImage.CIImage CoreImage.CIExposureAdjust::get_InputImage() */ },
		{ /* #3976 = 0x1F0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E05F /* System.Void CoreImage.CIExposureAdjust::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3977 = 0x1F11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E060 /* System.Single CoreImage.CIExposureAdjust::get_EV() */ },
		{ /* #3978 = 0x1F13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E061 /* System.Void CoreImage.CIExposureAdjust::set_EV(System.Single) */ },
		{ /* #3979 = 0x1F15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E062 /* CoreImage.CIImage CoreImage.CIExposureAdjust::get_OutputImage() */ },
		{ /* #3980 = 0x1F17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E05A /* System.Void CoreImage.CIExposureAdjust::.ctor() */ },
		{ /* #3981 = 0x1F19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E05D /* System.Void CoreImage.CIExposureAdjust::.ctor(Foundation.NSCoder) */ },
		{ /* #3982 = 0x1F1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001740 /* CoreImage.CIFaceBalance */ },
		{ /* #3983 = 0x1F1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E06F /* System.Void CoreImage.CIFaceBalance::.ctor(Foundation.NSCoder) */ },
		{ /* #3984 = 0x1F1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001745 /* CoreImage.CIFeature */ },
		{ /* #3985 = 0x1F21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001741 /* CoreImage.CIFaceFeature */ },
		{ /* #3986 = 0x1F23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001743 /* CoreImage.ICIFalseColorProtocol */ },
		{ /* #3987 = 0x1F25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001744 /* CoreImage.CIFalseColorProtocolWrapper */ },
		{ /* #3988 = 0x1F27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001742 /* CoreImage.CIFalseColor */ },
		{ /* #3989 = 0x1F29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E088 /* CoreImage.CIImage CoreImage.CIFalseColor::get_InputImage() */ },
		{ /* #3990 = 0x1F2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E089 /* System.Void CoreImage.CIFalseColor::set_InputImage(CoreImage.CIImage) */ },
		{ /* #3991 = 0x1F2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E08A /* CoreImage.CIColor CoreImage.CIFalseColor::get_Color0() */ },
		{ /* #3992 = 0x1F2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E08B /* System.Void CoreImage.CIFalseColor::set_Color0(CoreImage.CIColor) */ },
		{ /* #3993 = 0x1F31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E08C /* CoreImage.CIColor CoreImage.CIFalseColor::get_Color1() */ },
		{ /* #3994 = 0x1F33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E08D /* System.Void CoreImage.CIFalseColor::set_Color1(CoreImage.CIColor) */ },
		{ /* #3995 = 0x1F35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E08E /* CoreImage.CIImage CoreImage.CIFalseColor::get_OutputImage() */ },
		{ /* #3996 = 0x1F37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E084 /* System.Void CoreImage.CIFalseColor::.ctor() */ },
		{ /* #3997 = 0x1F39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E087 /* System.Void CoreImage.CIFalseColor::.ctor(Foundation.NSCoder) */ },
		{ /* #3998 = 0x1F3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001749 /* CoreImage.ICIFilterConstructor */ },
		{ /* #3999 = 0x1F3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200174A /* CoreImage.CIFilterConstructorWrapper */ },
		{ /* #4000 = 0x1F3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200174B /* CoreImage.CIFilterGenerator */ },
		{ /* #4001 = 0x1F41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001750 /* CoreImage.CIFilterShape */ },
		{ /* #4002 = 0x1F43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001752 /* CoreImage.ICIFlashTransitionProtocol */ },
		{ /* #4003 = 0x1F45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001753 /* CoreImage.CIFlashTransitionProtocolWrapper */ },
		{ /* #4004 = 0x1F47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001751 /* CoreImage.CIFlashTransition */ },
		{ /* #4005 = 0x1F49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E132 /* CoreGraphics.CGPoint CoreImage.CIFlashTransition::get_InputCenter() */ },
		{ /* #4006 = 0x1F4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E133 /* System.Void CoreImage.CIFlashTransition::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4007 = 0x1F4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E134 /* CoreGraphics.CGRect CoreImage.CIFlashTransition::get_InputExtent() */ },
		{ /* #4008 = 0x1F4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E135 /* System.Void CoreImage.CIFlashTransition::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #4009 = 0x1F51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E136 /* CoreImage.CIColor CoreImage.CIFlashTransition::get_Color() */ },
		{ /* #4010 = 0x1F53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E137 /* System.Void CoreImage.CIFlashTransition::set_Color(CoreImage.CIColor) */ },
		{ /* #4011 = 0x1F55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E138 /* System.Single CoreImage.CIFlashTransition::get_MaxStriationRadius() */ },
		{ /* #4012 = 0x1F57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E139 /* System.Void CoreImage.CIFlashTransition::set_MaxStriationRadius(System.Single) */ },
		{ /* #4013 = 0x1F59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E13A /* System.Single CoreImage.CIFlashTransition::get_StriationStrength() */ },
		{ /* #4014 = 0x1F5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E13B /* System.Void CoreImage.CIFlashTransition::set_StriationStrength(System.Single) */ },
		{ /* #4015 = 0x1F5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E13C /* System.Single CoreImage.CIFlashTransition::get_StriationContrast() */ },
		{ /* #4016 = 0x1F5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E13D /* System.Void CoreImage.CIFlashTransition::set_StriationContrast(System.Single) */ },
		{ /* #4017 = 0x1F61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E13E /* System.Single CoreImage.CIFlashTransition::get_FadeThreshold() */ },
		{ /* #4018 = 0x1F63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E13F /* System.Void CoreImage.CIFlashTransition::set_FadeThreshold(System.Single) */ },
		{ /* #4019 = 0x1F65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E140 /* CoreImage.CIImage CoreImage.CIFlashTransition::get_InputImage() */ },
		{ /* #4020 = 0x1F67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E141 /* System.Void CoreImage.CIFlashTransition::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4021 = 0x1F69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E142 /* CoreImage.CIImage CoreImage.CIFlashTransition::get_TargetImage() */ },
		{ /* #4022 = 0x1F6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E143 /* System.Void CoreImage.CIFlashTransition::set_TargetImage(CoreImage.CIImage) */ },
		{ /* #4023 = 0x1F6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E144 /* System.Single CoreImage.CIFlashTransition::get_Time() */ },
		{ /* #4024 = 0x1F6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E145 /* System.Void CoreImage.CIFlashTransition::set_Time(System.Single) */ },
		{ /* #4025 = 0x1F71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E146 /* CoreImage.CIImage CoreImage.CIFlashTransition::get_OutputImage() */ },
		{ /* #4026 = 0x1F73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E12E /* System.Void CoreImage.CIFlashTransition::.ctor() */ },
		{ /* #4027 = 0x1F75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E131 /* System.Void CoreImage.CIFlashTransition::.ctor(Foundation.NSCoder) */ },
		{ /* #4028 = 0x1F77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001755 /* CoreImage.ICIFourCoordinateGeometryFilterProtocol */ },
		{ /* #4029 = 0x1F79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001756 /* CoreImage.CIFourCoordinateGeometryFilterProtocolWrapper */ },
		{ /* #4030 = 0x1F7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001758 /* CoreImage.ICIFourfoldReflectedTileProtocol */ },
		{ /* #4031 = 0x1F7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001759 /* CoreImage.CIFourfoldReflectedTileProtocolWrapper */ },
		{ /* #4032 = 0x1F7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001757 /* CoreImage.CIFourfoldReflectedTile */ },
		{ /* #4033 = 0x1F81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E185 /* CoreImage.CIImage CoreImage.CIFourfoldReflectedTile::get_InputImage() */ },
		{ /* #4034 = 0x1F83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E186 /* System.Void CoreImage.CIFourfoldReflectedTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4035 = 0x1F85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E187 /* CoreGraphics.CGPoint CoreImage.CIFourfoldReflectedTile::get_InputCenter() */ },
		{ /* #4036 = 0x1F87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E188 /* System.Void CoreImage.CIFourfoldReflectedTile::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4037 = 0x1F89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E189 /* System.Single CoreImage.CIFourfoldReflectedTile::get_Angle() */ },
		{ /* #4038 = 0x1F8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E18A /* System.Void CoreImage.CIFourfoldReflectedTile::set_Angle(System.Single) */ },
		{ /* #4039 = 0x1F8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E18B /* System.Single CoreImage.CIFourfoldReflectedTile::get_Width() */ },
		{ /* #4040 = 0x1F8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E18C /* System.Void CoreImage.CIFourfoldReflectedTile::set_Width(System.Single) */ },
		{ /* #4041 = 0x1F91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E18D /* System.Single CoreImage.CIFourfoldReflectedTile::get_AcuteAngle() */ },
		{ /* #4042 = 0x1F93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E18E /* System.Void CoreImage.CIFourfoldReflectedTile::set_AcuteAngle(System.Single) */ },
		{ /* #4043 = 0x1F95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E18F /* CoreImage.CIImage CoreImage.CIFourfoldReflectedTile::get_OutputImage() */ },
		{ /* #4044 = 0x1F97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E181 /* System.Void CoreImage.CIFourfoldReflectedTile::.ctor() */ },
		{ /* #4045 = 0x1F99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E184 /* System.Void CoreImage.CIFourfoldReflectedTile::.ctor(Foundation.NSCoder) */ },
		{ /* #4046 = 0x1F9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200175B /* CoreImage.ICIFourfoldRotatedTileProtocol */ },
		{ /* #4047 = 0x1F9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200175C /* CoreImage.CIFourfoldRotatedTileProtocolWrapper */ },
		{ /* #4048 = 0x1F9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200175A /* CoreImage.CIFourfoldRotatedTile */ },
		{ /* #4049 = 0x1FA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1AA /* CoreImage.CIImage CoreImage.CIFourfoldRotatedTile::get_InputImage() */ },
		{ /* #4050 = 0x1FA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1AB /* System.Void CoreImage.CIFourfoldRotatedTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4051 = 0x1FA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1AC /* CoreGraphics.CGPoint CoreImage.CIFourfoldRotatedTile::get_InputCenter() */ },
		{ /* #4052 = 0x1FA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1AD /* System.Void CoreImage.CIFourfoldRotatedTile::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4053 = 0x1FA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1AE /* System.Single CoreImage.CIFourfoldRotatedTile::get_Angle() */ },
		{ /* #4054 = 0x1FAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1AF /* System.Void CoreImage.CIFourfoldRotatedTile::set_Angle(System.Single) */ },
		{ /* #4055 = 0x1FAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1B0 /* System.Single CoreImage.CIFourfoldRotatedTile::get_Width() */ },
		{ /* #4056 = 0x1FAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1B1 /* System.Void CoreImage.CIFourfoldRotatedTile::set_Width(System.Single) */ },
		{ /* #4057 = 0x1FB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1B2 /* CoreImage.CIImage CoreImage.CIFourfoldRotatedTile::get_OutputImage() */ },
		{ /* #4058 = 0x1FB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1A6 /* System.Void CoreImage.CIFourfoldRotatedTile::.ctor() */ },
		{ /* #4059 = 0x1FB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1A9 /* System.Void CoreImage.CIFourfoldRotatedTile::.ctor(Foundation.NSCoder) */ },
		{ /* #4060 = 0x1FB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200175E /* CoreImage.ICIFourfoldTranslatedTileProtocol */ },
		{ /* #4061 = 0x1FB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200175F /* CoreImage.CIFourfoldTranslatedTileProtocolWrapper */ },
		{ /* #4062 = 0x1FBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200175D /* CoreImage.CIFourfoldTranslatedTile */ },
		{ /* #4063 = 0x1FBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1C9 /* CoreImage.CIImage CoreImage.CIFourfoldTranslatedTile::get_InputImage() */ },
		{ /* #4064 = 0x1FBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1CA /* System.Void CoreImage.CIFourfoldTranslatedTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4065 = 0x1FC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1CB /* CoreGraphics.CGPoint CoreImage.CIFourfoldTranslatedTile::get_InputCenter() */ },
		{ /* #4066 = 0x1FC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1CC /* System.Void CoreImage.CIFourfoldTranslatedTile::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4067 = 0x1FC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1CD /* System.Single CoreImage.CIFourfoldTranslatedTile::get_Angle() */ },
		{ /* #4068 = 0x1FC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1CE /* System.Void CoreImage.CIFourfoldTranslatedTile::set_Angle(System.Single) */ },
		{ /* #4069 = 0x1FC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1CF /* System.Single CoreImage.CIFourfoldTranslatedTile::get_Width() */ },
		{ /* #4070 = 0x1FCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1D0 /* System.Void CoreImage.CIFourfoldTranslatedTile::set_Width(System.Single) */ },
		{ /* #4071 = 0x1FCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1D1 /* System.Single CoreImage.CIFourfoldTranslatedTile::get_AcuteAngle() */ },
		{ /* #4072 = 0x1FCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1D2 /* System.Void CoreImage.CIFourfoldTranslatedTile::set_AcuteAngle(System.Single) */ },
		{ /* #4073 = 0x1FD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1D3 /* CoreImage.CIImage CoreImage.CIFourfoldTranslatedTile::get_OutputImage() */ },
		{ /* #4074 = 0x1FD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1C5 /* System.Void CoreImage.CIFourfoldTranslatedTile::.ctor() */ },
		{ /* #4075 = 0x1FD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1C8 /* System.Void CoreImage.CIFourfoldTranslatedTile::.ctor(Foundation.NSCoder) */ },
		{ /* #4076 = 0x1FD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001761 /* CoreImage.ICIGaborGradientsProtocol */ },
		{ /* #4077 = 0x1FD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001762 /* CoreImage.CIGaborGradientsProtocolWrapper */ },
		{ /* #4078 = 0x1FDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001760 /* CoreImage.CIGaborGradients */ },
		{ /* #4079 = 0x1FDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1EE /* CoreImage.CIImage CoreImage.CIGaborGradients::get_InputImage() */ },
		{ /* #4080 = 0x1FDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1EF /* System.Void CoreImage.CIGaborGradients::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4081 = 0x1FE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1F0 /* CoreImage.CIImage CoreImage.CIGaborGradients::get_OutputImage() */ },
		{ /* #4082 = 0x1FE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1EA /* System.Void CoreImage.CIGaborGradients::.ctor() */ },
		{ /* #4083 = 0x1FE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1ED /* System.Void CoreImage.CIGaborGradients::.ctor(Foundation.NSCoder) */ },
		{ /* #4084 = 0x1FE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001764 /* CoreImage.ICIGammaAdjustProtocol */ },
		{ /* #4085 = 0x1FE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001765 /* CoreImage.CIGammaAdjustProtocolWrapper */ },
		{ /* #4086 = 0x1FEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001763 /* CoreImage.CIGammaAdjust */ },
		{ /* #4087 = 0x1FED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1FB /* CoreImage.CIImage CoreImage.CIGammaAdjust::get_InputImage() */ },
		{ /* #4088 = 0x1FEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1FC /* System.Void CoreImage.CIGammaAdjust::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4089 = 0x1FF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1FD /* System.Single CoreImage.CIGammaAdjust::get_Power() */ },
		{ /* #4090 = 0x1FF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1FE /* System.Void CoreImage.CIGammaAdjust::set_Power(System.Single) */ },
		{ /* #4091 = 0x1FF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1FF /* CoreImage.CIImage CoreImage.CIGammaAdjust::get_OutputImage() */ },
		{ /* #4092 = 0x1FF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1F7 /* System.Void CoreImage.CIGammaAdjust::.ctor() */ },
		{ /* #4093 = 0x1FF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E1FA /* System.Void CoreImage.CIGammaAdjust::.ctor(Foundation.NSCoder) */ },
		{ /* #4094 = 0x1FFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001767 /* CoreImage.ICIGaussianBlurProtocol */ },
		{ /* #4095 = 0x1FFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001768 /* CoreImage.CIGaussianBlurProtocolWrapper */ },
		{ /* #4096 = 0x1FFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001766 /* CoreImage.CIGaussianBlur */ },
		{ /* #4097 = 0x2001 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E20E /* CoreImage.CIImage CoreImage.CIGaussianBlur::get_InputImage() */ },
		{ /* #4098 = 0x2003 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E20F /* System.Void CoreImage.CIGaussianBlur::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4099 = 0x2005 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E210 /* System.Single CoreImage.CIGaussianBlur::get_Radius() */ },
		{ /* #4100 = 0x2007 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E211 /* System.Void CoreImage.CIGaussianBlur::set_Radius(System.Single) */ },
		{ /* #4101 = 0x2009 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E212 /* CoreImage.CIImage CoreImage.CIGaussianBlur::get_OutputImage() */ },
		{ /* #4102 = 0x200B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E20A /* System.Void CoreImage.CIGaussianBlur::.ctor() */ },
		{ /* #4103 = 0x200D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E20D /* System.Void CoreImage.CIGaussianBlur::.ctor(Foundation.NSCoder) */ },
		{ /* #4104 = 0x200F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200176A /* CoreImage.ICIGaussianGradientProtocol */ },
		{ /* #4105 = 0x2011 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200176B /* CoreImage.CIGaussianGradientProtocolWrapper */ },
		{ /* #4106 = 0x2013 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001769 /* CoreImage.CIGaussianGradient */ },
		{ /* #4107 = 0x2015 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E221 /* CoreGraphics.CGPoint CoreImage.CIGaussianGradient::get_InputCenter() */ },
		{ /* #4108 = 0x2017 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E222 /* System.Void CoreImage.CIGaussianGradient::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4109 = 0x2019 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E223 /* CoreImage.CIColor CoreImage.CIGaussianGradient::get_Color0() */ },
		{ /* #4110 = 0x201B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E224 /* System.Void CoreImage.CIGaussianGradient::set_Color0(CoreImage.CIColor) */ },
		{ /* #4111 = 0x201D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E225 /* CoreImage.CIColor CoreImage.CIGaussianGradient::get_Color1() */ },
		{ /* #4112 = 0x201F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E226 /* System.Void CoreImage.CIGaussianGradient::set_Color1(CoreImage.CIColor) */ },
		{ /* #4113 = 0x2021 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E227 /* System.Single CoreImage.CIGaussianGradient::get_Radius() */ },
		{ /* #4114 = 0x2023 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E228 /* System.Void CoreImage.CIGaussianGradient::set_Radius(System.Single) */ },
		{ /* #4115 = 0x2025 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E229 /* CoreImage.CIImage CoreImage.CIGaussianGradient::get_OutputImage() */ },
		{ /* #4116 = 0x2027 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E21D /* System.Void CoreImage.CIGaussianGradient::.ctor() */ },
		{ /* #4117 = 0x2029 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E220 /* System.Void CoreImage.CIGaussianGradient::.ctor(Foundation.NSCoder) */ },
		{ /* #4118 = 0x202B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200176D /* CoreImage.ICIGlassDistortionProtocol */ },
		{ /* #4119 = 0x202D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200176E /* CoreImage.CIGlassDistortionProtocolWrapper */ },
		{ /* #4120 = 0x202F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200176C /* CoreImage.CIGlassDistortion */ },
		{ /* #4121 = 0x2031 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E240 /* CoreImage.CIImage CoreImage.CIGlassDistortion::get_InputImage() */ },
		{ /* #4122 = 0x2033 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E241 /* System.Void CoreImage.CIGlassDistortion::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4123 = 0x2035 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E242 /* CoreImage.CIImage CoreImage.CIGlassDistortion::get_Texture() */ },
		{ /* #4124 = 0x2037 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E243 /* System.Void CoreImage.CIGlassDistortion::set_Texture(CoreImage.CIImage) */ },
		{ /* #4125 = 0x2039 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E244 /* CoreGraphics.CGPoint CoreImage.CIGlassDistortion::get_InputCenter() */ },
		{ /* #4126 = 0x203B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E245 /* System.Void CoreImage.CIGlassDistortion::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4127 = 0x203D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E246 /* System.Single CoreImage.CIGlassDistortion::get_Scale() */ },
		{ /* #4128 = 0x203F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E247 /* System.Void CoreImage.CIGlassDistortion::set_Scale(System.Single) */ },
		{ /* #4129 = 0x2041 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E248 /* CoreImage.CIImage CoreImage.CIGlassDistortion::get_OutputImage() */ },
		{ /* #4130 = 0x2043 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E23C /* System.Void CoreImage.CIGlassDistortion::.ctor() */ },
		{ /* #4131 = 0x2045 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E23F /* System.Void CoreImage.CIGlassDistortion::.ctor(Foundation.NSCoder) */ },
		{ /* #4132 = 0x2047 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001770 /* CoreImage.ICIGlassLozengeProtocol */ },
		{ /* #4133 = 0x2049 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001771 /* CoreImage.CIGlassLozengeProtocolWrapper */ },
		{ /* #4134 = 0x204B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200176F /* CoreImage.CIGlassLozenge */ },
		{ /* #4135 = 0x204D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E25F /* CoreImage.CIImage CoreImage.CIGlassLozenge::get_InputImage() */ },
		{ /* #4136 = 0x204F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E260 /* System.Void CoreImage.CIGlassLozenge::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4137 = 0x2051 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E261 /* CoreGraphics.CGPoint CoreImage.CIGlassLozenge::get_InputPoint0() */ },
		{ /* #4138 = 0x2053 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E262 /* System.Void CoreImage.CIGlassLozenge::set_InputPoint0(CoreGraphics.CGPoint) */ },
		{ /* #4139 = 0x2055 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E263 /* CoreGraphics.CGPoint CoreImage.CIGlassLozenge::get_InputPoint1() */ },
		{ /* #4140 = 0x2057 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E264 /* System.Void CoreImage.CIGlassLozenge::set_InputPoint1(CoreGraphics.CGPoint) */ },
		{ /* #4141 = 0x2059 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E265 /* System.Single CoreImage.CIGlassLozenge::get_Radius() */ },
		{ /* #4142 = 0x205B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E266 /* System.Void CoreImage.CIGlassLozenge::set_Radius(System.Single) */ },
		{ /* #4143 = 0x205D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E267 /* System.Single CoreImage.CIGlassLozenge::get_Refraction() */ },
		{ /* #4144 = 0x205F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E268 /* System.Void CoreImage.CIGlassLozenge::set_Refraction(System.Single) */ },
		{ /* #4145 = 0x2061 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E269 /* CoreImage.CIImage CoreImage.CIGlassLozenge::get_OutputImage() */ },
		{ /* #4146 = 0x2063 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E25B /* System.Void CoreImage.CIGlassLozenge::.ctor() */ },
		{ /* #4147 = 0x2065 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E25E /* System.Void CoreImage.CIGlassLozenge::.ctor(Foundation.NSCoder) */ },
		{ /* #4148 = 0x2067 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001773 /* CoreImage.ICIGlideReflectedTileProtocol */ },
		{ /* #4149 = 0x2069 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001774 /* CoreImage.CIGlideReflectedTileProtocolWrapper */ },
		{ /* #4150 = 0x206B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001772 /* CoreImage.CIGlideReflectedTile */ },
		{ /* #4151 = 0x206D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E284 /* CoreImage.CIImage CoreImage.CIGlideReflectedTile::get_InputImage() */ },
		{ /* #4152 = 0x206F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E285 /* System.Void CoreImage.CIGlideReflectedTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4153 = 0x2071 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E286 /* CoreGraphics.CGPoint CoreImage.CIGlideReflectedTile::get_InputCenter() */ },
		{ /* #4154 = 0x2073 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E287 /* System.Void CoreImage.CIGlideReflectedTile::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4155 = 0x2075 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E288 /* System.Single CoreImage.CIGlideReflectedTile::get_Angle() */ },
		{ /* #4156 = 0x2077 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E289 /* System.Void CoreImage.CIGlideReflectedTile::set_Angle(System.Single) */ },
		{ /* #4157 = 0x2079 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E28A /* System.Single CoreImage.CIGlideReflectedTile::get_Width() */ },
		{ /* #4158 = 0x207B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E28B /* System.Void CoreImage.CIGlideReflectedTile::set_Width(System.Single) */ },
		{ /* #4159 = 0x207D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E28C /* CoreImage.CIImage CoreImage.CIGlideReflectedTile::get_OutputImage() */ },
		{ /* #4160 = 0x207F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E280 /* System.Void CoreImage.CIGlideReflectedTile::.ctor() */ },
		{ /* #4161 = 0x2081 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E283 /* System.Void CoreImage.CIGlideReflectedTile::.ctor(Foundation.NSCoder) */ },
		{ /* #4162 = 0x2083 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001776 /* CoreImage.ICIGloomProtocol */ },
		{ /* #4163 = 0x2085 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001777 /* CoreImage.CIGloomProtocolWrapper */ },
		{ /* #4164 = 0x2087 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001775 /* CoreImage.CIGloom */ },
		{ /* #4165 = 0x2089 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2A3 /* CoreImage.CIImage CoreImage.CIGloom::get_InputImage() */ },
		{ /* #4166 = 0x208B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2A4 /* System.Void CoreImage.CIGloom::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4167 = 0x208D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2A5 /* System.Single CoreImage.CIGloom::get_Radius() */ },
		{ /* #4168 = 0x208F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2A6 /* System.Void CoreImage.CIGloom::set_Radius(System.Single) */ },
		{ /* #4169 = 0x2091 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2A7 /* System.Single CoreImage.CIGloom::get_Intensity() */ },
		{ /* #4170 = 0x2093 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2A8 /* System.Void CoreImage.CIGloom::set_Intensity(System.Single) */ },
		{ /* #4171 = 0x2095 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2A9 /* CoreImage.CIImage CoreImage.CIGloom::get_OutputImage() */ },
		{ /* #4172 = 0x2097 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E29F /* System.Void CoreImage.CIGloom::.ctor() */ },
		{ /* #4173 = 0x2099 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2A2 /* System.Void CoreImage.CIGloom::.ctor(Foundation.NSCoder) */ },
		{ /* #4174 = 0x209B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001778 /* CoreImage.CIGuidedFilter */ },
		{ /* #4175 = 0x209D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2B8 /* System.Void CoreImage.CIGuidedFilter::.ctor() */ },
		{ /* #4176 = 0x209F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2BB /* System.Void CoreImage.CIGuidedFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #4177 = 0x20A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001779 /* CoreImage.CIHardLightBlendMode */ },
		{ /* #4178 = 0x20A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2C4 /* System.Void CoreImage.CIHardLightBlendMode::.ctor() */ },
		{ /* #4179 = 0x20A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2C7 /* System.Void CoreImage.CIHardLightBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #4180 = 0x20A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200177B /* CoreImage.ICIHatchedScreenProtocol */ },
		{ /* #4181 = 0x20A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200177C /* CoreImage.CIHatchedScreenProtocolWrapper */ },
		{ /* #4182 = 0x20AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200177A /* CoreImage.CIHatchedScreen */ },
		{ /* #4183 = 0x20AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2CC /* CoreImage.CIImage CoreImage.CIHatchedScreen::get_InputImage() */ },
		{ /* #4184 = 0x20AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2CD /* System.Void CoreImage.CIHatchedScreen::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4185 = 0x20B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2CE /* CoreGraphics.CGPoint CoreImage.CIHatchedScreen::get_InputCenter() */ },
		{ /* #4186 = 0x20B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2CF /* System.Void CoreImage.CIHatchedScreen::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4187 = 0x20B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2D0 /* System.Single CoreImage.CIHatchedScreen::get_Angle() */ },
		{ /* #4188 = 0x20B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2D1 /* System.Void CoreImage.CIHatchedScreen::set_Angle(System.Single) */ },
		{ /* #4189 = 0x20B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2D2 /* System.Single CoreImage.CIHatchedScreen::get_Width() */ },
		{ /* #4190 = 0x20BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2D3 /* System.Void CoreImage.CIHatchedScreen::set_Width(System.Single) */ },
		{ /* #4191 = 0x20BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2D4 /* System.Single CoreImage.CIHatchedScreen::get_Sharpness() */ },
		{ /* #4192 = 0x20BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2D5 /* System.Void CoreImage.CIHatchedScreen::set_Sharpness(System.Single) */ },
		{ /* #4193 = 0x20C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2D6 /* CoreImage.CIImage CoreImage.CIHatchedScreen::get_OutputImage() */ },
		{ /* #4194 = 0x20C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2C8 /* System.Void CoreImage.CIHatchedScreen::.ctor() */ },
		{ /* #4195 = 0x20C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2CB /* System.Void CoreImage.CIHatchedScreen::.ctor(Foundation.NSCoder) */ },
		{ /* #4196 = 0x20C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200177E /* CoreImage.ICIHeightFieldFromMaskProtocol */ },
		{ /* #4197 = 0x20C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200177F /* CoreImage.CIHeightFieldFromMaskProtocolWrapper */ },
		{ /* #4198 = 0x20CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200177D /* CoreImage.CIHeightFieldFromMask */ },
		{ /* #4199 = 0x20CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2F1 /* CoreImage.CIImage CoreImage.CIHeightFieldFromMask::get_InputImage() */ },
		{ /* #4200 = 0x20CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2F2 /* System.Void CoreImage.CIHeightFieldFromMask::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4201 = 0x20D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2F3 /* System.Single CoreImage.CIHeightFieldFromMask::get_Radius() */ },
		{ /* #4202 = 0x20D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2F4 /* System.Void CoreImage.CIHeightFieldFromMask::set_Radius(System.Single) */ },
		{ /* #4203 = 0x20D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2F5 /* CoreImage.CIImage CoreImage.CIHeightFieldFromMask::get_OutputImage() */ },
		{ /* #4204 = 0x20D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2ED /* System.Void CoreImage.CIHeightFieldFromMask::.ctor() */ },
		{ /* #4205 = 0x20D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E2F0 /* System.Void CoreImage.CIHeightFieldFromMask::.ctor(Foundation.NSCoder) */ },
		{ /* #4206 = 0x20DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001781 /* CoreImage.ICIHexagonalPixellateProtocol */ },
		{ /* #4207 = 0x20DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001782 /* CoreImage.CIHexagonalPixellateProtocolWrapper */ },
		{ /* #4208 = 0x20DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001780 /* CoreImage.CIHexagonalPixellate */ },
		{ /* #4209 = 0x20E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E304 /* CoreImage.CIImage CoreImage.CIHexagonalPixellate::get_InputImage() */ },
		{ /* #4210 = 0x20E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E305 /* System.Void CoreImage.CIHexagonalPixellate::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4211 = 0x20E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E306 /* CoreGraphics.CGPoint CoreImage.CIHexagonalPixellate::get_InputCenter() */ },
		{ /* #4212 = 0x20E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E307 /* System.Void CoreImage.CIHexagonalPixellate::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4213 = 0x20E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E308 /* System.Single CoreImage.CIHexagonalPixellate::get_Scale() */ },
		{ /* #4214 = 0x20EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E309 /* System.Void CoreImage.CIHexagonalPixellate::set_Scale(System.Single) */ },
		{ /* #4215 = 0x20ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E30A /* CoreImage.CIImage CoreImage.CIHexagonalPixellate::get_OutputImage() */ },
		{ /* #4216 = 0x20EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E300 /* System.Void CoreImage.CIHexagonalPixellate::.ctor() */ },
		{ /* #4217 = 0x20F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E303 /* System.Void CoreImage.CIHexagonalPixellate::.ctor(Foundation.NSCoder) */ },
		{ /* #4218 = 0x20F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001784 /* CoreImage.ICIHighlightShadowAdjustProtocol */ },
		{ /* #4219 = 0x20F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001785 /* CoreImage.CIHighlightShadowAdjustProtocolWrapper */ },
		{ /* #4220 = 0x20F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001783 /* CoreImage.CIHighlightShadowAdjust */ },
		{ /* #4221 = 0x20F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E31D /* CoreImage.CIImage CoreImage.CIHighlightShadowAdjust::get_InputImage() */ },
		{ /* #4222 = 0x20FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E31E /* System.Void CoreImage.CIHighlightShadowAdjust::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4223 = 0x20FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E31F /* System.Single CoreImage.CIHighlightShadowAdjust::get_Radius() */ },
		{ /* #4224 = 0x20FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E320 /* System.Void CoreImage.CIHighlightShadowAdjust::set_Radius(System.Single) */ },
		{ /* #4225 = 0x2101 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E321 /* System.Single CoreImage.CIHighlightShadowAdjust::get_ShadowAmount() */ },
		{ /* #4226 = 0x2103 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E322 /* System.Void CoreImage.CIHighlightShadowAdjust::set_ShadowAmount(System.Single) */ },
		{ /* #4227 = 0x2105 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E323 /* System.Single CoreImage.CIHighlightShadowAdjust::get_HighlightAmount() */ },
		{ /* #4228 = 0x2107 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E324 /* System.Void CoreImage.CIHighlightShadowAdjust::set_HighlightAmount(System.Single) */ },
		{ /* #4229 = 0x2109 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E325 /* CoreImage.CIImage CoreImage.CIHighlightShadowAdjust::get_OutputImage() */ },
		{ /* #4230 = 0x210B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E319 /* System.Void CoreImage.CIHighlightShadowAdjust::.ctor() */ },
		{ /* #4231 = 0x210D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E31C /* System.Void CoreImage.CIHighlightShadowAdjust::.ctor(Foundation.NSCoder) */ },
		{ /* #4232 = 0x210F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001787 /* CoreImage.ICIHistogramDisplayProtocol */ },
		{ /* #4233 = 0x2111 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001788 /* CoreImage.CIHistogramDisplayProtocolWrapper */ },
		{ /* #4234 = 0x2113 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001786 /* CoreImage.CIHistogramDisplayFilter */ },
		{ /* #4235 = 0x2115 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E33C /* CoreImage.CIImage CoreImage.CIHistogramDisplayFilter::get_InputImage() */ },
		{ /* #4236 = 0x2117 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E33D /* System.Void CoreImage.CIHistogramDisplayFilter::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4237 = 0x2119 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E33E /* System.Single CoreImage.CIHistogramDisplayFilter::get_Height() */ },
		{ /* #4238 = 0x211B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E33F /* System.Void CoreImage.CIHistogramDisplayFilter::set_Height(System.Single) */ },
		{ /* #4239 = 0x211D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E340 /* System.Single CoreImage.CIHistogramDisplayFilter::get_HighLimit() */ },
		{ /* #4240 = 0x211F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E341 /* System.Void CoreImage.CIHistogramDisplayFilter::set_HighLimit(System.Single) */ },
		{ /* #4241 = 0x2121 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E342 /* System.Single CoreImage.CIHistogramDisplayFilter::get_LowLimit() */ },
		{ /* #4242 = 0x2123 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E343 /* System.Void CoreImage.CIHistogramDisplayFilter::set_LowLimit(System.Single) */ },
		{ /* #4243 = 0x2125 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E344 /* CoreImage.CIImage CoreImage.CIHistogramDisplayFilter::get_OutputImage() */ },
		{ /* #4244 = 0x2127 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E338 /* System.Void CoreImage.CIHistogramDisplayFilter::.ctor() */ },
		{ /* #4245 = 0x2129 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E33B /* System.Void CoreImage.CIHistogramDisplayFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #4246 = 0x212B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200178A /* CoreImage.ICIHoleDistortionProtocol */ },
		{ /* #4247 = 0x212D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200178B /* CoreImage.CIHoleDistortionProtocolWrapper */ },
		{ /* #4248 = 0x212F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001789 /* CoreImage.CIHoleDistortion */ },
		{ /* #4249 = 0x2131 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E35B /* CoreImage.CIImage CoreImage.CIHoleDistortion::get_InputImage() */ },
		{ /* #4250 = 0x2133 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E35C /* System.Void CoreImage.CIHoleDistortion::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4251 = 0x2135 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E35D /* CoreGraphics.CGPoint CoreImage.CIHoleDistortion::get_InputCenter() */ },
		{ /* #4252 = 0x2137 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E35E /* System.Void CoreImage.CIHoleDistortion::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4253 = 0x2139 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E35F /* System.Single CoreImage.CIHoleDistortion::get_Radius() */ },
		{ /* #4254 = 0x213B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E360 /* System.Void CoreImage.CIHoleDistortion::set_Radius(System.Single) */ },
		{ /* #4255 = 0x213D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E361 /* CoreImage.CIImage CoreImage.CIHoleDistortion::get_OutputImage() */ },
		{ /* #4256 = 0x213F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E357 /* System.Void CoreImage.CIHoleDistortion::.ctor() */ },
		{ /* #4257 = 0x2141 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E35A /* System.Void CoreImage.CIHoleDistortion::.ctor(Foundation.NSCoder) */ },
		{ /* #4258 = 0x2143 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200178D /* CoreImage.ICIHueAdjustProtocol */ },
		{ /* #4259 = 0x2145 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200178E /* CoreImage.CIHueAdjustProtocolWrapper */ },
		{ /* #4260 = 0x2147 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200178C /* CoreImage.CIHueAdjust */ },
		{ /* #4261 = 0x2149 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E374 /* CoreImage.CIImage CoreImage.CIHueAdjust::get_InputImage() */ },
		{ /* #4262 = 0x214B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E375 /* System.Void CoreImage.CIHueAdjust::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4263 = 0x214D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E376 /* System.Single CoreImage.CIHueAdjust::get_Angle() */ },
		{ /* #4264 = 0x214F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E377 /* System.Void CoreImage.CIHueAdjust::set_Angle(System.Single) */ },
		{ /* #4265 = 0x2151 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E378 /* CoreImage.CIImage CoreImage.CIHueAdjust::get_OutputImage() */ },
		{ /* #4266 = 0x2153 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E370 /* System.Void CoreImage.CIHueAdjust::.ctor() */ },
		{ /* #4267 = 0x2155 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E373 /* System.Void CoreImage.CIHueAdjust::.ctor(Foundation.NSCoder) */ },
		{ /* #4268 = 0x2157 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200178F /* CoreImage.CIHueBlendMode */ },
		{ /* #4269 = 0x2159 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E383 /* System.Void CoreImage.CIHueBlendMode::.ctor() */ },
		{ /* #4270 = 0x215B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E386 /* System.Void CoreImage.CIHueBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #4271 = 0x215D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001791 /* CoreImage.ICIHueSaturationValueGradientProtocol */ },
		{ /* #4272 = 0x215F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001792 /* CoreImage.CIHueSaturationValueGradientProtocolWrapper */ },
		{ /* #4273 = 0x2161 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001790 /* CoreImage.CIHueSaturationValueGradient */ },
		{ /* #4274 = 0x2163 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E38B /* System.Single CoreImage.CIHueSaturationValueGradient::get_Value() */ },
		{ /* #4275 = 0x2165 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E38C /* System.Void CoreImage.CIHueSaturationValueGradient::set_Value(System.Single) */ },
		{ /* #4276 = 0x2167 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E38D /* System.Single CoreImage.CIHueSaturationValueGradient::get_Radius() */ },
		{ /* #4277 = 0x2169 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E38E /* System.Void CoreImage.CIHueSaturationValueGradient::set_Radius(System.Single) */ },
		{ /* #4278 = 0x216B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E38F /* System.Single CoreImage.CIHueSaturationValueGradient::get_Softness() */ },
		{ /* #4279 = 0x216D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E390 /* System.Void CoreImage.CIHueSaturationValueGradient::set_Softness(System.Single) */ },
		{ /* #4280 = 0x216F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E391 /* System.Single CoreImage.CIHueSaturationValueGradient::get_Dither() */ },
		{ /* #4281 = 0x2171 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E392 /* System.Void CoreImage.CIHueSaturationValueGradient::set_Dither(System.Single) */ },
		{ /* #4282 = 0x2173 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E393 /* CoreGraphics.CGColorSpace CoreImage.CIHueSaturationValueGradient::get_ColorSpace() */ },
		{ /* #4283 = 0x2175 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E394 /* System.Void CoreImage.CIHueSaturationValueGradient::set_ColorSpace(CoreGraphics.CGColorSpace) */ },
		{ /* #4284 = 0x2177 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E395 /* CoreImage.CIImage CoreImage.CIHueSaturationValueGradient::get_OutputImage() */ },
		{ /* #4285 = 0x2179 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E387 /* System.Void CoreImage.CIHueSaturationValueGradient::.ctor() */ },
		{ /* #4286 = 0x217B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E38A /* System.Void CoreImage.CIHueSaturationValueGradient::.ctor(Foundation.NSCoder) */ },
		{ /* #4287 = 0x217D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001793 /* CoreImage.CIImageAccumulator */ },
		{ /* #4288 = 0x217F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001797 /* CoreImage.ICIImageProcessorInput */ },
		{ /* #4289 = 0x2181 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001799 /* CoreImage.CIImageProcessorInputWrapper */ },
		{ /* #4290 = 0x2183 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200179A /* CoreImage.CIImageProcessorKernel */ },
		{ /* #4291 = 0x2185 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200179B /* CoreImage.ICIImageProcessorOutput */ },
		{ /* #4292 = 0x2187 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200179D /* CoreImage.CIImageProcessorOutputWrapper */ },
		{ /* #4293 = 0x2189 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017A5 /* CoreImage.ICIKaleidoscopeProtocol */ },
		{ /* #4294 = 0x218B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017A6 /* CoreImage.CIKaleidoscopeProtocolWrapper */ },
		{ /* #4295 = 0x218D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017A4 /* CoreImage.CIKaleidoscope */ },
		{ /* #4296 = 0x218F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E42C /* CoreImage.CIImage CoreImage.CIKaleidoscope::get_InputImage() */ },
		{ /* #4297 = 0x2191 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E42D /* System.Void CoreImage.CIKaleidoscope::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4298 = 0x2193 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E42E /* System.IntPtr CoreImage.CIKaleidoscope::get_InputCount() */ },
		{ /* #4299 = 0x2195 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E42F /* System.Void CoreImage.CIKaleidoscope::set_InputCount(System.IntPtr) */ },
		{ /* #4300 = 0x2197 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E430 /* CoreGraphics.CGPoint CoreImage.CIKaleidoscope::get_InputCenter() */ },
		{ /* #4301 = 0x2199 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E431 /* System.Void CoreImage.CIKaleidoscope::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4302 = 0x219B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E432 /* System.Single CoreImage.CIKaleidoscope::get_Angle() */ },
		{ /* #4303 = 0x219D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E433 /* System.Void CoreImage.CIKaleidoscope::set_Angle(System.Single) */ },
		{ /* #4304 = 0x219F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E434 /* CoreImage.CIImage CoreImage.CIKaleidoscope::get_OutputImage() */ },
		{ /* #4305 = 0x21A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E428 /* System.Void CoreImage.CIKaleidoscope::.ctor() */ },
		{ /* #4306 = 0x21A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E42B /* System.Void CoreImage.CIKaleidoscope::.ctor(Foundation.NSCoder) */ },
		{ /* #4307 = 0x21A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017A8 /* CoreImage.CIKeystoneCorrection */ },
		{ /* #4308 = 0x21A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E456 /* System.Void CoreImage.CIKeystoneCorrection::.ctor(Foundation.NSCoder) */ },
		{ /* #4309 = 0x21A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017AA /* CoreImage.ICIKeystoneCorrectionCombinedProtocol */ },
		{ /* #4310 = 0x21AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017AB /* CoreImage.CIKeystoneCorrectionCombinedProtocolWrapper */ },
		{ /* #4311 = 0x21AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017A9 /* CoreImage.CIKeystoneCorrectionCombined */ },
		{ /* #4312 = 0x21AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E467 /* System.Single CoreImage.CIKeystoneCorrectionCombined::get_FocalLength() */ },
		{ /* #4313 = 0x21B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E468 /* System.Void CoreImage.CIKeystoneCorrectionCombined::set_FocalLength(System.Single) */ },
		{ /* #4314 = 0x21B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E469 /* CoreImage.CIImage CoreImage.CIKeystoneCorrectionCombined::get_InputImage() */ },
		{ /* #4315 = 0x21B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E46A /* System.Void CoreImage.CIKeystoneCorrectionCombined::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4316 = 0x21B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E46B /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionCombined::get_InputTopLeft() */ },
		{ /* #4317 = 0x21B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E46C /* System.Void CoreImage.CIKeystoneCorrectionCombined::set_InputTopLeft(CoreGraphics.CGPoint) */ },
		{ /* #4318 = 0x21BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E46D /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionCombined::get_InputTopRight() */ },
		{ /* #4319 = 0x21BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E46E /* System.Void CoreImage.CIKeystoneCorrectionCombined::set_InputTopRight(CoreGraphics.CGPoint) */ },
		{ /* #4320 = 0x21BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E46F /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionCombined::get_InputBottomRight() */ },
		{ /* #4321 = 0x21C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E470 /* System.Void CoreImage.CIKeystoneCorrectionCombined::set_InputBottomRight(CoreGraphics.CGPoint) */ },
		{ /* #4322 = 0x21C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E471 /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionCombined::get_InputBottomLeft() */ },
		{ /* #4323 = 0x21C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E472 /* System.Void CoreImage.CIKeystoneCorrectionCombined::set_InputBottomLeft(CoreGraphics.CGPoint) */ },
		{ /* #4324 = 0x21C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E473 /* CoreImage.CIImage CoreImage.CIKeystoneCorrectionCombined::get_OutputImage() */ },
		{ /* #4325 = 0x21C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E462 /* System.Void CoreImage.CIKeystoneCorrectionCombined::.ctor() */ },
		{ /* #4326 = 0x21CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E465 /* System.Void CoreImage.CIKeystoneCorrectionCombined::.ctor(Foundation.NSCoder) */ },
		{ /* #4327 = 0x21CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017AD /* CoreImage.ICIKeystoneCorrectionHorizontalProtocol */ },
		{ /* #4328 = 0x21CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017AE /* CoreImage.CIKeystoneCorrectionHorizontalProtocolWrapper */ },
		{ /* #4329 = 0x21D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017AC /* CoreImage.CIKeystoneCorrectionHorizontal */ },
		{ /* #4330 = 0x21D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E489 /* System.Single CoreImage.CIKeystoneCorrectionHorizontal::get_FocalLength() */ },
		{ /* #4331 = 0x21D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E48A /* System.Void CoreImage.CIKeystoneCorrectionHorizontal::set_FocalLength(System.Single) */ },
		{ /* #4332 = 0x21D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E48B /* CoreImage.CIImage CoreImage.CIKeystoneCorrectionHorizontal::get_InputImage() */ },
		{ /* #4333 = 0x21D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E48C /* System.Void CoreImage.CIKeystoneCorrectionHorizontal::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4334 = 0x21DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E48D /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionHorizontal::get_InputTopLeft() */ },
		{ /* #4335 = 0x21DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E48E /* System.Void CoreImage.CIKeystoneCorrectionHorizontal::set_InputTopLeft(CoreGraphics.CGPoint) */ },
		{ /* #4336 = 0x21DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E48F /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionHorizontal::get_InputTopRight() */ },
		{ /* #4337 = 0x21E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E490 /* System.Void CoreImage.CIKeystoneCorrectionHorizontal::set_InputTopRight(CoreGraphics.CGPoint) */ },
		{ /* #4338 = 0x21E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E491 /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionHorizontal::get_InputBottomRight() */ },
		{ /* #4339 = 0x21E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E492 /* System.Void CoreImage.CIKeystoneCorrectionHorizontal::set_InputBottomRight(CoreGraphics.CGPoint) */ },
		{ /* #4340 = 0x21E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E493 /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionHorizontal::get_InputBottomLeft() */ },
		{ /* #4341 = 0x21E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E494 /* System.Void CoreImage.CIKeystoneCorrectionHorizontal::set_InputBottomLeft(CoreGraphics.CGPoint) */ },
		{ /* #4342 = 0x21EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E495 /* CoreImage.CIImage CoreImage.CIKeystoneCorrectionHorizontal::get_OutputImage() */ },
		{ /* #4343 = 0x21ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E484 /* System.Void CoreImage.CIKeystoneCorrectionHorizontal::.ctor() */ },
		{ /* #4344 = 0x21EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E487 /* System.Void CoreImage.CIKeystoneCorrectionHorizontal::.ctor(Foundation.NSCoder) */ },
		{ /* #4345 = 0x21F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017B0 /* CoreImage.ICIKeystoneCorrectionVerticalProtocol */ },
		{ /* #4346 = 0x21F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017B1 /* CoreImage.CIKeystoneCorrectionVerticalProtocolWrapper */ },
		{ /* #4347 = 0x21F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017AF /* CoreImage.CIKeystoneCorrectionVertical */ },
		{ /* #4348 = 0x21F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4AB /* System.Single CoreImage.CIKeystoneCorrectionVertical::get_FocalLength() */ },
		{ /* #4349 = 0x21F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4AC /* System.Void CoreImage.CIKeystoneCorrectionVertical::set_FocalLength(System.Single) */ },
		{ /* #4350 = 0x21FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4AD /* CoreImage.CIImage CoreImage.CIKeystoneCorrectionVertical::get_InputImage() */ },
		{ /* #4351 = 0x21FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4AE /* System.Void CoreImage.CIKeystoneCorrectionVertical::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4352 = 0x21FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4AF /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionVertical::get_InputTopLeft() */ },
		{ /* #4353 = 0x2201 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4B0 /* System.Void CoreImage.CIKeystoneCorrectionVertical::set_InputTopLeft(CoreGraphics.CGPoint) */ },
		{ /* #4354 = 0x2203 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4B1 /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionVertical::get_InputTopRight() */ },
		{ /* #4355 = 0x2205 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4B2 /* System.Void CoreImage.CIKeystoneCorrectionVertical::set_InputTopRight(CoreGraphics.CGPoint) */ },
		{ /* #4356 = 0x2207 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4B3 /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionVertical::get_InputBottomRight() */ },
		{ /* #4357 = 0x2209 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4B4 /* System.Void CoreImage.CIKeystoneCorrectionVertical::set_InputBottomRight(CoreGraphics.CGPoint) */ },
		{ /* #4358 = 0x220B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4B5 /* CoreGraphics.CGPoint CoreImage.CIKeystoneCorrectionVertical::get_InputBottomLeft() */ },
		{ /* #4359 = 0x220D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4B6 /* System.Void CoreImage.CIKeystoneCorrectionVertical::set_InputBottomLeft(CoreGraphics.CGPoint) */ },
		{ /* #4360 = 0x220F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4B7 /* CoreImage.CIImage CoreImage.CIKeystoneCorrectionVertical::get_OutputImage() */ },
		{ /* #4361 = 0x2211 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4A6 /* System.Void CoreImage.CIKeystoneCorrectionVertical::.ctor() */ },
		{ /* #4362 = 0x2213 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4A9 /* System.Void CoreImage.CIKeystoneCorrectionVertical::.ctor(Foundation.NSCoder) */ },
		{ /* #4363 = 0x2215 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017B3 /* CoreImage.ICIKMeansProtocol */ },
		{ /* #4364 = 0x2217 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017B4 /* CoreImage.CIKMeansProtocolWrapper */ },
		{ /* #4365 = 0x2219 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017B2 /* CoreImage.CIKMeans */ },
		{ /* #4366 = 0x221B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4CC /* CoreImage.CIImage CoreImage.CIKMeans::get_Means() */ },
		{ /* #4367 = 0x221D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4CD /* System.Void CoreImage.CIKMeans::set_Means(CoreImage.CIImage) */ },
		{ /* #4368 = 0x221F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4CE /* System.IntPtr CoreImage.CIKMeans::get_InputCount() */ },
		{ /* #4369 = 0x2221 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4CF /* System.Void CoreImage.CIKMeans::set_InputCount(System.IntPtr) */ },
		{ /* #4370 = 0x2223 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4D0 /* System.Single CoreImage.CIKMeans::get_InputPasses() */ },
		{ /* #4371 = 0x2225 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4D1 /* System.Void CoreImage.CIKMeans::set_InputPasses(System.Single) */ },
		{ /* #4372 = 0x2227 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4D2 /* System.Boolean CoreImage.CIKMeans::get_Perceptual() */ },
		{ /* #4373 = 0x2229 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4D3 /* System.Void CoreImage.CIKMeans::set_Perceptual(System.Boolean) */ },
		{ /* #4374 = 0x222B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4D4 /* CoreImage.CIImage CoreImage.CIKMeans::get_InputImage() */ },
		{ /* #4375 = 0x222D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4D5 /* System.Void CoreImage.CIKMeans::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4376 = 0x222F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4D6 /* CoreGraphics.CGRect CoreImage.CIKMeans::get_InputExtent() */ },
		{ /* #4377 = 0x2231 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4D7 /* System.Void CoreImage.CIKMeans::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #4378 = 0x2233 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4D8 /* CoreImage.CIImage CoreImage.CIKMeans::get_OutputImage() */ },
		{ /* #4379 = 0x2235 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4C8 /* System.Void CoreImage.CIKMeans::.ctor() */ },
		{ /* #4380 = 0x2237 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4CB /* System.Void CoreImage.CIKMeans::.ctor(Foundation.NSCoder) */ },
		{ /* #4381 = 0x2239 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017B6 /* CoreImage.ICILabDeltaEProtocol */ },
		{ /* #4382 = 0x223B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017B7 /* CoreImage.CILabDeltaEProtocolWrapper */ },
		{ /* #4383 = 0x223D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017B5 /* CoreImage.CILabDeltaE */ },
		{ /* #4384 = 0x223F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4F3 /* CoreImage.CIImage CoreImage.CILabDeltaE::get_InputImage() */ },
		{ /* #4385 = 0x2241 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4F4 /* System.Void CoreImage.CILabDeltaE::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4386 = 0x2243 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4F5 /* CoreImage.CIImage CoreImage.CILabDeltaE::get_Image2() */ },
		{ /* #4387 = 0x2245 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4F6 /* System.Void CoreImage.CILabDeltaE::set_Image2(CoreImage.CIImage) */ },
		{ /* #4388 = 0x2247 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4F7 /* CoreImage.CIImage CoreImage.CILabDeltaE::get_OutputImage() */ },
		{ /* #4389 = 0x2249 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4EF /* System.Void CoreImage.CILabDeltaE::.ctor() */ },
		{ /* #4390 = 0x224B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E4F2 /* System.Void CoreImage.CILabDeltaE::.ctor(Foundation.NSCoder) */ },
		{ /* #4391 = 0x224D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017B9 /* CoreImage.ICILanczosScaleTransformProtocol */ },
		{ /* #4392 = 0x224F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017BA /* CoreImage.CILanczosScaleTransformProtocolWrapper */ },
		{ /* #4393 = 0x2251 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017B8 /* CoreImage.CILanczosScaleTransform */ },
		{ /* #4394 = 0x2253 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E506 /* CoreImage.CIImage CoreImage.CILanczosScaleTransform::get_InputImage() */ },
		{ /* #4395 = 0x2255 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E507 /* System.Void CoreImage.CILanczosScaleTransform::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4396 = 0x2257 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E508 /* System.Single CoreImage.CILanczosScaleTransform::get_Scale() */ },
		{ /* #4397 = 0x2259 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E509 /* System.Void CoreImage.CILanczosScaleTransform::set_Scale(System.Single) */ },
		{ /* #4398 = 0x225B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E50A /* System.Single CoreImage.CILanczosScaleTransform::get_AspectRatio() */ },
		{ /* #4399 = 0x225D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E50B /* System.Void CoreImage.CILanczosScaleTransform::set_AspectRatio(System.Single) */ },
		{ /* #4400 = 0x225F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E50C /* CoreImage.CIImage CoreImage.CILanczosScaleTransform::get_OutputImage() */ },
		{ /* #4401 = 0x2261 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E502 /* System.Void CoreImage.CILanczosScaleTransform::.ctor() */ },
		{ /* #4402 = 0x2263 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E505 /* System.Void CoreImage.CILanczosScaleTransform::.ctor(Foundation.NSCoder) */ },
		{ /* #4403 = 0x2265 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017BC /* CoreImage.ICILenticularHaloGeneratorProtocol */ },
		{ /* #4404 = 0x2267 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017BD /* CoreImage.CILenticularHaloGeneratorProtocolWrapper */ },
		{ /* #4405 = 0x2269 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017BB /* CoreImage.CILenticularHaloGenerator */ },
		{ /* #4406 = 0x226B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E51F /* CoreGraphics.CGPoint CoreImage.CILenticularHaloGenerator::get_InputCenter() */ },
		{ /* #4407 = 0x226D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E520 /* System.Void CoreImage.CILenticularHaloGenerator::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4408 = 0x226F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E521 /* CoreImage.CIColor CoreImage.CILenticularHaloGenerator::get_Color() */ },
		{ /* #4409 = 0x2271 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E522 /* System.Void CoreImage.CILenticularHaloGenerator::set_Color(CoreImage.CIColor) */ },
		{ /* #4410 = 0x2273 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E523 /* System.Single CoreImage.CILenticularHaloGenerator::get_HaloRadius() */ },
		{ /* #4411 = 0x2275 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E524 /* System.Void CoreImage.CILenticularHaloGenerator::set_HaloRadius(System.Single) */ },
		{ /* #4412 = 0x2277 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E525 /* System.Single CoreImage.CILenticularHaloGenerator::get_HaloWidth() */ },
		{ /* #4413 = 0x2279 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E526 /* System.Void CoreImage.CILenticularHaloGenerator::set_HaloWidth(System.Single) */ },
		{ /* #4414 = 0x227B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E527 /* System.Single CoreImage.CILenticularHaloGenerator::get_HaloOverlap() */ },
		{ /* #4415 = 0x227D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E528 /* System.Void CoreImage.CILenticularHaloGenerator::set_HaloOverlap(System.Single) */ },
		{ /* #4416 = 0x227F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E529 /* System.Single CoreImage.CILenticularHaloGenerator::get_StriationStrength() */ },
		{ /* #4417 = 0x2281 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E52A /* System.Void CoreImage.CILenticularHaloGenerator::set_StriationStrength(System.Single) */ },
		{ /* #4418 = 0x2283 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E52B /* System.Single CoreImage.CILenticularHaloGenerator::get_StriationContrast() */ },
		{ /* #4419 = 0x2285 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E52C /* System.Void CoreImage.CILenticularHaloGenerator::set_StriationContrast(System.Single) */ },
		{ /* #4420 = 0x2287 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E52D /* System.Single CoreImage.CILenticularHaloGenerator::get_Time() */ },
		{ /* #4421 = 0x2289 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E52E /* System.Void CoreImage.CILenticularHaloGenerator::set_Time(System.Single) */ },
		{ /* #4422 = 0x228B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E52F /* CoreImage.CIImage CoreImage.CILenticularHaloGenerator::get_OutputImage() */ },
		{ /* #4423 = 0x228D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E51B /* System.Void CoreImage.CILenticularHaloGenerator::.ctor() */ },
		{ /* #4424 = 0x228F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E51E /* System.Void CoreImage.CILenticularHaloGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #4425 = 0x2291 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017BE /* CoreImage.CILightenBlendMode */ },
		{ /* #4426 = 0x2293 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E552 /* System.Void CoreImage.CILightenBlendMode::.ctor() */ },
		{ /* #4427 = 0x2295 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E555 /* System.Void CoreImage.CILightenBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #4428 = 0x2297 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017C0 /* CoreImage.ICILightTunnelProtocol */ },
		{ /* #4429 = 0x2299 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017C1 /* CoreImage.CILightTunnelProtocolWrapper */ },
		{ /* #4430 = 0x229B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017BF /* CoreImage.CILightTunnel */ },
		{ /* #4431 = 0x229D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E55A /* CoreImage.CIImage CoreImage.CILightTunnel::get_InputImage() */ },
		{ /* #4432 = 0x229F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E55B /* System.Void CoreImage.CILightTunnel::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4433 = 0x22A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E55C /* CoreGraphics.CGPoint CoreImage.CILightTunnel::get_InputCenter() */ },
		{ /* #4434 = 0x22A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E55D /* System.Void CoreImage.CILightTunnel::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4435 = 0x22A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E55E /* System.Single CoreImage.CILightTunnel::get_Rotation() */ },
		{ /* #4436 = 0x22A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E55F /* System.Void CoreImage.CILightTunnel::set_Rotation(System.Single) */ },
		{ /* #4437 = 0x22A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E560 /* System.Single CoreImage.CILightTunnel::get_Radius() */ },
		{ /* #4438 = 0x22AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E561 /* System.Void CoreImage.CILightTunnel::set_Radius(System.Single) */ },
		{ /* #4439 = 0x22AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E562 /* CoreImage.CIImage CoreImage.CILightTunnel::get_OutputImage() */ },
		{ /* #4440 = 0x22AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E556 /* System.Void CoreImage.CILightTunnel::.ctor() */ },
		{ /* #4441 = 0x22B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E559 /* System.Void CoreImage.CILightTunnel::.ctor(Foundation.NSCoder) */ },
		{ /* #4442 = 0x22B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017C3 /* CoreImage.CILinearBurnBlendMode */ },
		{ /* #4443 = 0x22B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E57B /* System.Void CoreImage.CILinearBurnBlendMode::.ctor() */ },
		{ /* #4444 = 0x22B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E57E /* System.Void CoreImage.CILinearBurnBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #4445 = 0x22B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017C4 /* CoreImage.CILinearDodgeBlendMode */ },
		{ /* #4446 = 0x22BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E57F /* System.Void CoreImage.CILinearDodgeBlendMode::.ctor() */ },
		{ /* #4447 = 0x22BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E582 /* System.Void CoreImage.CILinearDodgeBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #4448 = 0x22BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017C6 /* CoreImage.ICILinearGradientProtocol */ },
		{ /* #4449 = 0x22C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017C7 /* CoreImage.CILinearGradientProtocolWrapper */ },
		{ /* #4450 = 0x22C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017C5 /* CoreImage.CILinearGradient */ },
		{ /* #4451 = 0x22C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E588 /* CoreGraphics.CGPoint CoreImage.CILinearGradient::get_InputPoint0() */ },
		{ /* #4452 = 0x22C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E589 /* System.Void CoreImage.CILinearGradient::set_InputPoint0(CoreGraphics.CGPoint) */ },
		{ /* #4453 = 0x22C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E58A /* CoreGraphics.CGPoint CoreImage.CILinearGradient::get_InputPoint1() */ },
		{ /* #4454 = 0x22CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E58B /* System.Void CoreImage.CILinearGradient::set_InputPoint1(CoreGraphics.CGPoint) */ },
		{ /* #4455 = 0x22CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E58C /* CoreImage.CIColor CoreImage.CILinearGradient::get_Color0() */ },
		{ /* #4456 = 0x22CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E58D /* System.Void CoreImage.CILinearGradient::set_Color0(CoreImage.CIColor) */ },
		{ /* #4457 = 0x22D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E58E /* CoreImage.CIColor CoreImage.CILinearGradient::get_Color1() */ },
		{ /* #4458 = 0x22D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E58F /* System.Void CoreImage.CILinearGradient::set_Color1(CoreImage.CIColor) */ },
		{ /* #4459 = 0x22D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E590 /* CoreImage.CIImage CoreImage.CILinearGradient::get_OutputImage() */ },
		{ /* #4460 = 0x22D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E583 /* System.Void CoreImage.CILinearGradient::.ctor() */ },
		{ /* #4461 = 0x22D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E586 /* System.Void CoreImage.CILinearGradient::.ctor(Foundation.NSCoder) */ },
		{ /* #4462 = 0x22DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017C8 /* CoreImage.CILinearLightBlendMode */ },
		{ /* #4463 = 0x22DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5AB /* CoreImage.CIImage CoreImage.CILinearLightBlendMode::get_OutputImage() */ },
		{ /* #4464 = 0x22DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5A3 /* System.Void CoreImage.CILinearLightBlendMode::.ctor() */ },
		{ /* #4465 = 0x22E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5A6 /* System.Void CoreImage.CILinearLightBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #4466 = 0x22E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017CA /* CoreImage.ICILinearToSrgbToneCurveProtocol */ },
		{ /* #4467 = 0x22E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017CB /* CoreImage.CILinearToSrgbToneCurveProtocolWrapper */ },
		{ /* #4468 = 0x22E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017C9 /* CoreImage.CILinearToSRGBToneCurve */ },
		{ /* #4469 = 0x22E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5B0 /* CoreImage.CIImage CoreImage.CILinearToSRGBToneCurve::get_InputImage() */ },
		{ /* #4470 = 0x22EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5B1 /* System.Void CoreImage.CILinearToSRGBToneCurve::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4471 = 0x22ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5B2 /* CoreImage.CIImage CoreImage.CILinearToSRGBToneCurve::get_OutputImage() */ },
		{ /* #4472 = 0x22EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5AC /* System.Void CoreImage.CILinearToSRGBToneCurve::.ctor() */ },
		{ /* #4473 = 0x22F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5AF /* System.Void CoreImage.CILinearToSRGBToneCurve::.ctor(Foundation.NSCoder) */ },
		{ /* #4474 = 0x22F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017CD /* CoreImage.ICILineOverlayProtocol */ },
		{ /* #4475 = 0x22F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017CE /* CoreImage.CILineOverlayProtocolWrapper */ },
		{ /* #4476 = 0x22F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017CC /* CoreImage.CILineOverlay */ },
		{ /* #4477 = 0x22F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5BD /* CoreImage.CIImage CoreImage.CILineOverlay::get_InputImage() */ },
		{ /* #4478 = 0x22FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5BE /* System.Void CoreImage.CILineOverlay::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4479 = 0x22FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5BF /* System.Single CoreImage.CILineOverlay::get_NRNoiseLevel() */ },
		{ /* #4480 = 0x22FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5C0 /* System.Void CoreImage.CILineOverlay::set_NRNoiseLevel(System.Single) */ },
		{ /* #4481 = 0x2301 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5C1 /* System.Single CoreImage.CILineOverlay::get_NRSharpness() */ },
		{ /* #4482 = 0x2303 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5C2 /* System.Void CoreImage.CILineOverlay::set_NRSharpness(System.Single) */ },
		{ /* #4483 = 0x2305 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5C3 /* System.Single CoreImage.CILineOverlay::get_EdgeIntensity() */ },
		{ /* #4484 = 0x2307 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5C4 /* System.Void CoreImage.CILineOverlay::set_EdgeIntensity(System.Single) */ },
		{ /* #4485 = 0x2309 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5C5 /* System.Single CoreImage.CILineOverlay::get_Threshold() */ },
		{ /* #4486 = 0x230B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5C6 /* System.Void CoreImage.CILineOverlay::set_Threshold(System.Single) */ },
		{ /* #4487 = 0x230D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5C7 /* System.Single CoreImage.CILineOverlay::get_Contrast() */ },
		{ /* #4488 = 0x230F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5C8 /* System.Void CoreImage.CILineOverlay::set_Contrast(System.Single) */ },
		{ /* #4489 = 0x2311 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5C9 /* CoreImage.CIImage CoreImage.CILineOverlay::get_OutputImage() */ },
		{ /* #4490 = 0x2313 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5B9 /* System.Void CoreImage.CILineOverlay::.ctor() */ },
		{ /* #4491 = 0x2315 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5BC /* System.Void CoreImage.CILineOverlay::.ctor(Foundation.NSCoder) */ },
		{ /* #4492 = 0x2317 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017D0 /* CoreImage.ICILineScreenProtocol */ },
		{ /* #4493 = 0x2319 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017D1 /* CoreImage.CILineScreenProtocolWrapper */ },
		{ /* #4494 = 0x231B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017CF /* CoreImage.CILineScreen */ },
		{ /* #4495 = 0x231D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5E8 /* CoreImage.CIImage CoreImage.CILineScreen::get_InputImage() */ },
		{ /* #4496 = 0x231F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5E9 /* System.Void CoreImage.CILineScreen::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4497 = 0x2321 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5EA /* CoreGraphics.CGPoint CoreImage.CILineScreen::get_InputCenter() */ },
		{ /* #4498 = 0x2323 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5EB /* System.Void CoreImage.CILineScreen::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4499 = 0x2325 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5EC /* System.Single CoreImage.CILineScreen::get_Angle() */ },
		{ /* #4500 = 0x2327 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5ED /* System.Void CoreImage.CILineScreen::set_Angle(System.Single) */ },
		{ /* #4501 = 0x2329 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5EE /* System.Single CoreImage.CILineScreen::get_Width() */ },
		{ /* #4502 = 0x232B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5EF /* System.Void CoreImage.CILineScreen::set_Width(System.Single) */ },
		{ /* #4503 = 0x232D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5F0 /* System.Single CoreImage.CILineScreen::get_Sharpness() */ },
		{ /* #4504 = 0x232F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5F1 /* System.Void CoreImage.CILineScreen::set_Sharpness(System.Single) */ },
		{ /* #4505 = 0x2331 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5F2 /* CoreImage.CIImage CoreImage.CILineScreen::get_OutputImage() */ },
		{ /* #4506 = 0x2333 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5E4 /* System.Void CoreImage.CILineScreen::.ctor() */ },
		{ /* #4507 = 0x2335 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E5E7 /* System.Void CoreImage.CILineScreen::.ctor(Foundation.NSCoder) */ },
		{ /* #4508 = 0x2337 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017D2 /* CoreImage.CILuminosityBlendMode */ },
		{ /* #4509 = 0x2339 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E609 /* System.Void CoreImage.CILuminosityBlendMode::.ctor() */ },
		{ /* #4510 = 0x233B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E60C /* System.Void CoreImage.CILuminosityBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #4511 = 0x233D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017D4 /* CoreImage.ICIMaskedVariableBlurProtocol */ },
		{ /* #4512 = 0x233F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017D5 /* CoreImage.CIMaskedVariableBlurProtocolWrapper */ },
		{ /* #4513 = 0x2341 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017D3 /* CoreImage.CIMaskedVariableBlur */ },
		{ /* #4514 = 0x2343 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E611 /* CoreImage.CIImage CoreImage.CIMaskedVariableBlur::get_InputImage() */ },
		{ /* #4515 = 0x2345 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E612 /* System.Void CoreImage.CIMaskedVariableBlur::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4516 = 0x2347 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E613 /* CoreImage.CIImage CoreImage.CIMaskedVariableBlur::get_Mask() */ },
		{ /* #4517 = 0x2349 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E614 /* System.Void CoreImage.CIMaskedVariableBlur::set_Mask(CoreImage.CIImage) */ },
		{ /* #4518 = 0x234B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E615 /* System.Single CoreImage.CIMaskedVariableBlur::get_Radius() */ },
		{ /* #4519 = 0x234D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E616 /* System.Void CoreImage.CIMaskedVariableBlur::set_Radius(System.Single) */ },
		{ /* #4520 = 0x234F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E617 /* CoreImage.CIImage CoreImage.CIMaskedVariableBlur::get_OutputImage() */ },
		{ /* #4521 = 0x2351 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E60D /* System.Void CoreImage.CIMaskedVariableBlur::.ctor() */ },
		{ /* #4522 = 0x2353 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E610 /* System.Void CoreImage.CIMaskedVariableBlur::.ctor(Foundation.NSCoder) */ },
		{ /* #4523 = 0x2355 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017D7 /* CoreImage.ICIMaskToAlphaProtocol */ },
		{ /* #4524 = 0x2357 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017D8 /* CoreImage.CIMaskToAlphaProtocolWrapper */ },
		{ /* #4525 = 0x2359 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017D6 /* CoreImage.CIMaskToAlpha */ },
		{ /* #4526 = 0x235B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E62A /* CoreImage.CIImage CoreImage.CIMaskToAlpha::get_InputImage() */ },
		{ /* #4527 = 0x235D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E62B /* System.Void CoreImage.CIMaskToAlpha::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4528 = 0x235F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E62C /* CoreImage.CIImage CoreImage.CIMaskToAlpha::get_OutputImage() */ },
		{ /* #4529 = 0x2361 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E626 /* System.Void CoreImage.CIMaskToAlpha::.ctor() */ },
		{ /* #4530 = 0x2363 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E629 /* System.Void CoreImage.CIMaskToAlpha::.ctor(Foundation.NSCoder) */ },
		{ /* #4531 = 0x2365 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017DA /* CoreImage.ICIMaximumComponentProtocol */ },
		{ /* #4532 = 0x2367 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017DB /* CoreImage.CIMaximumComponentProtocolWrapper */ },
		{ /* #4533 = 0x2369 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017D9 /* CoreImage.CIMaximumComponent */ },
		{ /* #4534 = 0x236B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E637 /* CoreImage.CIImage CoreImage.CIMaximumComponent::get_InputImage() */ },
		{ /* #4535 = 0x236D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E638 /* System.Void CoreImage.CIMaximumComponent::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4536 = 0x236F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E639 /* CoreImage.CIImage CoreImage.CIMaximumComponent::get_OutputImage() */ },
		{ /* #4537 = 0x2371 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E633 /* System.Void CoreImage.CIMaximumComponent::.ctor() */ },
		{ /* #4538 = 0x2373 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E636 /* System.Void CoreImage.CIMaximumComponent::.ctor(Foundation.NSCoder) */ },
		{ /* #4539 = 0x2375 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017DC /* CoreImage.CIMaximumCompositing */ },
		{ /* #4540 = 0x2377 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E640 /* System.Void CoreImage.CIMaximumCompositing::.ctor() */ },
		{ /* #4541 = 0x2379 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E643 /* System.Void CoreImage.CIMaximumCompositing::.ctor(Foundation.NSCoder) */ },
		{ /* #4542 = 0x237B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017DE /* CoreImage.ICIMedianProtocol */ },
		{ /* #4543 = 0x237D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017DF /* CoreImage.CIMedianProtocolWrapper */ },
		{ /* #4544 = 0x237F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017DD /* CoreImage.CIMedianFilter */ },
		{ /* #4545 = 0x2381 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E648 /* CoreImage.CIImage CoreImage.CIMedianFilter::get_InputImage() */ },
		{ /* #4546 = 0x2383 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E649 /* System.Void CoreImage.CIMedianFilter::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4547 = 0x2385 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E64A /* CoreImage.CIImage CoreImage.CIMedianFilter::get_OutputImage() */ },
		{ /* #4548 = 0x2387 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E644 /* System.Void CoreImage.CIMedianFilter::.ctor() */ },
		{ /* #4549 = 0x2389 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E647 /* System.Void CoreImage.CIMedianFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #4550 = 0x238B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017E1 /* CoreImage.ICIMeshGeneratorProtocol */ },
		{ /* #4551 = 0x238D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017E2 /* CoreImage.CIMeshGeneratorProtocolWrapper */ },
		{ /* #4552 = 0x238F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017E0 /* CoreImage.CIMeshGenerator */ },
		{ /* #4553 = 0x2391 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E655 /* System.Single CoreImage.CIMeshGenerator::get_Width() */ },
		{ /* #4554 = 0x2393 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E656 /* System.Void CoreImage.CIMeshGenerator::set_Width(System.Single) */ },
		{ /* #4555 = 0x2395 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E657 /* CoreImage.CIColor CoreImage.CIMeshGenerator::get_Color() */ },
		{ /* #4556 = 0x2397 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E658 /* System.Void CoreImage.CIMeshGenerator::set_Color(CoreImage.CIColor) */ },
		{ /* #4557 = 0x2399 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E659 /* CoreImage.CIVector[] CoreImage.CIMeshGenerator::get_Mesh() */ },
		{ /* #4558 = 0x239B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E65A /* System.Void CoreImage.CIMeshGenerator::set_Mesh(CoreImage.CIVector[]) */ },
		{ /* #4559 = 0x239D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E65B /* CoreImage.CIImage CoreImage.CIMeshGenerator::get_OutputImage() */ },
		{ /* #4560 = 0x239F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E651 /* System.Void CoreImage.CIMeshGenerator::.ctor() */ },
		{ /* #4561 = 0x23A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E654 /* System.Void CoreImage.CIMeshGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #4562 = 0x23A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017E4 /* CoreImage.ICIMinimumComponentProtocol */ },
		{ /* #4563 = 0x23A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017E5 /* CoreImage.CIMinimumComponentProtocolWrapper */ },
		{ /* #4564 = 0x23A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017E3 /* CoreImage.CIMinimumComponent */ },
		{ /* #4565 = 0x23A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E66E /* CoreImage.CIImage CoreImage.CIMinimumComponent::get_InputImage() */ },
		{ /* #4566 = 0x23AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E66F /* System.Void CoreImage.CIMinimumComponent::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4567 = 0x23AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E670 /* CoreImage.CIImage CoreImage.CIMinimumComponent::get_OutputImage() */ },
		{ /* #4568 = 0x23AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E66A /* System.Void CoreImage.CIMinimumComponent::.ctor() */ },
		{ /* #4569 = 0x23B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E66D /* System.Void CoreImage.CIMinimumComponent::.ctor(Foundation.NSCoder) */ },
		{ /* #4570 = 0x23B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017E6 /* CoreImage.CIMinimumCompositing */ },
		{ /* #4571 = 0x23B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E677 /* System.Void CoreImage.CIMinimumCompositing::.ctor() */ },
		{ /* #4572 = 0x23B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E67A /* System.Void CoreImage.CIMinimumCompositing::.ctor(Foundation.NSCoder) */ },
		{ /* #4573 = 0x23B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017E8 /* CoreImage.ICIMixProtocol */ },
		{ /* #4574 = 0x23BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017E9 /* CoreImage.CIMixProtocolWrapper */ },
		{ /* #4575 = 0x23BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017E7 /* CoreImage.CIMix */ },
		{ /* #4576 = 0x23BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E67F /* CoreImage.CIImage CoreImage.CIMix::get_InputImage() */ },
		{ /* #4577 = 0x23C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E680 /* System.Void CoreImage.CIMix::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4578 = 0x23C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E681 /* CoreImage.CIImage CoreImage.CIMix::get_BackgroundImage() */ },
		{ /* #4579 = 0x23C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E682 /* System.Void CoreImage.CIMix::set_BackgroundImage(CoreImage.CIImage) */ },
		{ /* #4580 = 0x23C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E683 /* System.Single CoreImage.CIMix::get_Amount() */ },
		{ /* #4581 = 0x23C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E684 /* System.Void CoreImage.CIMix::set_Amount(System.Single) */ },
		{ /* #4582 = 0x23CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E685 /* CoreImage.CIImage CoreImage.CIMix::get_OutputImage() */ },
		{ /* #4583 = 0x23CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E67B /* System.Void CoreImage.CIMix::.ctor() */ },
		{ /* #4584 = 0x23CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E67E /* System.Void CoreImage.CIMix::.ctor(Foundation.NSCoder) */ },
		{ /* #4585 = 0x23D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017EB /* CoreImage.ICIModTransitionProtocol */ },
		{ /* #4586 = 0x23D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017EC /* CoreImage.CIModTransitionProtocolWrapper */ },
		{ /* #4587 = 0x23D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017EA /* CoreImage.CIModTransition */ },
		{ /* #4588 = 0x23D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E698 /* CoreGraphics.CGPoint CoreImage.CIModTransition::get_InputCenter() */ },
		{ /* #4589 = 0x23D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E699 /* System.Void CoreImage.CIModTransition::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4590 = 0x23DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E69A /* System.Single CoreImage.CIModTransition::get_Angle() */ },
		{ /* #4591 = 0x23DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E69B /* System.Void CoreImage.CIModTransition::set_Angle(System.Single) */ },
		{ /* #4592 = 0x23DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E69C /* System.Single CoreImage.CIModTransition::get_Radius() */ },
		{ /* #4593 = 0x23E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E69D /* System.Void CoreImage.CIModTransition::set_Radius(System.Single) */ },
		{ /* #4594 = 0x23E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E69E /* System.Single CoreImage.CIModTransition::get_Compression() */ },
		{ /* #4595 = 0x23E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E69F /* System.Void CoreImage.CIModTransition::set_Compression(System.Single) */ },
		{ /* #4596 = 0x23E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6A0 /* CoreImage.CIImage CoreImage.CIModTransition::get_InputImage() */ },
		{ /* #4597 = 0x23E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6A1 /* System.Void CoreImage.CIModTransition::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4598 = 0x23EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6A2 /* CoreImage.CIImage CoreImage.CIModTransition::get_TargetImage() */ },
		{ /* #4599 = 0x23ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6A3 /* System.Void CoreImage.CIModTransition::set_TargetImage(CoreImage.CIImage) */ },
		{ /* #4600 = 0x23EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6A4 /* System.Single CoreImage.CIModTransition::get_Time() */ },
		{ /* #4601 = 0x23F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6A5 /* System.Void CoreImage.CIModTransition::set_Time(System.Single) */ },
		{ /* #4602 = 0x23F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6A6 /* CoreImage.CIImage CoreImage.CIModTransition::get_OutputImage() */ },
		{ /* #4603 = 0x23F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E694 /* System.Void CoreImage.CIModTransition::.ctor() */ },
		{ /* #4604 = 0x23F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E697 /* System.Void CoreImage.CIModTransition::.ctor(Foundation.NSCoder) */ },
		{ /* #4605 = 0x23F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017ED /* CoreImage.CIMorphology */ },
		{ /* #4606 = 0x23FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6C1 /* System.Void CoreImage.CIMorphology::.ctor(Foundation.NSCoder) */ },
		{ /* #4607 = 0x23FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017EF /* CoreImage.ICIMorphologyGradientProtocol */ },
		{ /* #4608 = 0x23FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017F0 /* CoreImage.CIMorphologyGradientProtocolWrapper */ },
		{ /* #4609 = 0x2401 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017EE /* CoreImage.CIMorphologyGradient */ },
		{ /* #4610 = 0x2403 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6C9 /* CoreImage.CIImage CoreImage.CIMorphologyGradient::get_InputImage() */ },
		{ /* #4611 = 0x2405 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6CA /* System.Void CoreImage.CIMorphologyGradient::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4612 = 0x2407 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6CB /* System.Single CoreImage.CIMorphologyGradient::get_Radius() */ },
		{ /* #4613 = 0x2409 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6CC /* System.Void CoreImage.CIMorphologyGradient::set_Radius(System.Single) */ },
		{ /* #4614 = 0x240B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6CD /* CoreImage.CIImage CoreImage.CIMorphologyGradient::get_OutputImage() */ },
		{ /* #4615 = 0x240D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6C5 /* System.Void CoreImage.CIMorphologyGradient::.ctor() */ },
		{ /* #4616 = 0x240F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6C8 /* System.Void CoreImage.CIMorphologyGradient::.ctor(Foundation.NSCoder) */ },
		{ /* #4617 = 0x2411 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017F2 /* CoreImage.ICIMorphologyMaximumProtocol */ },
		{ /* #4618 = 0x2413 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017F3 /* CoreImage.CIMorphologyMaximumProtocolWrapper */ },
		{ /* #4619 = 0x2415 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017F1 /* CoreImage.CIMorphologyMaximum */ },
		{ /* #4620 = 0x2417 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6DC /* CoreImage.CIImage CoreImage.CIMorphologyMaximum::get_InputImage() */ },
		{ /* #4621 = 0x2419 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6DD /* System.Void CoreImage.CIMorphologyMaximum::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4622 = 0x241B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6DE /* System.Single CoreImage.CIMorphologyMaximum::get_Radius() */ },
		{ /* #4623 = 0x241D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6DF /* System.Void CoreImage.CIMorphologyMaximum::set_Radius(System.Single) */ },
		{ /* #4624 = 0x241F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6E0 /* CoreImage.CIImage CoreImage.CIMorphologyMaximum::get_OutputImage() */ },
		{ /* #4625 = 0x2421 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6D8 /* System.Void CoreImage.CIMorphologyMaximum::.ctor() */ },
		{ /* #4626 = 0x2423 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6DB /* System.Void CoreImage.CIMorphologyMaximum::.ctor(Foundation.NSCoder) */ },
		{ /* #4627 = 0x2425 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017F5 /* CoreImage.ICIMorphologyMinimumProtocol */ },
		{ /* #4628 = 0x2427 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017F6 /* CoreImage.CIMorphologyMinimumProtocolWrapper */ },
		{ /* #4629 = 0x2429 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017F4 /* CoreImage.CIMorphologyMinimum */ },
		{ /* #4630 = 0x242B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6EF /* CoreImage.CIImage CoreImage.CIMorphologyMinimum::get_InputImage() */ },
		{ /* #4631 = 0x242D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6F0 /* System.Void CoreImage.CIMorphologyMinimum::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4632 = 0x242F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6F1 /* System.Single CoreImage.CIMorphologyMinimum::get_Radius() */ },
		{ /* #4633 = 0x2431 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6F2 /* System.Void CoreImage.CIMorphologyMinimum::set_Radius(System.Single) */ },
		{ /* #4634 = 0x2433 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6F3 /* CoreImage.CIImage CoreImage.CIMorphologyMinimum::get_OutputImage() */ },
		{ /* #4635 = 0x2435 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6EB /* System.Void CoreImage.CIMorphologyMinimum::.ctor() */ },
		{ /* #4636 = 0x2437 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E6EE /* System.Void CoreImage.CIMorphologyMinimum::.ctor(Foundation.NSCoder) */ },
		{ /* #4637 = 0x2439 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017F7 /* CoreImage.CIMorphologyRectangle */ },
		{ /* #4638 = 0x243B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E700 /* System.Void CoreImage.CIMorphologyRectangle::.ctor(Foundation.NSCoder) */ },
		{ /* #4639 = 0x243D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017F9 /* CoreImage.ICIMorphologyRectangleMaximumProtocol */ },
		{ /* #4640 = 0x243F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017FA /* CoreImage.CIMorphologyRectangleMaximumProtocolWrapper */ },
		{ /* #4641 = 0x2441 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017F8 /* CoreImage.CIMorphologyRectangleMaximum */ },
		{ /* #4642 = 0x2443 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E70A /* CoreImage.CIImage CoreImage.CIMorphologyRectangleMaximum::get_InputImage() */ },
		{ /* #4643 = 0x2445 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E70B /* System.Void CoreImage.CIMorphologyRectangleMaximum::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4644 = 0x2447 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E70C /* System.Single CoreImage.CIMorphologyRectangleMaximum::get_InputWidth() */ },
		{ /* #4645 = 0x2449 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E70D /* System.Void CoreImage.CIMorphologyRectangleMaximum::set_InputWidth(System.Single) */ },
		{ /* #4646 = 0x244B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E70E /* System.Single CoreImage.CIMorphologyRectangleMaximum::get_InputHeight() */ },
		{ /* #4647 = 0x244D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E70F /* System.Void CoreImage.CIMorphologyRectangleMaximum::set_InputHeight(System.Single) */ },
		{ /* #4648 = 0x244F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E710 /* CoreImage.CIImage CoreImage.CIMorphologyRectangleMaximum::get_OutputImage() */ },
		{ /* #4649 = 0x2451 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E706 /* System.Void CoreImage.CIMorphologyRectangleMaximum::.ctor() */ },
		{ /* #4650 = 0x2453 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E709 /* System.Void CoreImage.CIMorphologyRectangleMaximum::.ctor(Foundation.NSCoder) */ },
		{ /* #4651 = 0x2455 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017FC /* CoreImage.ICIMorphologyRectangleMinimumProtocol */ },
		{ /* #4652 = 0x2457 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017FD /* CoreImage.CIMorphologyRectangleMinimumProtocolWrapper */ },
		{ /* #4653 = 0x2459 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017FB /* CoreImage.CIMorphologyRectangleMinimum */ },
		{ /* #4654 = 0x245B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E723 /* CoreImage.CIImage CoreImage.CIMorphologyRectangleMinimum::get_InputImage() */ },
		{ /* #4655 = 0x245D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E724 /* System.Void CoreImage.CIMorphologyRectangleMinimum::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4656 = 0x245F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E725 /* System.Single CoreImage.CIMorphologyRectangleMinimum::get_InputWidth() */ },
		{ /* #4657 = 0x2461 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E726 /* System.Void CoreImage.CIMorphologyRectangleMinimum::set_InputWidth(System.Single) */ },
		{ /* #4658 = 0x2463 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E727 /* System.Single CoreImage.CIMorphologyRectangleMinimum::get_InputHeight() */ },
		{ /* #4659 = 0x2465 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E728 /* System.Void CoreImage.CIMorphologyRectangleMinimum::set_InputHeight(System.Single) */ },
		{ /* #4660 = 0x2467 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E729 /* CoreImage.CIImage CoreImage.CIMorphologyRectangleMinimum::get_OutputImage() */ },
		{ /* #4661 = 0x2469 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E71F /* System.Void CoreImage.CIMorphologyRectangleMinimum::.ctor() */ },
		{ /* #4662 = 0x246B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E722 /* System.Void CoreImage.CIMorphologyRectangleMinimum::.ctor(Foundation.NSCoder) */ },
		{ /* #4663 = 0x246D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017FF /* CoreImage.ICIMotionBlurProtocol */ },
		{ /* #4664 = 0x246F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001800 /* CoreImage.CIMotionBlurProtocolWrapper */ },
		{ /* #4665 = 0x2471 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20017FE /* CoreImage.CIMotionBlur */ },
		{ /* #4666 = 0x2473 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E73C /* CoreImage.CIImage CoreImage.CIMotionBlur::get_InputImage() */ },
		{ /* #4667 = 0x2475 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E73D /* System.Void CoreImage.CIMotionBlur::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4668 = 0x2477 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E73E /* System.Single CoreImage.CIMotionBlur::get_Radius() */ },
		{ /* #4669 = 0x2479 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E73F /* System.Void CoreImage.CIMotionBlur::set_Radius(System.Single) */ },
		{ /* #4670 = 0x247B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E740 /* System.Single CoreImage.CIMotionBlur::get_Angle() */ },
		{ /* #4671 = 0x247D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E741 /* System.Void CoreImage.CIMotionBlur::set_Angle(System.Single) */ },
		{ /* #4672 = 0x247F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E742 /* CoreImage.CIImage CoreImage.CIMotionBlur::get_OutputImage() */ },
		{ /* #4673 = 0x2481 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E738 /* System.Void CoreImage.CIMotionBlur::.ctor() */ },
		{ /* #4674 = 0x2483 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E73B /* System.Void CoreImage.CIMotionBlur::.ctor(Foundation.NSCoder) */ },
		{ /* #4675 = 0x2485 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001801 /* CoreImage.CIMultiplyBlendMode */ },
		{ /* #4676 = 0x2487 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E751 /* System.Void CoreImage.CIMultiplyBlendMode::.ctor() */ },
		{ /* #4677 = 0x2489 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E754 /* System.Void CoreImage.CIMultiplyBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #4678 = 0x248B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001802 /* CoreImage.CIMultiplyCompositing */ },
		{ /* #4679 = 0x248D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E755 /* System.Void CoreImage.CIMultiplyCompositing::.ctor() */ },
		{ /* #4680 = 0x248F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E758 /* System.Void CoreImage.CIMultiplyCompositing::.ctor(Foundation.NSCoder) */ },
		{ /* #4681 = 0x2491 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001804 /* CoreImage.ICINinePartStretchedProtocol */ },
		{ /* #4682 = 0x2493 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001805 /* CoreImage.CINinePartStretchedProtocolWrapper */ },
		{ /* #4683 = 0x2495 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001803 /* CoreImage.CINinePartStretched */ },
		{ /* #4684 = 0x2497 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E75D /* CoreImage.CIImage CoreImage.CINinePartStretched::get_InputImage() */ },
		{ /* #4685 = 0x2499 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E75E /* System.Void CoreImage.CINinePartStretched::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4686 = 0x249B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E75F /* CoreGraphics.CGPoint CoreImage.CINinePartStretched::get_InputBreakpoint0() */ },
		{ /* #4687 = 0x249D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E760 /* System.Void CoreImage.CINinePartStretched::set_InputBreakpoint0(CoreGraphics.CGPoint) */ },
		{ /* #4688 = 0x249F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E761 /* CoreGraphics.CGPoint CoreImage.CINinePartStretched::get_InputBreakpoint1() */ },
		{ /* #4689 = 0x24A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E762 /* System.Void CoreImage.CINinePartStretched::set_InputBreakpoint1(CoreGraphics.CGPoint) */ },
		{ /* #4690 = 0x24A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E763 /* CoreGraphics.CGPoint CoreImage.CINinePartStretched::get_InputGrowAmount() */ },
		{ /* #4691 = 0x24A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E764 /* System.Void CoreImage.CINinePartStretched::set_InputGrowAmount(CoreGraphics.CGPoint) */ },
		{ /* #4692 = 0x24A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E765 /* CoreImage.CIImage CoreImage.CINinePartStretched::get_OutputImage() */ },
		{ /* #4693 = 0x24A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E759 /* System.Void CoreImage.CINinePartStretched::.ctor() */ },
		{ /* #4694 = 0x24AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E75C /* System.Void CoreImage.CINinePartStretched::.ctor(Foundation.NSCoder) */ },
		{ /* #4695 = 0x24AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001807 /* CoreImage.ICINinePartTiledProtocol */ },
		{ /* #4696 = 0x24AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001808 /* CoreImage.CINinePartTiledProtocolWrapper */ },
		{ /* #4697 = 0x24B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001806 /* CoreImage.CINinePartTiled */ },
		{ /* #4698 = 0x24B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E77C /* CoreImage.CIImage CoreImage.CINinePartTiled::get_InputImage() */ },
		{ /* #4699 = 0x24B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E77D /* System.Void CoreImage.CINinePartTiled::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4700 = 0x24B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E77E /* CoreGraphics.CGPoint CoreImage.CINinePartTiled::get_InputBreakpoint0() */ },
		{ /* #4701 = 0x24B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E77F /* System.Void CoreImage.CINinePartTiled::set_InputBreakpoint0(CoreGraphics.CGPoint) */ },
		{ /* #4702 = 0x24BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E780 /* CoreGraphics.CGPoint CoreImage.CINinePartTiled::get_InputBreakpoint1() */ },
		{ /* #4703 = 0x24BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E781 /* System.Void CoreImage.CINinePartTiled::set_InputBreakpoint1(CoreGraphics.CGPoint) */ },
		{ /* #4704 = 0x24BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E782 /* CoreGraphics.CGPoint CoreImage.CINinePartTiled::get_InputGrowAmount() */ },
		{ /* #4705 = 0x24C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E783 /* System.Void CoreImage.CINinePartTiled::set_InputGrowAmount(CoreGraphics.CGPoint) */ },
		{ /* #4706 = 0x24C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E784 /* System.Boolean CoreImage.CINinePartTiled::get_FlipYTiles() */ },
		{ /* #4707 = 0x24C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E785 /* System.Void CoreImage.CINinePartTiled::set_FlipYTiles(System.Boolean) */ },
		{ /* #4708 = 0x24C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E786 /* CoreImage.CIImage CoreImage.CINinePartTiled::get_OutputImage() */ },
		{ /* #4709 = 0x24C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E778 /* System.Void CoreImage.CINinePartTiled::.ctor() */ },
		{ /* #4710 = 0x24CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E77B /* System.Void CoreImage.CINinePartTiled::.ctor(Foundation.NSCoder) */ },
		{ /* #4711 = 0x24CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200180A /* CoreImage.ICINoiseReductionProtocol */ },
		{ /* #4712 = 0x24CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200180B /* CoreImage.CINoiseReductionProtocolWrapper */ },
		{ /* #4713 = 0x24D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001809 /* CoreImage.CINoiseReduction */ },
		{ /* #4714 = 0x24D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7A1 /* CoreImage.CIImage CoreImage.CINoiseReduction::get_InputImage() */ },
		{ /* #4715 = 0x24D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7A2 /* System.Void CoreImage.CINoiseReduction::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4716 = 0x24D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7A3 /* System.Single CoreImage.CINoiseReduction::get_NoiseLevel() */ },
		{ /* #4717 = 0x24D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7A4 /* System.Void CoreImage.CINoiseReduction::set_NoiseLevel(System.Single) */ },
		{ /* #4718 = 0x24DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7A5 /* System.Single CoreImage.CINoiseReduction::get_Sharpness() */ },
		{ /* #4719 = 0x24DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7A6 /* System.Void CoreImage.CINoiseReduction::set_Sharpness(System.Single) */ },
		{ /* #4720 = 0x24DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7A7 /* CoreImage.CIImage CoreImage.CINoiseReduction::get_OutputImage() */ },
		{ /* #4721 = 0x24E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E79D /* System.Void CoreImage.CINoiseReduction::.ctor() */ },
		{ /* #4722 = 0x24E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7A0 /* System.Void CoreImage.CINoiseReduction::.ctor(Foundation.NSCoder) */ },
		{ /* #4723 = 0x24E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200180D /* CoreImage.ICIOpTileProtocol */ },
		{ /* #4724 = 0x24E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200180E /* CoreImage.CIOpTileProtocolWrapper */ },
		{ /* #4725 = 0x24E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200180C /* CoreImage.CIOpTile */ },
		{ /* #4726 = 0x24EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7BA /* CoreImage.CIImage CoreImage.CIOpTile::get_InputImage() */ },
		{ /* #4727 = 0x24ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7BB /* System.Void CoreImage.CIOpTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4728 = 0x24EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7BC /* CoreGraphics.CGPoint CoreImage.CIOpTile::get_InputCenter() */ },
		{ /* #4729 = 0x24F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7BD /* System.Void CoreImage.CIOpTile::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4730 = 0x24F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7BE /* System.Single CoreImage.CIOpTile::get_Scale() */ },
		{ /* #4731 = 0x24F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7BF /* System.Void CoreImage.CIOpTile::set_Scale(System.Single) */ },
		{ /* #4732 = 0x24F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7C0 /* System.Single CoreImage.CIOpTile::get_Angle() */ },
		{ /* #4733 = 0x24F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7C1 /* System.Void CoreImage.CIOpTile::set_Angle(System.Single) */ },
		{ /* #4734 = 0x24FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7C2 /* System.Single CoreImage.CIOpTile::get_Width() */ },
		{ /* #4735 = 0x24FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7C3 /* System.Void CoreImage.CIOpTile::set_Width(System.Single) */ },
		{ /* #4736 = 0x24FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7C4 /* CoreImage.CIImage CoreImage.CIOpTile::get_OutputImage() */ },
		{ /* #4737 = 0x2501 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7B6 /* System.Void CoreImage.CIOpTile::.ctor() */ },
		{ /* #4738 = 0x2503 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7B9 /* System.Void CoreImage.CIOpTile::.ctor(Foundation.NSCoder) */ },
		{ /* #4739 = 0x2505 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200180F /* CoreImage.CIOverlayBlendMode */ },
		{ /* #4740 = 0x2507 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7DB /* System.Void CoreImage.CIOverlayBlendMode::.ctor() */ },
		{ /* #4741 = 0x2509 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7DE /* System.Void CoreImage.CIOverlayBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #4742 = 0x250B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001811 /* CoreImage.ICIPageCurlTransitionProtocol */ },
		{ /* #4743 = 0x250D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001812 /* CoreImage.CIPageCurlTransitionProtocolWrapper */ },
		{ /* #4744 = 0x250F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001810 /* CoreImage.CIPageCurlTransition */ },
		{ /* #4745 = 0x2511 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7E3 /* CoreImage.CIImage CoreImage.CIPageCurlTransition::get_BacksideImage() */ },
		{ /* #4746 = 0x2513 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7E4 /* System.Void CoreImage.CIPageCurlTransition::set_BacksideImage(CoreImage.CIImage) */ },
		{ /* #4747 = 0x2515 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7E5 /* CoreImage.CIImage CoreImage.CIPageCurlTransition::get_ShadingImage() */ },
		{ /* #4748 = 0x2517 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7E6 /* System.Void CoreImage.CIPageCurlTransition::set_ShadingImage(CoreImage.CIImage) */ },
		{ /* #4749 = 0x2519 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7E7 /* CoreGraphics.CGRect CoreImage.CIPageCurlTransition::get_InputExtent() */ },
		{ /* #4750 = 0x251B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7E8 /* System.Void CoreImage.CIPageCurlTransition::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #4751 = 0x251D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7E9 /* System.Single CoreImage.CIPageCurlTransition::get_Angle() */ },
		{ /* #4752 = 0x251F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7EA /* System.Void CoreImage.CIPageCurlTransition::set_Angle(System.Single) */ },
		{ /* #4753 = 0x2521 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7EB /* System.Single CoreImage.CIPageCurlTransition::get_Radius() */ },
		{ /* #4754 = 0x2523 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7EC /* System.Void CoreImage.CIPageCurlTransition::set_Radius(System.Single) */ },
		{ /* #4755 = 0x2525 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7ED /* CoreImage.CIImage CoreImage.CIPageCurlTransition::get_InputImage() */ },
		{ /* #4756 = 0x2527 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7EE /* System.Void CoreImage.CIPageCurlTransition::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4757 = 0x2529 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7EF /* CoreImage.CIImage CoreImage.CIPageCurlTransition::get_TargetImage() */ },
		{ /* #4758 = 0x252B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7F0 /* System.Void CoreImage.CIPageCurlTransition::set_TargetImage(CoreImage.CIImage) */ },
		{ /* #4759 = 0x252D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7F1 /* System.Single CoreImage.CIPageCurlTransition::get_Time() */ },
		{ /* #4760 = 0x252F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7F2 /* System.Void CoreImage.CIPageCurlTransition::set_Time(System.Single) */ },
		{ /* #4761 = 0x2531 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7F3 /* CoreImage.CIImage CoreImage.CIPageCurlTransition::get_OutputImage() */ },
		{ /* #4762 = 0x2533 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7DF /* System.Void CoreImage.CIPageCurlTransition::.ctor() */ },
		{ /* #4763 = 0x2535 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E7E2 /* System.Void CoreImage.CIPageCurlTransition::.ctor(Foundation.NSCoder) */ },
		{ /* #4764 = 0x2537 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001814 /* CoreImage.ICIPageCurlWithShadowTransitionProtocol */ },
		{ /* #4765 = 0x2539 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001815 /* CoreImage.CIPageCurlWithShadowTransitionProtocolWrapper */ },
		{ /* #4766 = 0x253B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001813 /* CoreImage.CIPageCurlWithShadowTransition */ },
		{ /* #4767 = 0x253D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E814 /* CoreImage.CIImage CoreImage.CIPageCurlWithShadowTransition::get_BacksideImage() */ },
		{ /* #4768 = 0x253F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E815 /* System.Void CoreImage.CIPageCurlWithShadowTransition::set_BacksideImage(CoreImage.CIImage) */ },
		{ /* #4769 = 0x2541 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E816 /* CoreGraphics.CGRect CoreImage.CIPageCurlWithShadowTransition::get_InputExtent() */ },
		{ /* #4770 = 0x2543 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E817 /* System.Void CoreImage.CIPageCurlWithShadowTransition::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #4771 = 0x2545 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E818 /* System.Single CoreImage.CIPageCurlWithShadowTransition::get_Angle() */ },
		{ /* #4772 = 0x2547 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E819 /* System.Void CoreImage.CIPageCurlWithShadowTransition::set_Angle(System.Single) */ },
		{ /* #4773 = 0x2549 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E81A /* System.Single CoreImage.CIPageCurlWithShadowTransition::get_Radius() */ },
		{ /* #4774 = 0x254B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E81B /* System.Void CoreImage.CIPageCurlWithShadowTransition::set_Radius(System.Single) */ },
		{ /* #4775 = 0x254D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E81C /* System.Single CoreImage.CIPageCurlWithShadowTransition::get_ShadowSize() */ },
		{ /* #4776 = 0x254F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E81D /* System.Void CoreImage.CIPageCurlWithShadowTransition::set_ShadowSize(System.Single) */ },
		{ /* #4777 = 0x2551 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E81E /* System.Single CoreImage.CIPageCurlWithShadowTransition::get_ShadowAmount() */ },
		{ /* #4778 = 0x2553 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E81F /* System.Void CoreImage.CIPageCurlWithShadowTransition::set_ShadowAmount(System.Single) */ },
		{ /* #4779 = 0x2555 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E820 /* CoreGraphics.CGRect CoreImage.CIPageCurlWithShadowTransition::get_InputShadowExtent() */ },
		{ /* #4780 = 0x2557 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E821 /* System.Void CoreImage.CIPageCurlWithShadowTransition::set_InputShadowExtent(CoreGraphics.CGRect) */ },
		{ /* #4781 = 0x2559 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E822 /* CoreImage.CIImage CoreImage.CIPageCurlWithShadowTransition::get_InputImage() */ },
		{ /* #4782 = 0x255B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E823 /* System.Void CoreImage.CIPageCurlWithShadowTransition::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4783 = 0x255D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E824 /* CoreImage.CIImage CoreImage.CIPageCurlWithShadowTransition::get_TargetImage() */ },
		{ /* #4784 = 0x255F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E825 /* System.Void CoreImage.CIPageCurlWithShadowTransition::set_TargetImage(CoreImage.CIImage) */ },
		{ /* #4785 = 0x2561 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E826 /* System.Single CoreImage.CIPageCurlWithShadowTransition::get_Time() */ },
		{ /* #4786 = 0x2563 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E827 /* System.Void CoreImage.CIPageCurlWithShadowTransition::set_Time(System.Single) */ },
		{ /* #4787 = 0x2565 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E828 /* CoreImage.CIImage CoreImage.CIPageCurlWithShadowTransition::get_OutputImage() */ },
		{ /* #4788 = 0x2567 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E810 /* System.Void CoreImage.CIPageCurlWithShadowTransition::.ctor() */ },
		{ /* #4789 = 0x2569 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E813 /* System.Void CoreImage.CIPageCurlWithShadowTransition::.ctor(Foundation.NSCoder) */ },
		{ /* #4790 = 0x256B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001817 /* CoreImage.ICIPaletteCentroidProtocol */ },
		{ /* #4791 = 0x256D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001818 /* CoreImage.CIPaletteCentroidProtocolWrapper */ },
		{ /* #4792 = 0x256F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001816 /* CoreImage.CIPaletteCentroid */ },
		{ /* #4793 = 0x2571 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E851 /* CoreImage.CIImage CoreImage.CIPaletteCentroid::get_InputImage() */ },
		{ /* #4794 = 0x2573 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E852 /* System.Void CoreImage.CIPaletteCentroid::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4795 = 0x2575 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E853 /* CoreImage.CIImage CoreImage.CIPaletteCentroid::get_PaletteImage() */ },
		{ /* #4796 = 0x2577 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E854 /* System.Void CoreImage.CIPaletteCentroid::set_PaletteImage(CoreImage.CIImage) */ },
		{ /* #4797 = 0x2579 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E855 /* System.Boolean CoreImage.CIPaletteCentroid::get_Perceptual() */ },
		{ /* #4798 = 0x257B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E856 /* System.Void CoreImage.CIPaletteCentroid::set_Perceptual(System.Boolean) */ },
		{ /* #4799 = 0x257D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E857 /* CoreImage.CIImage CoreImage.CIPaletteCentroid::get_OutputImage() */ },
		{ /* #4800 = 0x257F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E84D /* System.Void CoreImage.CIPaletteCentroid::.ctor() */ },
		{ /* #4801 = 0x2581 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E850 /* System.Void CoreImage.CIPaletteCentroid::.ctor(Foundation.NSCoder) */ },
		{ /* #4802 = 0x2583 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200181A /* CoreImage.ICIPalettizeProtocol */ },
		{ /* #4803 = 0x2585 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200181B /* CoreImage.CIPalettizeProtocolWrapper */ },
		{ /* #4804 = 0x2587 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001819 /* CoreImage.CIPalettize */ },
		{ /* #4805 = 0x2589 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E86A /* CoreImage.CIImage CoreImage.CIPalettize::get_InputImage() */ },
		{ /* #4806 = 0x258B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E86B /* System.Void CoreImage.CIPalettize::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4807 = 0x258D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E86C /* CoreImage.CIImage CoreImage.CIPalettize::get_PaletteImage() */ },
		{ /* #4808 = 0x258F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E86D /* System.Void CoreImage.CIPalettize::set_PaletteImage(CoreImage.CIImage) */ },
		{ /* #4809 = 0x2591 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E86E /* System.Boolean CoreImage.CIPalettize::get_Perceptual() */ },
		{ /* #4810 = 0x2593 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E86F /* System.Void CoreImage.CIPalettize::set_Perceptual(System.Boolean) */ },
		{ /* #4811 = 0x2595 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E870 /* CoreImage.CIImage CoreImage.CIPalettize::get_OutputImage() */ },
		{ /* #4812 = 0x2597 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E866 /* System.Void CoreImage.CIPalettize::.ctor() */ },
		{ /* #4813 = 0x2599 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E869 /* System.Void CoreImage.CIPalettize::.ctor(Foundation.NSCoder) */ },
		{ /* #4814 = 0x259B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200181D /* CoreImage.ICIParallelogramTileProtocol */ },
		{ /* #4815 = 0x259D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200181E /* CoreImage.CIParallelogramTileProtocolWrapper */ },
		{ /* #4816 = 0x259F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200181C /* CoreImage.CIParallelogramTile */ },
		{ /* #4817 = 0x25A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E883 /* CoreImage.CIImage CoreImage.CIParallelogramTile::get_InputImage() */ },
		{ /* #4818 = 0x25A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E884 /* System.Void CoreImage.CIParallelogramTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4819 = 0x25A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E885 /* CoreGraphics.CGPoint CoreImage.CIParallelogramTile::get_InputCenter() */ },
		{ /* #4820 = 0x25A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E886 /* System.Void CoreImage.CIParallelogramTile::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4821 = 0x25A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E887 /* System.Single CoreImage.CIParallelogramTile::get_Angle() */ },
		{ /* #4822 = 0x25AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E888 /* System.Void CoreImage.CIParallelogramTile::set_Angle(System.Single) */ },
		{ /* #4823 = 0x25AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E889 /* System.Single CoreImage.CIParallelogramTile::get_AcuteAngle() */ },
		{ /* #4824 = 0x25AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E88A /* System.Void CoreImage.CIParallelogramTile::set_AcuteAngle(System.Single) */ },
		{ /* #4825 = 0x25B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E88B /* System.Single CoreImage.CIParallelogramTile::get_Width() */ },
		{ /* #4826 = 0x25B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E88C /* System.Void CoreImage.CIParallelogramTile::set_Width(System.Single) */ },
		{ /* #4827 = 0x25B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E88D /* CoreImage.CIImage CoreImage.CIParallelogramTile::get_OutputImage() */ },
		{ /* #4828 = 0x25B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E87F /* System.Void CoreImage.CIParallelogramTile::.ctor() */ },
		{ /* #4829 = 0x25B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E882 /* System.Void CoreImage.CIParallelogramTile::.ctor(Foundation.NSCoder) */ },
		{ /* #4830 = 0x25BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001820 /* CoreImage.ICIPdf417BarcodeGeneratorProtocol */ },
		{ /* #4831 = 0x25BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001821 /* CoreImage.CIPdf417BarcodeGeneratorProtocolWrapper */ },
		{ /* #4832 = 0x25BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200181F /* CoreImage.CIPdf417BarcodeGenerator */ },
		{ /* #4833 = 0x25C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8A9 /* Foundation.NSData CoreImage.CIPdf417BarcodeGenerator::get_Message() */ },
		{ /* #4834 = 0x25C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8AA /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_Message(Foundation.NSData) */ },
		{ /* #4835 = 0x25C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8AB /* System.Single CoreImage.CIPdf417BarcodeGenerator::get_MinWidth() */ },
		{ /* #4836 = 0x25C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8AC /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_MinWidth(System.Single) */ },
		{ /* #4837 = 0x25C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8AD /* System.Single CoreImage.CIPdf417BarcodeGenerator::get_MaxWidth() */ },
		{ /* #4838 = 0x25CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8AE /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_MaxWidth(System.Single) */ },
		{ /* #4839 = 0x25CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8AF /* System.Single CoreImage.CIPdf417BarcodeGenerator::get_MinHeight() */ },
		{ /* #4840 = 0x25CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8B0 /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_MinHeight(System.Single) */ },
		{ /* #4841 = 0x25D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8B1 /* System.Single CoreImage.CIPdf417BarcodeGenerator::get_MaxHeight() */ },
		{ /* #4842 = 0x25D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8B2 /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_MaxHeight(System.Single) */ },
		{ /* #4843 = 0x25D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8B3 /* System.Single CoreImage.CIPdf417BarcodeGenerator::get_InputDataColumns() */ },
		{ /* #4844 = 0x25D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8B4 /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_InputDataColumns(System.Single) */ },
		{ /* #4845 = 0x25D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8B5 /* System.Single CoreImage.CIPdf417BarcodeGenerator::get_InputRows() */ },
		{ /* #4846 = 0x25DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8B6 /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_InputRows(System.Single) */ },
		{ /* #4847 = 0x25DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8B7 /* System.Single CoreImage.CIPdf417BarcodeGenerator::get_PreferredAspectRatio() */ },
		{ /* #4848 = 0x25DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8B8 /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_PreferredAspectRatio(System.Single) */ },
		{ /* #4849 = 0x25E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8B9 /* System.Single CoreImage.CIPdf417BarcodeGenerator::get_InputCompactionMode() */ },
		{ /* #4850 = 0x25E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8BA /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_InputCompactionMode(System.Single) */ },
		{ /* #4851 = 0x25E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8BB /* System.Single CoreImage.CIPdf417BarcodeGenerator::get_InputCompactStyle() */ },
		{ /* #4852 = 0x25E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8BC /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_InputCompactStyle(System.Single) */ },
		{ /* #4853 = 0x25E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8BD /* System.Single CoreImage.CIPdf417BarcodeGenerator::get_InputCorrectionLevel() */ },
		{ /* #4854 = 0x25EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8BE /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_InputCorrectionLevel(System.Single) */ },
		{ /* #4855 = 0x25ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8BF /* System.Single CoreImage.CIPdf417BarcodeGenerator::get_InputAlwaysSpecifyCompaction() */ },
		{ /* #4856 = 0x25EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8C0 /* System.Void CoreImage.CIPdf417BarcodeGenerator::set_InputAlwaysSpecifyCompaction(System.Single) */ },
		{ /* #4857 = 0x25F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8C1 /* CoreImage.CIImage CoreImage.CIPdf417BarcodeGenerator::get_OutputImage() */ },
		{ /* #4858 = 0x25F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8A4 /* System.Void CoreImage.CIPdf417BarcodeGenerator::.ctor() */ },
		{ /* #4859 = 0x25F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E8A7 /* System.Void CoreImage.CIPdf417BarcodeGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #4860 = 0x25F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001822 /* CoreImage.CIPdf417CodeDescriptor */ },
		{ /* #4861 = 0x25F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001824 /* CoreImage.ICIPersonSegmentationProtocol */ },
		{ /* #4862 = 0x25FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001825 /* CoreImage.CIPersonSegmentationProtocolWrapper */ },
		{ /* #4863 = 0x25FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001823 /* CoreImage.CIPersonSegmentation */ },
		{ /* #4864 = 0x25FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E904 /* CoreImage.CIImage CoreImage.CIPersonSegmentation::get_InputImage() */ },
		{ /* #4865 = 0x2601 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E905 /* System.Void CoreImage.CIPersonSegmentation::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4866 = 0x2603 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E906 /* System.UIntPtr CoreImage.CIPersonSegmentation::get_QualityLevel() */ },
		{ /* #4867 = 0x2605 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E907 /* System.Void CoreImage.CIPersonSegmentation::set_QualityLevel(System.UIntPtr) */ },
		{ /* #4868 = 0x2607 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E908 /* CoreImage.CIImage CoreImage.CIPersonSegmentation::get_OutputImage() */ },
		{ /* #4869 = 0x2609 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E900 /* System.Void CoreImage.CIPersonSegmentation::.ctor() */ },
		{ /* #4870 = 0x260B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E903 /* System.Void CoreImage.CIPersonSegmentation::.ctor(Foundation.NSCoder) */ },
		{ /* #4871 = 0x260D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001830 /* CoreImage.ICIPerspectiveTransformProtocol */ },
		{ /* #4872 = 0x260F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001831 /* CoreImage.CIPerspectiveTransformProtocolWrapper */ },
		{ /* #4873 = 0x2611 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200182F /* CoreImage.CIPerspectiveTransform */ },
		{ /* #4874 = 0x2613 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E985 /* CoreImage.CIImage CoreImage.CIPerspectiveTransform::get_InputImage() */ },
		{ /* #4875 = 0x2615 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E986 /* System.Void CoreImage.CIPerspectiveTransform::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4876 = 0x2617 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E987 /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTransform::get_InputTopLeft() */ },
		{ /* #4877 = 0x2619 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E988 /* System.Void CoreImage.CIPerspectiveTransform::set_InputTopLeft(CoreGraphics.CGPoint) */ },
		{ /* #4878 = 0x261B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E989 /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTransform::get_InputTopRight() */ },
		{ /* #4879 = 0x261D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E98A /* System.Void CoreImage.CIPerspectiveTransform::set_InputTopRight(CoreGraphics.CGPoint) */ },
		{ /* #4880 = 0x261F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E98B /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTransform::get_InputBottomRight() */ },
		{ /* #4881 = 0x2621 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E98C /* System.Void CoreImage.CIPerspectiveTransform::set_InputBottomRight(CoreGraphics.CGPoint) */ },
		{ /* #4882 = 0x2623 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E98D /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTransform::get_InputBottomLeft() */ },
		{ /* #4883 = 0x2625 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E98E /* System.Void CoreImage.CIPerspectiveTransform::set_InputBottomLeft(CoreGraphics.CGPoint) */ },
		{ /* #4884 = 0x2627 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E98F /* CoreImage.CIImage CoreImage.CIPerspectiveTransform::get_OutputImage() */ },
		{ /* #4885 = 0x2629 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E97F /* System.Void CoreImage.CIPerspectiveTransform::.ctor() */ },
		{ /* #4886 = 0x262B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E982 /* System.Void CoreImage.CIPerspectiveTransform::.ctor(Foundation.NSCoder) */ },
		{ /* #4887 = 0x262D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001827 /* CoreImage.ICIPerspectiveCorrectionProtocol */ },
		{ /* #4888 = 0x262F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001828 /* CoreImage.CIPerspectiveCorrectionProtocolWrapper */ },
		{ /* #4889 = 0x2631 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001826 /* CoreImage.CIPerspectiveCorrection */ },
		{ /* #4890 = 0x2633 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E917 /* System.Boolean CoreImage.CIPerspectiveCorrection::get_Crop() */ },
		{ /* #4891 = 0x2635 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E918 /* System.Void CoreImage.CIPerspectiveCorrection::set_Crop(System.Boolean) */ },
		{ /* #4892 = 0x2637 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E919 /* CoreImage.CIImage CoreImage.CIPerspectiveCorrection::get_InputImage() */ },
		{ /* #4893 = 0x2639 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E91A /* System.Void CoreImage.CIPerspectiveCorrection::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4894 = 0x263B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E91B /* CoreGraphics.CGPoint CoreImage.CIPerspectiveCorrection::get_InputTopLeft() */ },
		{ /* #4895 = 0x263D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E91C /* System.Void CoreImage.CIPerspectiveCorrection::set_InputTopLeft(CoreGraphics.CGPoint) */ },
		{ /* #4896 = 0x263F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E91D /* CoreGraphics.CGPoint CoreImage.CIPerspectiveCorrection::get_InputTopRight() */ },
		{ /* #4897 = 0x2641 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E91E /* System.Void CoreImage.CIPerspectiveCorrection::set_InputTopRight(CoreGraphics.CGPoint) */ },
		{ /* #4898 = 0x2643 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E91F /* CoreGraphics.CGPoint CoreImage.CIPerspectiveCorrection::get_InputBottomRight() */ },
		{ /* #4899 = 0x2645 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E920 /* System.Void CoreImage.CIPerspectiveCorrection::set_InputBottomRight(CoreGraphics.CGPoint) */ },
		{ /* #4900 = 0x2647 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E921 /* CoreGraphics.CGPoint CoreImage.CIPerspectiveCorrection::get_InputBottomLeft() */ },
		{ /* #4901 = 0x2649 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E922 /* System.Void CoreImage.CIPerspectiveCorrection::set_InputBottomLeft(CoreGraphics.CGPoint) */ },
		{ /* #4902 = 0x264B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E923 /* CoreImage.CIImage CoreImage.CIPerspectiveCorrection::get_OutputImage() */ },
		{ /* #4903 = 0x264D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E913 /* System.Void CoreImage.CIPerspectiveCorrection::.ctor() */ },
		{ /* #4904 = 0x264F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E916 /* System.Void CoreImage.CIPerspectiveCorrection::.ctor(Foundation.NSCoder) */ },
		{ /* #4905 = 0x2651 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200182A /* CoreImage.ICIPerspectiveRotateProtocol */ },
		{ /* #4906 = 0x2653 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200182B /* CoreImage.CIPerspectiveRotateProtocolWrapper */ },
		{ /* #4907 = 0x2655 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001829 /* CoreImage.CIPerspectiveRotate */ },
		{ /* #4908 = 0x2657 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E939 /* CoreImage.CIImage CoreImage.CIPerspectiveRotate::get_InputImage() */ },
		{ /* #4909 = 0x2659 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E93A /* System.Void CoreImage.CIPerspectiveRotate::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4910 = 0x265B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E93B /* System.Single CoreImage.CIPerspectiveRotate::get_FocalLength() */ },
		{ /* #4911 = 0x265D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E93C /* System.Void CoreImage.CIPerspectiveRotate::set_FocalLength(System.Single) */ },
		{ /* #4912 = 0x265F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E93D /* System.Single CoreImage.CIPerspectiveRotate::get_Pitch() */ },
		{ /* #4913 = 0x2661 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E93E /* System.Void CoreImage.CIPerspectiveRotate::set_Pitch(System.Single) */ },
		{ /* #4914 = 0x2663 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E93F /* System.Single CoreImage.CIPerspectiveRotate::get_Yaw() */ },
		{ /* #4915 = 0x2665 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E940 /* System.Void CoreImage.CIPerspectiveRotate::set_Yaw(System.Single) */ },
		{ /* #4916 = 0x2667 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E941 /* System.Single CoreImage.CIPerspectiveRotate::get_Roll() */ },
		{ /* #4917 = 0x2669 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E942 /* System.Void CoreImage.CIPerspectiveRotate::set_Roll(System.Single) */ },
		{ /* #4918 = 0x266B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E943 /* CoreImage.CIImage CoreImage.CIPerspectiveRotate::get_OutputImage() */ },
		{ /* #4919 = 0x266D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E934 /* System.Void CoreImage.CIPerspectiveRotate::.ctor() */ },
		{ /* #4920 = 0x266F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E937 /* System.Void CoreImage.CIPerspectiveRotate::.ctor(Foundation.NSCoder) */ },
		{ /* #4921 = 0x2671 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200182D /* CoreImage.ICIPerspectiveTileProtocol */ },
		{ /* #4922 = 0x2673 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200182E /* CoreImage.CIPerspectiveTileProtocolWrapper */ },
		{ /* #4923 = 0x2675 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200182C /* CoreImage.CIPerspectiveTile */ },
		{ /* #4924 = 0x2677 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E95E /* CoreImage.CIImage CoreImage.CIPerspectiveTile::get_InputImage() */ },
		{ /* #4925 = 0x2679 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E95F /* System.Void CoreImage.CIPerspectiveTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4926 = 0x267B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E960 /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTile::get_InputTopLeft() */ },
		{ /* #4927 = 0x267D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E961 /* System.Void CoreImage.CIPerspectiveTile::set_InputTopLeft(CoreGraphics.CGPoint) */ },
		{ /* #4928 = 0x267F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E962 /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTile::get_InputTopRight() */ },
		{ /* #4929 = 0x2681 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E963 /* System.Void CoreImage.CIPerspectiveTile::set_InputTopRight(CoreGraphics.CGPoint) */ },
		{ /* #4930 = 0x2683 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E964 /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTile::get_InputBottomRight() */ },
		{ /* #4931 = 0x2685 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E965 /* System.Void CoreImage.CIPerspectiveTile::set_InputBottomRight(CoreGraphics.CGPoint) */ },
		{ /* #4932 = 0x2687 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E966 /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTile::get_InputBottomLeft() */ },
		{ /* #4933 = 0x2689 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E967 /* System.Void CoreImage.CIPerspectiveTile::set_InputBottomLeft(CoreGraphics.CGPoint) */ },
		{ /* #4934 = 0x268B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E968 /* CoreImage.CIImage CoreImage.CIPerspectiveTile::get_OutputImage() */ },
		{ /* #4935 = 0x268D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E95A /* System.Void CoreImage.CIPerspectiveTile::.ctor() */ },
		{ /* #4936 = 0x268F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E95D /* System.Void CoreImage.CIPerspectiveTile::.ctor(Foundation.NSCoder) */ },
		{ /* #4937 = 0x2691 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001833 /* CoreImage.ICIPerspectiveTransformWithExtentProtocol */ },
		{ /* #4938 = 0x2693 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001834 /* CoreImage.CIPerspectiveTransformWithExtentProtocolWrapper */ },
		{ /* #4939 = 0x2695 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001832 /* CoreImage.CIPerspectiveTransformWithExtent */ },
		{ /* #4940 = 0x2697 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9A0 /* CoreGraphics.CGRect CoreImage.CIPerspectiveTransformWithExtent::get_InputExtent() */ },
		{ /* #4941 = 0x2699 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9A1 /* System.Void CoreImage.CIPerspectiveTransformWithExtent::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #4942 = 0x269B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9A2 /* CoreImage.CIImage CoreImage.CIPerspectiveTransformWithExtent::get_InputImage() */ },
		{ /* #4943 = 0x269D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9A3 /* System.Void CoreImage.CIPerspectiveTransformWithExtent::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4944 = 0x269F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9A4 /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTransformWithExtent::get_InputTopLeft() */ },
		{ /* #4945 = 0x26A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9A5 /* System.Void CoreImage.CIPerspectiveTransformWithExtent::set_InputTopLeft(CoreGraphics.CGPoint) */ },
		{ /* #4946 = 0x26A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9A6 /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTransformWithExtent::get_InputTopRight() */ },
		{ /* #4947 = 0x26A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9A7 /* System.Void CoreImage.CIPerspectiveTransformWithExtent::set_InputTopRight(CoreGraphics.CGPoint) */ },
		{ /* #4948 = 0x26A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9A8 /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTransformWithExtent::get_InputBottomRight() */ },
		{ /* #4949 = 0x26A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9A9 /* System.Void CoreImage.CIPerspectiveTransformWithExtent::set_InputBottomRight(CoreGraphics.CGPoint) */ },
		{ /* #4950 = 0x26AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9AA /* CoreGraphics.CGPoint CoreImage.CIPerspectiveTransformWithExtent::get_InputBottomLeft() */ },
		{ /* #4951 = 0x26AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9AB /* System.Void CoreImage.CIPerspectiveTransformWithExtent::set_InputBottomLeft(CoreGraphics.CGPoint) */ },
		{ /* #4952 = 0x26AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9AC /* CoreImage.CIImage CoreImage.CIPerspectiveTransformWithExtent::get_OutputImage() */ },
		{ /* #4953 = 0x26B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E99C /* System.Void CoreImage.CIPerspectiveTransformWithExtent::.ctor() */ },
		{ /* #4954 = 0x26B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E99F /* System.Void CoreImage.CIPerspectiveTransformWithExtent::.ctor(Foundation.NSCoder) */ },
		{ /* #4955 = 0x26B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200183C /* CoreImage.ICIPhotoEffectProtocol */ },
		{ /* #4956 = 0x26B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200183D /* CoreImage.CIPhotoEffectProtocolWrapper */ },
		{ /* #4957 = 0x26B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001835 /* CoreImage.CIPhotoEffect */ },
		{ /* #4958 = 0x26BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9C1 /* CoreImage.CIImage CoreImage.CIPhotoEffect::get_InputImage() */ },
		{ /* #4959 = 0x26BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9C2 /* System.Void CoreImage.CIPhotoEffect::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4960 = 0x26BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9C3 /* CoreImage.CIImage CoreImage.CIPhotoEffect::get_OutputImage() */ },
		{ /* #4961 = 0x26C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9BF /* System.Void CoreImage.CIPhotoEffect::.ctor(Foundation.NSCoder) */ },
		{ /* #4962 = 0x26C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001836 /* CoreImage.CIPhotoEffectChrome */ },
		{ /* #4963 = 0x26C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9C4 /* System.Void CoreImage.CIPhotoEffectChrome::.ctor() */ },
		{ /* #4964 = 0x26C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9C7 /* System.Void CoreImage.CIPhotoEffectChrome::.ctor(Foundation.NSCoder) */ },
		{ /* #4965 = 0x26C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001837 /* CoreImage.CIPhotoEffectFade */ },
		{ /* #4966 = 0x26CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9C8 /* System.Void CoreImage.CIPhotoEffectFade::.ctor() */ },
		{ /* #4967 = 0x26CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9CB /* System.Void CoreImage.CIPhotoEffectFade::.ctor(Foundation.NSCoder) */ },
		{ /* #4968 = 0x26CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001838 /* CoreImage.CIPhotoEffectInstant */ },
		{ /* #4969 = 0x26D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9CC /* System.Void CoreImage.CIPhotoEffectInstant::.ctor() */ },
		{ /* #4970 = 0x26D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9CF /* System.Void CoreImage.CIPhotoEffectInstant::.ctor(Foundation.NSCoder) */ },
		{ /* #4971 = 0x26D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001839 /* CoreImage.CIPhotoEffectMono */ },
		{ /* #4972 = 0x26D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9D0 /* System.Void CoreImage.CIPhotoEffectMono::.ctor() */ },
		{ /* #4973 = 0x26D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9D3 /* System.Void CoreImage.CIPhotoEffectMono::.ctor(Foundation.NSCoder) */ },
		{ /* #4974 = 0x26DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200183A /* CoreImage.CIPhotoEffectNoir */ },
		{ /* #4975 = 0x26DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9D4 /* System.Void CoreImage.CIPhotoEffectNoir::.ctor() */ },
		{ /* #4976 = 0x26DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9D7 /* System.Void CoreImage.CIPhotoEffectNoir::.ctor(Foundation.NSCoder) */ },
		{ /* #4977 = 0x26E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200183B /* CoreImage.CIPhotoEffectProcess */ },
		{ /* #4978 = 0x26E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9D8 /* System.Void CoreImage.CIPhotoEffectProcess::.ctor() */ },
		{ /* #4979 = 0x26E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9DB /* System.Void CoreImage.CIPhotoEffectProcess::.ctor(Foundation.NSCoder) */ },
		{ /* #4980 = 0x26E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200183E /* CoreImage.CIPhotoEffectTonal */ },
		{ /* #4981 = 0x26E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9E2 /* System.Void CoreImage.CIPhotoEffectTonal::.ctor() */ },
		{ /* #4982 = 0x26EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9E5 /* System.Void CoreImage.CIPhotoEffectTonal::.ctor(Foundation.NSCoder) */ },
		{ /* #4983 = 0x26ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200183F /* CoreImage.CIPhotoEffectTransfer */ },
		{ /* #4984 = 0x26EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9E6 /* System.Void CoreImage.CIPhotoEffectTransfer::.ctor() */ },
		{ /* #4985 = 0x26F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9E9 /* System.Void CoreImage.CIPhotoEffectTransfer::.ctor(Foundation.NSCoder) */ },
		{ /* #4986 = 0x26F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001841 /* CoreImage.ICIPinchDistortionProtocol */ },
		{ /* #4987 = 0x26F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001842 /* CoreImage.CIPinchDistortionProtocolWrapper */ },
		{ /* #4988 = 0x26F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001840 /* CoreImage.CIPinchDistortion */ },
		{ /* #4989 = 0x26F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9EE /* CoreImage.CIImage CoreImage.CIPinchDistortion::get_InputImage() */ },
		{ /* #4990 = 0x26FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9EF /* System.Void CoreImage.CIPinchDistortion::set_InputImage(CoreImage.CIImage) */ },
		{ /* #4991 = 0x26FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9F0 /* CoreGraphics.CGPoint CoreImage.CIPinchDistortion::get_InputCenter() */ },
		{ /* #4992 = 0x26FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9F1 /* System.Void CoreImage.CIPinchDistortion::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #4993 = 0x2701 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9F2 /* System.Single CoreImage.CIPinchDistortion::get_Radius() */ },
		{ /* #4994 = 0x2703 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9F3 /* System.Void CoreImage.CIPinchDistortion::set_Radius(System.Single) */ },
		{ /* #4995 = 0x2705 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9F4 /* System.Single CoreImage.CIPinchDistortion::get_Scale() */ },
		{ /* #4996 = 0x2707 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9F5 /* System.Void CoreImage.CIPinchDistortion::set_Scale(System.Single) */ },
		{ /* #4997 = 0x2709 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9F6 /* CoreImage.CIImage CoreImage.CIPinchDistortion::get_OutputImage() */ },
		{ /* #4998 = 0x270B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9EA /* System.Void CoreImage.CIPinchDistortion::.ctor() */ },
		{ /* #4999 = 0x270D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600E9ED /* System.Void CoreImage.CIPinchDistortion::.ctor(Foundation.NSCoder) */ },
		{ /* #5000 = 0x270F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001843 /* CoreImage.CIPinLightBlendMode */ },
		{ /* #5001 = 0x2711 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA09 /* System.Void CoreImage.CIPinLightBlendMode::.ctor() */ },
		{ /* #5002 = 0x2713 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA0C /* System.Void CoreImage.CIPinLightBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #5003 = 0x2715 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001845 /* CoreImage.ICIPixellateProtocol */ },
		{ /* #5004 = 0x2717 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001846 /* CoreImage.CIPixellateProtocolWrapper */ },
		{ /* #5005 = 0x2719 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001844 /* CoreImage.CIPixellate */ },
		{ /* #5006 = 0x271B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA11 /* CoreImage.CIImage CoreImage.CIPixellate::get_InputImage() */ },
		{ /* #5007 = 0x271D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA12 /* System.Void CoreImage.CIPixellate::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5008 = 0x271F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA13 /* CoreGraphics.CGPoint CoreImage.CIPixellate::get_InputCenter() */ },
		{ /* #5009 = 0x2721 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA14 /* System.Void CoreImage.CIPixellate::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5010 = 0x2723 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA15 /* System.Single CoreImage.CIPixellate::get_Scale() */ },
		{ /* #5011 = 0x2725 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA16 /* System.Void CoreImage.CIPixellate::set_Scale(System.Single) */ },
		{ /* #5012 = 0x2727 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA17 /* CoreImage.CIImage CoreImage.CIPixellate::get_OutputImage() */ },
		{ /* #5013 = 0x2729 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA0D /* System.Void CoreImage.CIPixellate::.ctor() */ },
		{ /* #5014 = 0x272B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA10 /* System.Void CoreImage.CIPixellate::.ctor(Foundation.NSCoder) */ },
		{ /* #5015 = 0x272D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001847 /* CoreImage.CIPlugIn */ },
		{ /* #5016 = 0x272F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001849 /* CoreImage.ICIPointillizeProtocol */ },
		{ /* #5017 = 0x2731 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200184A /* CoreImage.CIPointillizeProtocolWrapper */ },
		{ /* #5018 = 0x2733 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001848 /* CoreImage.CIPointillize */ },
		{ /* #5019 = 0x2735 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA33 /* CoreImage.CIImage CoreImage.CIPointillize::get_InputImage() */ },
		{ /* #5020 = 0x2737 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA34 /* System.Void CoreImage.CIPointillize::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5021 = 0x2739 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA35 /* System.Single CoreImage.CIPointillize::get_Radius() */ },
		{ /* #5022 = 0x273B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA36 /* System.Void CoreImage.CIPointillize::set_Radius(System.Single) */ },
		{ /* #5023 = 0x273D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA37 /* CoreGraphics.CGPoint CoreImage.CIPointillize::get_InputCenter() */ },
		{ /* #5024 = 0x273F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA38 /* System.Void CoreImage.CIPointillize::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5025 = 0x2741 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA39 /* CoreImage.CIImage CoreImage.CIPointillize::get_OutputImage() */ },
		{ /* #5026 = 0x2743 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA2F /* System.Void CoreImage.CIPointillize::.ctor() */ },
		{ /* #5027 = 0x2745 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA32 /* System.Void CoreImage.CIPointillize::.ctor(Foundation.NSCoder) */ },
		{ /* #5028 = 0x2747 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200184B /* CoreImage.CIQRCodeDescriptor */ },
		{ /* #5029 = 0x2749 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200184D /* CoreImage.CIQRCodeFeature */ },
		{ /* #5030 = 0x274B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200184F /* CoreImage.ICIQRCodeGeneratorProtocol */ },
		{ /* #5031 = 0x274D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001850 /* CoreImage.CIQRCodeGeneratorProtocolWrapper */ },
		{ /* #5032 = 0x274F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200184E /* CoreImage.CIQRCodeGenerator */ },
		{ /* #5033 = 0x2751 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA68 /* Foundation.NSData CoreImage.CIQRCodeGenerator::get_Message() */ },
		{ /* #5034 = 0x2753 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA69 /* System.Void CoreImage.CIQRCodeGenerator::set_Message(Foundation.NSData) */ },
		{ /* #5035 = 0x2755 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA6A /* System.String CoreImage.CIQRCodeGenerator::get_CorrectionLevel() */ },
		{ /* #5036 = 0x2757 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA6B /* System.Void CoreImage.CIQRCodeGenerator::set_CorrectionLevel(System.String) */ },
		{ /* #5037 = 0x2759 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA6C /* CoreImage.CIImage CoreImage.CIQRCodeGenerator::get_OutputImage() */ },
		{ /* #5038 = 0x275B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA63 /* System.Void CoreImage.CIQRCodeGenerator::.ctor() */ },
		{ /* #5039 = 0x275D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA66 /* System.Void CoreImage.CIQRCodeGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #5040 = 0x275F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001852 /* CoreImage.ICIRadialGradientProtocol */ },
		{ /* #5041 = 0x2761 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001853 /* CoreImage.CIRadialGradientProtocolWrapper */ },
		{ /* #5042 = 0x2763 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001851 /* CoreImage.CIRadialGradient */ },
		{ /* #5043 = 0x2765 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA7B /* CoreGraphics.CGPoint CoreImage.CIRadialGradient::get_InputCenter() */ },
		{ /* #5044 = 0x2767 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA7C /* System.Void CoreImage.CIRadialGradient::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5045 = 0x2769 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA7D /* System.Single CoreImage.CIRadialGradient::get_Radius0() */ },
		{ /* #5046 = 0x276B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA7E /* System.Void CoreImage.CIRadialGradient::set_Radius0(System.Single) */ },
		{ /* #5047 = 0x276D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA7F /* System.Single CoreImage.CIRadialGradient::get_Radius1() */ },
		{ /* #5048 = 0x276F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA80 /* System.Void CoreImage.CIRadialGradient::set_Radius1(System.Single) */ },
		{ /* #5049 = 0x2771 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA81 /* CoreImage.CIColor CoreImage.CIRadialGradient::get_Color0() */ },
		{ /* #5050 = 0x2773 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA82 /* System.Void CoreImage.CIRadialGradient::set_Color0(CoreImage.CIColor) */ },
		{ /* #5051 = 0x2775 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA83 /* CoreImage.CIColor CoreImage.CIRadialGradient::get_Color1() */ },
		{ /* #5052 = 0x2777 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA84 /* System.Void CoreImage.CIRadialGradient::set_Color1(CoreImage.CIColor) */ },
		{ /* #5053 = 0x2779 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA85 /* CoreImage.CIImage CoreImage.CIRadialGradient::get_OutputImage() */ },
		{ /* #5054 = 0x277B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA77 /* System.Void CoreImage.CIRadialGradient::.ctor() */ },
		{ /* #5055 = 0x277D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA7A /* System.Void CoreImage.CIRadialGradient::.ctor(Foundation.NSCoder) */ },
		{ /* #5056 = 0x277F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001855 /* CoreImage.ICIRandomGeneratorProtocol */ },
		{ /* #5057 = 0x2781 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001856 /* CoreImage.CIRandomGeneratorProtocolWrapper */ },
		{ /* #5058 = 0x2783 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001854 /* CoreImage.CIRandomGenerator */ },
		{ /* #5059 = 0x2785 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EAA0 /* CoreImage.CIImage CoreImage.CIRandomGenerator::get_OutputImage() */ },
		{ /* #5060 = 0x2787 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA9C /* System.Void CoreImage.CIRandomGenerator::.ctor() */ },
		{ /* #5061 = 0x2789 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EA9F /* System.Void CoreImage.CIRandomGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #5062 = 0x278B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001859 /* CoreImage.CIRawFilter */ },
		{ /* #5063 = 0x278D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200185C /* CoreImage.CIRectangleFeature */ },
		{ /* #5064 = 0x278F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200185E /* CoreImage.CIRenderDestination */ },
		{ /* #5065 = 0x2791 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001860 /* CoreImage.CIRenderInfo */ },
		{ /* #5066 = 0x2793 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001861 /* CoreImage.CIRenderTask */ },
		{ /* #5067 = 0x2795 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001863 /* CoreImage.ICIRippleTransitionProtocol */ },
		{ /* #5068 = 0x2797 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001864 /* CoreImage.CIRippleTransitionProtocolWrapper */ },
		{ /* #5069 = 0x2799 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001862 /* CoreImage.CIRippleTransition */ },
		{ /* #5070 = 0x279B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB8C /* CoreImage.CIImage CoreImage.CIRippleTransition::get_ShadingImage() */ },
		{ /* #5071 = 0x279D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB8D /* System.Void CoreImage.CIRippleTransition::set_ShadingImage(CoreImage.CIImage) */ },
		{ /* #5072 = 0x279F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB8E /* CoreGraphics.CGPoint CoreImage.CIRippleTransition::get_InputCenter() */ },
		{ /* #5073 = 0x27A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB8F /* System.Void CoreImage.CIRippleTransition::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5074 = 0x27A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB90 /* CoreGraphics.CGRect CoreImage.CIRippleTransition::get_InputExtent() */ },
		{ /* #5075 = 0x27A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB91 /* System.Void CoreImage.CIRippleTransition::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #5076 = 0x27A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB92 /* System.Single CoreImage.CIRippleTransition::get_Width() */ },
		{ /* #5077 = 0x27A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB93 /* System.Void CoreImage.CIRippleTransition::set_Width(System.Single) */ },
		{ /* #5078 = 0x27AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB94 /* System.Single CoreImage.CIRippleTransition::get_Scale() */ },
		{ /* #5079 = 0x27AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB95 /* System.Void CoreImage.CIRippleTransition::set_Scale(System.Single) */ },
		{ /* #5080 = 0x27AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB96 /* CoreImage.CIImage CoreImage.CIRippleTransition::get_InputImage() */ },
		{ /* #5081 = 0x27B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB97 /* System.Void CoreImage.CIRippleTransition::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5082 = 0x27B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB98 /* CoreImage.CIImage CoreImage.CIRippleTransition::get_TargetImage() */ },
		{ /* #5083 = 0x27B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB99 /* System.Void CoreImage.CIRippleTransition::set_TargetImage(CoreImage.CIImage) */ },
		{ /* #5084 = 0x27B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB9A /* System.Single CoreImage.CIRippleTransition::get_Time() */ },
		{ /* #5085 = 0x27B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB9B /* System.Void CoreImage.CIRippleTransition::set_Time(System.Single) */ },
		{ /* #5086 = 0x27BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB9C /* CoreImage.CIImage CoreImage.CIRippleTransition::get_OutputImage() */ },
		{ /* #5087 = 0x27BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB88 /* System.Void CoreImage.CIRippleTransition::.ctor() */ },
		{ /* #5088 = 0x27BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EB8B /* System.Void CoreImage.CIRippleTransition::.ctor(Foundation.NSCoder) */ },
		{ /* #5089 = 0x27C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001866 /* CoreImage.ICIRoundedRectangleGeneratorProtocol */ },
		{ /* #5090 = 0x27C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001867 /* CoreImage.CIRoundedRectangleGeneratorProtocolWrapper */ },
		{ /* #5091 = 0x27C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001865 /* CoreImage.CIRoundedRectangleGenerator */ },
		{ /* #5092 = 0x27C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBBD /* CoreGraphics.CGRect CoreImage.CIRoundedRectangleGenerator::get_InputExtent() */ },
		{ /* #5093 = 0x27C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBBE /* System.Void CoreImage.CIRoundedRectangleGenerator::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #5094 = 0x27CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBBF /* System.Single CoreImage.CIRoundedRectangleGenerator::get_Radius() */ },
		{ /* #5095 = 0x27CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBC0 /* System.Void CoreImage.CIRoundedRectangleGenerator::set_Radius(System.Single) */ },
		{ /* #5096 = 0x27CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBC1 /* CoreImage.CIColor CoreImage.CIRoundedRectangleGenerator::get_Color() */ },
		{ /* #5097 = 0x27D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBC2 /* System.Void CoreImage.CIRoundedRectangleGenerator::set_Color(CoreImage.CIColor) */ },
		{ /* #5098 = 0x27D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBC3 /* CoreImage.CIImage CoreImage.CIRoundedRectangleGenerator::get_OutputImage() */ },
		{ /* #5099 = 0x27D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBB9 /* System.Void CoreImage.CIRoundedRectangleGenerator::.ctor() */ },
		{ /* #5100 = 0x27D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBBC /* System.Void CoreImage.CIRoundedRectangleGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #5101 = 0x27D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001869 /* CoreImage.ICIRowAverageProtocol */ },
		{ /* #5102 = 0x27DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200186A /* CoreImage.CIRowAverageProtocolWrapper */ },
		{ /* #5103 = 0x27DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001868 /* CoreImage.CIRowAverage */ },
		{ /* #5104 = 0x27DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBD6 /* CoreImage.CIImage CoreImage.CIRowAverage::get_InputImage() */ },
		{ /* #5105 = 0x27E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBD7 /* System.Void CoreImage.CIRowAverage::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5106 = 0x27E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBD8 /* CoreGraphics.CGRect CoreImage.CIRowAverage::get_InputExtent() */ },
		{ /* #5107 = 0x27E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBD9 /* System.Void CoreImage.CIRowAverage::set_InputExtent(CoreGraphics.CGRect) */ },
		{ /* #5108 = 0x27E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBDA /* CoreImage.CIImage CoreImage.CIRowAverage::get_OutputImage() */ },
		{ /* #5109 = 0x27E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBD2 /* System.Void CoreImage.CIRowAverage::.ctor() */ },
		{ /* #5110 = 0x27EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBD5 /* System.Void CoreImage.CIRowAverage::.ctor(Foundation.NSCoder) */ },
		{ /* #5111 = 0x27ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200186C /* CoreImage.ICISaliencyMapProtocol */ },
		{ /* #5112 = 0x27EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200186D /* CoreImage.CISaliencyMapProtocolWrapper */ },
		{ /* #5113 = 0x27F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200186B /* CoreImage.CISaliencyMapFilter */ },
		{ /* #5114 = 0x27F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBE5 /* CoreImage.CIImage CoreImage.CISaliencyMapFilter::get_InputImage() */ },
		{ /* #5115 = 0x27F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBE6 /* System.Void CoreImage.CISaliencyMapFilter::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5116 = 0x27F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBE7 /* CoreImage.CIImage CoreImage.CISaliencyMapFilter::get_OutputImage() */ },
		{ /* #5117 = 0x27F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBE1 /* System.Void CoreImage.CISaliencyMapFilter::.ctor() */ },
		{ /* #5118 = 0x27FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBE4 /* System.Void CoreImage.CISaliencyMapFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #5119 = 0x27FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200186E /* CoreImage.CISampleNearest */ },
		{ /* #5120 = 0x27FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBEE /* System.Void CoreImage.CISampleNearest::.ctor() */ },
		{ /* #5121 = 0x2801 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBF1 /* System.Void CoreImage.CISampleNearest::.ctor(Foundation.NSCoder) */ },
		{ /* #5122 = 0x2803 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200186F /* CoreImage.CISaturationBlendMode */ },
		{ /* #5123 = 0x2805 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBF4 /* System.Void CoreImage.CISaturationBlendMode::.ctor() */ },
		{ /* #5124 = 0x2807 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBF7 /* System.Void CoreImage.CISaturationBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #5125 = 0x2809 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001870 /* CoreImage.CIScreenBlendMode */ },
		{ /* #5126 = 0x280B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBF8 /* System.Void CoreImage.CIScreenBlendMode::.ctor() */ },
		{ /* #5127 = 0x280D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EBFB /* System.Void CoreImage.CIScreenBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #5128 = 0x280F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001873 /* CoreImage.ICISepiaToneProtocol */ },
		{ /* #5129 = 0x2811 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001874 /* CoreImage.CISepiaToneProtocolWrapper */ },
		{ /* #5130 = 0x2813 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001872 /* CoreImage.CISepiaTone */ },
		{ /* #5131 = 0x2815 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC0A /* CoreImage.CIImage CoreImage.CISepiaTone::get_InputImage() */ },
		{ /* #5132 = 0x2817 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC0B /* System.Void CoreImage.CISepiaTone::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5133 = 0x2819 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC0C /* System.Single CoreImage.CISepiaTone::get_Intensity() */ },
		{ /* #5134 = 0x281B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC0D /* System.Void CoreImage.CISepiaTone::set_Intensity(System.Single) */ },
		{ /* #5135 = 0x281D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC0E /* CoreImage.CIImage CoreImage.CISepiaTone::get_OutputImage() */ },
		{ /* #5136 = 0x281F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC06 /* System.Void CoreImage.CISepiaTone::.ctor() */ },
		{ /* #5137 = 0x2821 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC09 /* System.Void CoreImage.CISepiaTone::.ctor(Foundation.NSCoder) */ },
		{ /* #5138 = 0x2823 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001876 /* CoreImage.ICIShadedMaterialProtocol */ },
		{ /* #5139 = 0x2825 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001877 /* CoreImage.CIShadedMaterialProtocolWrapper */ },
		{ /* #5140 = 0x2827 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001875 /* CoreImage.CIShadedMaterial */ },
		{ /* #5141 = 0x2829 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC1D /* CoreImage.CIImage CoreImage.CIShadedMaterial::get_InputImage() */ },
		{ /* #5142 = 0x282B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC1E /* System.Void CoreImage.CIShadedMaterial::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5143 = 0x282D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC1F /* CoreImage.CIImage CoreImage.CIShadedMaterial::get_ShadingImage() */ },
		{ /* #5144 = 0x282F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC20 /* System.Void CoreImage.CIShadedMaterial::set_ShadingImage(CoreImage.CIImage) */ },
		{ /* #5145 = 0x2831 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC21 /* System.Single CoreImage.CIShadedMaterial::get_Scale() */ },
		{ /* #5146 = 0x2833 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC22 /* System.Void CoreImage.CIShadedMaterial::set_Scale(System.Single) */ },
		{ /* #5147 = 0x2835 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC23 /* CoreImage.CIImage CoreImage.CIShadedMaterial::get_OutputImage() */ },
		{ /* #5148 = 0x2837 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC19 /* System.Void CoreImage.CIShadedMaterial::.ctor() */ },
		{ /* #5149 = 0x2839 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC1C /* System.Void CoreImage.CIShadedMaterial::.ctor(Foundation.NSCoder) */ },
		{ /* #5150 = 0x283B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001879 /* CoreImage.ICISharpenLuminanceProtocol */ },
		{ /* #5151 = 0x283D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200187A /* CoreImage.CISharpenLuminanceProtocolWrapper */ },
		{ /* #5152 = 0x283F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001878 /* CoreImage.CISharpenLuminance */ },
		{ /* #5153 = 0x2841 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC36 /* CoreImage.CIImage CoreImage.CISharpenLuminance::get_InputImage() */ },
		{ /* #5154 = 0x2843 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC37 /* System.Void CoreImage.CISharpenLuminance::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5155 = 0x2845 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC38 /* System.Single CoreImage.CISharpenLuminance::get_Sharpness() */ },
		{ /* #5156 = 0x2847 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC39 /* System.Void CoreImage.CISharpenLuminance::set_Sharpness(System.Single) */ },
		{ /* #5157 = 0x2849 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC3A /* System.Single CoreImage.CISharpenLuminance::get_Radius() */ },
		{ /* #5158 = 0x284B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC3B /* System.Void CoreImage.CISharpenLuminance::set_Radius(System.Single) */ },
		{ /* #5159 = 0x284D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC3C /* CoreImage.CIImage CoreImage.CISharpenLuminance::get_OutputImage() */ },
		{ /* #5160 = 0x284F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC32 /* System.Void CoreImage.CISharpenLuminance::.ctor() */ },
		{ /* #5161 = 0x2851 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC35 /* System.Void CoreImage.CISharpenLuminance::.ctor(Foundation.NSCoder) */ },
		{ /* #5162 = 0x2853 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200187C /* CoreImage.ICISixfoldReflectedTileProtocol */ },
		{ /* #5163 = 0x2855 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200187D /* CoreImage.CISixfoldReflectedTileProtocolWrapper */ },
		{ /* #5164 = 0x2857 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200187B /* CoreImage.CISixfoldReflectedTile */ },
		{ /* #5165 = 0x2859 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC4F /* CoreImage.CIImage CoreImage.CISixfoldReflectedTile::get_InputImage() */ },
		{ /* #5166 = 0x285B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC50 /* System.Void CoreImage.CISixfoldReflectedTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5167 = 0x285D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC51 /* CoreGraphics.CGPoint CoreImage.CISixfoldReflectedTile::get_InputCenter() */ },
		{ /* #5168 = 0x285F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC52 /* System.Void CoreImage.CISixfoldReflectedTile::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5169 = 0x2861 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC53 /* System.Single CoreImage.CISixfoldReflectedTile::get_Angle() */ },
		{ /* #5170 = 0x2863 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC54 /* System.Void CoreImage.CISixfoldReflectedTile::set_Angle(System.Single) */ },
		{ /* #5171 = 0x2865 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC55 /* System.Single CoreImage.CISixfoldReflectedTile::get_Width() */ },
		{ /* #5172 = 0x2867 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC56 /* System.Void CoreImage.CISixfoldReflectedTile::set_Width(System.Single) */ },
		{ /* #5173 = 0x2869 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC57 /* CoreImage.CIImage CoreImage.CISixfoldReflectedTile::get_OutputImage() */ },
		{ /* #5174 = 0x286B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC4B /* System.Void CoreImage.CISixfoldReflectedTile::.ctor() */ },
		{ /* #5175 = 0x286D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC4E /* System.Void CoreImage.CISixfoldReflectedTile::.ctor(Foundation.NSCoder) */ },
		{ /* #5176 = 0x286F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200187F /* CoreImage.ICISixfoldRotatedTileProtocol */ },
		{ /* #5177 = 0x2871 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001880 /* CoreImage.CISixfoldRotatedTileProtocolWrapper */ },
		{ /* #5178 = 0x2873 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200187E /* CoreImage.CISixfoldRotatedTile */ },
		{ /* #5179 = 0x2875 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC6E /* CoreImage.CIImage CoreImage.CISixfoldRotatedTile::get_InputImage() */ },
		{ /* #5180 = 0x2877 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC6F /* System.Void CoreImage.CISixfoldRotatedTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5181 = 0x2879 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC70 /* CoreGraphics.CGPoint CoreImage.CISixfoldRotatedTile::get_InputCenter() */ },
		{ /* #5182 = 0x287B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC71 /* System.Void CoreImage.CISixfoldRotatedTile::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5183 = 0x287D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC72 /* System.Single CoreImage.CISixfoldRotatedTile::get_Angle() */ },
		{ /* #5184 = 0x287F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC73 /* System.Void CoreImage.CISixfoldRotatedTile::set_Angle(System.Single) */ },
		{ /* #5185 = 0x2881 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC74 /* System.Single CoreImage.CISixfoldRotatedTile::get_Width() */ },
		{ /* #5186 = 0x2883 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC75 /* System.Void CoreImage.CISixfoldRotatedTile::set_Width(System.Single) */ },
		{ /* #5187 = 0x2885 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC76 /* CoreImage.CIImage CoreImage.CISixfoldRotatedTile::get_OutputImage() */ },
		{ /* #5188 = 0x2887 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC6A /* System.Void CoreImage.CISixfoldRotatedTile::.ctor() */ },
		{ /* #5189 = 0x2889 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC6D /* System.Void CoreImage.CISixfoldRotatedTile::.ctor(Foundation.NSCoder) */ },
		{ /* #5190 = 0x288B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001882 /* CoreImage.ICISmoothLinearGradientProtocol */ },
		{ /* #5191 = 0x288D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001883 /* CoreImage.CISmoothLinearGradientProtocolWrapper */ },
		{ /* #5192 = 0x288F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001881 /* CoreImage.CISmoothLinearGradient */ },
		{ /* #5193 = 0x2891 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC8D /* CoreGraphics.CGPoint CoreImage.CISmoothLinearGradient::get_InputPoint0() */ },
		{ /* #5194 = 0x2893 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC8E /* System.Void CoreImage.CISmoothLinearGradient::set_InputPoint0(CoreGraphics.CGPoint) */ },
		{ /* #5195 = 0x2895 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC8F /* CoreGraphics.CGPoint CoreImage.CISmoothLinearGradient::get_InputPoint1() */ },
		{ /* #5196 = 0x2897 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC90 /* System.Void CoreImage.CISmoothLinearGradient::set_InputPoint1(CoreGraphics.CGPoint) */ },
		{ /* #5197 = 0x2899 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC91 /* CoreImage.CIColor CoreImage.CISmoothLinearGradient::get_Color0() */ },
		{ /* #5198 = 0x289B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC92 /* System.Void CoreImage.CISmoothLinearGradient::set_Color0(CoreImage.CIColor) */ },
		{ /* #5199 = 0x289D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC93 /* CoreImage.CIColor CoreImage.CISmoothLinearGradient::get_Color1() */ },
		{ /* #5200 = 0x289F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC94 /* System.Void CoreImage.CISmoothLinearGradient::set_Color1(CoreImage.CIColor) */ },
		{ /* #5201 = 0x28A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC95 /* CoreImage.CIImage CoreImage.CISmoothLinearGradient::get_OutputImage() */ },
		{ /* #5202 = 0x28A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC89 /* System.Void CoreImage.CISmoothLinearGradient::.ctor() */ },
		{ /* #5203 = 0x28A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EC8C /* System.Void CoreImage.CISmoothLinearGradient::.ctor(Foundation.NSCoder) */ },
		{ /* #5204 = 0x28A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001884 /* CoreImage.CISoftLightBlendMode */ },
		{ /* #5205 = 0x28A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECA8 /* System.Void CoreImage.CISoftLightBlendMode::.ctor() */ },
		{ /* #5206 = 0x28AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECAB /* System.Void CoreImage.CISoftLightBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #5207 = 0x28AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001885 /* CoreImage.CISourceAtopCompositing */ },
		{ /* #5208 = 0x28AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECAC /* System.Void CoreImage.CISourceAtopCompositing::.ctor() */ },
		{ /* #5209 = 0x28B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECAF /* System.Void CoreImage.CISourceAtopCompositing::.ctor(Foundation.NSCoder) */ },
		{ /* #5210 = 0x28B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001886 /* CoreImage.CISourceInCompositing */ },
		{ /* #5211 = 0x28B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECB0 /* System.Void CoreImage.CISourceInCompositing::.ctor() */ },
		{ /* #5212 = 0x28B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECB3 /* System.Void CoreImage.CISourceInCompositing::.ctor(Foundation.NSCoder) */ },
		{ /* #5213 = 0x28B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001887 /* CoreImage.CISourceOutCompositing */ },
		{ /* #5214 = 0x28BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECB4 /* System.Void CoreImage.CISourceOutCompositing::.ctor() */ },
		{ /* #5215 = 0x28BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECB7 /* System.Void CoreImage.CISourceOutCompositing::.ctor(Foundation.NSCoder) */ },
		{ /* #5216 = 0x28BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001888 /* CoreImage.CISourceOverCompositing */ },
		{ /* #5217 = 0x28C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECB8 /* System.Void CoreImage.CISourceOverCompositing::.ctor() */ },
		{ /* #5218 = 0x28C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECBB /* System.Void CoreImage.CISourceOverCompositing::.ctor(Foundation.NSCoder) */ },
		{ /* #5219 = 0x28C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200188A /* CoreImage.ICISpotColorProtocol */ },
		{ /* #5220 = 0x28C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200188B /* CoreImage.CISpotColorProtocolWrapper */ },
		{ /* #5221 = 0x28C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001889 /* CoreImage.CISpotColor */ },
		{ /* #5222 = 0x28CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECC0 /* CoreImage.CIImage CoreImage.CISpotColor::get_InputImage() */ },
		{ /* #5223 = 0x28CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECC1 /* System.Void CoreImage.CISpotColor::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5224 = 0x28CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECC2 /* CoreImage.CIColor CoreImage.CISpotColor::get_CenterColor1() */ },
		{ /* #5225 = 0x28D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECC3 /* System.Void CoreImage.CISpotColor::set_CenterColor1(CoreImage.CIColor) */ },
		{ /* #5226 = 0x28D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECC4 /* CoreImage.CIColor CoreImage.CISpotColor::get_ReplacementColor1() */ },
		{ /* #5227 = 0x28D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECC5 /* System.Void CoreImage.CISpotColor::set_ReplacementColor1(CoreImage.CIColor) */ },
		{ /* #5228 = 0x28D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECC6 /* System.Single CoreImage.CISpotColor::get_Closeness1() */ },
		{ /* #5229 = 0x28D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECC7 /* System.Void CoreImage.CISpotColor::set_Closeness1(System.Single) */ },
		{ /* #5230 = 0x28DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECC8 /* System.Single CoreImage.CISpotColor::get_Contrast1() */ },
		{ /* #5231 = 0x28DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECC9 /* System.Void CoreImage.CISpotColor::set_Contrast1(System.Single) */ },
		{ /* #5232 = 0x28DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECCA /* CoreImage.CIColor CoreImage.CISpotColor::get_CenterColor2() */ },
		{ /* #5233 = 0x28E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECCB /* System.Void CoreImage.CISpotColor::set_CenterColor2(CoreImage.CIColor) */ },
		{ /* #5234 = 0x28E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECCC /* CoreImage.CIColor CoreImage.CISpotColor::get_ReplacementColor2() */ },
		{ /* #5235 = 0x28E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECCD /* System.Void CoreImage.CISpotColor::set_ReplacementColor2(CoreImage.CIColor) */ },
		{ /* #5236 = 0x28E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECCE /* System.Single CoreImage.CISpotColor::get_Closeness2() */ },
		{ /* #5237 = 0x28E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECCF /* System.Void CoreImage.CISpotColor::set_Closeness2(System.Single) */ },
		{ /* #5238 = 0x28EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECD0 /* System.Single CoreImage.CISpotColor::get_Contrast2() */ },
		{ /* #5239 = 0x28ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECD1 /* System.Void CoreImage.CISpotColor::set_Contrast2(System.Single) */ },
		{ /* #5240 = 0x28EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECD2 /* CoreImage.CIColor CoreImage.CISpotColor::get_CenterColor3() */ },
		{ /* #5241 = 0x28F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECD3 /* System.Void CoreImage.CISpotColor::set_CenterColor3(CoreImage.CIColor) */ },
		{ /* #5242 = 0x28F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECD4 /* CoreImage.CIColor CoreImage.CISpotColor::get_ReplacementColor3() */ },
		{ /* #5243 = 0x28F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECD5 /* System.Void CoreImage.CISpotColor::set_ReplacementColor3(CoreImage.CIColor) */ },
		{ /* #5244 = 0x28F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECD6 /* System.Single CoreImage.CISpotColor::get_Closeness3() */ },
		{ /* #5245 = 0x28F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECD7 /* System.Void CoreImage.CISpotColor::set_Closeness3(System.Single) */ },
		{ /* #5246 = 0x28FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECD8 /* System.Single CoreImage.CISpotColor::get_Contrast3() */ },
		{ /* #5247 = 0x28FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECD9 /* System.Void CoreImage.CISpotColor::set_Contrast3(System.Single) */ },
		{ /* #5248 = 0x28FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECDA /* CoreImage.CIImage CoreImage.CISpotColor::get_OutputImage() */ },
		{ /* #5249 = 0x2901 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECBC /* System.Void CoreImage.CISpotColor::.ctor() */ },
		{ /* #5250 = 0x2903 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ECBF /* System.Void CoreImage.CISpotColor::.ctor(Foundation.NSCoder) */ },
		{ /* #5251 = 0x2905 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200188D /* CoreImage.ICISpotLightProtocol */ },
		{ /* #5252 = 0x2907 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200188E /* CoreImage.CISpotLightProtocolWrapper */ },
		{ /* #5253 = 0x2909 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200188C /* CoreImage.CISpotLight */ },
		{ /* #5254 = 0x290B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED15 /* CoreImage.CIImage CoreImage.CISpotLight::get_InputImage() */ },
		{ /* #5255 = 0x290D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED16 /* System.Void CoreImage.CISpotLight::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5256 = 0x290F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED17 /* CoreImage.CIVector CoreImage.CISpotLight::get_LightPosition() */ },
		{ /* #5257 = 0x2911 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED18 /* System.Void CoreImage.CISpotLight::set_LightPosition(CoreImage.CIVector) */ },
		{ /* #5258 = 0x2913 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED19 /* CoreImage.CIVector CoreImage.CISpotLight::get_LightPointsAt() */ },
		{ /* #5259 = 0x2915 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED1A /* System.Void CoreImage.CISpotLight::set_LightPointsAt(CoreImage.CIVector) */ },
		{ /* #5260 = 0x2917 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED1B /* System.Single CoreImage.CISpotLight::get_Brightness() */ },
		{ /* #5261 = 0x2919 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED1C /* System.Void CoreImage.CISpotLight::set_Brightness(System.Single) */ },
		{ /* #5262 = 0x291B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED1D /* System.Single CoreImage.CISpotLight::get_Concentration() */ },
		{ /* #5263 = 0x291D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED1E /* System.Void CoreImage.CISpotLight::set_Concentration(System.Single) */ },
		{ /* #5264 = 0x291F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED1F /* CoreImage.CIColor CoreImage.CISpotLight::get_Color() */ },
		{ /* #5265 = 0x2921 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED20 /* System.Void CoreImage.CISpotLight::set_Color(CoreImage.CIColor) */ },
		{ /* #5266 = 0x2923 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED21 /* CoreImage.CIImage CoreImage.CISpotLight::get_OutputImage() */ },
		{ /* #5267 = 0x2925 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED11 /* System.Void CoreImage.CISpotLight::.ctor() */ },
		{ /* #5268 = 0x2927 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED14 /* System.Void CoreImage.CISpotLight::.ctor(Foundation.NSCoder) */ },
		{ /* #5269 = 0x2929 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001890 /* CoreImage.ICISrgbToneCurveToLinearProtocol */ },
		{ /* #5270 = 0x292B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001891 /* CoreImage.CISrgbToneCurveToLinearProtocolWrapper */ },
		{ /* #5271 = 0x292D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200188F /* CoreImage.CISRGBToneCurveToLinear */ },
		{ /* #5272 = 0x292F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED40 /* CoreImage.CIImage CoreImage.CISRGBToneCurveToLinear::get_InputImage() */ },
		{ /* #5273 = 0x2931 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED41 /* System.Void CoreImage.CISRGBToneCurveToLinear::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5274 = 0x2933 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED42 /* CoreImage.CIImage CoreImage.CISRGBToneCurveToLinear::get_OutputImage() */ },
		{ /* #5275 = 0x2935 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED3C /* System.Void CoreImage.CISRGBToneCurveToLinear::.ctor() */ },
		{ /* #5276 = 0x2937 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED3F /* System.Void CoreImage.CISRGBToneCurveToLinear::.ctor(Foundation.NSCoder) */ },
		{ /* #5277 = 0x2939 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001893 /* CoreImage.ICIStarShineGeneratorProtocol */ },
		{ /* #5278 = 0x293B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001894 /* CoreImage.CIStarShineGeneratorProtocolWrapper */ },
		{ /* #5279 = 0x293D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001892 /* CoreImage.CIStarShineGenerator */ },
		{ /* #5280 = 0x293F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED4D /* CoreGraphics.CGPoint CoreImage.CIStarShineGenerator::get_InputCenter() */ },
		{ /* #5281 = 0x2941 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED4E /* System.Void CoreImage.CIStarShineGenerator::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5282 = 0x2943 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED4F /* CoreImage.CIColor CoreImage.CIStarShineGenerator::get_Color() */ },
		{ /* #5283 = 0x2945 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED50 /* System.Void CoreImage.CIStarShineGenerator::set_Color(CoreImage.CIColor) */ },
		{ /* #5284 = 0x2947 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED51 /* System.Single CoreImage.CIStarShineGenerator::get_Radius() */ },
		{ /* #5285 = 0x2949 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED52 /* System.Void CoreImage.CIStarShineGenerator::set_Radius(System.Single) */ },
		{ /* #5286 = 0x294B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED53 /* System.Single CoreImage.CIStarShineGenerator::get_CrossScale() */ },
		{ /* #5287 = 0x294D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED54 /* System.Void CoreImage.CIStarShineGenerator::set_CrossScale(System.Single) */ },
		{ /* #5288 = 0x294F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED55 /* System.Single CoreImage.CIStarShineGenerator::get_CrossAngle() */ },
		{ /* #5289 = 0x2951 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED56 /* System.Void CoreImage.CIStarShineGenerator::set_CrossAngle(System.Single) */ },
		{ /* #5290 = 0x2953 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED57 /* System.Single CoreImage.CIStarShineGenerator::get_CrossOpacity() */ },
		{ /* #5291 = 0x2955 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED58 /* System.Void CoreImage.CIStarShineGenerator::set_CrossOpacity(System.Single) */ },
		{ /* #5292 = 0x2957 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED59 /* System.Single CoreImage.CIStarShineGenerator::get_CrossWidth() */ },
		{ /* #5293 = 0x2959 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED5A /* System.Void CoreImage.CIStarShineGenerator::set_CrossWidth(System.Single) */ },
		{ /* #5294 = 0x295B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED5B /* System.Single CoreImage.CIStarShineGenerator::get_Epsilon() */ },
		{ /* #5295 = 0x295D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED5C /* System.Void CoreImage.CIStarShineGenerator::set_Epsilon(System.Single) */ },
		{ /* #5296 = 0x295F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED5D /* CoreImage.CIImage CoreImage.CIStarShineGenerator::get_OutputImage() */ },
		{ /* #5297 = 0x2961 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED49 /* System.Void CoreImage.CIStarShineGenerator::.ctor() */ },
		{ /* #5298 = 0x2963 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED4C /* System.Void CoreImage.CIStarShineGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #5299 = 0x2965 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001896 /* CoreImage.ICIStraightenProtocol */ },
		{ /* #5300 = 0x2967 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001897 /* CoreImage.CIStraightenProtocolWrapper */ },
		{ /* #5301 = 0x2969 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001895 /* CoreImage.CIStraightenFilter */ },
		{ /* #5302 = 0x296B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED84 /* CoreImage.CIImage CoreImage.CIStraightenFilter::get_InputImage() */ },
		{ /* #5303 = 0x296D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED85 /* System.Void CoreImage.CIStraightenFilter::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5304 = 0x296F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED86 /* System.Single CoreImage.CIStraightenFilter::get_Angle() */ },
		{ /* #5305 = 0x2971 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED87 /* System.Void CoreImage.CIStraightenFilter::set_Angle(System.Single) */ },
		{ /* #5306 = 0x2973 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED88 /* CoreImage.CIImage CoreImage.CIStraightenFilter::get_OutputImage() */ },
		{ /* #5307 = 0x2975 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED80 /* System.Void CoreImage.CIStraightenFilter::.ctor() */ },
		{ /* #5308 = 0x2977 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED83 /* System.Void CoreImage.CIStraightenFilter::.ctor(Foundation.NSCoder) */ },
		{ /* #5309 = 0x2979 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001899 /* CoreImage.ICIStretchCropProtocol */ },
		{ /* #5310 = 0x297B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200189A /* CoreImage.CIStretchCropProtocolWrapper */ },
		{ /* #5311 = 0x297D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001898 /* CoreImage.CIStretchCrop */ },
		{ /* #5312 = 0x297F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED97 /* CoreImage.CIImage CoreImage.CIStretchCrop::get_InputImage() */ },
		{ /* #5313 = 0x2981 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED98 /* System.Void CoreImage.CIStretchCrop::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5314 = 0x2983 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED99 /* CoreGraphics.CGPoint CoreImage.CIStretchCrop::get_InputSize() */ },
		{ /* #5315 = 0x2985 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED9A /* System.Void CoreImage.CIStretchCrop::set_InputSize(CoreGraphics.CGPoint) */ },
		{ /* #5316 = 0x2987 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED9B /* System.Single CoreImage.CIStretchCrop::get_CropAmount() */ },
		{ /* #5317 = 0x2989 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED9C /* System.Void CoreImage.CIStretchCrop::set_CropAmount(System.Single) */ },
		{ /* #5318 = 0x298B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED9D /* System.Single CoreImage.CIStretchCrop::get_CenterStretchAmount() */ },
		{ /* #5319 = 0x298D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED9E /* System.Void CoreImage.CIStretchCrop::set_CenterStretchAmount(System.Single) */ },
		{ /* #5320 = 0x298F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED9F /* CoreImage.CIImage CoreImage.CIStretchCrop::get_OutputImage() */ },
		{ /* #5321 = 0x2991 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED93 /* System.Void CoreImage.CIStretchCrop::.ctor() */ },
		{ /* #5322 = 0x2993 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600ED96 /* System.Void CoreImage.CIStretchCrop::.ctor(Foundation.NSCoder) */ },
		{ /* #5323 = 0x2995 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200189C /* CoreImage.ICIStripesGeneratorProtocol */ },
		{ /* #5324 = 0x2997 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200189D /* CoreImage.CIStripesGeneratorProtocolWrapper */ },
		{ /* #5325 = 0x2999 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200189B /* CoreImage.CIStripesGenerator */ },
		{ /* #5326 = 0x299B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDB6 /* CoreGraphics.CGPoint CoreImage.CIStripesGenerator::get_InputCenter() */ },
		{ /* #5327 = 0x299D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDB7 /* System.Void CoreImage.CIStripesGenerator::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5328 = 0x299F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDB8 /* CoreImage.CIColor CoreImage.CIStripesGenerator::get_Color0() */ },
		{ /* #5329 = 0x29A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDB9 /* System.Void CoreImage.CIStripesGenerator::set_Color0(CoreImage.CIColor) */ },
		{ /* #5330 = 0x29A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDBA /* CoreImage.CIColor CoreImage.CIStripesGenerator::get_Color1() */ },
		{ /* #5331 = 0x29A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDBB /* System.Void CoreImage.CIStripesGenerator::set_Color1(CoreImage.CIColor) */ },
		{ /* #5332 = 0x29A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDBC /* System.Single CoreImage.CIStripesGenerator::get_Width() */ },
		{ /* #5333 = 0x29A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDBD /* System.Void CoreImage.CIStripesGenerator::set_Width(System.Single) */ },
		{ /* #5334 = 0x29AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDBE /* System.Single CoreImage.CIStripesGenerator::get_Sharpness() */ },
		{ /* #5335 = 0x29AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDBF /* System.Void CoreImage.CIStripesGenerator::set_Sharpness(System.Single) */ },
		{ /* #5336 = 0x29AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDC0 /* CoreImage.CIImage CoreImage.CIStripesGenerator::get_OutputImage() */ },
		{ /* #5337 = 0x29B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDB2 /* System.Void CoreImage.CIStripesGenerator::.ctor() */ },
		{ /* #5338 = 0x29B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDB5 /* System.Void CoreImage.CIStripesGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #5339 = 0x29B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200189E /* CoreImage.CISubtractBlendMode */ },
		{ /* #5340 = 0x29B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDD7 /* System.Void CoreImage.CISubtractBlendMode::.ctor() */ },
		{ /* #5341 = 0x29B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDDA /* System.Void CoreImage.CISubtractBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #5342 = 0x29BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018A0 /* CoreImage.ICISunbeamsGeneratorProtocol */ },
		{ /* #5343 = 0x29BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018A1 /* CoreImage.CISunbeamsGeneratorProtocolWrapper */ },
		{ /* #5344 = 0x29BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200189F /* CoreImage.CISunbeamsGenerator */ },
		{ /* #5345 = 0x29C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDDF /* CoreGraphics.CGPoint CoreImage.CISunbeamsGenerator::get_InputCenter() */ },
		{ /* #5346 = 0x29C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDE0 /* System.Void CoreImage.CISunbeamsGenerator::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5347 = 0x29C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDE1 /* CoreImage.CIColor CoreImage.CISunbeamsGenerator::get_Color() */ },
		{ /* #5348 = 0x29C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDE2 /* System.Void CoreImage.CISunbeamsGenerator::set_Color(CoreImage.CIColor) */ },
		{ /* #5349 = 0x29C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDE3 /* System.Single CoreImage.CISunbeamsGenerator::get_SunRadius() */ },
		{ /* #5350 = 0x29CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDE4 /* System.Void CoreImage.CISunbeamsGenerator::set_SunRadius(System.Single) */ },
		{ /* #5351 = 0x29CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDE5 /* System.Single CoreImage.CISunbeamsGenerator::get_MaxStriationRadius() */ },
		{ /* #5352 = 0x29CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDE6 /* System.Void CoreImage.CISunbeamsGenerator::set_MaxStriationRadius(System.Single) */ },
		{ /* #5353 = 0x29D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDE7 /* System.Single CoreImage.CISunbeamsGenerator::get_StriationStrength() */ },
		{ /* #5354 = 0x29D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDE8 /* System.Void CoreImage.CISunbeamsGenerator::set_StriationStrength(System.Single) */ },
		{ /* #5355 = 0x29D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDE9 /* System.Single CoreImage.CISunbeamsGenerator::get_StriationContrast() */ },
		{ /* #5356 = 0x29D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDEA /* System.Void CoreImage.CISunbeamsGenerator::set_StriationContrast(System.Single) */ },
		{ /* #5357 = 0x29D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDEB /* System.Single CoreImage.CISunbeamsGenerator::get_Time() */ },
		{ /* #5358 = 0x29DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDEC /* System.Void CoreImage.CISunbeamsGenerator::set_Time(System.Single) */ },
		{ /* #5359 = 0x29DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDED /* CoreImage.CIImage CoreImage.CISunbeamsGenerator::get_OutputImage() */ },
		{ /* #5360 = 0x29DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDDB /* System.Void CoreImage.CISunbeamsGenerator::.ctor() */ },
		{ /* #5361 = 0x29E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EDDE /* System.Void CoreImage.CISunbeamsGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #5362 = 0x29E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018A2 /* CoreImage.CISwipeTransition */ },
		{ /* #5363 = 0x29E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE0C /* System.Void CoreImage.CISwipeTransition::.ctor() */ },
		{ /* #5364 = 0x29E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE0F /* System.Void CoreImage.CISwipeTransition::.ctor(Foundation.NSCoder) */ },
		{ /* #5365 = 0x29E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018A3 /* CoreImage.ICISwipeTransitionProtocol */ },
		{ /* #5366 = 0x29EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018A4 /* CoreImage.CISwipeTransitionProtocolWrapper */ },
		{ /* #5367 = 0x29ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018A6 /* CoreImage.ICITemperatureAndTintProtocol */ },
		{ /* #5368 = 0x29EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018A7 /* CoreImage.CITemperatureAndTintProtocolWrapper */ },
		{ /* #5369 = 0x29F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018A5 /* CoreImage.CITemperatureAndTint */ },
		{ /* #5370 = 0x29F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE3A /* CoreImage.CIImage CoreImage.CITemperatureAndTint::get_InputImage() */ },
		{ /* #5371 = 0x29F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE3B /* System.Void CoreImage.CITemperatureAndTint::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5372 = 0x29F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE3C /* CoreImage.CIVector CoreImage.CITemperatureAndTint::get_Neutral() */ },
		{ /* #5373 = 0x29F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE3D /* System.Void CoreImage.CITemperatureAndTint::set_Neutral(CoreImage.CIVector) */ },
		{ /* #5374 = 0x29FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE3E /* CoreImage.CIVector CoreImage.CITemperatureAndTint::get_TargetNeutral() */ },
		{ /* #5375 = 0x29FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE3F /* System.Void CoreImage.CITemperatureAndTint::set_TargetNeutral(CoreImage.CIVector) */ },
		{ /* #5376 = 0x29FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE40 /* CoreImage.CIImage CoreImage.CITemperatureAndTint::get_OutputImage() */ },
		{ /* #5377 = 0x2A01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE36 /* System.Void CoreImage.CITemperatureAndTint::.ctor() */ },
		{ /* #5378 = 0x2A03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE39 /* System.Void CoreImage.CITemperatureAndTint::.ctor(Foundation.NSCoder) */ },
		{ /* #5379 = 0x2A05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018A8 /* CoreImage.CITextFeature */ },
		{ /* #5380 = 0x2A07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018AA /* CoreImage.ICITextImageGeneratorProtocol */ },
		{ /* #5381 = 0x2A09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018AC /* CoreImage.CITextImageGeneratorProtocolWrapper */ },
		{ /* #5382 = 0x2A0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018A9 /* CoreImage.CITextImageGenerator */ },
		{ /* #5383 = 0x2A0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE5E /* System.String CoreImage.CITextImageGenerator::get_Text() */ },
		{ /* #5384 = 0x2A0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE5F /* System.Void CoreImage.CITextImageGenerator::set_Text(System.String) */ },
		{ /* #5385 = 0x2A11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE60 /* System.String CoreImage.CITextImageGenerator::get_FontName() */ },
		{ /* #5386 = 0x2A13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE61 /* System.Void CoreImage.CITextImageGenerator::set_FontName(System.String) */ },
		{ /* #5387 = 0x2A15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE62 /* System.Single CoreImage.CITextImageGenerator::get_FontSize() */ },
		{ /* #5388 = 0x2A17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE63 /* System.Void CoreImage.CITextImageGenerator::set_FontSize(System.Single) */ },
		{ /* #5389 = 0x2A19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE64 /* System.Single CoreImage.CITextImageGenerator::get_ScaleFactor() */ },
		{ /* #5390 = 0x2A1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE65 /* System.Void CoreImage.CITextImageGenerator::set_ScaleFactor(System.Single) */ },
		{ /* #5391 = 0x2A1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE66 /* System.Single CoreImage.CITextImageGenerator::get_Padding() */ },
		{ /* #5392 = 0x2A1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE67 /* System.Void CoreImage.CITextImageGenerator::set_Padding(System.Single) */ },
		{ /* #5393 = 0x2A21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE68 /* CoreImage.CIImage CoreImage.CITextImageGenerator::get_OutputImage() */ },
		{ /* #5394 = 0x2A23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE5A /* System.Void CoreImage.CITextImageGenerator::.ctor() */ },
		{ /* #5395 = 0x2A25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE5D /* System.Void CoreImage.CITextImageGenerator::.ctor(Foundation.NSCoder) */ },
		{ /* #5396 = 0x2A27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018AE /* CoreImage.ICIThermalProtocol */ },
		{ /* #5397 = 0x2A29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018AF /* CoreImage.CIThermalProtocolWrapper */ },
		{ /* #5398 = 0x2A2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018AD /* CoreImage.CIThermal */ },
		{ /* #5399 = 0x2A2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE81 /* CoreImage.CIImage CoreImage.CIThermal::get_InputImage() */ },
		{ /* #5400 = 0x2A2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE82 /* System.Void CoreImage.CIThermal::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5401 = 0x2A31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE83 /* CoreImage.CIImage CoreImage.CIThermal::get_OutputImage() */ },
		{ /* #5402 = 0x2A33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE7D /* System.Void CoreImage.CIThermal::.ctor() */ },
		{ /* #5403 = 0x2A35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE80 /* System.Void CoreImage.CIThermal::.ctor(Foundation.NSCoder) */ },
		{ /* #5404 = 0x2A37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018B2 /* CoreImage.ICIToneCurveProtocol */ },
		{ /* #5405 = 0x2A39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018B3 /* CoreImage.CIToneCurveProtocolWrapper */ },
		{ /* #5406 = 0x2A3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018B1 /* CoreImage.CIToneCurve */ },
		{ /* #5407 = 0x2A3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE98 /* CoreImage.CIImage CoreImage.CIToneCurve::get_InputImage() */ },
		{ /* #5408 = 0x2A3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE99 /* System.Void CoreImage.CIToneCurve::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5409 = 0x2A41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE9A /* CoreGraphics.CGPoint CoreImage.CIToneCurve::get_InputPoint0() */ },
		{ /* #5410 = 0x2A43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE9B /* System.Void CoreImage.CIToneCurve::set_InputPoint0(CoreGraphics.CGPoint) */ },
		{ /* #5411 = 0x2A45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE9C /* CoreGraphics.CGPoint CoreImage.CIToneCurve::get_InputPoint1() */ },
		{ /* #5412 = 0x2A47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE9D /* System.Void CoreImage.CIToneCurve::set_InputPoint1(CoreGraphics.CGPoint) */ },
		{ /* #5413 = 0x2A49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE9E /* CoreGraphics.CGPoint CoreImage.CIToneCurve::get_InputPoint2() */ },
		{ /* #5414 = 0x2A4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE9F /* System.Void CoreImage.CIToneCurve::set_InputPoint2(CoreGraphics.CGPoint) */ },
		{ /* #5415 = 0x2A4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEA0 /* CoreGraphics.CGPoint CoreImage.CIToneCurve::get_InputPoint3() */ },
		{ /* #5416 = 0x2A4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEA1 /* System.Void CoreImage.CIToneCurve::set_InputPoint3(CoreGraphics.CGPoint) */ },
		{ /* #5417 = 0x2A51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEA2 /* CoreGraphics.CGPoint CoreImage.CIToneCurve::get_InputPoint4() */ },
		{ /* #5418 = 0x2A53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEA3 /* System.Void CoreImage.CIToneCurve::set_InputPoint4(CoreGraphics.CGPoint) */ },
		{ /* #5419 = 0x2A55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEA4 /* CoreImage.CIImage CoreImage.CIToneCurve::get_OutputImage() */ },
		{ /* #5420 = 0x2A57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE94 /* System.Void CoreImage.CIToneCurve::.ctor() */ },
		{ /* #5421 = 0x2A59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EE97 /* System.Void CoreImage.CIToneCurve::.ctor(Foundation.NSCoder) */ },
		{ /* #5422 = 0x2A5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018B5 /* CoreImage.ICITorusLensDistortionProtocol */ },
		{ /* #5423 = 0x2A5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018B6 /* CoreImage.CITorusLensDistortionProtocolWrapper */ },
		{ /* #5424 = 0x2A5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018B4 /* CoreImage.CITorusLensDistortion */ },
		{ /* #5425 = 0x2A61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEC3 /* CoreImage.CIImage CoreImage.CITorusLensDistortion::get_InputImage() */ },
		{ /* #5426 = 0x2A63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEC4 /* System.Void CoreImage.CITorusLensDistortion::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5427 = 0x2A65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEC5 /* CoreGraphics.CGPoint CoreImage.CITorusLensDistortion::get_InputCenter() */ },
		{ /* #5428 = 0x2A67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEC6 /* System.Void CoreImage.CITorusLensDistortion::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5429 = 0x2A69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEC7 /* System.Single CoreImage.CITorusLensDistortion::get_Radius() */ },
		{ /* #5430 = 0x2A6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEC8 /* System.Void CoreImage.CITorusLensDistortion::set_Radius(System.Single) */ },
		{ /* #5431 = 0x2A6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEC9 /* System.Single CoreImage.CITorusLensDistortion::get_Width() */ },
		{ /* #5432 = 0x2A6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EECA /* System.Void CoreImage.CITorusLensDistortion::set_Width(System.Single) */ },
		{ /* #5433 = 0x2A71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EECB /* System.Single CoreImage.CITorusLensDistortion::get_Refraction() */ },
		{ /* #5434 = 0x2A73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EECC /* System.Void CoreImage.CITorusLensDistortion::set_Refraction(System.Single) */ },
		{ /* #5435 = 0x2A75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EECD /* CoreImage.CIImage CoreImage.CITorusLensDistortion::get_OutputImage() */ },
		{ /* #5436 = 0x2A77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEBF /* System.Void CoreImage.CITorusLensDistortion::.ctor() */ },
		{ /* #5437 = 0x2A79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEC2 /* System.Void CoreImage.CITorusLensDistortion::.ctor(Foundation.NSCoder) */ },
		{ /* #5438 = 0x2A7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018BB /* CoreImage.ICITriangleKaleidoscopeProtocol */ },
		{ /* #5439 = 0x2A7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018BC /* CoreImage.CITriangleKaleidoscopeProtocolWrapper */ },
		{ /* #5440 = 0x2A7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018BA /* CoreImage.CITriangleKaleidoscope */ },
		{ /* #5441 = 0x2A81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF01 /* CoreImage.CIImage CoreImage.CITriangleKaleidoscope::get_InputImage() */ },
		{ /* #5442 = 0x2A83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF02 /* System.Void CoreImage.CITriangleKaleidoscope::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5443 = 0x2A85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF03 /* CoreGraphics.CGPoint CoreImage.CITriangleKaleidoscope::get_InputPoint() */ },
		{ /* #5444 = 0x2A87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF04 /* System.Void CoreImage.CITriangleKaleidoscope::set_InputPoint(CoreGraphics.CGPoint) */ },
		{ /* #5445 = 0x2A89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF05 /* System.Single CoreImage.CITriangleKaleidoscope::get_Size() */ },
		{ /* #5446 = 0x2A8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF06 /* System.Void CoreImage.CITriangleKaleidoscope::set_Size(System.Single) */ },
		{ /* #5447 = 0x2A8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF07 /* System.Single CoreImage.CITriangleKaleidoscope::get_Rotation() */ },
		{ /* #5448 = 0x2A8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF08 /* System.Void CoreImage.CITriangleKaleidoscope::set_Rotation(System.Single) */ },
		{ /* #5449 = 0x2A91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF09 /* System.Single CoreImage.CITriangleKaleidoscope::get_Decay() */ },
		{ /* #5450 = 0x2A93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF0A /* System.Void CoreImage.CITriangleKaleidoscope::set_Decay(System.Single) */ },
		{ /* #5451 = 0x2A95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF0B /* CoreImage.CIImage CoreImage.CITriangleKaleidoscope::get_OutputImage() */ },
		{ /* #5452 = 0x2A97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EEFD /* System.Void CoreImage.CITriangleKaleidoscope::.ctor() */ },
		{ /* #5453 = 0x2A99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF00 /* System.Void CoreImage.CITriangleKaleidoscope::.ctor(Foundation.NSCoder) */ },
		{ /* #5454 = 0x2A9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018BE /* CoreImage.ICITriangleTileProtocol */ },
		{ /* #5455 = 0x2A9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018BF /* CoreImage.CITriangleTileProtocolWrapper */ },
		{ /* #5456 = 0x2A9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018BD /* CoreImage.CITriangleTile */ },
		{ /* #5457 = 0x2AA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF26 /* CoreImage.CIImage CoreImage.CITriangleTile::get_InputImage() */ },
		{ /* #5458 = 0x2AA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF27 /* System.Void CoreImage.CITriangleTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5459 = 0x2AA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF28 /* CoreGraphics.CGPoint CoreImage.CITriangleTile::get_InputCenter() */ },
		{ /* #5460 = 0x2AA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF29 /* System.Void CoreImage.CITriangleTile::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5461 = 0x2AA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF2A /* System.Single CoreImage.CITriangleTile::get_Angle() */ },
		{ /* #5462 = 0x2AAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF2B /* System.Void CoreImage.CITriangleTile::set_Angle(System.Single) */ },
		{ /* #5463 = 0x2AAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF2C /* System.Single CoreImage.CITriangleTile::get_Width() */ },
		{ /* #5464 = 0x2AAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF2D /* System.Void CoreImage.CITriangleTile::set_Width(System.Single) */ },
		{ /* #5465 = 0x2AB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF2E /* CoreImage.CIImage CoreImage.CITriangleTile::get_OutputImage() */ },
		{ /* #5466 = 0x2AB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF22 /* System.Void CoreImage.CITriangleTile::.ctor() */ },
		{ /* #5467 = 0x2AB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF25 /* System.Void CoreImage.CITriangleTile::.ctor(Foundation.NSCoder) */ },
		{ /* #5468 = 0x2AB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018C1 /* CoreImage.ICITwelvefoldReflectedTileProtocol */ },
		{ /* #5469 = 0x2AB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018C2 /* CoreImage.CITwelvefoldReflectedTileProtocolWrapper */ },
		{ /* #5470 = 0x2ABB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018C0 /* CoreImage.CITwelvefoldReflectedTile */ },
		{ /* #5471 = 0x2ABD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF45 /* CoreImage.CIImage CoreImage.CITwelvefoldReflectedTile::get_InputImage() */ },
		{ /* #5472 = 0x2ABF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF46 /* System.Void CoreImage.CITwelvefoldReflectedTile::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5473 = 0x2AC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF47 /* CoreGraphics.CGPoint CoreImage.CITwelvefoldReflectedTile::get_InputCenter() */ },
		{ /* #5474 = 0x2AC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF48 /* System.Void CoreImage.CITwelvefoldReflectedTile::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5475 = 0x2AC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF49 /* System.Single CoreImage.CITwelvefoldReflectedTile::get_Angle() */ },
		{ /* #5476 = 0x2AC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF4A /* System.Void CoreImage.CITwelvefoldReflectedTile::set_Angle(System.Single) */ },
		{ /* #5477 = 0x2AC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF4B /* System.Single CoreImage.CITwelvefoldReflectedTile::get_Width() */ },
		{ /* #5478 = 0x2ACB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF4C /* System.Void CoreImage.CITwelvefoldReflectedTile::set_Width(System.Single) */ },
		{ /* #5479 = 0x2ACD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF4D /* CoreImage.CIImage CoreImage.CITwelvefoldReflectedTile::get_OutputImage() */ },
		{ /* #5480 = 0x2ACF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF41 /* System.Void CoreImage.CITwelvefoldReflectedTile::.ctor() */ },
		{ /* #5481 = 0x2AD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF44 /* System.Void CoreImage.CITwelvefoldReflectedTile::.ctor(Foundation.NSCoder) */ },
		{ /* #5482 = 0x2AD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018C4 /* CoreImage.ICITwirlDistortionProtocol */ },
		{ /* #5483 = 0x2AD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018C5 /* CoreImage.CITwirlDistortionProtocolWrapper */ },
		{ /* #5484 = 0x2AD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018C3 /* CoreImage.CITwirlDistortion */ },
		{ /* #5485 = 0x2AD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF64 /* CoreImage.CIImage CoreImage.CITwirlDistortion::get_InputImage() */ },
		{ /* #5486 = 0x2ADB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF65 /* System.Void CoreImage.CITwirlDistortion::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5487 = 0x2ADD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF66 /* CoreGraphics.CGPoint CoreImage.CITwirlDistortion::get_InputCenter() */ },
		{ /* #5488 = 0x2ADF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF67 /* System.Void CoreImage.CITwirlDistortion::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5489 = 0x2AE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF68 /* System.Single CoreImage.CITwirlDistortion::get_Radius() */ },
		{ /* #5490 = 0x2AE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF69 /* System.Void CoreImage.CITwirlDistortion::set_Radius(System.Single) */ },
		{ /* #5491 = 0x2AE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF6A /* System.Single CoreImage.CITwirlDistortion::get_Angle() */ },
		{ /* #5492 = 0x2AE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF6B /* System.Void CoreImage.CITwirlDistortion::set_Angle(System.Single) */ },
		{ /* #5493 = 0x2AE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF6C /* CoreImage.CIImage CoreImage.CITwirlDistortion::get_OutputImage() */ },
		{ /* #5494 = 0x2AEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF60 /* System.Void CoreImage.CITwirlDistortion::.ctor() */ },
		{ /* #5495 = 0x2AED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF63 /* System.Void CoreImage.CITwirlDistortion::.ctor(Foundation.NSCoder) */ },
		{ /* #5496 = 0x2AEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018C8 /* CoreImage.ICIUnsharpMaskProtocol */ },
		{ /* #5497 = 0x2AF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018C9 /* CoreImage.CIUnsharpMaskProtocolWrapper */ },
		{ /* #5498 = 0x2AF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018C7 /* CoreImage.CIUnsharpMask */ },
		{ /* #5499 = 0x2AF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF87 /* CoreImage.CIImage CoreImage.CIUnsharpMask::get_InputImage() */ },
		{ /* #5500 = 0x2AF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF88 /* System.Void CoreImage.CIUnsharpMask::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5501 = 0x2AF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF89 /* System.Single CoreImage.CIUnsharpMask::get_Radius() */ },
		{ /* #5502 = 0x2AFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF8A /* System.Void CoreImage.CIUnsharpMask::set_Radius(System.Single) */ },
		{ /* #5503 = 0x2AFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF8B /* System.Single CoreImage.CIUnsharpMask::get_Intensity() */ },
		{ /* #5504 = 0x2AFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF8C /* System.Void CoreImage.CIUnsharpMask::set_Intensity(System.Single) */ },
		{ /* #5505 = 0x2B01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF8D /* CoreImage.CIImage CoreImage.CIUnsharpMask::get_OutputImage() */ },
		{ /* #5506 = 0x2B03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF83 /* System.Void CoreImage.CIUnsharpMask::.ctor() */ },
		{ /* #5507 = 0x2B05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF86 /* System.Void CoreImage.CIUnsharpMask::.ctor(Foundation.NSCoder) */ },
		{ /* #5508 = 0x2B07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018CB /* CoreImage.ICIVibranceProtocol */ },
		{ /* #5509 = 0x2B09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018CC /* CoreImage.CIVibranceProtocolWrapper */ },
		{ /* #5510 = 0x2B0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018CA /* CoreImage.CIVibrance */ },
		{ /* #5511 = 0x2B0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFA0 /* CoreImage.CIImage CoreImage.CIVibrance::get_InputImage() */ },
		{ /* #5512 = 0x2B0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFA1 /* System.Void CoreImage.CIVibrance::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5513 = 0x2B11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFA2 /* System.Single CoreImage.CIVibrance::get_Amount() */ },
		{ /* #5514 = 0x2B13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFA3 /* System.Void CoreImage.CIVibrance::set_Amount(System.Single) */ },
		{ /* #5515 = 0x2B15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFA4 /* CoreImage.CIImage CoreImage.CIVibrance::get_OutputImage() */ },
		{ /* #5516 = 0x2B17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF9C /* System.Void CoreImage.CIVibrance::.ctor() */ },
		{ /* #5517 = 0x2B19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EF9F /* System.Void CoreImage.CIVibrance::.ctor(Foundation.NSCoder) */ },
		{ /* #5518 = 0x2B1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018D1 /* CoreImage.ICIVignetteProtocol */ },
		{ /* #5519 = 0x2B1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018D2 /* CoreImage.CIVignetteProtocolWrapper */ },
		{ /* #5520 = 0x2B1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018CD /* CoreImage.CIVignette */ },
		{ /* #5521 = 0x2B21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFB3 /* CoreImage.CIImage CoreImage.CIVignette::get_InputImage() */ },
		{ /* #5522 = 0x2B23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFB4 /* System.Void CoreImage.CIVignette::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5523 = 0x2B25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFB5 /* System.Single CoreImage.CIVignette::get_Intensity() */ },
		{ /* #5524 = 0x2B27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFB6 /* System.Void CoreImage.CIVignette::set_Intensity(System.Single) */ },
		{ /* #5525 = 0x2B29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFB7 /* System.Single CoreImage.CIVignette::get_Radius() */ },
		{ /* #5526 = 0x2B2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFB8 /* System.Void CoreImage.CIVignette::set_Radius(System.Single) */ },
		{ /* #5527 = 0x2B2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFB9 /* CoreImage.CIImage CoreImage.CIVignette::get_OutputImage() */ },
		{ /* #5528 = 0x2B2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFAF /* System.Void CoreImage.CIVignette::.ctor() */ },
		{ /* #5529 = 0x2B31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFB2 /* System.Void CoreImage.CIVignette::.ctor(Foundation.NSCoder) */ },
		{ /* #5530 = 0x2B33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018CF /* CoreImage.ICIVignetteEffectProtocol */ },
		{ /* #5531 = 0x2B35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018D0 /* CoreImage.CIVignetteEffectProtocolWrapper */ },
		{ /* #5532 = 0x2B37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018CE /* CoreImage.CIVignetteEffect */ },
		{ /* #5533 = 0x2B39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFBE /* CoreImage.CIImage CoreImage.CIVignetteEffect::get_InputImage() */ },
		{ /* #5534 = 0x2B3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFBF /* System.Void CoreImage.CIVignetteEffect::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5535 = 0x2B3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFC0 /* CoreGraphics.CGPoint CoreImage.CIVignetteEffect::get_InputCenter() */ },
		{ /* #5536 = 0x2B3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFC1 /* System.Void CoreImage.CIVignetteEffect::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5537 = 0x2B41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFC2 /* System.Single CoreImage.CIVignetteEffect::get_Radius() */ },
		{ /* #5538 = 0x2B43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFC3 /* System.Void CoreImage.CIVignetteEffect::set_Radius(System.Single) */ },
		{ /* #5539 = 0x2B45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFC4 /* System.Single CoreImage.CIVignetteEffect::get_Intensity() */ },
		{ /* #5540 = 0x2B47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFC5 /* System.Void CoreImage.CIVignetteEffect::set_Intensity(System.Single) */ },
		{ /* #5541 = 0x2B49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFC6 /* System.Single CoreImage.CIVignetteEffect::get_Falloff() */ },
		{ /* #5542 = 0x2B4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFC7 /* System.Void CoreImage.CIVignetteEffect::set_Falloff(System.Single) */ },
		{ /* #5543 = 0x2B4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFC8 /* CoreImage.CIImage CoreImage.CIVignetteEffect::get_OutputImage() */ },
		{ /* #5544 = 0x2B4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFBA /* System.Void CoreImage.CIVignetteEffect::.ctor() */ },
		{ /* #5545 = 0x2B51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFBD /* System.Void CoreImage.CIVignetteEffect::.ctor(Foundation.NSCoder) */ },
		{ /* #5546 = 0x2B53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018D3 /* CoreImage.CIVividLightBlendMode */ },
		{ /* #5547 = 0x2B55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFF5 /* CoreImage.CIImage CoreImage.CIVividLightBlendMode::get_OutputImage() */ },
		{ /* #5548 = 0x2B57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFED /* System.Void CoreImage.CIVividLightBlendMode::.ctor() */ },
		{ /* #5549 = 0x2B59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFF0 /* System.Void CoreImage.CIVividLightBlendMode::.ctor(Foundation.NSCoder) */ },
		{ /* #5550 = 0x2B5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018D5 /* CoreImage.ICIVortexDistortionProtocol */ },
		{ /* #5551 = 0x2B5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018D6 /* CoreImage.CIVortexDistortionProtocolWrapper */ },
		{ /* #5552 = 0x2B5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018D4 /* CoreImage.CIVortexDistortion */ },
		{ /* #5553 = 0x2B61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFFA /* CoreImage.CIImage CoreImage.CIVortexDistortion::get_InputImage() */ },
		{ /* #5554 = 0x2B63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFFB /* System.Void CoreImage.CIVortexDistortion::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5555 = 0x2B65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFFC /* CoreGraphics.CGPoint CoreImage.CIVortexDistortion::get_InputCenter() */ },
		{ /* #5556 = 0x2B67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFFD /* System.Void CoreImage.CIVortexDistortion::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5557 = 0x2B69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFFE /* System.Single CoreImage.CIVortexDistortion::get_Radius() */ },
		{ /* #5558 = 0x2B6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFFF /* System.Void CoreImage.CIVortexDistortion::set_Radius(System.Single) */ },
		{ /* #5559 = 0x2B6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F000 /* System.Single CoreImage.CIVortexDistortion::get_Angle() */ },
		{ /* #5560 = 0x2B6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F001 /* System.Void CoreImage.CIVortexDistortion::set_Angle(System.Single) */ },
		{ /* #5561 = 0x2B71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F002 /* CoreImage.CIImage CoreImage.CIVortexDistortion::get_OutputImage() */ },
		{ /* #5562 = 0x2B73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFF6 /* System.Void CoreImage.CIVortexDistortion::.ctor() */ },
		{ /* #5563 = 0x2B75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600EFF9 /* System.Void CoreImage.CIVortexDistortion::.ctor(Foundation.NSCoder) */ },
		{ /* #5564 = 0x2B77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018D7 /* CoreImage.CIWarpKernel */ },
		{ /* #5565 = 0x2B79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018D9 /* CoreImage.ICIWhitePointAdjustProtocol */ },
		{ /* #5566 = 0x2B7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018DA /* CoreImage.CIWhitePointAdjustProtocolWrapper */ },
		{ /* #5567 = 0x2B7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018D8 /* CoreImage.CIWhitePointAdjust */ },
		{ /* #5568 = 0x2B7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F01F /* CoreImage.CIImage CoreImage.CIWhitePointAdjust::get_InputImage() */ },
		{ /* #5569 = 0x2B81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F020 /* System.Void CoreImage.CIWhitePointAdjust::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5570 = 0x2B83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F021 /* CoreImage.CIColor CoreImage.CIWhitePointAdjust::get_Color() */ },
		{ /* #5571 = 0x2B85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F022 /* System.Void CoreImage.CIWhitePointAdjust::set_Color(CoreImage.CIColor) */ },
		{ /* #5572 = 0x2B87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F023 /* CoreImage.CIImage CoreImage.CIWhitePointAdjust::get_OutputImage() */ },
		{ /* #5573 = 0x2B89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F01B /* System.Void CoreImage.CIWhitePointAdjust::.ctor() */ },
		{ /* #5574 = 0x2B8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F01E /* System.Void CoreImage.CIWhitePointAdjust::.ctor(Foundation.NSCoder) */ },
		{ /* #5575 = 0x2B8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018DC /* CoreImage.ICIXRayProtocol */ },
		{ /* #5576 = 0x2B8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018DD /* CoreImage.CIXRayProtocolWrapper */ },
		{ /* #5577 = 0x2B91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018DB /* CoreImage.CIXRay */ },
		{ /* #5578 = 0x2B93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F032 /* CoreImage.CIImage CoreImage.CIXRay::get_InputImage() */ },
		{ /* #5579 = 0x2B95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F033 /* System.Void CoreImage.CIXRay::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5580 = 0x2B97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F034 /* CoreImage.CIImage CoreImage.CIXRay::get_OutputImage() */ },
		{ /* #5581 = 0x2B99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F02E /* System.Void CoreImage.CIXRay::.ctor() */ },
		{ /* #5582 = 0x2B9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F031 /* System.Void CoreImage.CIXRay::.ctor(Foundation.NSCoder) */ },
		{ /* #5583 = 0x2B9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018DF /* CoreImage.ICIZoomBlurProtocol */ },
		{ /* #5584 = 0x2B9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018E0 /* CoreImage.CIZoomBlurProtocolWrapper */ },
		{ /* #5585 = 0x2BA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20018DE /* CoreImage.CIZoomBlur */ },
		{ /* #5586 = 0x2BA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F03F /* CoreImage.CIImage CoreImage.CIZoomBlur::get_InputImage() */ },
		{ /* #5587 = 0x2BA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F040 /* System.Void CoreImage.CIZoomBlur::set_InputImage(CoreImage.CIImage) */ },
		{ /* #5588 = 0x2BA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F041 /* CoreGraphics.CGPoint CoreImage.CIZoomBlur::get_InputCenter() */ },
		{ /* #5589 = 0x2BA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F042 /* System.Void CoreImage.CIZoomBlur::set_InputCenter(CoreGraphics.CGPoint) */ },
		{ /* #5590 = 0x2BAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F043 /* System.Single CoreImage.CIZoomBlur::get_Amount() */ },
		{ /* #5591 = 0x2BAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F044 /* System.Void CoreImage.CIZoomBlur::set_Amount(System.Single) */ },
		{ /* #5592 = 0x2BAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F045 /* CoreImage.CIImage CoreImage.CIZoomBlur::get_OutputImage() */ },
		{ /* #5593 = 0x2BB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F03B /* System.Void CoreImage.CIZoomBlur::.ctor() */ },
		{ /* #5594 = 0x2BB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x600F03E /* System.Void CoreImage.CIZoomBlur::.ctor(Foundation.NSCoder) */ },
		{ /* #5595 = 0x2BB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019A5 /* CoreData.NSEntityDescription */ },
		{ /* #5596 = 0x2BB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019ED /* CoreData.NSPersistentStoreRequest */ },
		{ /* #5597 = 0x2BB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019A7 /* CoreData.NSAsynchronousFetchRequest */ },
		{ /* #5598 = 0x2BBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019EF /* CoreData.NSPersistentStoreResult */ },
		{ /* #5599 = 0x2BBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019EA /* CoreData.NSPersistentStoreAsynchronousResult */ },
		{ /* #5600 = 0x2BBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019A8 /* CoreData.NSAsynchronousFetchResult */ },
		{ /* #5601 = 0x2BC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019E9 /* CoreData.NSPersistentStore */ },
		{ /* #5602 = 0x2BC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019A9 /* CoreData.NSAtomicStore */ },
		{ /* #5603 = 0x2BC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019AA /* CoreData.NSAtomicStoreCacheNode */ },
		{ /* #5604 = 0x2BC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019F1 /* CoreData.NSPropertyDescription */ },
		{ /* #5605 = 0x2BC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019AB /* CoreData.NSAttributeDescription */ },
		{ /* #5606 = 0x2BCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019AD /* CoreData.NSBatchDeleteRequest */ },
		{ /* #5607 = 0x2BCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019AF /* CoreData.NSBatchDeleteResult */ },
		{ /* #5608 = 0x2BCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019B0 /* CoreData.NSBatchInsertRequest */ },
		{ /* #5609 = 0x2BD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019B2 /* CoreData.NSBatchInsertResult */ },
		{ /* #5610 = 0x2BD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019B3 /* CoreData.NSBatchUpdateRequest */ },
		{ /* #5611 = 0x2BD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019B5 /* CoreData.NSBatchUpdateResult */ },
		{ /* #5612 = 0x2BD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019B6 /* CoreData.NSConstraintConflict */ },
		{ /* #5613 = 0x2BD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019B9 /* CoreData.NSDerivedAttributeDescription */ },
		{ /* #5614 = 0x2BDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019BA /* CoreData.NSEntityMapping */ },
		{ /* #5615 = 0x2BDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019BC /* CoreData.NSEntityMigrationPolicy */ },
		{ /* #5616 = 0x2BDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019BD /* CoreData.NSExpressionDescription */ },
		{ /* #5617 = 0x2BE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019BE /* CoreData.NSFetchedPropertyDescription */ },
		{ /* #5618 = 0x2BE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019C0 /* CoreData.NSFetchIndexDescription */ },
		{ /* #5619 = 0x2BE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019C1 /* CoreData.NSFetchIndexElementDescription */ },
		{ /* #5620 = 0x2BE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019C3 /* CoreData.NSFetchRequest */ },
		{ /* #5621 = 0x2BE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019C4 /* CoreData.NSFetchRequestExpression */ },
		{ /* #5622 = 0x2BEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019C8 /* CoreData.NSIncrementalStore */ },
		{ /* #5623 = 0x2BED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019C9 /* CoreData.NSIncrementalStoreNode */ },
		{ /* #5624 = 0x2BEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019CA /* CoreData.NSManagedObject */ },
		{ /* #5625 = 0x2BF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019CD /* CoreData.NSManagedObjectID */ },
		{ /* #5626 = 0x2BF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019CE /* CoreData.NSManagedObjectModel */ },
		{ /* #5627 = 0x2BF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019CF /* CoreData.NSMappingModel */ },
		{ /* #5628 = 0x2BF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019D0 /* CoreData.NSMergeConflict */ },
		{ /* #5629 = 0x2BF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019D1 /* CoreData.NSMergePolicy */ },
		{ /* #5630 = 0x2BFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019D3 /* CoreData.NSMigrationManager */ },
		{ /* #5631 = 0x2BFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019DB /* CoreData.NSPersistentCloudKitContainerEventRequest */ },
		{ /* #5632 = 0x2BFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019DC /* CoreData.NSPersistentCloudKitContainerEventResult */ },
		{ /* #5633 = 0x2C01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019DF /* CoreData.NSPersistentCloudKitContainerOptions */ },
		{ /* #5634 = 0x2C03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019E2 /* CoreData.NSPersistentHistoryChange */ },
		{ /* #5635 = 0x2C05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019E3 /* CoreData.NSPersistentHistoryChangeRequest */ },
		{ /* #5636 = 0x2C07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019E5 /* CoreData.NSPersistentHistoryResult */ },
		{ /* #5637 = 0x2C09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019E7 /* CoreData.NSPersistentHistoryToken */ },
		{ /* #5638 = 0x2C0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019E8 /* CoreData.NSPersistentHistoryTransaction */ },
		{ /* #5639 = 0x2C0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019EC /* CoreData.NSPersistentStoreDescription */ },
		{ /* #5640 = 0x2C0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019F2 /* CoreData.NSPropertyMapping */ },
		{ /* #5641 = 0x2C11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019F3 /* CoreData.NSQueryGenerationToken */ },
		{ /* #5642 = 0x2C13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019F4 /* CoreData.NSRelationshipDescription */ },
		{ /* #5643 = 0x2C15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019F5 /* CoreData.NSSaveChangesRequest */ },
		{ /* #5644 = 0x2C17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A08 /* CoreBluetooth.CBUUID */ },
		{ /* #5645 = 0x2C19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A13 /* CoreBluetooth.CBATTRequest */ },
		{ /* #5646 = 0x2C1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A14 /* CoreBluetooth.CBAttribute */ },
		{ /* #5647 = 0x2C1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A31 /* CoreBluetooth.CBPeer */ },
		{ /* #5648 = 0x2C1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A16 /* CoreBluetooth.CBCentral */ },
		{ /* #5649 = 0x2C21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A1C /* CoreBluetooth.ICBCentralManagerDelegate */ },
		{ /* #5650 = 0x2C23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A1E /* CoreBluetooth.CBCentralManagerDelegateWrapper */ },
		{ /* #5651 = 0x2C25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A1F /* CoreBluetooth.CBCentralManagerDelegate */ },
		{ /* #5652 = 0x2C27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6010062 /* System.Void CoreBluetooth.CBCentralManagerDelegate::.ctor() */ },
		{ /* #5653 = 0x2C29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A21 /* CoreBluetooth.CBCharacteristic */ },
		{ /* #5654 = 0x2C2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A27 /* CoreBluetooth.CBDescriptor */ },
		{ /* #5655 = 0x2C2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A2A /* CoreBluetooth.CBL2CapChannel */ },
		{ /* #5656 = 0x2C2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A2B /* CoreBluetooth.CBManager */ },
		{ /* #5657 = 0x2C31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A2E /* CoreBluetooth.CBMutableCharacteristic */ },
		{ /* #5658 = 0x2C33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A2F /* CoreBluetooth.CBMutableDescriptor */ },
		{ /* #5659 = 0x2C35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A4A /* CoreBluetooth.CBService */ },
		{ /* #5660 = 0x2C37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A30 /* CoreBluetooth.CBMutableService */ },
		{ /* #5661 = 0x2C39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A38 /* CoreBluetooth.ICBPeripheralDelegate */ },
		{ /* #5662 = 0x2C3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A3A /* CoreBluetooth.CBPeripheralDelegateWrapper */ },
		{ /* #5663 = 0x2C3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A3B /* CoreBluetooth.CBPeripheralDelegate */ },
		{ /* #5664 = 0x2C3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60100E9 /* System.Void CoreBluetooth.CBPeripheralDelegate::.ctor() */ },
		{ /* #5665 = 0x2C41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A44 /* CoreBluetooth.ICBPeripheralManagerDelegate */ },
		{ /* #5666 = 0x2C43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A46 /* CoreBluetooth.CBPeripheralManagerDelegateWrapper */ },
		{ /* #5667 = 0x2C45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A47 /* CoreBluetooth.CBPeripheralManagerDelegate */ },
		{ /* #5668 = 0x2C47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601015A /* System.Void CoreBluetooth.CBPeripheralManagerDelegate::.ctor() */ },
		{ /* #5669 = 0x2C49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A4E /* CoreAnimation.CAAnimation */ },
		{ /* #5670 = 0x2C4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A7A /* CoreAnimation.CAPropertyAnimation */ },
		{ /* #5671 = 0x2C4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A4D /* CoreAnimation.CABasicAnimation */ },
		{ /* #5672 = 0x2C4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A4F /* CoreAnimation.CAGradientLayer */ },
		{ /* #5673 = 0x2C51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A50 /* CoreAnimation.CAKeyFrameAnimation */ },
		{ /* #5674 = 0x2C53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A53 /* CoreAnimation.CALayerDelegate */ },
		{ /* #5675 = 0x2C55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60102ED /* System.Void CoreAnimation.CALayerDelegate::.ctor() */ },
		{ /* #5676 = 0x2C57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A54 /* CoreAnimation.CAMediaTimingFunction */ },
		{ /* #5677 = 0x2C59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A55 /* CoreAnimation.CATextLayer */ },
		{ /* #5678 = 0x2C5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A59 /* CoreAnimation.CAAction */ },
		{ /* #5679 = 0x2C5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A5B /* CoreAnimation.ICAAnimationDelegate */ },
		{ /* #5680 = 0x2C5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A5D /* CoreAnimation.CAAnimationDelegateWrapper */ },
		{ /* #5681 = 0x2C61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A5E /* CoreAnimation.CAAnimationDelegate */ },
		{ /* #5682 = 0x2C63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6010350 /* System.Void CoreAnimation.CAAnimationDelegate::.ctor() */ },
		{ /* #5683 = 0x2C65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A5F /* CoreAnimation.CAAnimationGroup */ },
		{ /* #5684 = 0x2C67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A61 /* CoreAnimation.CAConstraint */ },
		{ /* #5685 = 0x2C69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A63 /* CoreAnimation.CAConstraintLayoutManager */ },
		{ /* #5686 = 0x2C6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A6A /* CoreAnimation.CAEdrMetadata */ },
		{ /* #5687 = 0x2C6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A6B /* CoreAnimation.CAEmitterCell */ },
		{ /* #5688 = 0x2C6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A6C /* CoreAnimation.CAEmitterLayer */ },
		{ /* #5689 = 0x2C71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A75 /* CoreAnimation.CAMediaTiming */ },
		{ /* #5690 = 0x2C73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6010452 /* System.Void CoreAnimation.CAMediaTiming::.ctor() */ },
		{ /* #5691 = 0x2C75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A76 /* CoreAnimation.ICAMetalDrawable */ },
		{ /* #5692 = 0x2C77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A77 /* CoreAnimation.CAMetalDrawableWrapper */ },
		{ /* #5693 = 0x2C79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A78 /* CoreAnimation.CAMetalLayer */ },
		{ /* #5694 = 0x2C7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A7B /* CoreAnimation.CARenderer */ },
		{ /* #5695 = 0x2C7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A7E /* CoreAnimation.CAReplicatorLayer */ },
		{ /* #5696 = 0x2C7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A81 /* CoreAnimation.CAScrollLayer */ },
		{ /* #5697 = 0x2C81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A82 /* CoreAnimation.CAShapeLayer */ },
		{ /* #5698 = 0x2C83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A83 /* CoreAnimation.CASpringAnimation */ },
		{ /* #5699 = 0x2C85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A88 /* CoreAnimation.CATiledLayer */ },
		{ /* #5700 = 0x2C87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A89 /* CoreAnimation.CATransaction */ },
		{ /* #5701 = 0x2C89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A8A /* CoreAnimation.CATransformLayer */ },
		{ /* #5702 = 0x2C8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A8B /* CoreAnimation.CATransition */ },
		{ /* #5703 = 0x2C8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A8C /* CoreAnimation.CAValueFunction */ },
		{ /* #5704 = 0x2C8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AB9 /* Contacts.CNFetchRequest */ },
		{ /* #5705 = 0x2C91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A8E /* Contacts.CNContactFetchRequest */ },
		{ /* #5706 = 0x2C93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A92 /* Contacts.CNInstantMessageAddress */ },
		{ /* #5707 = 0x2C95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A95 /* Contacts.CNSocialProfile */ },
		{ /* #5708 = 0x2C97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A9E /* Contacts.CNChangeHistoryEvent */ },
		{ /* #5709 = 0x2C99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A97 /* Contacts.CNChangeHistoryAddContactEvent */ },
		{ /* #5710 = 0x2C9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A98 /* Contacts.CNChangeHistoryAddGroupEvent */ },
		{ /* #5711 = 0x2C9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A99 /* Contacts.CNChangeHistoryAddMemberToGroupEvent */ },
		{ /* #5712 = 0x2C9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A9A /* Contacts.CNChangeHistoryAddSubgroupToGroupEvent */ },
		{ /* #5713 = 0x2CA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A9B /* Contacts.CNChangeHistoryDeleteContactEvent */ },
		{ /* #5714 = 0x2CA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A9C /* Contacts.CNChangeHistoryDeleteGroupEvent */ },
		{ /* #5715 = 0x2CA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A9D /* Contacts.CNChangeHistoryDropEverythingEvent */ },
		{ /* #5716 = 0x2CA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A9F /* Contacts.ICNChangeHistoryEventVisitor */ },
		{ /* #5717 = 0x2CA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AA1 /* Contacts.CNChangeHistoryEventVisitorWrapper */ },
		{ /* #5718 = 0x2CAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AA2 /* Contacts.CNChangeHistoryFetchRequest */ },
		{ /* #5719 = 0x2CAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AA3 /* Contacts.CNChangeHistoryRemoveMemberFromGroupEvent */ },
		{ /* #5720 = 0x2CAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AA4 /* Contacts.CNChangeHistoryRemoveSubgroupFromGroupEvent */ },
		{ /* #5721 = 0x2CB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AA5 /* Contacts.CNChangeHistoryUpdateContactEvent */ },
		{ /* #5722 = 0x2CB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AA6 /* Contacts.CNChangeHistoryUpdateGroupEvent */ },
		{ /* #5723 = 0x2CB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AA8 /* Contacts.CNContactFormatter */ },
		{ /* #5724 = 0x2CB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AAC /* Contacts.CNContactProperty */ },
		{ /* #5725 = 0x2CB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AAD /* Contacts.CNContactRelation */ },
		{ /* #5726 = 0x2CBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AAF /* Contacts.CNContactsUserDefaults */ },
		{ /* #5727 = 0x2CBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AB1 /* Contacts.CNContactVCardSerialization */ },
		{ /* #5728 = 0x2CBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AB2 /* Contacts.CNContainer */ },
		{ /* #5729 = 0x2CC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001ABA /* Contacts.CNFetchResult`1 */ },
		{ /* #5730 = 0x2CC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001ABB /* Contacts.CNGroup */ },
		{ /* #5731 = 0x2CC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001ABF /* Contacts.ICNKeyDescriptor */ },
		{ /* #5732 = 0x2CC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AC0 /* Contacts.CNKeyDescriptorWrapper */ },
		{ /* #5733 = 0x2CC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AC2 /* Contacts.CNLabeledValue`1 */ },
		{ /* #5734 = 0x2CCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A8D /* Contacts.CNContact */ },
		{ /* #5735 = 0x2CCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AC5 /* Contacts.CNMutableContact */ },
		{ /* #5736 = 0x2CCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AC6 /* Contacts.CNMutableGroup */ },
		{ /* #5737 = 0x2CD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AC9 /* Contacts.CNPostalAddress */ },
		{ /* #5738 = 0x2CD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AC7 /* Contacts.CNMutablePostalAddress */ },
		{ /* #5739 = 0x2CD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AC8 /* Contacts.CNPhoneNumber */ },
		{ /* #5740 = 0x2CD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001ACA /* Contacts.CNPostalAddressFormatter */ },
		{ /* #5741 = 0x2CD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001ACE /* Contacts.CNSaveRequest */ },
		{ /* #5742 = 0x2CDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001ADF /* CloudKit.CKRecord */ },
		{ /* #5743 = 0x2CDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AE0 /* CloudKit.CKRecordID */ },
		{ /* #5744 = 0x2CDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AE1 /* CloudKit.CKRecordZoneID */ },
		{ /* #5745 = 0x2CE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AE2 /* CloudKit.CKUserIdentityLookupInfo */ },
		{ /* #5746 = 0x2CE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B0A /* CloudKit.CKOperation */ },
		{ /* #5747 = 0x2CE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AE3 /* CloudKit.CKAcceptSharesOperation */ },
		{ /* #5748 = 0x2CE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AE5 /* CloudKit.CKAllowedSharingOptions */ },
		{ /* #5749 = 0x2CE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AE8 /* CloudKit.CKAsset */ },
		{ /* #5750 = 0x2CEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B06 /* CloudKit.CKNotification */ },
		{ /* #5751 = 0x2CED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AEB /* CloudKit.CKDatabaseNotification */ },
		{ /* #5752 = 0x2CEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AEC /* CloudKit.CKDatabaseOperation */ },
		{ /* #5753 = 0x2CF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B2A /* CloudKit.CKSubscription */ },
		{ /* #5754 = 0x2CF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AEE /* CloudKit.CKDatabaseSubscription */ },
		{ /* #5755 = 0x2CF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AEF /* CloudKit.CKDiscoverAllUserIdentitiesOperation */ },
		{ /* #5756 = 0x2CF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AF0 /* CloudKit.CKDiscoverUserIdentitiesOperation */ },
		{ /* #5757 = 0x2CF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AF4 /* CloudKit.CKFetchDatabaseChangesOperation */ },
		{ /* #5758 = 0x2CFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AF5 /* CloudKit.CKFetchNotificationChangesOperation */ },
		{ /* #5759 = 0x2CFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AF6 /* CloudKit.CKFetchRecordChangesOperation */ },
		{ /* #5760 = 0x2CFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AF7 /* CloudKit.CKFetchRecordsOperation */ },
		{ /* #5761 = 0x2D01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AF8 /* CloudKit.CKFetchRecordZoneChangesConfiguration */ },
		{ /* #5762 = 0x2D03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AF9 /* CloudKit.CKFetchRecordZoneChangesOperation */ },
		{ /* #5763 = 0x2D05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AFA /* CloudKit.CKFetchRecordZoneChangesOptions */ },
		{ /* #5764 = 0x2D07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AFB /* CloudKit.CKFetchRecordZonesOperation */ },
		{ /* #5765 = 0x2D09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AFC /* CloudKit.CKFetchShareMetadataOperation */ },
		{ /* #5766 = 0x2D0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AFD /* CloudKit.CKFetchShareParticipantsOperation */ },
		{ /* #5767 = 0x2D0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AFE /* CloudKit.CKFetchSubscriptionsOperation */ },
		{ /* #5768 = 0x2D0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AFF /* CloudKit.CKFetchWebAuthTokenOperation */ },
		{ /* #5769 = 0x2D11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B00 /* CloudKit.CKLocationSortDescriptor */ },
		{ /* #5770 = 0x2D13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B01 /* CloudKit.CKMarkNotificationsReadOperation */ },
		{ /* #5771 = 0x2D15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B02 /* CloudKit.CKModifyBadgeOperation */ },
		{ /* #5772 = 0x2D17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B03 /* CloudKit.CKModifyRecordsOperation */ },
		{ /* #5773 = 0x2D19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B04 /* CloudKit.CKModifyRecordZonesOperation */ },
		{ /* #5774 = 0x2D1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B05 /* CloudKit.CKModifySubscriptionsOperation */ },
		{ /* #5775 = 0x2D1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B07 /* CloudKit.CKNotificationID */ },
		{ /* #5776 = 0x2D1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B08 /* CloudKit.CKNotificationInfo */ },
		{ /* #5777 = 0x2D21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B0B /* CloudKit.CKOperationConfiguration */ },
		{ /* #5778 = 0x2D23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B0C /* CloudKit.CKOperationGroup */ },
		{ /* #5779 = 0x2D25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B0E /* CloudKit.CKQuery */ },
		{ /* #5780 = 0x2D27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B0F /* CloudKit.CKQueryCursor */ },
		{ /* #5781 = 0x2D29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B10 /* CloudKit.CKQueryNotification */ },
		{ /* #5782 = 0x2D2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B12 /* CloudKit.CKQueryOperation */ },
		{ /* #5783 = 0x2D2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B13 /* CloudKit.CKQuerySubscription */ },
		{ /* #5784 = 0x2D2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B18 /* CloudKit.CKRecordValue */ },
		{ /* #5785 = 0x2D31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6010C3F /* System.Void CloudKit.CKRecordValue::.ctor() */ },
		{ /* #5786 = 0x2D33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B19 /* CloudKit.CKRecordZone */ },
		{ /* #5787 = 0x2D35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B1B /* CloudKit.CKRecordZoneNotification */ },
		{ /* #5788 = 0x2D37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B1C /* CloudKit.CKRecordZoneSubscription */ },
		{ /* #5789 = 0x2D39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B1D /* CloudKit.CKReference */ },
		{ /* #5790 = 0x2D3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B1F /* CloudKit.CKServerChangeToken */ },
		{ /* #5791 = 0x2D3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B20 /* CloudKit.CKShare */ },
		{ /* #5792 = 0x2D3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B22 /* CloudKit.CKShareMetadata */ },
		{ /* #5793 = 0x2D41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B23 /* CloudKit.CKShareParticipant */ },
		{ /* #5794 = 0x2D43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B2C /* CloudKit.CKSystemSharingUIObserver */ },
		{ /* #5795 = 0x2D45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B2D /* CloudKit.CKUserIdentity */ },
		{ /* #5796 = 0x2D47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B5A /* ClassKit.CLSObject */ },
		{ /* #5797 = 0x2D49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B4A /* ClassKit.CLSActivity */ },
		{ /* #5798 = 0x2D4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B4B /* ClassKit.CLSActivityItem */ },
		{ /* #5799 = 0x2D4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B4C /* ClassKit.CLSBinaryItem */ },
		{ /* #5800 = 0x2D4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B4E /* ClassKit.ICLSContextProvider */ },
		{ /* #5801 = 0x2D51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B4F /* ClassKit.CLSContextProviderWrapper */ },
		{ /* #5802 = 0x2D53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B54 /* ClassKit.ICLSDataStoreDelegate */ },
		{ /* #5803 = 0x2D55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B55 /* ClassKit.CLSDataStoreDelegateWrapper */ },
		{ /* #5804 = 0x2D57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B56 /* ClassKit.CLSDataStoreDelegate */ },
		{ /* #5805 = 0x2D59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6010DB5 /* System.Void ClassKit.CLSDataStoreDelegate::.ctor() */ },
		{ /* #5806 = 0x2D5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B5C /* ClassKit.CLSProgressReportingCapability */ },
		{ /* #5807 = 0x2D5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B5E /* ClassKit.CLSQuantityItem */ },
		{ /* #5808 = 0x2D5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B5F /* ClassKit.CLSScoreItem */ },
		{ /* #5809 = 0x2D61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B64 /* BusinessChat.BCChatAction */ },
		{ /* #5810 = 0x2D63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B65 /* BusinessChat.BCChatButton */ },
		{ /* #5811 = 0x2D65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B69 /* BackgroundAssets.BAAppExtensionInfo */ },
		{ /* #5812 = 0x2D67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B6B /* BackgroundAssets.BADownload */ },
		{ /* #5813 = 0x2D69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B6D /* BackgroundAssets.IBADownloaderExtension */ },
		{ /* #5814 = 0x2D6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B6F /* BackgroundAssets.BADownloaderExtensionWrapper */ },
		{ /* #5815 = 0x2D6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B70 /* BackgroundAssets.IBADownloadManagerDelegate */ },
		{ /* #5816 = 0x2D6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B72 /* BackgroundAssets.BADownloadManagerDelegateWrapper */ },
		{ /* #5817 = 0x2D71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B73 /* BackgroundAssets.BADownloadManagerDelegate */ },
		{ /* #5818 = 0x2D73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6010E88 /* System.Void BackgroundAssets.BADownloadManagerDelegate::.ctor() */ },
		{ /* #5819 = 0x2D75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B75 /* BackgroundAssets.BAUrlDownload */ },
		{ /* #5820 = 0x2D77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B76 /* AuthenticationServices.ASAuthorization */ },
		{ /* #5821 = 0x2D79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B77 /* AuthenticationServices.ASAuthorizationRequest */ },
		{ /* #5822 = 0x2D7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BA7 /* AuthenticationServices.IASAuthorizationProviderExtensionRegistrationHandler */ },
		{ /* #5823 = 0x2D7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BA8 /* AuthenticationServices.ASAuthorizationProviderExtensionRegistrationHandlerWrapper */ },
		{ /* #5824 = 0x2D7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B78 /* AuthenticationServices.ASAuthorizationProviderExtensionRegistrationHandler */ },
		{ /* #5825 = 0x2D81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B7B /* AuthenticationServices.ASAuthorizationAppleIdButton */ },
		{ /* #5826 = 0x2D83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B8E /* AuthenticationServices.ASAuthorizationOpenIdRequest */ },
		{ /* #5827 = 0x2D85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B81 /* AuthenticationServices.ASAuthorizationAppleIdRequest */ },
		{ /* #5828 = 0x2D87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B82 /* AuthenticationServices.ASAuthorizationController */ },
		{ /* #5829 = 0x2D89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B83 /* AuthenticationServices.IASAuthorizationControllerDelegate */ },
		{ /* #5830 = 0x2D8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B85 /* AuthenticationServices.ASAuthorizationControllerDelegateWrapper */ },
		{ /* #5831 = 0x2D8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B86 /* AuthenticationServices.ASAuthorizationControllerDelegate */ },
		{ /* #5832 = 0x2D8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6010EFC /* System.Void AuthenticationServices.ASAuthorizationControllerDelegate::.ctor() */ },
		{ /* #5833 = 0x2D91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B87 /* AuthenticationServices.IASAuthorizationControllerPresentationContextProviding */ },
		{ /* #5834 = 0x2D93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B88 /* AuthenticationServices.ASAuthorizationControllerPresentationContextProvidingWrapper */ },
		{ /* #5835 = 0x2D95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B8A /* AuthenticationServices.IASAuthorizationCredential */ },
		{ /* #5836 = 0x2D97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B8B /* AuthenticationServices.ASAuthorizationCredentialWrapper */ },
		{ /* #5837 = 0x2D99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B99 /* AuthenticationServices.IASAuthorizationProvider */ },
		{ /* #5838 = 0x2D9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B9A /* AuthenticationServices.ASAuthorizationProviderWrapper */ },
		{ /* #5839 = 0x2D9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B91 /* AuthenticationServices.ASAuthorizationPasswordProvider */ },
		{ /* #5840 = 0x2D9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B92 /* AuthenticationServices.ASAuthorizationPasswordRequest */ },
		{ /* #5841 = 0x2DA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BD9 /* AuthenticationServices.IASPublicKeyCredential */ },
		{ /* #5842 = 0x2DA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BDA /* AuthenticationServices.ASPublicKeyCredentialWrapper */ },
		{ /* #5843 = 0x2DA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BAB /* AuthenticationServices.IASAuthorizationPublicKeyCredentialAssertion */ },
		{ /* #5844 = 0x2DA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BAC /* AuthenticationServices.ASAuthorizationPublicKeyCredentialAssertionWrapper */ },
		{ /* #5845 = 0x2DA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B93 /* AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertion */ },
		{ /* #5846 = 0x2DAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BAD /* AuthenticationServices.IASAuthorizationPublicKeyCredentialAssertionRequest */ },
		{ /* #5847 = 0x2DAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BAE /* AuthenticationServices.ASAuthorizationPublicKeyCredentialAssertionRequestWrapper */ },
		{ /* #5848 = 0x2DAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B94 /* AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialAssertionRequest */ },
		{ /* #5849 = 0x2DB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BB0 /* AuthenticationServices.IASAuthorizationPublicKeyCredentialDescriptor */ },
		{ /* #5850 = 0x2DB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BB1 /* AuthenticationServices.ASAuthorizationPublicKeyCredentialDescriptorWrapper */ },
		{ /* #5851 = 0x2DB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B95 /* AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialDescriptor */ },
		{ /* #5852 = 0x2DB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B96 /* AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialProvider */ },
		{ /* #5853 = 0x2DB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BB3 /* AuthenticationServices.IASAuthorizationPublicKeyCredentialRegistration */ },
		{ /* #5854 = 0x2DBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BB4 /* AuthenticationServices.ASAuthorizationPublicKeyCredentialRegistrationWrapper */ },
		{ /* #5855 = 0x2DBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B97 /* AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistration */ },
		{ /* #5856 = 0x2DBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BB5 /* AuthenticationServices.IASAuthorizationPublicKeyCredentialRegistrationRequest */ },
		{ /* #5857 = 0x2DC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BB6 /* AuthenticationServices.ASAuthorizationPublicKeyCredentialRegistrationRequestWrapper */ },
		{ /* #5858 = 0x2DC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B98 /* AuthenticationServices.ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest */ },
		{ /* #5859 = 0x2DC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B9F /* AuthenticationServices.IASAuthorizationProviderExtensionAuthorizationRequestHandler */ },
		{ /* #5860 = 0x2DC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BA1 /* AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationRequestHandlerWrapper */ },
		{ /* #5861 = 0x2DC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BA2 /* AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationResult */ },
		{ /* #5862 = 0x2DCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BA3 /* AuthenticationServices.ASAuthorizationProviderExtensionKerberosMapping */ },
		{ /* #5863 = 0x2DCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BB2 /* AuthenticationServices.ASAuthorizationPublicKeyCredentialParameters */ },
		{ /* #5864 = 0x2DCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BBC /* AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertion */ },
		{ /* #5865 = 0x2DD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BBD /* AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest */ },
		{ /* #5866 = 0x2DD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BC1 /* AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialProvider */ },
		{ /* #5867 = 0x2DD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BC2 /* AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistration */ },
		{ /* #5868 = 0x2DD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BC3 /* AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest */ },
		{ /* #5869 = 0x2DD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BC5 /* AuthenticationServices.ASAuthorizationSingleSignOnProvider */ },
		{ /* #5870 = 0x2DDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BC6 /* AuthenticationServices.ASAuthorizationSingleSignOnRequest */ },
		{ /* #5871 = 0x2DDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BC7 /* AuthenticationServices.IASAuthorizationWebBrowserExternallyAuthenticatableRequest */ },
		{ /* #5872 = 0x2DDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BC8 /* AuthenticationServices.ASAuthorizationWebBrowserExternallyAuthenticatableRequestWrapper */ },
		{ /* #5873 = 0x2DE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BC9 /* AuthenticationServices.ASAuthorizationWebBrowserPlatformPublicKeyCredential */ },
		{ /* #5874 = 0x2DE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BD0 /* AuthenticationServices.ASCredentialIdentityStoreState */ },
		{ /* #5875 = 0x2DE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BD1 /* AuthenticationServices.ASCredentialProviderExtensionContext */ },
		{ /* #5876 = 0x2DE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BD2 /* AuthenticationServices.ASCredentialProviderViewController */ },
		{ /* #5877 = 0x2DE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BD3 /* AuthenticationServices.ASCredentialServiceIdentifier */ },
		{ /* #5878 = 0x2DEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BD7 /* AuthenticationServices.ASPasswordCredential */ },
		{ /* #5879 = 0x2DED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BD8 /* AuthenticationServices.ASPasswordCredentialIdentity */ },
		{ /* #5880 = 0x2DEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BDC /* AuthenticationServices.IASWebAuthenticationPresentationContextProviding */ },
		{ /* #5881 = 0x2DF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BDD /* AuthenticationServices.ASWebAuthenticationPresentationContextProvidingWrapper */ },
		{ /* #5882 = 0x2DF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BDE /* AuthenticationServices.ASWebAuthenticationSession */ },
		{ /* #5883 = 0x2DF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BE1 /* AuthenticationServices.ASWebAuthenticationSessionRequest */ },
		{ /* #5884 = 0x2DF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BE2 /* AuthenticationServices.IASWebAuthenticationSessionRequestDelegate */ },
		{ /* #5885 = 0x2DF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BE4 /* AuthenticationServices.ASWebAuthenticationSessionRequestDelegateWrapper */ },
		{ /* #5886 = 0x2DFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BE5 /* AuthenticationServices.ASWebAuthenticationSessionRequestDelegate */ },
		{ /* #5887 = 0x2DFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6011174 /* System.Void AuthenticationServices.ASWebAuthenticationSessionRequestDelegate::.ctor() */ },
		{ /* #5888 = 0x2DFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BE6 /* AuthenticationServices.IASWebAuthenticationSessionWebBrowserSessionHandling */ },
		{ /* #5889 = 0x2E01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BE7 /* AuthenticationServices.ASWebAuthenticationSessionWebBrowserSessionHandlingWrapper */ },
		{ /* #5890 = 0x2E03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BE8 /* AuthenticationServices.ASWebAuthenticationSessionWebBrowserSessionManager */ },
		{ /* #5891 = 0x2E05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001C3E /* AudioUnit.AUParameterNode */ },
		{ /* #5892 = 0x2E07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BEE /* AudioUnit.AUParameter */ },
		{ /* #5893 = 0x2E09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001C20 /* AudioUnit.AUAudioUnitBus */ },
		{ /* #5894 = 0x2E0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001C21 /* AudioUnit.AUAudioUnitBusArray */ },
		{ /* #5895 = 0x2E0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001C23 /* AudioUnit.IAUAudioUnitFactory */ },
		{ /* #5896 = 0x2E0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001C24 /* AudioUnit.AUAudioUnitFactoryWrapper */ },
		{ /* #5897 = 0x2E11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001C25 /* AudioUnit.AUAudioUnitPreset */ },
		{ /* #5898 = 0x2E13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001C3D /* AudioUnit.AUParameterGroup */ },
		{ /* #5899 = 0x2E15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001C3F /* AudioUnit.AUParameterTree */ },
		{ /* #5900 = 0x2E17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CE7 /* AppKit.ActionDispatcher */ },
		{ /* #5901 = 0x2E19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6011765 /* System.Void AppKit.ActionDispatcher::OnActivated(Foundation.NSObject) */ },
		{ /* #5902 = 0x2E1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6011766 /* System.Void AppKit.ActionDispatcher::OnActivated2(Foundation.NSObject) */ },
		{ /* #5903 = 0x2E1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601176D /* System.Boolean AppKit.ActionDispatcher::ValidateMenuItem(AppKit.NSMenuItem) */ },
		{ /* #5904 = 0x2E1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601176E /* System.Boolean AppKit.ActionDispatcher::get_WorksWhenModal() */ },
		{ /* #5905 = 0x2E21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6011768 /* System.Void AppKit.ActionDispatcher::.ctor() */ },
		{ /* #5906 = 0x2E23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F8E /* AppKit.NSSavePanel */ },
		{ /* #5907 = 0x2E25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CEB /* AppKit.NSOpenPanel */ },
		{ /* #5908 = 0x2E27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CEC /* AppKit.NSPageLayout */ },
		{ /* #5909 = 0x2E29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CF1 /* AppKit.NSPathControl */ },
		{ /* #5910 = 0x2E2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CF2 /* AppKit.NSStatusItem */ },
		{ /* #5911 = 0x2E2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D02 /* AppKit.NSCell */ },
		{ /* #5912 = 0x2E2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CFB /* AppKit.NSActionCell */ },
		{ /* #5913 = 0x2E31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CFC /* AppKit.NSAlertDidEndDispatcher */ },
		{ /* #5914 = 0x2E33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6011D66 /* System.Void AppKit.NSAlertDidEndDispatcher::OnAlertDidEnd(AppKit.NSAlert,System.IntPtr,System.IntPtr) */ },
		{ /* #5915 = 0x2E35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E7D /* AppKit.INSEditorRegistration */ },
		{ /* #5916 = 0x2E37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E7F /* AppKit.NSEditorRegistrationWrapper */ },
		{ /* #5917 = 0x2E39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E42 /* AppKit.NSController */ },
		{ /* #5918 = 0x2E3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F17 /* AppKit.NSObjectController */ },
		{ /* #5919 = 0x2E3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CFE /* AppKit.NSArrayController */ },
		{ /* #5920 = 0x2E3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CFF /* AppKit.NSBezierPath */ },
		{ /* #5921 = 0x2E41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D1C /* AppKit.NSImageRep */ },
		{ /* #5922 = 0x2E43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D00 /* AppKit.NSBitmapImageRep */ },
		{ /* #5923 = 0x2E45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D04 /* AppKit.NSCollectionLayoutAnchor */ },
		{ /* #5924 = 0x2E47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E70 /* AppKit.INSDraggingSource */ },
		{ /* #5925 = 0x2E49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E72 /* AppKit.NSDraggingSourceWrapper */ },
		{ /* #5926 = 0x2E4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D05 /* AppKit.NSCollectionView */ },
		{ /* #5927 = 0x2E4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D06 /* AppKit.NSCollectionViewLayout */ },
		{ /* #5928 = 0x2E4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020FE /* AppKit.NSTouchBarItem */ },
		{ /* #5929 = 0x2E51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D08 /* AppKit.NSColorPickerTouchBarItem */ },
		{ /* #5930 = 0x2E53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D0D /* AppKit.NSDraggingSession */ },
		{ /* #5931 = 0x2E55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D1A /* AppKit.NSGraphicsContext */ },
		{ /* #5932 = 0x2E57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D1D /* AppKit.NSLayoutManager */ },
		{ /* #5933 = 0x2E59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D1E /* AppKit.NSLevelIndicator */ },
		{ /* #5934 = 0x2E5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D20 /* AppKit.NSOpenGLContext */ },
		{ /* #5935 = 0x2E5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D21 /* AppKit.NSOpenGLPixelFormat */ },
		{ /* #5936 = 0x2E5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D22 /* AppKit.NSPasteboard */ },
		{ /* #5937 = 0x2E61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D23 /* AppKit.NSPathControlItem */ },
		{ /* #5938 = 0x2E63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D27 /* AppKit.NSPrintInfo */ },
		{ /* #5939 = 0x2E65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D29 /* AppKit.NSSegmentedControl */ },
		{ /* #5940 = 0x2E67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D78 /* AppKit.INSAccessibilitySlider */ },
		{ /* #5941 = 0x2E69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D79 /* AppKit.NSAccessibilitySliderWrapper */ },
		{ /* #5942 = 0x2E6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D2B /* AppKit.NSSlider */ },
		{ /* #5943 = 0x2E6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D2C /* AppKit.NSSliderTouchBarItem */ },
		{ /* #5944 = 0x2E6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D2E /* AppKit.NSSpeechSynthesizer */ },
		{ /* #5945 = 0x2E71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D31 /* AppKit.NSStatusBar */ },
		{ /* #5946 = 0x2E73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020A3 /* AppKit.INSTextLayoutOrientationProvider */ },
		{ /* #5947 = 0x2E75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020A4 /* AppKit.NSTextLayoutOrientationProviderWrapper */ },
		{ /* #5948 = 0x2E77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D34 /* AppKit.NSTextContainer */ },
		{ /* #5949 = 0x2E79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200211B /* AppKit.INSValidatedUserInterfaceItem */ },
		{ /* #5950 = 0x2E7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200211C /* AppKit.NSValidatedUserInterfaceItemWrapper */ },
		{ /* #5951 = 0x2E7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D37 /* AppKit.NSToolbarItem */ },
		{ /* #5952 = 0x2E7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D38 /* AppKit.NSTouch */ },
		{ /* #5953 = 0x2E81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D39 /* AppKit.NSTreeController */ },
		{ /* #5954 = 0x2E83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D3D /* AppKit.NSLayoutConstraint */ },
		{ /* #5955 = 0x2E85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D48 /* AppKit.INSAccessibilityCheckBox */ },
		{ /* #5956 = 0x2E87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D49 /* AppKit.NSAccessibilityCheckBoxWrapper */ },
		{ /* #5957 = 0x2E89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D4A /* AppKit.INSAccessibilityContainsTransientUI */ },
		{ /* #5958 = 0x2E8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D4B /* AppKit.NSAccessibilityContainsTransientUIWrapper */ },
		{ /* #5959 = 0x2E8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D4C /* AppKit.NSAccessibilityCustomAction */ },
		{ /* #5960 = 0x2E8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D4D /* AppKit.NSAccessibilityCustomRotor */ },
		{ /* #5961 = 0x2E91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D4E /* AppKit.NSAccessibilityCustomRotorItemResult */ },
		{ /* #5962 = 0x2E93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D4F /* AppKit.INSAccessibilityCustomRotorItemSearchDelegate */ },
		{ /* #5963 = 0x2E95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D50 /* AppKit.NSAccessibilityCustomRotorItemSearchDelegateWrapper */ },
		{ /* #5964 = 0x2E97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D51 /* AppKit.NSAccessibilityCustomRotorItemSearchDelegate */ },
		{ /* #5965 = 0x2E99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60134F8 /* System.Void AppKit.NSAccessibilityCustomRotorItemSearchDelegate::.ctor() */ },
		{ /* #5966 = 0x2E9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D53 /* AppKit.NSAccessibilityCustomRotorSearchParameters */ },
		{ /* #5967 = 0x2E9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D56 /* AppKit.INSAccessibilityElementLoading */ },
		{ /* #5968 = 0x2E9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D58 /* AppKit.NSAccessibilityElementLoadingWrapper */ },
		{ /* #5969 = 0x2EA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D5D /* AppKit.INSAccessibilityGroup */ },
		{ /* #5970 = 0x2EA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D5E /* AppKit.NSAccessibilityGroupWrapper */ },
		{ /* #5971 = 0x2EA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D5F /* AppKit.INSAccessibilityImage */ },
		{ /* #5972 = 0x2EA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D60 /* AppKit.NSAccessibilityImageWrapper */ },
		{ /* #5973 = 0x2EA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D61 /* AppKit.INSAccessibilityLayoutArea */ },
		{ /* #5974 = 0x2EAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D62 /* AppKit.NSAccessibilityLayoutAreaWrapper */ },
		{ /* #5975 = 0x2EAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D63 /* AppKit.INSAccessibilityLayoutItem */ },
		{ /* #5976 = 0x2EAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D65 /* AppKit.NSAccessibilityLayoutItemWrapper */ },
		{ /* #5977 = 0x2EB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D85 /* AppKit.INSAccessibilityTable */ },
		{ /* #5978 = 0x2EB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D87 /* AppKit.NSAccessibilityTableWrapper */ },
		{ /* #5979 = 0x2EB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D66 /* AppKit.INSAccessibilityList */ },
		{ /* #5980 = 0x2EB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D67 /* AppKit.NSAccessibilityListWrapper */ },
		{ /* #5981 = 0x2EB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D7B /* AppKit.INSAccessibilityStaticText */ },
		{ /* #5982 = 0x2EBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D7D /* AppKit.NSAccessibilityStaticTextWrapper */ },
		{ /* #5983 = 0x2EBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D68 /* AppKit.INSAccessibilityNavigableStaticText */ },
		{ /* #5984 = 0x2EBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D69 /* AppKit.NSAccessibilityNavigableStaticTextWrapper */ },
		{ /* #5985 = 0x2EC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D6C /* AppKit.INSAccessibilityOutline */ },
		{ /* #5986 = 0x2EC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D6D /* AppKit.NSAccessibilityOutlineWrapper */ },
		{ /* #5987 = 0x2EC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D6F /* AppKit.INSAccessibilityProgressIndicator */ },
		{ /* #5988 = 0x2EC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D70 /* AppKit.NSAccessibilityProgressIndicatorWrapper */ },
		{ /* #5989 = 0x2EC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D71 /* AppKit.INSAccessibilityRadioButton */ },
		{ /* #5990 = 0x2ECB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D72 /* AppKit.NSAccessibilityRadioButtonWrapper */ },
		{ /* #5991 = 0x2ECD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D74 /* AppKit.INSAccessibilityRow */ },
		{ /* #5992 = 0x2ECF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D76 /* AppKit.NSAccessibilityRowWrapper */ },
		{ /* #5993 = 0x2ED1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D7E /* AppKit.INSAccessibilityStepper */ },
		{ /* #5994 = 0x2ED3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D80 /* AppKit.NSAccessibilityStepperWrapper */ },
		{ /* #5995 = 0x2ED5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D82 /* AppKit.INSAccessibilitySwitch */ },
		{ /* #5996 = 0x2ED7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D84 /* AppKit.NSAccessibilitySwitchWrapper */ },
		{ /* #5997 = 0x2ED9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D8A /* AppKit.INSAlertDelegate */ },
		{ /* #5998 = 0x2EDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D8C /* AppKit.NSAlertDelegateWrapper */ },
		{ /* #5999 = 0x2EDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D8D /* AppKit.NSAlertDelegate */ },
		{ /* #6000 = 0x2EDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013721 /* System.Void AppKit.NSAlertDelegate::.ctor() */ },
		{ /* #6001 = 0x2EE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D8F /* AppKit.NSAlignmentFeedbackFilter */ },
		{ /* #6002 = 0x2EE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D90 /* AppKit.INSAlignmentFeedbackToken */ },
		{ /* #6003 = 0x2EE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D91 /* AppKit.NSAlignmentFeedbackTokenWrapper */ },
		{ /* #6004 = 0x2EE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D92 /* AppKit.NSAlignmentFeedbackToken */ },
		{ /* #6005 = 0x2EE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013732 /* System.Void AppKit.NSAlignmentFeedbackToken::.ctor() */ },
		{ /* #6006 = 0x2EEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D96 /* AppKit.NSAnimationContext */ },
		{ /* #6007 = 0x2EED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D98 /* AppKit.INSAnimationDelegate */ },
		{ /* #6008 = 0x2EEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D9A /* AppKit.NSAnimationDelegateWrapper */ },
		{ /* #6009 = 0x2EF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D9B /* AppKit.NSAnimationDelegate */ },
		{ /* #6010 = 0x2EF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013786 /* System.Void AppKit.NSAnimationDelegate::.ctor() */ },
		{ /* #6011 = 0x2EF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D9D /* AppKit.NSAppearance */ },
		{ /* #6012 = 0x2EF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DA0 /* AppKit.NSAppearanceCustomization */ },
		{ /* #6013 = 0x2EF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60137AE /* System.Void AppKit.NSAppearanceCustomization::.ctor() */ },
		{ /* #6014 = 0x2EFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200210A /* AppKit.NSTypesetter */ },
		{ /* #6015 = 0x2EFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DB7 /* AppKit.NSATSTypesetter */ },
		{ /* #6016 = 0x2EFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DC4 /* AppKit.NSBox */ },
		{ /* #6017 = 0x2F01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DC6 /* AppKit.NSBrowserCell */ },
		{ /* #6018 = 0x2F03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DC8 /* AppKit.INSBrowserDelegate */ },
		{ /* #6019 = 0x2F05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DCA /* AppKit.NSBrowserDelegateWrapper */ },
		{ /* #6020 = 0x2F07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DCB /* AppKit.NSBrowserDelegate */ },
		{ /* #6021 = 0x2F09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60138D6 /* System.Void AppKit.NSBrowserDelegate::.ctor() */ },
		{ /* #6022 = 0x2F0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DCD /* AppKit.NSButtonCell */ },
		{ /* #6023 = 0x2F0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DCE /* AppKit.NSButtonTouchBarItem */ },
		{ /* #6024 = 0x2F0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DD0 /* AppKit.NSCachedImageRep */ },
		{ /* #6025 = 0x2F11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DD1 /* AppKit.NSCandidateListTouchBarItem */ },
		{ /* #6026 = 0x2F13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DD2 /* AppKit.INSCandidateListTouchBarItemDelegate */ },
		{ /* #6027 = 0x2F15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DD4 /* AppKit.NSCandidateListTouchBarItemDelegateWrapper */ },
		{ /* #6028 = 0x2F17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DD5 /* AppKit.NSCandidateListTouchBarItemDelegate */ },
		{ /* #6029 = 0x2F19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013976 /* System.Void AppKit.NSCandidateListTouchBarItemDelegate::.ctor() */ },
		{ /* #6030 = 0x2F1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DDD /* AppKit.NSCIImageRep */ },
		{ /* #6031 = 0x2F1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DDE /* AppKit.NSClipView */ },
		{ /* #6032 = 0x2F1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FCF /* AppKit.INSSharingServiceDelegate */ },
		{ /* #6033 = 0x2F21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FD1 /* AppKit.NSSharingServiceDelegateWrapper */ },
		{ /* #6034 = 0x2F23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DE0 /* AppKit.INSCloudSharingServiceDelegate */ },
		{ /* #6035 = 0x2F25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DE2 /* AppKit.NSCloudSharingServiceDelegateWrapper */ },
		{ /* #6036 = 0x2F27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FD2 /* AppKit.NSSharingServiceDelegate */ },
		{ /* #6037 = 0x2F29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014D75 /* System.Void AppKit.NSSharingServiceDelegate::.ctor() */ },
		{ /* #6038 = 0x2F2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DE3 /* AppKit.NSCloudSharingServiceDelegate */ },
		{ /* #6039 = 0x2F2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60139A8 /* System.Void AppKit.NSCloudSharingServiceDelegate::.ctor() */ },
		{ /* #6040 = 0x2F2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DE4 /* AppKit.INSCloudSharingValidation */ },
		{ /* #6041 = 0x2F31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DE5 /* AppKit.NSCloudSharingValidationWrapper */ },
		{ /* #6042 = 0x2F33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DF3 /* AppKit.NSCollectionLayoutItem */ },
		{ /* #6043 = 0x2F35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DF8 /* AppKit.NSCollectionLayoutSupplementaryItem */ },
		{ /* #6044 = 0x2F37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DE9 /* AppKit.NSCollectionLayoutBoundarySupplementaryItem */ },
		{ /* #6045 = 0x2F39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DEA /* AppKit.INSCollectionLayoutContainer */ },
		{ /* #6046 = 0x2F3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DEB /* AppKit.NSCollectionLayoutContainerWrapper */ },
		{ /* #6047 = 0x2F3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DEC /* AppKit.NSCollectionLayoutDecorationItem */ },
		{ /* #6048 = 0x2F3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DED /* AppKit.NSCollectionLayoutDimension */ },
		{ /* #6049 = 0x2F41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DEE /* AppKit.NSCollectionLayoutEdgeSpacing */ },
		{ /* #6050 = 0x2F43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DEF /* AppKit.INSCollectionLayoutEnvironment */ },
		{ /* #6051 = 0x2F45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DF0 /* AppKit.NSCollectionLayoutEnvironmentWrapper */ },
		{ /* #6052 = 0x2F47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DF1 /* AppKit.NSCollectionLayoutGroup */ },
		{ /* #6053 = 0x2F49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DF2 /* AppKit.NSCollectionLayoutGroupCustomItem */ },
		{ /* #6054 = 0x2F4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DF4 /* AppKit.NSCollectionLayoutSection */ },
		{ /* #6055 = 0x2F4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DF6 /* AppKit.NSCollectionLayoutSize */ },
		{ /* #6056 = 0x2F4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DF7 /* AppKit.NSCollectionLayoutSpacing */ },
		{ /* #6057 = 0x2F51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DF9 /* AppKit.INSCollectionLayoutVisibleItem */ },
		{ /* #6058 = 0x2F53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DFA /* AppKit.NSCollectionLayoutVisibleItemWrapper */ },
		{ /* #6059 = 0x2F55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DFC /* AppKit.NSCollectionViewCompositionalLayout */ },
		{ /* #6060 = 0x2F57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DFD /* AppKit.NSCollectionViewCompositionalLayoutConfiguration */ },
		{ /* #6061 = 0x2F59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001DFE /* AppKit.INSCollectionViewDataSource */ },
		{ /* #6062 = 0x2F5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E00 /* AppKit.NSCollectionViewDataSourceWrapper */ },
		{ /* #6063 = 0x2F5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E01 /* AppKit.NSCollectionViewDataSource */ },
		{ /* #6064 = 0x2F5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013A86 /* System.Void AppKit.NSCollectionViewDataSource::.ctor() */ },
		{ /* #6065 = 0x2F61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E02 /* AppKit.INSCollectionViewDelegate */ },
		{ /* #6066 = 0x2F63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E04 /* AppKit.NSCollectionViewDelegateWrapper */ },
		{ /* #6067 = 0x2F65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E05 /* AppKit.NSCollectionViewDelegate */ },
		{ /* #6068 = 0x2F67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013AAA /* System.Void AppKit.NSCollectionViewDelegate::.ctor() */ },
		{ /* #6069 = 0x2F69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E06 /* AppKit.INSCollectionViewDelegateFlowLayout */ },
		{ /* #6070 = 0x2F6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E08 /* AppKit.NSCollectionViewDelegateFlowLayoutWrapper */ },
		{ /* #6071 = 0x2F6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E09 /* AppKit.NSCollectionViewDelegateFlowLayout */ },
		{ /* #6072 = 0x2F6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013AD0 /* System.Void AppKit.NSCollectionViewDelegateFlowLayout::.ctor() */ },
		{ /* #6073 = 0x2F71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E0A /* AppKit.NSCollectionViewDiffableDataSource`2 */ },
		{ /* #6074 = 0x2F73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E0C /* AppKit.INSCollectionViewElement */ },
		{ /* #6075 = 0x2F75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E0E /* AppKit.NSCollectionViewElementWrapper */ },
		{ /* #6076 = 0x2F77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E0F /* AppKit.NSCollectionViewElement */ },
		{ /* #6077 = 0x2F79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013B0C /* System.Void AppKit.NSCollectionViewElement::.ctor() */ },
		{ /* #6078 = 0x2F7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E10 /* AppKit.NSCollectionViewFlowLayout */ },
		{ /* #6079 = 0x2F7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E16 /* AppKit.NSCollectionViewLayoutInvalidationContext */ },
		{ /* #6080 = 0x2F7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E11 /* AppKit.NSCollectionViewFlowLayoutInvalidationContext */ },
		{ /* #6081 = 0x2F81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E12 /* AppKit.NSCollectionViewGridLayout */ },
		{ /* #6082 = 0x2F83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E13 /* AppKit.NSCollectionViewItem */ },
		{ /* #6083 = 0x2F85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E15 /* AppKit.NSCollectionViewLayoutAttributes */ },
		{ /* #6084 = 0x2F87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E17 /* AppKit.INSCollectionViewPrefetching */ },
		{ /* #6085 = 0x2F89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E19 /* AppKit.NSCollectionViewPrefetchingWrapper */ },
		{ /* #6086 = 0x2F8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E1C /* AppKit.INSCollectionViewSectionHeaderView */ },
		{ /* #6087 = 0x2F8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E1E /* AppKit.NSCollectionViewSectionHeaderViewWrapper */ },
		{ /* #6088 = 0x2F8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E1F /* AppKit.NSCollectionViewTransitionLayout */ },
		{ /* #6089 = 0x2F91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E20 /* AppKit.NSCollectionViewUpdateItem */ },
		{ /* #6090 = 0x2F93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E21 /* AppKit.INSColorChanging */ },
		{ /* #6091 = 0x2F95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E22 /* AppKit.NSColorChangingWrapper */ },
		{ /* #6092 = 0x2F97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E23 /* AppKit.NSColorList */ },
		{ /* #6093 = 0x2F99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E27 /* AppKit.NSColorPicker */ },
		{ /* #6094 = 0x2F9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E29 /* AppKit.NSColorSampler */ },
		{ /* #6095 = 0x2F9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E2A /* AppKit.NSColorSpace */ },
		{ /* #6096 = 0x2F9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E2E /* AppKit.NSColorWell */ },
		{ /* #6097 = 0x2FA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200207D /* AppKit.NSTextFieldCell */ },
		{ /* #6098 = 0x2FA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E30 /* AppKit.NSComboBoxCell */ },
		{ /* #6099 = 0x2FA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E31 /* AppKit.INSComboBoxCellDataSource */ },
		{ /* #6100 = 0x2FA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E33 /* AppKit.NSComboBoxCellDataSourceWrapper */ },
		{ /* #6101 = 0x2FA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E34 /* AppKit.NSComboBoxCellDataSource */ },
		{ /* #6102 = 0x2FAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013C63 /* System.Void AppKit.NSComboBoxCellDataSource::.ctor() */ },
		{ /* #6103 = 0x2FAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E35 /* AppKit.INSComboBoxDataSource */ },
		{ /* #6104 = 0x2FAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E37 /* AppKit.NSComboBoxDataSourceWrapper */ },
		{ /* #6105 = 0x2FB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E38 /* AppKit.NSComboBoxDataSource */ },
		{ /* #6106 = 0x2FB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013C6F /* System.Void AppKit.NSComboBoxDataSource::.ctor() */ },
		{ /* #6107 = 0x2FB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200207E /* AppKit.INSTextFieldDelegate */ },
		{ /* #6108 = 0x2FB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002080 /* AppKit.NSTextFieldDelegateWrapper */ },
		{ /* #6109 = 0x2FB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E39 /* AppKit.INSComboBoxDelegate */ },
		{ /* #6110 = 0x2FBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E3B /* AppKit.NSComboBoxDelegateWrapper */ },
		{ /* #6111 = 0x2FBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002081 /* AppKit.NSTextFieldDelegate */ },
		{ /* #6112 = 0x2FBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015523 /* System.Void AppKit.NSTextFieldDelegate::.ctor() */ },
		{ /* #6113 = 0x2FC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E3C /* AppKit.NSComboBoxDelegate */ },
		{ /* #6114 = 0x2FC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013C7B /* System.Void AppKit.NSComboBoxDelegate::.ctor() */ },
		{ /* #6115 = 0x2FC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E3D /* AppKit.NSComboButton */ },
		{ /* #6116 = 0x2FC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E44 /* AppKit.INSControlTextEditingDelegate */ },
		{ /* #6117 = 0x2FC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E46 /* AppKit.NSControlTextEditingDelegateWrapper */ },
		{ /* #6118 = 0x2FCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E47 /* AppKit.NSControlTextEditingDelegate */ },
		{ /* #6119 = 0x2FCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013CAF /* System.Void AppKit.NSControlTextEditingDelegate::.ctor() */ },
		{ /* #6120 = 0x2FCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E4B /* AppKit.NSCursor */ },
		{ /* #6121 = 0x2FD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E4C /* AppKit.NSCustomImageRep */ },
		{ /* #6122 = 0x2FD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E4D /* AppKit.NSCustomTouchBarItem */ },
		{ /* #6123 = 0x2FD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E4E /* AppKit.NSDataAsset */ },
		{ /* #6124 = 0x2FD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E52 /* AppKit.INSDatePickerCellDelegate */ },
		{ /* #6125 = 0x2FD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E54 /* AppKit.NSDatePickerCellDelegateWrapper */ },
		{ /* #6126 = 0x2FDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E55 /* AppKit.NSDatePickerCellDelegate */ },
		{ /* #6127 = 0x2FDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013D6E /* System.Void AppKit.NSDatePickerCellDelegate::.ctor() */ },
		{ /* #6128 = 0x2FDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E59 /* AppKit.NSDictionaryController */ },
		{ /* #6129 = 0x2FE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E5A /* AppKit.NSDictionaryControllerKeyValuePair */ },
		{ /* #6130 = 0x2FE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E5B /* AppKit.NSDiffableDataSourceSnapshot`2 */ },
		{ /* #6131 = 0x2FE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E5E /* AppKit.NSDockTile */ },
		{ /* #6132 = 0x2FE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E5F /* AppKit.INSDockTilePlugIn */ },
		{ /* #6133 = 0x2FE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E61 /* AppKit.NSDockTilePlugInWrapper */ },
		{ /* #6134 = 0x2FEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E62 /* AppKit.NSDockTilePlugIn */ },
		{ /* #6135 = 0x2FED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013DC5 /* System.Void AppKit.NSDockTilePlugIn::.ctor() */ },
		{ /* #6136 = 0x2FEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002140 /* AppKit.INSWindowRestoration */ },
		{ /* #6137 = 0x2FF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002141 /* AppKit.NSWindowRestorationWrapper */ },
		{ /* #6138 = 0x2FF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E64 /* AppKit.NSDocumentController */ },
		{ /* #6139 = 0x2FF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E69 /* AppKit.NSDraggingDestination */ },
		{ /* #6140 = 0x2FF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013E09 /* System.Void AppKit.NSDraggingDestination::.ctor() */ },
		{ /* #6141 = 0x2FF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E6B /* AppKit.NSDraggingImageComponent */ },
		{ /* #6142 = 0x2FFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E6C /* AppKit.INSDraggingInfo */ },
		{ /* #6143 = 0x2FFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E6D /* AppKit.NSDraggingInfoWrapper */ },
		{ /* #6144 = 0x2FFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E6E /* AppKit.NSDraggingItem */ },
		{ /* #6145 = 0x3001 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E73 /* AppKit.NSDraggingSource */ },
		{ /* #6146 = 0x3003 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013E5E /* System.Void AppKit.NSDraggingSource::.ctor() */ },
		{ /* #6147 = 0x3005 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E76 /* AppKit.INSDrawerDelegate */ },
		{ /* #6148 = 0x3007 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E78 /* AppKit.NSDrawerDelegateWrapper */ },
		{ /* #6149 = 0x3009 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E79 /* AppKit.NSDrawerDelegate */ },
		{ /* #6150 = 0x300B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6013FD8 /* System.Void AppKit.NSDrawerDelegate::.ctor() */ },
		{ /* #6151 = 0x300D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E80 /* AppKit.NSEPSImageRep */ },
		{ /* #6152 = 0x300F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E8B /* AppKit.NSFilePromiseProvider */ },
		{ /* #6153 = 0x3011 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E8C /* AppKit.INSFilePromiseProviderDelegate */ },
		{ /* #6154 = 0x3013 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E8E /* AppKit.NSFilePromiseProviderDelegateWrapper */ },
		{ /* #6155 = 0x3015 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E8F /* AppKit.NSFilePromiseProviderDelegate */ },
		{ /* #6156 = 0x3017 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014013 /* System.Void AppKit.NSFilePromiseProviderDelegate::.ctor() */ },
		{ /* #6157 = 0x3019 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E90 /* AppKit.NSFilePromiseReceiver */ },
		{ /* #6158 = 0x301B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E93 /* AppKit.NSFontAssetRequest */ },
		{ /* #6159 = 0x301D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E95 /* AppKit.INSFontChanging */ },
		{ /* #6160 = 0x301F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E97 /* AppKit.NSFontChangingWrapper */ },
		{ /* #6161 = 0x3021 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E9B /* AppKit.NSFontDescriptor */ },
		{ /* #6162 = 0x3023 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E9F /* AppKit.NSFontManager */ },
		{ /* #6163 = 0x3025 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EA0 /* AppKit.NSFontPanel */ },
		{ /* #6164 = 0x3027 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002128 /* AppKit.INSViewToolTipOwner */ },
		{ /* #6165 = 0x3029 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002129 /* AppKit.NSViewToolTipOwnerWrapper */ },
		{ /* #6166 = 0x302B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CEF /* AppKit.NSMatrix */ },
		{ /* #6167 = 0x302D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EAA /* AppKit.NSForm */ },
		{ /* #6168 = 0x302F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EAB /* AppKit.NSFormCell */ },
		{ /* #6169 = 0x3031 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EAE /* AppKit.INSGestureRecognizerDelegate */ },
		{ /* #6170 = 0x3033 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EB0 /* AppKit.NSGestureRecognizerDelegateWrapper */ },
		{ /* #6171 = 0x3035 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EB1 /* AppKit.NSGestureRecognizerDelegate */ },
		{ /* #6172 = 0x3037 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014123 /* System.Void AppKit.NSGestureRecognizerDelegate::.ctor() */ },
		{ /* #6173 = 0x3039 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EB7 /* AppKit.NSGlyphGenerator */ },
		{ /* #6174 = 0x303B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EB8 /* AppKit.NSGlyphInfo */ },
		{ /* #6175 = 0x303D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EBD /* AppKit.NSGridCell */ },
		{ /* #6176 = 0x303F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EBF /* AppKit.NSGridColumn */ },
		{ /* #6177 = 0x3041 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EC0 /* AppKit.NSGridRow */ },
		{ /* #6178 = 0x3043 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EC2 /* AppKit.NSGridView */ },
		{ /* #6179 = 0x3045 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EC3 /* AppKit.NSGroupTouchBarItem */ },
		{ /* #6180 = 0x3047 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EC4 /* AppKit.NSHapticFeedbackManager */ },
		{ /* #6181 = 0x3049 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EC7 /* AppKit.INSHapticFeedbackPerformer */ },
		{ /* #6182 = 0x304B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EC8 /* AppKit.NSHapticFeedbackPerformerWrapper */ },
		{ /* #6183 = 0x304D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EC9 /* AppKit.NSHapticFeedbackPerformer */ },
		{ /* #6184 = 0x304F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60141C9 /* System.Void AppKit.NSHapticFeedbackPerformer::.ctor() */ },
		{ /* #6185 = 0x3051 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001ED0 /* AppKit.NSImageCell */ },
		{ /* #6186 = 0x3053 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001ED1 /* AppKit.INSImageDelegate */ },
		{ /* #6187 = 0x3055 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001ED3 /* AppKit.NSImageDelegateWrapper */ },
		{ /* #6188 = 0x3057 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001ED4 /* AppKit.NSImageDelegate */ },
		{ /* #6189 = 0x3059 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60141FF /* System.Void AppKit.NSImageDelegate::.ctor() */ },
		{ /* #6190 = 0x305B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EE0 /* AppKit.NSImageSymbolConfiguration */ },
		{ /* #6191 = 0x305D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EE2 /* AppKit.NSImageView */ },
		{ /* #6192 = 0x305F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EE7 /* AppKit.NSLayoutAnchor`1 */ },
		{ /* #6193 = 0x3061 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EEA /* AppKit.NSLayoutDimension */ },
		{ /* #6194 = 0x3063 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EEC /* AppKit.NSLayoutGuide */ },
		{ /* #6195 = 0x3065 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EEE /* AppKit.INSLayoutManagerDelegate */ },
		{ /* #6196 = 0x3067 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EF0 /* AppKit.NSLayoutManagerDelegateWrapper */ },
		{ /* #6197 = 0x3069 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EF1 /* AppKit.NSLayoutManagerDelegate */ },
		{ /* #6198 = 0x306B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014303 /* System.Void AppKit.NSLayoutManagerDelegate::.ctor() */ },
		{ /* #6199 = 0x306D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EF4 /* AppKit.NSLayoutXAxisAnchor */ },
		{ /* #6200 = 0x306F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EF5 /* AppKit.NSLayoutYAxisAnchor */ },
		{ /* #6201 = 0x3071 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EF6 /* AppKit.NSLevelIndicatorCell */ },
		{ /* #6202 = 0x3073 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001EFF /* AppKit.INSMatrixDelegate */ },
		{ /* #6203 = 0x3075 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F00 /* AppKit.NSMatrixDelegateWrapper */ },
		{ /* #6204 = 0x3077 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F01 /* AppKit.NSMatrixDelegate */ },
		{ /* #6205 = 0x3079 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014342 /* System.Void AppKit.NSMatrixDelegate::.ctor() */ },
		{ /* #6206 = 0x307B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F04 /* AppKit.INSMenuDelegate */ },
		{ /* #6207 = 0x307D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F06 /* AppKit.NSMenuDelegateWrapper */ },
		{ /* #6208 = 0x307F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F07 /* AppKit.NSMenuDelegate */ },
		{ /* #6209 = 0x3081 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60144DE /* System.Void AppKit.NSMenuDelegate::.ctor() */ },
		{ /* #6210 = 0x3083 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F08 /* AppKit.NSMenuItemCell */ },
		{ /* #6211 = 0x3085 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F0C /* AppKit.NSMenuToolbarItem */ },
		{ /* #6212 = 0x3087 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E98 /* AppKit.NSFontCollection */ },
		{ /* #6213 = 0x3089 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F11 /* AppKit.NSMutableFontCollection */ },
		{ /* #6214 = 0x308B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F35 /* AppKit.NSParagraphStyle */ },
		{ /* #6215 = 0x308D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F12 /* AppKit.NSMutableParagraphStyle */ },
		{ /* #6216 = 0x308F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F13 /* AppKit.NSNib */ },
		{ /* #6217 = 0x3091 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F1A /* AppKit.NSOpenGLLayer */ },
		{ /* #6218 = 0x3093 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F1B /* AppKit.NSOpenGLPixelBuffer */ },
		{ /* #6219 = 0x3095 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F1E /* AppKit.NSOpenGLView */ },
		{ /* #6220 = 0x3097 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F1F /* AppKit.INSOpenSavePanelDelegate */ },
		{ /* #6221 = 0x3099 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F21 /* AppKit.NSOpenSavePanelDelegateWrapper */ },
		{ /* #6222 = 0x309B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F22 /* AppKit.NSOpenSavePanelDelegate */ },
		{ /* #6223 = 0x309D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60145DA /* System.Void AppKit.NSOpenSavePanelDelegate::.ctor() */ },
		{ /* #6224 = 0x309F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F24 /* AppKit.INSOutlineViewDataSource */ },
		{ /* #6225 = 0x30A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F26 /* AppKit.NSOutlineViewDataSourceWrapper */ },
		{ /* #6226 = 0x30A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F27 /* AppKit.NSOutlineViewDataSource */ },
		{ /* #6227 = 0x30A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014648 /* System.Void AppKit.NSOutlineViewDataSource::.ctor() */ },
		{ /* #6228 = 0x30A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F28 /* AppKit.INSOutlineViewDelegate */ },
		{ /* #6229 = 0x30A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F2A /* AppKit.NSOutlineViewDelegateWrapper */ },
		{ /* #6230 = 0x30AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F2B /* AppKit.NSOutlineViewDelegate */ },
		{ /* #6231 = 0x30AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014681 /* System.Void AppKit.NSOutlineViewDelegate::.ctor() */ },
		{ /* #6232 = 0x30AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F2F /* AppKit.INSPageControllerDelegate */ },
		{ /* #6233 = 0x30B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F31 /* AppKit.NSPageControllerDelegateWrapper */ },
		{ /* #6234 = 0x30B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F32 /* AppKit.NSPageControllerDelegate */ },
		{ /* #6235 = 0x30B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60146E7 /* System.Void AppKit.NSPageControllerDelegate::.ctor() */ },
		{ /* #6236 = 0x30B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F37 /* AppKit.NSPasteboardItem */ },
		{ /* #6237 = 0x30B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F38 /* AppKit.INSPasteboardItemDataProvider */ },
		{ /* #6238 = 0x30BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F3A /* AppKit.NSPasteboardItemDataProviderWrapper */ },
		{ /* #6239 = 0x30BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F3B /* AppKit.NSPasteboardItemDataProvider */ },
		{ /* #6240 = 0x30BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601474D /* System.Void AppKit.NSPasteboardItemDataProvider::.ctor() */ },
		{ /* #6241 = 0x30C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F3F /* AppKit.INSPasteboardTypeOwner */ },
		{ /* #6242 = 0x30C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F41 /* AppKit.NSPasteboardTypeOwnerWrapper */ },
		{ /* #6243 = 0x30C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F48 /* AppKit.INSPathCellDelegate */ },
		{ /* #6244 = 0x30C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F4A /* AppKit.NSPathCellDelegateWrapper */ },
		{ /* #6245 = 0x30C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F4B /* AppKit.NSPathCellDelegate */ },
		{ /* #6246 = 0x30CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014766 /* System.Void AppKit.NSPathCellDelegate::.ctor() */ },
		{ /* #6247 = 0x30CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F4C /* AppKit.NSPathComponentCell */ },
		{ /* #6248 = 0x30CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F4D /* AppKit.INSPathControlDelegate */ },
		{ /* #6249 = 0x30D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F4F /* AppKit.NSPathControlDelegateWrapper */ },
		{ /* #6250 = 0x30D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F50 /* AppKit.NSPathControlDelegate */ },
		{ /* #6251 = 0x30D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601477D /* System.Void AppKit.NSPathControlDelegate::.ctor() */ },
		{ /* #6252 = 0x30D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F52 /* AppKit.NSPdfImageRep */ },
		{ /* #6253 = 0x30D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F53 /* AppKit.NSPickerTouchBarItem */ },
		{ /* #6254 = 0x30DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F5A /* AppKit.INSPopoverDelegate */ },
		{ /* #6255 = 0x30DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F5C /* AppKit.NSPopoverDelegateWrapper */ },
		{ /* #6256 = 0x30DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F5D /* AppKit.NSPopoverDelegate */ },
		{ /* #6257 = 0x30E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014910 /* System.Void AppKit.NSPopoverDelegate::.ctor() */ },
		{ /* #6258 = 0x30E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F5E /* AppKit.NSPopoverTouchBarItem */ },
		{ /* #6259 = 0x30E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F7E /* AppKit.NSRuleEditor */ },
		{ /* #6260 = 0x30E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F60 /* AppKit.NSPredicateEditor */ },
		{ /* #6261 = 0x30E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F62 /* AppKit.NSPressureConfiguration */ },
		{ /* #6262 = 0x30EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F63 /* AppKit.INSPreviewRepresentableActivityItem */ },
		{ /* #6263 = 0x30ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F65 /* AppKit.NSPreviewRepresentableActivityItemWrapper */ },
		{ /* #6264 = 0x30EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F66 /* AppKit.NSPreviewRepresentingActivityItem */ },
		{ /* #6265 = 0x30F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F67 /* AppKit.NSPrinter */ },
		{ /* #6266 = 0x30F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F6C /* AppKit.NSPrintOperation */ },
		{ /* #6267 = 0x30F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F6D /* AppKit.NSPrintPanel */ },
		{ /* #6268 = 0x30F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F6E /* AppKit.INSPrintPanelAccessorizing */ },
		{ /* #6269 = 0x30F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F70 /* AppKit.NSPrintPanelAccessorizingWrapper */ },
		{ /* #6270 = 0x30FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F71 /* AppKit.NSPrintPanelAccessorizing */ },
		{ /* #6271 = 0x30FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60149AD /* System.Void AppKit.NSPrintPanelAccessorizing::.ctor() */ },
		{ /* #6272 = 0x30FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F73 /* AppKit.NSPrintPreviewGraphicsContext */ },
		{ /* #6273 = 0x3101 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F75 /* AppKit.NSProgressIndicator */ },
		{ /* #6274 = 0x3103 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F7F /* AppKit.INSRuleEditorDelegate */ },
		{ /* #6275 = 0x3105 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F81 /* AppKit.NSRuleEditorDelegateWrapper */ },
		{ /* #6276 = 0x3107 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F82 /* AppKit.NSRuleEditorDelegate */ },
		{ /* #6277 = 0x3109 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014A7C /* System.Void AppKit.NSRuleEditorDelegate::.ctor() */ },
		{ /* #6278 = 0x310B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F85 /* AppKit.NSRulerMarker */ },
		{ /* #6279 = 0x310D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F88 /* AppKit.NSRulerView */ },
		{ /* #6280 = 0x310F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F8B /* AppKit.NSRunningApplication */ },
		{ /* #6281 = 0x3111 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F9B /* AppKit.NSScrubber */ },
		{ /* #6282 = 0x3113 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F9D /* AppKit.NSScrubberArrangedView */ },
		{ /* #6283 = 0x3115 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F9E /* AppKit.INSScrubberDataSource */ },
		{ /* #6284 = 0x3117 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F9F /* AppKit.NSScrubberDataSourceWrapper */ },
		{ /* #6285 = 0x3119 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FA0 /* AppKit.NSScrubberDataSource */ },
		{ /* #6286 = 0x311B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014C1C /* System.Void AppKit.NSScrubberDataSource::.ctor() */ },
		{ /* #6287 = 0x311D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FA1 /* AppKit.INSScrubberDelegate */ },
		{ /* #6288 = 0x311F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FA3 /* AppKit.NSScrubberDelegateWrapper */ },
		{ /* #6289 = 0x3121 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FA4 /* AppKit.NSScrubberDelegate */ },
		{ /* #6290 = 0x3123 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014C28 /* System.Void AppKit.NSScrubberDelegate::.ctor() */ },
		{ /* #6291 = 0x3125 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FAC /* AppKit.NSScrubberLayout */ },
		{ /* #6292 = 0x3127 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FA5 /* AppKit.NSScrubberFlowLayout */ },
		{ /* #6293 = 0x3129 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FA6 /* AppKit.INSScrubberFlowLayoutDelegate */ },
		{ /* #6294 = 0x312B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FA8 /* AppKit.NSScrubberFlowLayoutDelegateWrapper */ },
		{ /* #6295 = 0x312D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FA9 /* AppKit.NSScrubberFlowLayoutDelegate */ },
		{ /* #6296 = 0x312F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014C3E /* System.Void AppKit.NSScrubberFlowLayoutDelegate::.ctor() */ },
		{ /* #6297 = 0x3131 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FAB /* AppKit.NSScrubberItemView */ },
		{ /* #6298 = 0x3133 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FAA /* AppKit.NSScrubberImageItemView */ },
		{ /* #6299 = 0x3135 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FAD /* AppKit.NSScrubberLayoutAttributes */ },
		{ /* #6300 = 0x3137 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FAF /* AppKit.NSScrubberProportionalLayout */ },
		{ /* #6301 = 0x3139 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FB0 /* AppKit.NSScrubberSelectionStyle */ },
		{ /* #6302 = 0x313B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FB1 /* AppKit.NSScrubberSelectionView */ },
		{ /* #6303 = 0x313D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FB2 /* AppKit.NSScrubberTextItemView */ },
		{ /* #6304 = 0x313F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FB4 /* AppKit.NSSearchFieldCell */ },
		{ /* #6305 = 0x3141 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FB5 /* AppKit.INSSearchFieldDelegate */ },
		{ /* #6306 = 0x3143 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FB7 /* AppKit.NSSearchFieldDelegateWrapper */ },
		{ /* #6307 = 0x3145 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FB8 /* AppKit.NSSearchFieldDelegate */ },
		{ /* #6308 = 0x3147 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014CE4 /* System.Void AppKit.NSSearchFieldDelegate::.ctor() */ },
		{ /* #6309 = 0x3149 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FB9 /* AppKit.NSSearchToolbarItem */ },
		{ /* #6310 = 0x314B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002063 /* AppKit.INSTextContent */ },
		{ /* #6311 = 0x314D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002064 /* AppKit.NSTextContentWrapper */ },
		{ /* #6312 = 0x314F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D35 /* AppKit.NSTextField */ },
		{ /* #6313 = 0x3151 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FBA /* AppKit.NSSecureTextField */ },
		{ /* #6314 = 0x3153 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FBB /* AppKit.NSSecureTextFieldCell */ },
		{ /* #6315 = 0x3155 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FBE /* AppKit.NSSegmentedCell */ },
		{ /* #6316 = 0x3157 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FC4 /* AppKit.NSSeguePerforming */ },
		{ /* #6317 = 0x3159 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014D4D /* System.Void AppKit.NSSeguePerforming::.ctor() */ },
		{ /* #6318 = 0x315B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FC8 /* AppKit.INSServicesMenuRequestor */ },
		{ /* #6319 = 0x315D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FCA /* AppKit.NSServicesMenuRequestorWrapper */ },
		{ /* #6320 = 0x315F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FCB /* AppKit.NSShadow */ },
		{ /* #6321 = 0x3161 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FD7 /* AppKit.INSSharingServicePickerDelegate */ },
		{ /* #6322 = 0x3163 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FD9 /* AppKit.NSSharingServicePickerDelegateWrapper */ },
		{ /* #6323 = 0x3165 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FDA /* AppKit.NSSharingServicePickerDelegate */ },
		{ /* #6324 = 0x3167 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014DB4 /* System.Void AppKit.NSSharingServicePickerDelegate::.ctor() */ },
		{ /* #6325 = 0x3169 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FDB /* AppKit.NSSharingServicePickerToolbarItem */ },
		{ /* #6326 = 0x316B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FDC /* AppKit.INSSharingServicePickerToolbarItemDelegate */ },
		{ /* #6327 = 0x316D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FDD /* AppKit.NSSharingServicePickerToolbarItemDelegateWrapper */ },
		{ /* #6328 = 0x316F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FDE /* AppKit.NSSharingServicePickerToolbarItemDelegate */ },
		{ /* #6329 = 0x3171 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014DC8 /* System.Void AppKit.NSSharingServicePickerToolbarItemDelegate::.ctor() */ },
		{ /* #6330 = 0x3173 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FDF /* AppKit.NSSharingServicePickerTouchBarItem */ },
		{ /* #6331 = 0x3175 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FE0 /* AppKit.INSSharingServicePickerTouchBarItemDelegate */ },
		{ /* #6332 = 0x3177 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FE1 /* AppKit.NSSharingServicePickerTouchBarItemDelegateWrapper */ },
		{ /* #6333 = 0x3179 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FE2 /* AppKit.NSSharingServicePickerTouchBarItemDelegate */ },
		{ /* #6334 = 0x317B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014DDE /* System.Void AppKit.NSSharingServicePickerTouchBarItemDelegate::.ctor() */ },
		{ /* #6335 = 0x317D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FE4 /* AppKit.NSSliderAccessoryBehavior */ },
		{ /* #6336 = 0x317F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FE5 /* AppKit.NSSliderCell */ },
		{ /* #6337 = 0x3181 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FE8 /* AppKit.INSSoundDelegate */ },
		{ /* #6338 = 0x3183 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FEA /* AppKit.NSSoundDelegateWrapper */ },
		{ /* #6339 = 0x3185 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FEB /* AppKit.NSSoundDelegate */ },
		{ /* #6340 = 0x3187 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014F62 /* System.Void AppKit.NSSoundDelegate::.ctor() */ },
		{ /* #6341 = 0x3189 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FED /* AppKit.NSSpeechRecognizer */ },
		{ /* #6342 = 0x318B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FEE /* AppKit.INSSpeechRecognizerDelegate */ },
		{ /* #6343 = 0x318D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FF0 /* AppKit.NSSpeechRecognizerDelegateWrapper */ },
		{ /* #6344 = 0x318F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FF1 /* AppKit.NSSpeechRecognizerDelegate */ },
		{ /* #6345 = 0x3191 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014F7C /* System.Void AppKit.NSSpeechRecognizerDelegate::.ctor() */ },
		{ /* #6346 = 0x3193 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FF2 /* AppKit.INSSpeechSynthesizerDelegate */ },
		{ /* #6347 = 0x3195 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FF4 /* AppKit.NSSpeechSynthesizerDelegateWrapper */ },
		{ /* #6348 = 0x3197 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FF5 /* AppKit.NSSpeechSynthesizerDelegate */ },
		{ /* #6349 = 0x3199 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014F86 /* System.Void AppKit.NSSpeechSynthesizerDelegate::.ctor() */ },
		{ /* #6350 = 0x319B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FFA /* AppKit.INSSplitViewDelegate */ },
		{ /* #6351 = 0x319D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FFC /* AppKit.NSSplitViewDelegateWrapper */ },
		{ /* #6352 = 0x319F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FF9 /* AppKit.NSSplitViewController */ },
		{ /* #6353 = 0x31A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FFD /* AppKit.NSSplitViewDelegate */ },
		{ /* #6354 = 0x31A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6014FE4 /* System.Void AppKit.NSSplitViewDelegate::.ctor() */ },
		{ /* #6355 = 0x31A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FFF /* AppKit.NSSplitViewItem */ },
		{ /* #6356 = 0x31A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002001 /* AppKit.INSSpringLoadingDestination */ },
		{ /* #6357 = 0x31A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002003 /* AppKit.NSSpringLoadingDestinationWrapper */ },
		{ /* #6358 = 0x31AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002004 /* AppKit.NSSpringLoadingDestination */ },
		{ /* #6359 = 0x31AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015023 /* System.Void AppKit.NSSpringLoadingDestination::.ctor() */ },
		{ /* #6360 = 0x31AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002007 /* AppKit.NSStackView */ },
		{ /* #6361 = 0x31B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002008 /* AppKit.INSStackViewDelegate */ },
		{ /* #6362 = 0x31B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200200A /* AppKit.NSStackViewDelegateWrapper */ },
		{ /* #6363 = 0x31B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200200B /* AppKit.NSStackViewDelegate */ },
		{ /* #6364 = 0x31B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601505D /* System.Void AppKit.NSStackViewDelegate::.ctor() */ },
		{ /* #6365 = 0x31B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002010 /* AppKit.INSStandardKeyBindingResponding */ },
		{ /* #6366 = 0x31BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002012 /* AppKit.NSStandardKeyBindingRespondingWrapper */ },
		{ /* #6367 = 0x31BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002013 /* AppKit.NSStatusBarButton */ },
		{ /* #6368 = 0x31BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002015 /* AppKit.NSStepper */ },
		{ /* #6369 = 0x31C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002016 /* AppKit.NSStepperCell */ },
		{ /* #6370 = 0x31C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002017 /* AppKit.NSStepperTouchBarItem */ },
		{ /* #6371 = 0x31C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002018 /* AppKit.NSStoryboard */ },
		{ /* #6372 = 0x31C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002019 /* AppKit.NSStoryboardSegue */ },
		{ /* #6373 = 0x31C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200201D /* AppKit.NSStringDrawingContext */ },
		{ /* #6374 = 0x31CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200201F /* AppKit.NSSwitch */ },
		{ /* #6375 = 0x31CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002020 /* AppKit.NSTableCellView */ },
		{ /* #6376 = 0x31CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002021 /* AppKit.NSTableColumn */ },
		{ /* #6377 = 0x31D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002023 /* AppKit.NSTableHeaderCell */ },
		{ /* #6378 = 0x31D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002024 /* AppKit.NSTableHeaderView */ },
		{ /* #6379 = 0x31D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002026 /* AppKit.NSTableRowView */ },
		{ /* #6380 = 0x31D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200202D /* AppKit.INSTableViewDataSource */ },
		{ /* #6381 = 0x31D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200202F /* AppKit.NSTableViewDataSourceWrapper */ },
		{ /* #6382 = 0x31DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002030 /* AppKit.NSTableViewDataSource */ },
		{ /* #6383 = 0x31DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60151FE /* System.Void AppKit.NSTableViewDataSource::.ctor() */ },
		{ /* #6384 = 0x31DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002031 /* AppKit.INSTableViewDelegate */ },
		{ /* #6385 = 0x31E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002033 /* AppKit.NSTableViewDelegateWrapper */ },
		{ /* #6386 = 0x31E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002034 /* AppKit.NSTableViewDelegate */ },
		{ /* #6387 = 0x31E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601522B /* System.Void AppKit.NSTableViewDelegate::.ctor() */ },
		{ /* #6388 = 0x31E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002039 /* AppKit.NSTableViewRowAction */ },
		{ /* #6389 = 0x31E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200203D /* AppKit.NSTableViewSource */ },
		{ /* #6390 = 0x31EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015278 /* System.Void AppKit.NSTableViewSource::.ctor() */ },
		{ /* #6391 = 0x31ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002046 /* AppKit.INSTabViewDelegate */ },
		{ /* #6392 = 0x31EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002048 /* AppKit.NSTabViewDelegateWrapper */ },
		{ /* #6393 = 0x31F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020EB /* AppKit.INSToolbarDelegate */ },
		{ /* #6394 = 0x31F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020ED /* AppKit.NSToolbarDelegateWrapper */ },
		{ /* #6395 = 0x31F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002044 /* AppKit.NSTabViewController */ },
		{ /* #6396 = 0x31F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002049 /* AppKit.NSTabViewDelegate */ },
		{ /* #6397 = 0x31F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015309 /* System.Void AppKit.NSTabViewDelegate::.ctor() */ },
		{ /* #6398 = 0x31FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200204A /* AppKit.NSTabViewItem */ },
		{ /* #6399 = 0x31FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002053 /* AppKit.INSTextAttachmentContainer */ },
		{ /* #6400 = 0x31FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002054 /* AppKit.NSTextAttachmentContainerWrapper */ },
		{ /* #6401 = 0x3201 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002056 /* AppKit.INSTextAttachmentLayout */ },
		{ /* #6402 = 0x3203 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002057 /* AppKit.NSTextAttachmentLayoutWrapper */ },
		{ /* #6403 = 0x3205 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200204F /* AppKit.NSTextAttachment */ },
		{ /* #6404 = 0x3207 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002051 /* AppKit.INSTextAttachmentCellProtocol */ },
		{ /* #6405 = 0x3209 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002052 /* AppKit.NSTextAttachmentCellProtocolWrapper */ },
		{ /* #6406 = 0x320B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002050 /* AppKit.NSTextAttachmentCell */ },
		{ /* #6407 = 0x320D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002055 /* AppKit.NSTextAttachmentContainer */ },
		{ /* #6408 = 0x320F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60153F0 /* System.Void AppKit.NSTextAttachmentContainer::.ctor() */ },
		{ /* #6409 = 0x3211 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002058 /* AppKit.NSTextAttachmentViewProvider */ },
		{ /* #6410 = 0x3213 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002059 /* AppKit.NSTextBlock */ },
		{ /* #6411 = 0x3215 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200208F /* AppKit.INSTextInputClient */ },
		{ /* #6412 = 0x3217 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002091 /* AppKit.NSTextInputClientWrapper */ },
		{ /* #6413 = 0x3219 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002094 /* AppKit.INSTextInputTraits */ },
		{ /* #6414 = 0x321B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002096 /* AppKit.NSTextInputTraitsWrapper */ },
		{ /* #6415 = 0x321D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200205E /* AppKit.INSTextCheckingClient */ },
		{ /* #6416 = 0x321F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200205F /* AppKit.NSTextCheckingClientWrapper */ },
		{ /* #6417 = 0x3221 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002060 /* AppKit.NSTextCheckingController */ },
		{ /* #6418 = 0x3223 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002066 /* AppKit.INSTextContentManagerDelegate */ },
		{ /* #6419 = 0x3225 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002068 /* AppKit.NSTextContentManagerDelegateWrapper */ },
		{ /* #6420 = 0x3227 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002069 /* AppKit.NSTextContentManagerDelegate */ },
		{ /* #6421 = 0x3229 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60154A1 /* System.Void AppKit.NSTextContentManagerDelegate::.ctor() */ },
		{ /* #6422 = 0x322B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002077 /* AppKit.INSTextElementProvider */ },
		{ /* #6423 = 0x322D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002079 /* AppKit.NSTextElementProviderWrapper */ },
		{ /* #6424 = 0x322F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002065 /* AppKit.NSTextContentManager */ },
		{ /* #6425 = 0x3231 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020C4 /* AppKit.INSTextStorageObserving */ },
		{ /* #6426 = 0x3233 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020C5 /* AppKit.NSTextStorageObservingWrapper */ },
		{ /* #6427 = 0x3235 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200206B /* AppKit.NSTextContentStorage */ },
		{ /* #6428 = 0x3237 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200206C /* AppKit.INSTextContentStorageDelegate */ },
		{ /* #6429 = 0x3239 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200206E /* AppKit.NSTextContentStorageDelegateWrapper */ },
		{ /* #6430 = 0x323B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200206F /* AppKit.NSTextContentStorageDelegate */ },
		{ /* #6431 = 0x323D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60154BE /* System.Void AppKit.NSTextContentStorageDelegate::.ctor() */ },
		{ /* #6432 = 0x323F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002075 /* AppKit.NSTextDelegate */ },
		{ /* #6433 = 0x3241 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60154D0 /* System.Void AppKit.NSTextDelegate::.ctor() */ },
		{ /* #6434 = 0x3243 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002076 /* AppKit.NSTextElement */ },
		{ /* #6435 = 0x3245 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002082 /* AppKit.NSTextFinder */ },
		{ /* #6436 = 0x3247 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002084 /* AppKit.INSTextFinderBarContainer */ },
		{ /* #6437 = 0x3249 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002086 /* AppKit.NSTextFinderBarContainerWrapper */ },
		{ /* #6438 = 0x324B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002087 /* AppKit.NSTextFinderBarContainer */ },
		{ /* #6439 = 0x324D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015553 /* System.Void AppKit.NSTextFinderBarContainer::.ctor() */ },
		{ /* #6440 = 0x324F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002088 /* AppKit.INSTextFinderClient */ },
		{ /* #6441 = 0x3251 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200208A /* AppKit.NSTextFinderClientWrapper */ },
		{ /* #6442 = 0x3253 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200208D /* AppKit.INSTextInput */ },
		{ /* #6443 = 0x3255 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200208E /* AppKit.NSTextInputWrapper */ },
		{ /* #6444 = 0x3257 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002092 /* AppKit.NSTextInputClient */ },
		{ /* #6445 = 0x3259 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60155A1 /* System.Void AppKit.NSTextInputClient::.ctor() */ },
		{ /* #6446 = 0x325B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002098 /* AppKit.NSTextLayoutFragment */ },
		{ /* #6447 = 0x325D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020B3 /* AppKit.INSTextSelectionDataSource */ },
		{ /* #6448 = 0x325F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020B5 /* AppKit.NSTextSelectionDataSourceWrapper */ },
		{ /* #6449 = 0x3261 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200209B /* AppKit.NSTextLayoutManager */ },
		{ /* #6450 = 0x3263 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200209C /* AppKit.INSTextLayoutManagerDelegate */ },
		{ /* #6451 = 0x3265 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200209E /* AppKit.NSTextLayoutManagerDelegateWrapper */ },
		{ /* #6452 = 0x3267 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200209F /* AppKit.NSTextLayoutManagerDelegate */ },
		{ /* #6453 = 0x3269 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015635 /* System.Void AppKit.NSTextLayoutManagerDelegate::.ctor() */ },
		{ /* #6454 = 0x326B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020A5 /* AppKit.NSTextLineFragment */ },
		{ /* #6455 = 0x326D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020A6 /* AppKit.NSTextList */ },
		{ /* #6456 = 0x326F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020AE /* AppKit.NSTextParagraph */ },
		{ /* #6457 = 0x3271 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020A7 /* AppKit.NSTextListElement */ },
		{ /* #6458 = 0x3273 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020AB /* AppKit.INSTextLocation */ },
		{ /* #6459 = 0x3275 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020AC /* AppKit.NSTextLocationWrapper */ },
		{ /* #6460 = 0x3277 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020AF /* AppKit.NSTextRange */ },
		{ /* #6461 = 0x3279 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020B1 /* AppKit.NSTextSelection */ },
		{ /* #6462 = 0x327B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020B6 /* AppKit.NSTextSelectionDataSource */ },
		{ /* #6463 = 0x327D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60156CC /* System.Void AppKit.NSTextSelectionDataSource::.ctor() */ },
		{ /* #6464 = 0x327F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020B8 /* AppKit.NSTextSelectionNavigation */ },
		{ /* #6465 = 0x3281 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020BF /* AppKit.INSTextStorageDelegate */ },
		{ /* #6466 = 0x3283 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020C1 /* AppKit.NSTextStorageDelegateWrapper */ },
		{ /* #6467 = 0x3285 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020C2 /* AppKit.NSTextStorageDelegate */ },
		{ /* #6468 = 0x3287 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60156F8 /* System.Void AppKit.NSTextStorageDelegate::.ctor() */ },
		{ /* #6469 = 0x3289 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020C6 /* AppKit.NSTextTab */ },
		{ /* #6470 = 0x328B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020C7 /* AppKit.NSTextTable */ },
		{ /* #6471 = 0x328D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020C8 /* AppKit.NSTextTableBlock */ },
		{ /* #6472 = 0x328F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020D3 /* AppKit.NSTextViewDelegate */ },
		{ /* #6473 = 0x3291 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60158B3 /* System.Void AppKit.NSTextViewDelegate::.ctor() */ },
		{ /* #6474 = 0x3293 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020D4 /* AppKit.NSTextViewportLayoutController */ },
		{ /* #6475 = 0x3295 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020D5 /* AppKit.INSTextViewportLayoutControllerDelegate */ },
		{ /* #6476 = 0x3297 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020D7 /* AppKit.NSTextViewportLayoutControllerDelegateWrapper */ },
		{ /* #6477 = 0x3299 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020D8 /* AppKit.NSTextViewportLayoutControllerDelegate */ },
		{ /* #6478 = 0x329B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60158E6 /* System.Void AppKit.NSTextViewportLayoutControllerDelegate::.ctor() */ },
		{ /* #6479 = 0x329D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020DB /* AppKit.NSTintConfiguration */ },
		{ /* #6480 = 0x329F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020DC /* AppKit.NSTitlebarAccessoryViewController */ },
		{ /* #6481 = 0x32A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020DF /* AppKit.NSTokenField */ },
		{ /* #6482 = 0x32A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020E0 /* AppKit.NSTokenFieldCell */ },
		{ /* #6483 = 0x32A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020E1 /* AppKit.INSTokenFieldCellDelegate */ },
		{ /* #6484 = 0x32A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020E3 /* AppKit.NSTokenFieldCellDelegateWrapper */ },
		{ /* #6485 = 0x32A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020E4 /* AppKit.NSTokenFieldCellDelegate */ },
		{ /* #6486 = 0x32AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015949 /* System.Void AppKit.NSTokenFieldCellDelegate::.ctor() */ },
		{ /* #6487 = 0x32AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020E5 /* AppKit.INSTokenFieldDelegate */ },
		{ /* #6488 = 0x32AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020E7 /* AppKit.NSTokenFieldDelegateWrapper */ },
		{ /* #6489 = 0x32B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020E8 /* AppKit.NSTokenFieldDelegate */ },
		{ /* #6490 = 0x32B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015961 /* System.Void AppKit.NSTokenFieldDelegate::.ctor() */ },
		{ /* #6491 = 0x32B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020EE /* AppKit.NSToolbarDelegate */ },
		{ /* #6492 = 0x32B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60159C0 /* System.Void AppKit.NSToolbarDelegate::.ctor() */ },
		{ /* #6493 = 0x32B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020F0 /* AppKit.NSToolbarItemGroup */ },
		{ /* #6494 = 0x32BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020F3 /* AppKit.INSToolbarItemValidation */ },
		{ /* #6495 = 0x32BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020F4 /* AppKit.NSToolbarItemValidationWrapper */ },
		{ /* #6496 = 0x32BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020FA /* AppKit.INSTouchBarDelegate */ },
		{ /* #6497 = 0x32C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020FC /* AppKit.NSTouchBarDelegateWrapper */ },
		{ /* #6498 = 0x32C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020FD /* AppKit.NSTouchBarDelegate */ },
		{ /* #6499 = 0x32C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015A08 /* System.Void AppKit.NSTouchBarDelegate::.ctor() */ },
		{ /* #6500 = 0x32C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002106 /* AppKit.NSTrackingArea */ },
		{ /* #6501 = 0x32C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002108 /* AppKit.NSTrackingSeparatorToolbarItem */ },
		{ /* #6502 = 0x32CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002109 /* AppKit.NSTreeNode */ },
		{ /* #6503 = 0x32CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002111 /* AppKit.NSUserDefaultsController */ },
		{ /* #6504 = 0x32CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002114 /* AppKit.NSUserInterfaceCompressionOptions */ },
		{ /* #6505 = 0x32D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D93 /* AppKit.NSAnimation */ },
		{ /* #6506 = 0x32D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200211F /* AppKit.NSViewAnimation */ },
		{ /* #6507 = 0x32D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002121 /* AppKit.INSViewControllerPresentationAnimator */ },
		{ /* #6508 = 0x32D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002122 /* AppKit.NSViewControllerPresentationAnimatorWrapper */ },
		{ /* #6509 = 0x32D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002123 /* AppKit.NSViewControllerPresentationAnimator */ },
		{ /* #6510 = 0x32DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015B74 /* System.Void AppKit.NSViewControllerPresentationAnimator::.ctor() */ },
		{ /* #6511 = 0x32DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200212D /* AppKit.NSVisualEffectView */ },
		{ /* #6512 = 0x32DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002139 /* AppKit.NSWindowDelegate */ },
		{ /* #6513 = 0x32E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015BF1 /* System.Void AppKit.NSWindowDelegate::.ctor() */ },
		{ /* #6514 = 0x32E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002142 /* AppKit.NSWindowRestoration */ },
		{ /* #6515 = 0x32E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015C26 /* System.Void AppKit.NSWindowRestoration::.ctor() */ },
		{ /* #6516 = 0x32E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002145 /* AppKit.NSWindowTab */ },
		{ /* #6517 = 0x32E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002147 /* AppKit.NSWindowTabGroup */ },
		{ /* #6518 = 0x32EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200214B /* AppKit.NSWorkspaceAuthorization */ },
		{ /* #6519 = 0x32ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200214F /* AppKit.NSWorkspaceOpenConfiguration */ },
		{ /* #6520 = 0x32EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20021FA /* Accounts.ACAccount */ },
		{ /* #6521 = 0x32F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20021FB /* Accounts.ACAccountCredential */ },
		{ /* #6522 = 0x32F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20021FE /* Accounts.ACAccountType */ },
		{ /* #6523 = 0x32F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002215 /* AVKit.AVCaptureView */ },
		{ /* #6524 = 0x32F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002217 /* AVKit.IAVCaptureViewDelegate */ },
		{ /* #6525 = 0x32F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002218 /* AVKit.AVCaptureViewDelegateWrapper */ },
		{ /* #6526 = 0x32FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002219 /* AVKit.AVCaptureViewDelegate */ },
		{ /* #6527 = 0x32FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015F8D /* System.Void AVKit.AVCaptureViewDelegate::.ctor() */ },
		{ /* #6528 = 0x32FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200221A /* AVKit.AVPictureInPictureController */ },
		{ /* #6529 = 0x3301 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200221B /* AVKit.AVPictureInPictureControllerContentSource */ },
		{ /* #6530 = 0x3303 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200221C /* AVKit.IAVPictureInPictureControllerDelegate */ },
		{ /* #6531 = 0x3305 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200221E /* AVKit.AVPictureInPictureControllerDelegateWrapper */ },
		{ /* #6532 = 0x3307 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200221F /* AVKit.AVPictureInPictureControllerDelegate */ },
		{ /* #6533 = 0x3309 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015FBB /* System.Void AVKit.AVPictureInPictureControllerDelegate::.ctor() */ },
		{ /* #6534 = 0x330B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002220 /* AVKit.IAVPictureInPictureSampleBufferPlaybackDelegate */ },
		{ /* #6535 = 0x330D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002222 /* AVKit.AVPictureInPictureSampleBufferPlaybackDelegateWrapper */ },
		{ /* #6536 = 0x330F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002223 /* AVKit.AVPictureInPictureSampleBufferPlaybackDelegate */ },
		{ /* #6537 = 0x3311 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6015FD0 /* System.Void AVKit.AVPictureInPictureSampleBufferPlaybackDelegate::.ctor() */ },
		{ /* #6538 = 0x3313 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002224 /* AVKit.AVPlaybackSpeed */ },
		{ /* #6539 = 0x3315 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002225 /* AVKit.AVPlayerView */ },
		{ /* #6540 = 0x3317 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002227 /* AVKit.IAVPlayerViewDelegate */ },
		{ /* #6541 = 0x3319 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002229 /* AVKit.AVPlayerViewDelegateWrapper */ },
		{ /* #6542 = 0x331B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200222A /* AVKit.AVPlayerViewDelegate */ },
		{ /* #6543 = 0x331D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601601D /* System.Void AVKit.AVPlayerViewDelegate::.ctor() */ },
		{ /* #6544 = 0x331F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200222B /* AVKit.IAVPlayerViewPictureInPictureDelegate */ },
		{ /* #6545 = 0x3321 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200222D /* AVKit.AVPlayerViewPictureInPictureDelegateWrapper */ },
		{ /* #6546 = 0x3323 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200222E /* AVKit.AVPlayerViewPictureInPictureDelegate */ },
		{ /* #6547 = 0x3325 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601602D /* System.Void AVKit.AVPlayerViewPictureInPictureDelegate::.ctor() */ },
		{ /* #6548 = 0x3327 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002230 /* AVKit.AVRoutePickerView */ },
		{ /* #6549 = 0x3329 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002232 /* AVKit.IAVRoutePickerViewDelegate */ },
		{ /* #6550 = 0x332B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002234 /* AVKit.AVRoutePickerViewDelegateWrapper */ },
		{ /* #6551 = 0x332D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002235 /* AVKit.AVRoutePickerViewDelegate */ },
		{ /* #6552 = 0x332F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601604C /* System.Void AVKit.AVRoutePickerViewDelegate::.ctor() */ },
		{ /* #6553 = 0x3331 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002236 /* AVFoundation.AVAssetResourceLoadingDataRequest */ },
		{ /* #6554 = 0x3333 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002237 /* AVFoundation.AVAudioBuffer */ },
		{ /* #6555 = 0x3335 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002238 /* AVFoundation.AVAudioChannelLayout */ },
		{ /* #6556 = 0x3337 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200223A /* AVFoundation.AVAudioFormat */ },
		{ /* #6557 = 0x3339 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200223B /* AVFoundation.AVAudioPlayer */ },
		{ /* #6558 = 0x333B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200223C /* AVFoundation.AVAudioRecorder */ },
		{ /* #6559 = 0x333D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200235C /* AVFoundation.AVCaptureInput */ },
		{ /* #6560 = 0x333F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200223F /* AVFoundation.AVCaptureDeviceInput */ },
		{ /* #6561 = 0x3341 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002241 /* AVFoundation.AVCaptureSynchronizedDataCollection */ },
		{ /* #6562 = 0x3343 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002243 /* AVFoundation.AVContentKeyResponse */ },
		{ /* #6563 = 0x3345 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002244 /* AVFoundation.AVDepthData */ },
		{ /* #6564 = 0x3347 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002247 /* AVFoundation.AVPlayerLayer */ },
		{ /* #6565 = 0x3349 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200224C /* AVFoundation.AVPlayerLooper */ },
		{ /* #6566 = 0x334B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200224D /* AVFoundation.AVTextStyleRule */ },
		{ /* #6567 = 0x334D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022E0 /* AVFoundation.IAVAudioPlayerDelegate */ },
		{ /* #6568 = 0x334F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022E2 /* AVFoundation.AVAudioPlayerDelegateWrapper */ },
		{ /* #6569 = 0x3351 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022E3 /* AVFoundation.AVAudioPlayerDelegate */ },
		{ /* #6570 = 0x3353 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60167F2 /* System.Void AVFoundation.AVAudioPlayerDelegate::.ctor() */ },
		{ /* #6571 = 0x3355 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200226A /* AVFoundation.InternalAVAudioPlayerDelegate */ },
		{ /* #6572 = 0x3357 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6016309 /* System.Void AVFoundation.InternalAVAudioPlayerDelegate::FinishedPlaying(AVFoundation.AVAudioPlayer,System.Boolean) */ },
		{ /* #6573 = 0x3359 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601630A /* System.Void AVFoundation.InternalAVAudioPlayerDelegate::DecoderError(AVFoundation.AVAudioPlayer,Foundation.NSError) */ },
		{ /* #6574 = 0x335B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6016308 /* System.Void AVFoundation.InternalAVAudioPlayerDelegate::.ctor() */ },
		{ /* #6575 = 0x335D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022E8 /* AVFoundation.IAVAudioRecorderDelegate */ },
		{ /* #6576 = 0x335F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022EA /* AVFoundation.AVAudioRecorderDelegateWrapper */ },
		{ /* #6577 = 0x3361 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022EB /* AVFoundation.AVAudioRecorderDelegate */ },
		{ /* #6578 = 0x3363 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601682C /* System.Void AVFoundation.AVAudioRecorderDelegate::.ctor() */ },
		{ /* #6579 = 0x3365 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200226B /* AVFoundation.InternalAVAudioRecorderDelegate */ },
		{ /* #6580 = 0x3367 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601630C /* System.Void AVFoundation.InternalAVAudioRecorderDelegate::FinishedRecording(AVFoundation.AVAudioRecorder,System.Boolean) */ },
		{ /* #6581 = 0x3369 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601630D /* System.Void AVFoundation.InternalAVAudioRecorderDelegate::EncoderError(AVFoundation.AVAudioRecorder,Foundation.NSError) */ },
		{ /* #6582 = 0x336B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601630B /* System.Void AVFoundation.InternalAVAudioRecorderDelegate::.ctor() */ },
		{ /* #6583 = 0x336D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200226F /* AVFoundation.AVAggregateAssetDownloadTask */ },
		{ /* #6584 = 0x336F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002271 /* AVFoundation.AVAssetCache */ },
		{ /* #6585 = 0x3371 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002272 /* AVFoundation.AVAssetDownloadConfiguration */ },
		{ /* #6586 = 0x3373 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002273 /* AVFoundation.AVAssetDownloadContentConfiguration */ },
		{ /* #6587 = 0x3375 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002274 /* AVFoundation.IAVAssetDownloadDelegate */ },
		{ /* #6588 = 0x3377 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002276 /* AVFoundation.AVAssetDownloadDelegateWrapper */ },
		{ /* #6589 = 0x3379 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002277 /* AVFoundation.AVAssetDownloadDelegate */ },
		{ /* #6590 = 0x337B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6016387 /* System.Void AVFoundation.AVAssetDownloadDelegate::.ctor() */ },
		{ /* #6591 = 0x337D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200227B /* AVFoundation.AVAssetDownloadStorageManagementPolicy */ },
		{ /* #6592 = 0x337F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200227C /* AVFoundation.AVAssetDownloadStorageManager */ },
		{ /* #6593 = 0x3381 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200227D /* AVFoundation.AVAssetDownloadTask */ },
		{ /* #6594 = 0x3383 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200135F /* Foundation.NSUrlSession */ },
		{ /* #6595 = 0x3385 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200227F /* AVFoundation.AVAssetDownloadUrlSession */ },
		{ /* #6596 = 0x3387 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002285 /* AVFoundation.AVAssetImageGenerator */ },
		{ /* #6597 = 0x3389 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002287 /* AVFoundation.AVAssetReader */ },
		{ /* #6598 = 0x338B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200228C /* AVFoundation.AVAssetReaderOutput */ },
		{ /* #6599 = 0x338D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002288 /* AVFoundation.AVAssetReaderAudioMixOutput */ },
		{ /* #6600 = 0x338F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002289 /* AVFoundation.IAVAssetReaderCaptionValidationHandling */ },
		{ /* #6601 = 0x3391 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200228B /* AVFoundation.AVAssetReaderCaptionValidationHandlingWrapper */ },
		{ /* #6602 = 0x3393 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200228D /* AVFoundation.AVAssetReaderOutputCaptionAdaptor */ },
		{ /* #6603 = 0x3395 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200228E /* AVFoundation.AVAssetReaderOutputMetadataAdaptor */ },
		{ /* #6604 = 0x3397 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200228F /* AVFoundation.AVAssetReaderSampleReferenceOutput */ },
		{ /* #6605 = 0x3399 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002291 /* AVFoundation.AVAssetReaderTrackOutput */ },
		{ /* #6606 = 0x339B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002292 /* AVFoundation.AVAssetReaderVideoCompositionOutput */ },
		{ /* #6607 = 0x339D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002294 /* AVFoundation.AVAssetResourceLoader */ },
		{ /* #6608 = 0x339F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002295 /* AVFoundation.IAVAssetResourceLoaderDelegate */ },
		{ /* #6609 = 0x33A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002297 /* AVFoundation.AVAssetResourceLoaderDelegateWrapper */ },
		{ /* #6610 = 0x33A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002298 /* AVFoundation.AVAssetResourceLoaderDelegate */ },
		{ /* #6611 = 0x33A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60164C5 /* System.Void AVFoundation.AVAssetResourceLoaderDelegate::.ctor() */ },
		{ /* #6612 = 0x33A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002299 /* AVFoundation.AVAssetResourceLoadingContentInformationRequest */ },
		{ /* #6613 = 0x33A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200229A /* AVFoundation.AVAssetResourceLoadingRequest */ },
		{ /* #6614 = 0x33AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200229B /* AVFoundation.AVAssetResourceLoadingRequestor */ },
		{ /* #6615 = 0x33AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200229C /* AVFoundation.AVAssetResourceRenewalRequest */ },
		{ /* #6616 = 0x33AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200229D /* AVFoundation.AVAssetSegmentReport */ },
		{ /* #6617 = 0x33B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200229E /* AVFoundation.AVAssetSegmentReportSampleInformation */ },
		{ /* #6618 = 0x33B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200229F /* AVFoundation.AVAssetSegmentTrackReport */ },
		{ /* #6619 = 0x33B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022A2 /* AVFoundation.AVAssetTrackGroup */ },
		{ /* #6620 = 0x33B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022A3 /* AVFoundation.AVAssetTrackSegment */ },
		{ /* #6621 = 0x33B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022A5 /* AVFoundation.AVAssetVariant */ },
		{ /* #6622 = 0x33BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022A6 /* AVFoundation.AVAssetVariantAudioAttributes */ },
		{ /* #6623 = 0x33BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022A7 /* AVFoundation.AVAssetVariantAudioRenditionSpecificAttributes */ },
		{ /* #6624 = 0x33BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022A8 /* AVFoundation.AVAssetVariantQualifier */ },
		{ /* #6625 = 0x33C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022A9 /* AVFoundation.AVAssetVariantVideoAttributes */ },
		{ /* #6626 = 0x33C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022AB /* AVFoundation.IAVAssetWriterDelegate */ },
		{ /* #6627 = 0x33C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022AD /* AVFoundation.AVAssetWriterDelegateWrapper */ },
		{ /* #6628 = 0x33C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022AE /* AVFoundation.AVAssetWriterDelegate */ },
		{ /* #6629 = 0x33C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60165BB /* System.Void AVFoundation.AVAssetWriterDelegate::.ctor() */ },
		{ /* #6630 = 0x33CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022AF /* AVFoundation.AVAssetWriterInput */ },
		{ /* #6631 = 0x33CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022B0 /* AVFoundation.AVAssetWriterInputCaptionAdaptor */ },
		{ /* #6632 = 0x33CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023C2 /* AVFoundation.AVMediaSelectionGroup */ },
		{ /* #6633 = 0x33D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022B1 /* AVFoundation.AVAssetWriterInputGroup */ },
		{ /* #6634 = 0x33D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022B4 /* AVFoundation.AVAssetWriterInputMetadataAdaptor */ },
		{ /* #6635 = 0x33D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022B5 /* AVFoundation.AVAssetWriterInputPassDescription */ },
		{ /* #6636 = 0x33D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022B6 /* AVFoundation.AVAssetWriterInputPixelBufferAdaptor */ },
		{ /* #6637 = 0x33D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022B8 /* AVFoundation.AVAsynchronousCIImageFilteringRequest */ },
		{ /* #6638 = 0x33DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022B9 /* AVFoundation.IAVAsynchronousKeyValueLoading */ },
		{ /* #6639 = 0x33DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022BA /* AVFoundation.AVAsynchronousKeyValueLoadingWrapper */ },
		{ /* #6640 = 0x33DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022BB /* AVFoundation.AVAsynchronousKeyValueLoading */ },
		{ /* #6641 = 0x33E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601663A /* System.Void AVFoundation.AVAsynchronousKeyValueLoading::.ctor() */ },
		{ /* #6642 = 0x33E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022BD /* AVFoundation.IAVAudio3DMixing */ },
		{ /* #6643 = 0x33E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022BE /* AVFoundation.AVAudio3DMixingWrapper */ },
		{ /* #6644 = 0x33E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022BF /* AVFoundation.AVAudio3DMixing */ },
		{ /* #6645 = 0x33E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6016671 /* System.Void AVFoundation.AVAudio3DMixing::.ctor() */ },
		{ /* #6646 = 0x33EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022C5 /* AVFoundation.AVAudioCompressedBuffer */ },
		{ /* #6647 = 0x33ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022C6 /* AVFoundation.AVAudioConnectionPoint */ },
		{ /* #6648 = 0x33EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022C7 /* AVFoundation.AVAudioConverter */ },
		{ /* #6649 = 0x33F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022D0 /* AVFoundation.AVAudioEnvironmentDistanceAttenuationParameters */ },
		{ /* #6650 = 0x33F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022DD /* AVFoundation.AVAudioNode */ },
		{ /* #6651 = 0x33F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002301 /* AVFoundation.IAVAudioStereoMixing */ },
		{ /* #6652 = 0x33F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002302 /* AVFoundation.AVAudioStereoMixingWrapper */ },
		{ /* #6653 = 0x33F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022D9 /* AVFoundation.IAVAudioMixing */ },
		{ /* #6654 = 0x33FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022DA /* AVFoundation.AVAudioMixingWrapper */ },
		{ /* #6655 = 0x33FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022D1 /* AVFoundation.AVAudioEnvironmentNode */ },
		{ /* #6656 = 0x33FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022D3 /* AVFoundation.AVAudioEnvironmentReverbParameters */ },
		{ /* #6657 = 0x3401 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022D4 /* AVFoundation.AVAudioFile */ },
		{ /* #6658 = 0x3403 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022D6 /* AVFoundation.AVAudioIONode */ },
		{ /* #6659 = 0x3405 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022D5 /* AVFoundation.AVAudioInputNode */ },
		{ /* #6660 = 0x3407 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022D7 /* AVFoundation.AVAudioMix */ },
		{ /* #6661 = 0x3409 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022D8 /* AVFoundation.AVAudioMixerNode */ },
		{ /* #6662 = 0x340B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022DB /* AVFoundation.AVAudioMixingDestination */ },
		{ /* #6663 = 0x340D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022DC /* AVFoundation.AVAudioMixInputParameters */ },
		{ /* #6664 = 0x340F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022DE /* AVFoundation.AVAudioOutputNode */ },
		{ /* #6665 = 0x3411 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022DF /* AVFoundation.AVAudioPcmBuffer */ },
		{ /* #6666 = 0x3413 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022EC /* AVFoundation.AVAudioRoutingArbiter */ },
		{ /* #6667 = 0x3415 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022EE /* AVFoundation.AVAudioSequencer */ },
		{ /* #6668 = 0x3417 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022FE /* AVFoundation.AVAudioSinkNode */ },
		{ /* #6669 = 0x3419 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022FF /* AVFoundation.AVAudioSourceNode */ },
		{ /* #6670 = 0x341B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002303 /* AVFoundation.AVAudioStereoMixing */ },
		{ /* #6671 = 0x341D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601689E /* System.Void AVFoundation.AVAudioStereoMixing::.ctor() */ },
		{ /* #6672 = 0x341F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002305 /* AVFoundation.AVAudioTime */ },
		{ /* #6673 = 0x3421 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002307 /* AVFoundation.AVAudioUnit */ },
		{ /* #6674 = 0x3423 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200230D /* AVFoundation.AVAudioUnitEffect */ },
		{ /* #6675 = 0x3425 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200230A /* AVFoundation.AVAudioUnitDelay */ },
		{ /* #6676 = 0x3427 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200230B /* AVFoundation.AVAudioUnitDistortion */ },
		{ /* #6677 = 0x3429 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200230E /* AVFoundation.AVAudioUnitEQ */ },
		{ /* #6678 = 0x342B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200230F /* AVFoundation.AVAudioUnitEQFilterParameters */ },
		{ /* #6679 = 0x342D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002311 /* AVFoundation.AVAudioUnitGenerator */ },
		{ /* #6680 = 0x342F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002313 /* AVFoundation.AVAudioUnitMidiInstrument */ },
		{ /* #6681 = 0x3431 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002314 /* AVFoundation.AVAudioUnitReverb */ },
		{ /* #6682 = 0x3433 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002316 /* AVFoundation.AVAudioUnitSampler */ },
		{ /* #6683 = 0x3435 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002317 /* AVFoundation.AVAudioUnitTimeEffect */ },
		{ /* #6684 = 0x3437 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002318 /* AVFoundation.AVAudioUnitTimePitch */ },
		{ /* #6685 = 0x3439 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200231A /* AVFoundation.AVAudioUnitVarispeed */ },
		{ /* #6686 = 0x343B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200231D /* AVFoundation.AVCameraCalibrationData */ },
		{ /* #6687 = 0x343D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200231E /* AVFoundation.AVCaption */ },
		{ /* #6688 = 0x343F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002320 /* AVFoundation.AVCaptionConversionAdjustment */ },
		{ /* #6689 = 0x3441 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002323 /* AVFoundation.AVCaptionConversionTimeRangeAdjustment */ },
		{ /* #6690 = 0x3443 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002324 /* AVFoundation.AVCaptionConversionValidator */ },
		{ /* #6691 = 0x3445 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002326 /* AVFoundation.AVCaptionConversionWarning */ },
		{ /* #6692 = 0x3447 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200232C /* AVFoundation.AVCaptionFormatConformer */ },
		{ /* #6693 = 0x3449 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200232D /* AVFoundation.AVCaptionGroup */ },
		{ /* #6694 = 0x344B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200232E /* AVFoundation.AVCaptionGrouper */ },
		{ /* #6695 = 0x344D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200232F /* AVFoundation.AVCaptionRegion */ },
		{ /* #6696 = 0x344F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002333 /* AVFoundation.AVCaptionRenderer */ },
		{ /* #6697 = 0x3451 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002334 /* AVFoundation.AVCaptionRendererScene */ },
		{ /* #6698 = 0x3453 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002335 /* AVFoundation.AVCaptionRuby */ },
		{ /* #6699 = 0x3455 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200233C /* AVFoundation.AVCaptureAudioChannel */ },
		{ /* #6700 = 0x3457 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002361 /* AVFoundation.AVCaptureOutput */ },
		{ /* #6701 = 0x3459 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200233D /* AVFoundation.AVCaptureAudioDataOutput */ },
		{ /* #6702 = 0x345B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200233E /* AVFoundation.IAVCaptureAudioDataOutputSampleBufferDelegate */ },
		{ /* #6703 = 0x345D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002340 /* AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegateWrapper */ },
		{ /* #6704 = 0x345F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002341 /* AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate */ },
		{ /* #6705 = 0x3461 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6016A5E /* System.Void AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate::.ctor() */ },
		{ /* #6706 = 0x3463 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002240 /* AVFoundation.AVCaptureFileOutput */ },
		{ /* #6707 = 0x3465 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002342 /* AVFoundation.AVCaptureAudioFileOutput */ },
		{ /* #6708 = 0x3467 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002343 /* AVFoundation.AVCaptureAudioPreviewOutput */ },
		{ /* #6709 = 0x3469 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002348 /* AVFoundation.AVCaptureConnection */ },
		{ /* #6710 = 0x346B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200234C /* AVFoundation.AVCaptureDeviceInputSource */ },
		{ /* #6711 = 0x346D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002352 /* AVFoundation.IAVCaptureFileOutputDelegate */ },
		{ /* #6712 = 0x346F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002354 /* AVFoundation.AVCaptureFileOutputDelegateWrapper */ },
		{ /* #6713 = 0x3471 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002355 /* AVFoundation.AVCaptureFileOutputDelegate */ },
		{ /* #6714 = 0x3473 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6016B2D /* System.Void AVFoundation.AVCaptureFileOutputDelegate::.ctor() */ },
		{ /* #6715 = 0x3475 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002356 /* AVFoundation.IAVCaptureFileOutputRecordingDelegate */ },
		{ /* #6716 = 0x3477 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002358 /* AVFoundation.AVCaptureFileOutputRecordingDelegateWrapper */ },
		{ /* #6717 = 0x3479 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002359 /* AVFoundation.AVCaptureFileOutputRecordingDelegate */ },
		{ /* #6718 = 0x347B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6016B39 /* System.Void AVFoundation.AVCaptureFileOutputRecordingDelegate::.ctor() */ },
		{ /* #6719 = 0x347D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200235D /* AVFoundation.AVCaptureInputPort */ },
		{ /* #6720 = 0x347F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002360 /* AVFoundation.AVCaptureMovieFileOutput */ },
		{ /* #6721 = 0x3481 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002363 /* AVFoundation.AVCapturePhoto */ },
		{ /* #6722 = 0x3483 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002364 /* AVFoundation.IAVCapturePhotoCaptureDelegate */ },
		{ /* #6723 = 0x3485 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002366 /* AVFoundation.AVCapturePhotoCaptureDelegateWrapper */ },
		{ /* #6724 = 0x3487 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002367 /* AVFoundation.AVCapturePhotoCaptureDelegate */ },
		{ /* #6725 = 0x3489 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6016B7E /* System.Void AVFoundation.AVCapturePhotoCaptureDelegate::.ctor() */ },
		{ /* #6726 = 0x348B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200236E /* AVFoundation.AVCaptureResolvedPhotoSettings */ },
		{ /* #6727 = 0x348D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200236F /* AVFoundation.AVCaptureScreenInput */ },
		{ /* #6728 = 0x348F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002372 /* AVFoundation.AVCaptureSynchronizedData */ },
		{ /* #6729 = 0x3491 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002376 /* AVFoundation.IAVCaptureVideoDataOutputSampleBufferDelegate */ },
		{ /* #6730 = 0x3493 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002378 /* AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegateWrapper */ },
		{ /* #6731 = 0x3495 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002379 /* AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate */ },
		{ /* #6732 = 0x3497 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6016C58 /* System.Void AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate::.ctor() */ },
		{ /* #6733 = 0x3499 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002270 /* AVFoundation.AVAsset */ },
		{ /* #6734 = 0x349B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002382 /* AVFoundation.AVComposition */ },
		{ /* #6735 = 0x349D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022A1 /* AVFoundation.AVAssetTrack */ },
		{ /* #6736 = 0x349F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002383 /* AVFoundation.AVCompositionTrack */ },
		{ /* #6737 = 0x34A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002384 /* AVFoundation.AVCompositionTrackFormatDescriptionReplacement */ },
		{ /* #6738 = 0x34A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002385 /* AVFoundation.AVCompositionTrackSegment */ },
		{ /* #6739 = 0x34A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002389 /* AVFoundation.AVContentKey */ },
		{ /* #6740 = 0x34A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200238A /* AVFoundation.IAVContentKeyRecipient */ },
		{ /* #6741 = 0x34A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200238C /* AVFoundation.AVContentKeyRecipientWrapper */ },
		{ /* #6742 = 0x34AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002395 /* AVFoundation.IAVContentKeySessionDelegate */ },
		{ /* #6743 = 0x34AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002397 /* AVFoundation.AVContentKeySessionDelegateWrapper */ },
		{ /* #6744 = 0x34AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002398 /* AVFoundation.AVContentKeySessionDelegate */ },
		{ /* #6745 = 0x34B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6016CFC /* System.Void AVFoundation.AVContentKeySessionDelegate::.ctor() */ },
		{ /* #6746 = 0x34B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200239A /* AVFoundation.AVContentKeySpecifier */ },
		{ /* #6747 = 0x34B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200239D /* AVFoundation.AVCoordinatedPlaybackParticipant */ },
		{ /* #6748 = 0x34B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200239E /* AVFoundation.AVCoordinatedPlaybackSuspension */ },
		{ /* #6749 = 0x34B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023CE /* AVFoundation.AVMetadataGroup */ },
		{ /* #6750 = 0x34BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023A1 /* AVFoundation.AVDateRangeMetadataGroup */ },
		{ /* #6751 = 0x34BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023FD /* AVFoundation.AVPlaybackCoordinator */ },
		{ /* #6752 = 0x34BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023A2 /* AVFoundation.AVDelegatingPlaybackCoordinator */ },
		{ /* #6753 = 0x34C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023A5 /* AVFoundation.AVDelegatingPlaybackCoordinatorPlaybackControlCommand */ },
		{ /* #6754 = 0x34C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023A3 /* AVFoundation.AVDelegatingPlaybackCoordinatorBufferingCommand */ },
		{ /* #6755 = 0x34C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023A4 /* AVFoundation.AVDelegatingPlaybackCoordinatorPauseCommand */ },
		{ /* #6756 = 0x34C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023A6 /* AVFoundation.AVDelegatingPlaybackCoordinatorPlayCommand */ },
		{ /* #6757 = 0x34C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023A8 /* AVFoundation.AVDelegatingPlaybackCoordinatorSeekCommand */ },
		{ /* #6758 = 0x34CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002458 /* AVFoundation.AVUrlAsset */ },
		{ /* #6759 = 0x34CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023BA /* AVFoundation.IAVFragmentMinding */ },
		{ /* #6760 = 0x34CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023BB /* AVFoundation.AVFragmentMindingWrapper */ },
		{ /* #6761 = 0x34D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023B3 /* AVFoundation.AVFragmentedAsset */ },
		{ /* #6762 = 0x34D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023B4 /* AVFoundation.AVFragmentedAssetMinder */ },
		{ /* #6763 = 0x34D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023B5 /* AVFoundation.AVFragmentedAssetTrack */ },
		{ /* #6764 = 0x34D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023B8 /* AVFoundation.AVFragmentedMovieMinder */ },
		{ /* #6765 = 0x34D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023BC /* AVFoundation.AVFrameRateRange */ },
		{ /* #6766 = 0x34DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023C0 /* AVFoundation.AVMediaDataStorage */ },
		{ /* #6767 = 0x34DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023C1 /* AVFoundation.AVMediaSelection */ },
		{ /* #6768 = 0x34DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023C3 /* AVFoundation.AVMediaSelectionOption */ },
		{ /* #6769 = 0x34E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023D4 /* AVFoundation.AVMetadataObject */ },
		{ /* #6770 = 0x34E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023C7 /* AVFoundation.AVMetadataBodyObject */ },
		{ /* #6771 = 0x34E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023C8 /* AVFoundation.AVMetadataCatBodyObject */ },
		{ /* #6772 = 0x34E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023C9 /* AVFoundation.AVMetadataDogBodyObject */ },
		{ /* #6773 = 0x34E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023CB /* AVFoundation.AVMetadataFaceObject */ },
		{ /* #6774 = 0x34EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023CF /* AVFoundation.AVMetadataHumanBodyObject */ },
		{ /* #6775 = 0x34ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023D1 /* AVFoundation.AVMetadataItemFilter */ },
		{ /* #6776 = 0x34EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023D2 /* AVFoundation.AVMetadataItemValueRequest */ },
		{ /* #6777 = 0x34F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023D3 /* AVFoundation.AVMetadataMachineReadableCodeObject */ },
		{ /* #6778 = 0x34F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023D7 /* AVFoundation.AVMetadataSalientObject */ },
		{ /* #6779 = 0x34F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023DB /* AVFoundation.AVMovie */ },
		{ /* #6780 = 0x34F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023DC /* AVFoundation.AVMovieTrack */ },
		{ /* #6781 = 0x34F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023DF /* AVFoundation.AVMusicTrack */ },
		{ /* #6782 = 0x34FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023E1 /* AVFoundation.AVMutableAssetDownloadStorageManagementPolicy */ },
		{ /* #6783 = 0x34FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023E2 /* AVFoundation.AVMutableAudioMix */ },
		{ /* #6784 = 0x34FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023E3 /* AVFoundation.AVMutableAudioMixInputParameters */ },
		{ /* #6785 = 0x3501 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023E4 /* AVFoundation.AVMutableCaption */ },
		{ /* #6786 = 0x3503 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023E5 /* AVFoundation.AVMutableCaptionRegion */ },
		{ /* #6787 = 0x3505 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023E7 /* AVFoundation.AVMutableComposition */ },
		{ /* #6788 = 0x3507 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023E8 /* AVFoundation.AVMutableCompositionTrack */ },
		{ /* #6789 = 0x3509 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023E9 /* AVFoundation.AVMutableDateRangeMetadataGroup */ },
		{ /* #6790 = 0x350B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023EA /* AVFoundation.AVMutableMediaSelection */ },
		{ /* #6791 = 0x350D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023D0 /* AVFoundation.AVMetadataItem */ },
		{ /* #6792 = 0x350F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023EB /* AVFoundation.AVMutableMetadataItem */ },
		{ /* #6793 = 0x3511 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023F2 /* AVFoundation.AVMutableMovieTrack */ },
		{ /* #6794 = 0x3513 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002457 /* AVFoundation.AVTimedMetadataGroup */ },
		{ /* #6795 = 0x3515 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023F3 /* AVFoundation.AVMutableTimedMetadataGroup */ },
		{ /* #6796 = 0x3517 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002467 /* AVFoundation.AVVideoCompositionLayerInstruction */ },
		{ /* #6797 = 0x3519 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023F6 /* AVFoundation.AVMutableVideoCompositionLayerInstruction */ },
		{ /* #6798 = 0x351B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023F7 /* AVFoundation.AVOutputSettingsAssistant */ },
		{ /* #6799 = 0x351D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200238E /* AVFoundation.AVContentKeyRequest */ },
		{ /* #6800 = 0x351F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023FA /* AVFoundation.AVPersistableContentKeyRequest */ },
		{ /* #6801 = 0x3521 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023FE /* AVFoundation.IAVPlaybackCoordinatorPlaybackControlDelegate */ },
		{ /* #6802 = 0x3523 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023FF /* AVFoundation.AVPlaybackCoordinatorPlaybackControlDelegateWrapper */ },
		{ /* #6803 = 0x3525 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002400 /* AVFoundation.AVPlaybackCoordinatorPlaybackControlDelegate */ },
		{ /* #6804 = 0x3527 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6017204 /* System.Void AVFoundation.AVPlaybackCoordinatorPlaybackControlDelegate::.ctor() */ },
		{ /* #6805 = 0x3529 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002403 /* AVFoundation.AVPlayerInterstitialEvent */ },
		{ /* #6806 = 0x352B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002405 /* AVFoundation.AVPlayerInterstitialEventMonitor */ },
		{ /* #6807 = 0x352D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002404 /* AVFoundation.AVPlayerInterstitialEventController */ },
		{ /* #6808 = 0x352F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002409 /* AVFoundation.AVPlayerItemAccessLog */ },
		{ /* #6809 = 0x3531 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200240A /* AVFoundation.AVPlayerItemAccessLogEvent */ },
		{ /* #6810 = 0x3533 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200240B /* AVFoundation.AVPlayerItemErrorLog */ },
		{ /* #6811 = 0x3535 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200240C /* AVFoundation.AVPlayerItemErrorLogEvent */ },
		{ /* #6812 = 0x3537 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200241C /* AVFoundation.AVPlayerItemOutput */ },
		{ /* #6813 = 0x3539 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200240D /* AVFoundation.AVPlayerItemLegibleOutput */ },
		{ /* #6814 = 0x353B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002421 /* AVFoundation.IAVPlayerItemOutputPushDelegate */ },
		{ /* #6815 = 0x353D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002423 /* AVFoundation.AVPlayerItemOutputPushDelegateWrapper */ },
		{ /* #6816 = 0x353F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200240E /* AVFoundation.IAVPlayerItemLegibleOutputPushDelegate */ },
		{ /* #6817 = 0x3541 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002410 /* AVFoundation.AVPlayerItemLegibleOutputPushDelegateWrapper */ },
		{ /* #6818 = 0x3543 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002424 /* AVFoundation.AVPlayerItemOutputPushDelegate */ },
		{ /* #6819 = 0x3545 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60172CE /* System.Void AVFoundation.AVPlayerItemOutputPushDelegate::.ctor() */ },
		{ /* #6820 = 0x3547 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002411 /* AVFoundation.AVPlayerItemLegibleOutputPushDelegate */ },
		{ /* #6821 = 0x3549 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601728D /* System.Void AVFoundation.AVPlayerItemLegibleOutputPushDelegate::.ctor() */ },
		{ /* #6822 = 0x354B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002412 /* AVFoundation.AVPlayerItemMediaDataCollector */ },
		{ /* #6823 = 0x354D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002413 /* AVFoundation.AVPlayerItemMetadataCollector */ },
		{ /* #6824 = 0x354F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002414 /* AVFoundation.IAVPlayerItemMetadataCollectorPushDelegate */ },
		{ /* #6825 = 0x3551 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002415 /* AVFoundation.AVPlayerItemMetadataCollectorPushDelegateWrapper */ },
		{ /* #6826 = 0x3553 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002416 /* AVFoundation.AVPlayerItemMetadataCollectorPushDelegate */ },
		{ /* #6827 = 0x3555 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60172A3 /* System.Void AVFoundation.AVPlayerItemMetadataCollectorPushDelegate::.ctor() */ },
		{ /* #6828 = 0x3557 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002417 /* AVFoundation.AVPlayerItemMetadataOutput */ },
		{ /* #6829 = 0x3559 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002418 /* AVFoundation.IAVPlayerItemMetadataOutputPushDelegate */ },
		{ /* #6830 = 0x355B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200241A /* AVFoundation.AVPlayerItemMetadataOutputPushDelegateWrapper */ },
		{ /* #6831 = 0x355D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200241B /* AVFoundation.AVPlayerItemMetadataOutputPushDelegate */ },
		{ /* #6832 = 0x355F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60172B6 /* System.Void AVFoundation.AVPlayerItemMetadataOutputPushDelegate::.ctor() */ },
		{ /* #6833 = 0x3561 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200241D /* AVFoundation.IAVPlayerItemOutputPullDelegate */ },
		{ /* #6834 = 0x3563 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200241F /* AVFoundation.AVPlayerItemOutputPullDelegateWrapper */ },
		{ /* #6835 = 0x3565 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002420 /* AVFoundation.AVPlayerItemOutputPullDelegate */ },
		{ /* #6836 = 0x3567 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60172C7 /* System.Void AVFoundation.AVPlayerItemOutputPullDelegate::.ctor() */ },
		{ /* #6837 = 0x3569 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002426 /* AVFoundation.AVPlayerItemTrack */ },
		{ /* #6838 = 0x356B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200242B /* AVFoundation.AVPlayerPlaybackCoordinator */ },
		{ /* #6839 = 0x356D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200242C /* AVFoundation.IAVPlayerPlaybackCoordinatorDelegate */ },
		{ /* #6840 = 0x356F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200242E /* AVFoundation.AVPlayerPlaybackCoordinatorDelegateWrapper */ },
		{ /* #6841 = 0x3571 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200242F /* AVFoundation.AVPlayerPlaybackCoordinatorDelegate */ },
		{ /* #6842 = 0x3573 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601730C /* System.Void AVFoundation.AVPlayerPlaybackCoordinatorDelegate::.ctor() */ },
		{ /* #6843 = 0x3575 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002436 /* AVFoundation.AVPortraitEffectsMatte */ },
		{ /* #6844 = 0x3577 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002437 /* AVFoundation.IAVQueuedSampleBufferRendering */ },
		{ /* #6845 = 0x3579 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002438 /* AVFoundation.AVQueuedSampleBufferRenderingWrapper */ },
		{ /* #6846 = 0x357B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002248 /* AVFoundation.AVPlayer */ },
		{ /* #6847 = 0x357D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200243A /* AVFoundation.AVQueuePlayer */ },
		{ /* #6848 = 0x357F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002441 /* AVFoundation.AVSampleBufferRequest */ },
		{ /* #6849 = 0x3581 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002444 /* AVFoundation.AVSampleCursor */ },
		{ /* #6850 = 0x3583 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002446 /* AVFoundation.AVSemanticSegmentationMatte */ },
		{ /* #6851 = 0x3585 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200244A /* AVFoundation.AVSpeechSynthesisVoice */ },
		{ /* #6852 = 0x3587 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002450 /* AVFoundation.IAVSpeechSynthesizerDelegate */ },
		{ /* #6853 = 0x3589 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002452 /* AVFoundation.AVSpeechSynthesizerDelegateWrapper */ },
		{ /* #6854 = 0x358B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002453 /* AVFoundation.AVSpeechSynthesizerDelegate */ },
		{ /* #6855 = 0x358D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6017428 /* System.Void AVFoundation.AVSpeechSynthesizerDelegate::.ctor() */ },
		{ /* #6856 = 0x358F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002454 /* AVFoundation.AVSpeechUtterance */ },
		{ /* #6857 = 0x3591 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002456 /* AVFoundation.AVSynchronizedLayer */ },
		{ /* #6858 = 0x3593 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002460 /* AVFoundation.IAVVideoCompositing */ },
		{ /* #6859 = 0x3595 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002462 /* AVFoundation.AVVideoCompositingWrapper */ },
		{ /* #6860 = 0x3597 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002463 /* AVFoundation.AVVideoCompositing */ },
		{ /* #6861 = 0x3599 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60174D7 /* System.Void AVFoundation.AVVideoCompositing::.ctor() */ },
		{ /* #6862 = 0x359B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002465 /* AVFoundation.AVVideoCompositionCoreAnimationTool */ },
		{ /* #6863 = 0x359D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002468 /* AVFoundation.AVVideoCompositionRenderContext */ },
		{ /* #6864 = 0x359F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002469 /* AVFoundation.AVVideoCompositionRenderHint */ },
		{ /* #6865 = 0x35A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200246A /* AVFoundation.IAVVideoCompositionValidationHandling */ },
		{ /* #6866 = 0x35A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200246C /* AVFoundation.AVVideoCompositionValidationHandlingWrapper */ },
		{ /* #6867 = 0x35A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200246D /* AVFoundation.AVVideoCompositionValidationHandling */ },
		{ /* #6868 = 0x35A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000013 /* ThreadNetwork.THClient */ },
		{ /* #6869 = 0x35A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200002B /* SoundAnalysis.SNAudioFileAnalyzer */ },
		{ /* #6870 = 0x35AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200003B /* SoundAnalysis.SNTimeDurationConstraint */ },
		{ /* #6871 = 0x35AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000047 /* ShazamKit.SHMediaLibrary */ },
		{ /* #6872 = 0x35AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200004F /* ShazamKit.SHSignatureGenerator */ },
		{ /* #6873 = 0x35B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200005B /* SharedWithYou.SWHighlightCenter */ },
		{ /* #6874 = 0x35B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200006E /* SafariServices.SFContentBlockerManager */ },
		{ /* #6875 = 0x35B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000073 /* SafariServices.SFSafariApplication */ },
		{ /* #6876 = 0x35B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000074 /* SafariServices.SFSafariExtension */ },
		{ /* #6877 = 0x35B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000075 /* SafariServices.SFSafariExtensionHandler */ },
		{ /* #6878 = 0x35BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200007C /* SafariServices.SFSafariPage */ },
		{ /* #6879 = 0x35BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200007E /* SafariServices.SFSafariTab */ },
		{ /* #6880 = 0x35BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000080 /* SafariServices.SFSafariWindow */ },
		{ /* #6881 = 0x35C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000088 /* ReplayKit.RPBroadcastController */ },
		{ /* #6882 = 0x35C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000098 /* ReplayKit.RPScreenRecorder */ },
		{ /* #6883 = 0x35C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000A3 /* QuickLookThumbnailing.QLThumbnailGenerator */ },
		{ /* #6884 = 0x35C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20000E1 /* Phase.PhaseAssetRegistry */ },
		{ /* #6885 = 0x35C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000112 /* Phase.PhasePushStreamNode */ },
		{ /* #6886 = 0x35CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200011B /* Phase.PhaseSoundEvent */ },
		{ /* #6887 = 0x35CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002506 /* NotificationCenter.NCWidgetListViewController/_NCWidgetListViewDelegate */ },
		{ /* #6888 = 0x35CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018894 /* System.Void NotificationCenter.NCWidgetListViewController/_NCWidgetListViewDelegate::DidRemoveRow(NotificationCenter.NCWidgetListViewController,System.UIntPtr) */ },
		{ /* #6889 = 0x35D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018895 /* System.Void NotificationCenter.NCWidgetListViewController/_NCWidgetListViewDelegate::DidReorderRow(NotificationCenter.NCWidgetListViewController,System.UIntPtr,System.UIntPtr) */ },
		{ /* #6890 = 0x35D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018896 /* AppKit.NSViewController NotificationCenter.NCWidgetListViewController/_NCWidgetListViewDelegate::GetViewControllerForRow(NotificationCenter.NCWidgetListViewController,System.UIntPtr) */ },
		{ /* #6891 = 0x35D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018897 /* System.Void NotificationCenter.NCWidgetListViewController/_NCWidgetListViewDelegate::PerformAddAction(NotificationCenter.NCWidgetListViewController) */ },
		{ /* #6892 = 0x35D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018898 /* System.Boolean NotificationCenter.NCWidgetListViewController/_NCWidgetListViewDelegate::ShouldRemoveRow(NotificationCenter.NCWidgetListViewController,System.UIntPtr) */ },
		{ /* #6893 = 0x35D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018899 /* System.Boolean NotificationCenter.NCWidgetListViewController/_NCWidgetListViewDelegate::ShouldReorderRow(NotificationCenter.NCWidgetListViewController,System.UIntPtr) */ },
		{ /* #6894 = 0x35DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018893 /* System.Void NotificationCenter.NCWidgetListViewController/_NCWidgetListViewDelegate::.ctor() */ },
		{ /* #6895 = 0x35DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000153 /* NotificationCenter.NCWidgetListViewController */ },
		{ /* #6896 = 0x35DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002507 /* NotificationCenter.NCWidgetSearchViewController/_NCWidgetSearchViewDelegate */ },
		{ /* #6897 = 0x35E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601889B /* System.Void NotificationCenter.NCWidgetSearchViewController/_NCWidgetSearchViewDelegate::ResultSelected(NotificationCenter.NCWidgetSearchViewController,Foundation.NSObject) */ },
		{ /* #6898 = 0x35E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601889C /* System.Void NotificationCenter.NCWidgetSearchViewController/_NCWidgetSearchViewDelegate::SearchForTerm(NotificationCenter.NCWidgetSearchViewController,System.String,System.UIntPtr) */ },
		{ /* #6899 = 0x35E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601889D /* System.Void NotificationCenter.NCWidgetSearchViewController/_NCWidgetSearchViewDelegate::TermCleared(NotificationCenter.NCWidgetSearchViewController) */ },
		{ /* #6900 = 0x35E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601889A /* System.Void NotificationCenter.NCWidgetSearchViewController/_NCWidgetSearchViewDelegate::.ctor() */ },
		{ /* #6901 = 0x35E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200015E /* NotificationCenter.NCWidgetSearchViewController */ },
		{ /* #6902 = 0x35EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200019D /* LocalAuthentication.LAContext */ },
		{ /* #6903 = 0x35ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001A1 /* LocalAuthentication.LAPrivateKey */ },
		{ /* #6904 = 0x35EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001A2 /* LocalAuthentication.LAPublicKey */ },
		{ /* #6905 = 0x35F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001A5 /* LocalAuthentication.LARightStore */ },
		{ /* #6906 = 0x35F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001A6 /* LocalAuthentication.LASecret */ },
		{ /* #6907 = 0x35F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001B5 /* LinkPresentation.LPMetadataProvider */ },
		{ /* #6908 = 0x35F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200251B /* ExternalAccessory.EAAccessory/_EAAccessoryDelegate */ },
		{ /* #6909 = 0x35F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60188C5 /* System.Void ExternalAccessory.EAAccessory/_EAAccessoryDelegate::Disconnected(ExternalAccessory.EAAccessory) */ },
		{ /* #6910 = 0x35FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60188C4 /* System.Void ExternalAccessory.EAAccessory/_EAAccessoryDelegate::.ctor() */ },
		{ /* #6911 = 0x35FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001C7 /* ExternalAccessory.EAAccessory */ },
		{ /* #6912 = 0x35FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001CC /* ExternalAccessory.EAAccessoryManager */ },
		{ /* #6913 = 0x3601 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001DC /* DeviceCheck.DCAppAttestService */ },
		{ /* #6914 = 0x3603 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20001DD /* DeviceCheck.DCDevice */ },
		{ /* #6915 = 0x3605 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000200 /* AppTrackingTransparency.ATTrackingManager */ },
		{ /* #6916 = 0x3607 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000241 /* Vision.VNFaceLandmarkRegion2D */ },
		{ /* #6917 = 0x3609 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000243 /* Vision.VNRecognizedPointsObservation */ },
		{ /* #6918 = 0x360B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000269 /* Vision.VNDetectHumanBodyPoseRequest */ },
		{ /* #6919 = 0x360D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200026B /* Vision.VNDetectHumanHandPoseRequest */ },
		{ /* #6920 = 0x360F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200028E /* Vision.VNHumanBodyPoseObservation */ },
		{ /* #6921 = 0x3611 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000293 /* Vision.VNHumanHandPoseObservation */ },
		{ /* #6922 = 0x3613 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20002A6 /* Vision.VNRecognizeAnimalsRequest */ },
		{ /* #6923 = 0x3615 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000323 /* VideoSubscriberAccount.VSUserAccountManager */ },
		{ /* #6924 = 0x3617 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000349 /* UserNotifications.UNUserNotificationCenter */ },
		{ /* #6925 = 0x3619 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200035D /* StoreKit.SKCloudServiceController */ },
		{ /* #6926 = 0x361B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200254B /* StoreKit.SKRequest/_SKRequestDelegate */ },
		{ /* #6927 = 0x361D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018945 /* System.Void StoreKit.SKRequest/_SKRequestDelegate::RequestFailed(StoreKit.SKRequest,Foundation.NSError) */ },
		{ /* #6928 = 0x361F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018946 /* System.Void StoreKit.SKRequest/_SKRequestDelegate::RequestFinished(StoreKit.SKRequest) */ },
		{ /* #6929 = 0x3621 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018944 /* System.Void StoreKit.SKRequest/_SKRequestDelegate::.ctor() */ },
		{ /* #6930 = 0x3623 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002546 /* StoreKit.SKProductsRequest/_SKProductsRequestDelegate */ },
		{ /* #6931 = 0x3625 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601893B /* System.Void StoreKit.SKProductsRequest/_SKProductsRequestDelegate::ReceivedResponse(StoreKit.SKProductsRequest,StoreKit.SKProductsResponse) */ },
		{ /* #6932 = 0x3627 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601893A /* System.Void StoreKit.SKProductsRequest/_SKProductsRequestDelegate::.ctor() */ },
		{ /* #6933 = 0x3629 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000374 /* StoreKit.SKProductsRequest */ },
		{ /* #6934 = 0x362B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200037A /* StoreKit.SKProductStorePromotionController */ },
		{ /* #6935 = 0x362D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200254C /* StoreKit.SKStoreProductViewController/_SKStoreProductViewControllerDelegate */ },
		{ /* #6936 = 0x362F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018948 /* System.Void StoreKit.SKStoreProductViewController/_SKStoreProductViewControllerDelegate::Finished(StoreKit.SKStoreProductViewController) */ },
		{ /* #6937 = 0x3631 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018947 /* System.Void StoreKit.SKStoreProductViewController/_SKStoreProductViewControllerDelegate::.ctor() */ },
		{ /* #6938 = 0x3633 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000385 /* StoreKit.SKStoreProductViewController */ },
		{ /* #6939 = 0x3635 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002551 /* SpriteKit.SKPhysicsWorld/_SKPhysicsContactDelegate */ },
		{ /* #6940 = 0x3637 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018956 /* System.Void SpriteKit.SKPhysicsWorld/_SKPhysicsContactDelegate::DidBeginContact(SpriteKit.SKPhysicsContact) */ },
		{ /* #6941 = 0x3639 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018957 /* System.Void SpriteKit.SKPhysicsWorld/_SKPhysicsContactDelegate::DidEndContact(SpriteKit.SKPhysicsContact) */ },
		{ /* #6942 = 0x363B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018955 /* System.Void SpriteKit.SKPhysicsWorld/_SKPhysicsContactDelegate::.ctor() */ },
		{ /* #6943 = 0x363D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003B5 /* SpriteKit.SKPhysicsWorld */ },
		{ /* #6944 = 0x363F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003C5 /* SpriteKit.SKTextureAtlas */ },
		{ /* #6945 = 0x3641 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003E4 /* Social.SLRequest */ },
		{ /* #6946 = 0x3643 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20003EB /* SharedWithYouCore.SWCollaborationMetadata */ },
		{ /* #6947 = 0x3645 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002560 /* ScriptingBridge.SBApplication/_SBApplicationDelegate */ },
		{ /* #6948 = 0x3647 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018977 /* Foundation.NSObject ScriptingBridge.SBApplication/_SBApplicationDelegate::EventFailed(System.IntPtr,Foundation.NSError) */ },
		{ /* #6949 = 0x3649 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018976 /* System.Void ScriptingBridge.SBApplication/_SBApplicationDelegate::.ctor() */ },
		{ /* #6950 = 0x364B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000460 /* ScriptingBridge.SBApplication */ },
		{ /* #6951 = 0x364D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200046C /* ScreenCaptureKit.SCShareableContent */ },
		{ /* #6952 = 0x364F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200046D /* ScreenCaptureKit.SCStream */ },
		{ /* #6953 = 0x3651 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20004D3 /* SceneKit.SCNLayer */ },
		{ /* #6954 = 0x3653 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200256A /* SceneKit.SCNPhysicsWorld/_SCNPhysicsContactDelegate */ },
		{ /* #6955 = 0x3655 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601898F /* System.Void SceneKit.SCNPhysicsWorld/_SCNPhysicsContactDelegate::DidBeginContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact) */ },
		{ /* #6956 = 0x3657 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018990 /* System.Void SceneKit.SCNPhysicsWorld/_SCNPhysicsContactDelegate::DidEndContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact) */ },
		{ /* #6957 = 0x3659 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018991 /* System.Void SceneKit.SCNPhysicsWorld/_SCNPhysicsContactDelegate::DidUpdateContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact) */ },
		{ /* #6958 = 0x365B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601898E /* System.Void SceneKit.SCNPhysicsWorld/_SCNPhysicsContactDelegate::.ctor() */ },
		{ /* #6959 = 0x365D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000509 /* SceneKit.SCNPhysicsWorld */ },
		{ /* #6960 = 0x365F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000515 /* SceneKit.SCNRenderer */ },
		{ /* #6961 = 0x3661 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200053D /* SceneKit.SCNView */ },
		{ /* #6962 = 0x3663 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000579 /* Photos.PHFetchResult */ },
		{ /* #6963 = 0x3665 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002575 /* Photos.PHPhotoLibrary/__phlib_observer */ },
		{ /* #6964 = 0x3667 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189B2 /* System.Void Photos.PHPhotoLibrary/__phlib_observer::PhotoLibraryDidChange(Photos.PHChange) */ },
		{ /* #6965 = 0x3669 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200057B /* Photos.PHPhotoLibrary */ },
		{ /* #6966 = 0x366B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200058D /* Photos.PHAssetResourceManager */ },
		{ /* #6967 = 0x366D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20005A8 /* Photos.PHLivePhotoEditingContext */ },
		{ /* #6968 = 0x366F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002580 /* PdfKit.PdfDocument/_PdfDocumentDelegate */ },
		{ /* #6969 = 0x3671 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189C9 /* System.Void PdfKit.PdfDocument/_PdfDocumentDelegate::DidBeginDocumentFind(Foundation.NSNotification) */ },
		{ /* #6970 = 0x3673 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189CA /* System.Void PdfKit.PdfDocument/_PdfDocumentDelegate::DidMatchString(PdfKit.PdfSelection) */ },
		{ /* #6971 = 0x3675 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189CB /* System.Void PdfKit.PdfDocument/_PdfDocumentDelegate::DidUnlock(Foundation.NSNotification) */ },
		{ /* #6972 = 0x3677 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189CC /* System.Void PdfKit.PdfDocument/_PdfDocumentDelegate::FindFinished(Foundation.NSNotification) */ },
		{ /* #6973 = 0x3679 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189CD /* ObjCRuntime.Class PdfKit.PdfDocument/_PdfDocumentDelegate::GetClassForAnnotationClass(ObjCRuntime.Class) */ },
		{ /* #6974 = 0x367B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189CE /* ObjCRuntime.Class PdfKit.PdfDocument/_PdfDocumentDelegate::GetClassForAnnotationType(System.String) */ },
		{ /* #6975 = 0x367D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189CF /* System.Void PdfKit.PdfDocument/_PdfDocumentDelegate::MatchFound(Foundation.NSNotification) */ },
		{ /* #6976 = 0x367F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189D0 /* System.Void PdfKit.PdfDocument/_PdfDocumentDelegate::PageFindFinished(Foundation.NSNotification) */ },
		{ /* #6977 = 0x3681 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189D1 /* System.Void PdfKit.PdfDocument/_PdfDocumentDelegate::PageFindStarted(Foundation.NSNotification) */ },
		{ /* #6978 = 0x3683 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189C8 /* System.Void PdfKit.PdfDocument/_PdfDocumentDelegate::.ctor() */ },
		{ /* #6979 = 0x3685 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000606 /* PdfKit.PdfDocument */ },
		{ /* #6980 = 0x3687 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200061D /* PdfKit.PdfThumbnailView */ },
		{ /* #6981 = 0x3689 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002584 /* PdfKit.PdfView/_PdfViewDelegate */ },
		{ /* #6982 = 0x368B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189EC /* System.Void PdfKit.PdfView/_PdfViewDelegate::OpenPdf(PdfKit.PdfView,PdfKit.PdfActionRemoteGoTo) */ },
		{ /* #6983 = 0x368D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189ED /* System.Void PdfKit.PdfView/_PdfViewDelegate::PerformFind(PdfKit.PdfView) */ },
		{ /* #6984 = 0x368F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189EE /* System.Void PdfKit.PdfView/_PdfViewDelegate::PerformGoToPage(PdfKit.PdfView) */ },
		{ /* #6985 = 0x3691 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189EF /* System.Void PdfKit.PdfView/_PdfViewDelegate::PerformPrint(PdfKit.PdfView) */ },
		{ /* #6986 = 0x3693 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189F0 /* System.String PdfKit.PdfView/_PdfViewDelegate::TitleOfPrintJob(PdfKit.PdfView) */ },
		{ /* #6987 = 0x3695 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189F1 /* System.Runtime.InteropServices.NFloat PdfKit.PdfView/_PdfViewDelegate::WillChangeScaleFactor(PdfKit.PdfView,System.Runtime.InteropServices.NFloat) */ },
		{ /* #6988 = 0x3697 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189F2 /* System.Void PdfKit.PdfView/_PdfViewDelegate::WillClickOnLink(PdfKit.PdfView,Foundation.NSUrl) */ },
		{ /* #6989 = 0x3699 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60189EB /* System.Void PdfKit.PdfView/_PdfViewDelegate::.ctor() */ },
		{ /* #6990 = 0x369B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200061E /* PdfKit.PdfView */ },
		{ /* #6991 = 0x369D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200062D /* PassKit.PKShareablePassMetadata */ },
		{ /* #6992 = 0x369F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000636 /* PassKit.PKAddShareablePassConfiguration */ },
		{ /* #6993 = 0x36A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000650 /* PassKit.PKPassLibrary */ },
		{ /* #6994 = 0x36A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000657 /* PassKit.PKPaymentAuthorizationController */ },
		{ /* #6995 = 0x36A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002591 /* PassKit.PKPaymentAuthorizationViewController/_PKPaymentAuthorizationViewControllerDelegate */ },
		{ /* #6996 = 0x36A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018A22 /* System.Void PassKit.PKPaymentAuthorizationViewController/_PKPaymentAuthorizationViewControllerDelegate::DidAuthorizePayment2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKPayment,System.Action`1<PassKit.PKPaymentAuthorizationResult>) */ },
		{ /* #6997 = 0x36A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601ABF1 /* System.Action`1<PassKit.PKPaymentAuthorizationResult> ObjCRuntime.Trampolines/NIDActionArity1V78::Create(System.IntPtr) */ },
		{ /* #6998 = 0x36AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018A23 /* System.Void PassKit.PKPaymentAuthorizationViewController/_PKPaymentAuthorizationViewControllerDelegate::DidChangeCouponCode(PassKit.PKPaymentAuthorizationViewController,System.String,System.Action`1<PassKit.PKPaymentRequestCouponCodeUpdate>) */ },
		{ /* #6999 = 0x36AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601ABFB /* System.Action`1<PassKit.PKPaymentRequestCouponCodeUpdate> ObjCRuntime.Trampolines/NIDActionArity1V82::Create(System.IntPtr) */ },
		{ /* #7000 = 0x36AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018A24 /* System.Void PassKit.PKPaymentAuthorizationViewController/_PKPaymentAuthorizationViewControllerDelegate::DidRequestMerchantSessionUpdate(PassKit.PKPaymentAuthorizationViewController,System.Action`1<PassKit.PKPaymentRequestMerchantSessionUpdate>) */ },
		{ /* #7001 = 0x36B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601AC05 /* System.Action`1<PassKit.PKPaymentRequestMerchantSessionUpdate> ObjCRuntime.Trampolines/NIDActionArity1V81::Create(System.IntPtr) */ },
		{ /* #7002 = 0x36B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018A25 /* System.Void PassKit.PKPaymentAuthorizationViewController/_PKPaymentAuthorizationViewControllerDelegate::DidSelectPaymentMethod2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKPaymentMethod,System.Action`1<PassKit.PKPaymentRequestPaymentMethodUpdate>) */ },
		{ /* #7003 = 0x36B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601AC0F /* System.Action`1<PassKit.PKPaymentRequestPaymentMethodUpdate> ObjCRuntime.Trampolines/NIDActionArity1V79::Create(System.IntPtr) */ },
		{ /* #7004 = 0x36B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018A26 /* System.Void PassKit.PKPaymentAuthorizationViewController/_PKPaymentAuthorizationViewControllerDelegate::DidSelectShippingContact2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKContact,System.Action`1<PassKit.PKPaymentRequestShippingContactUpdate>) */ },
		{ /* #7005 = 0x36B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601AC19 /* System.Action`1<PassKit.PKPaymentRequestShippingContactUpdate> ObjCRuntime.Trampolines/NIDActionArity1V80::Create(System.IntPtr) */ },
		{ /* #7006 = 0x36BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018A27 /* System.Void PassKit.PKPaymentAuthorizationViewController/_PKPaymentAuthorizationViewControllerDelegate::DidSelectShippingMethod2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKShippingMethod,System.Action`1<PassKit.PKPaymentRequestShippingMethodUpdate>) */ },
		{ /* #7007 = 0x36BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601AC23 /* System.Action`1<PassKit.PKPaymentRequestShippingMethodUpdate> ObjCRuntime.Trampolines/NIDActionArity1V83::Create(System.IntPtr) */ },
		{ /* #7008 = 0x36BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018A28 /* System.Void PassKit.PKPaymentAuthorizationViewController/_PKPaymentAuthorizationViewControllerDelegate::PaymentAuthorizationViewControllerDidFinish(PassKit.PKPaymentAuthorizationViewController) */ },
		{ /* #7009 = 0x36C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018A29 /* System.Void PassKit.PKPaymentAuthorizationViewController/_PKPaymentAuthorizationViewControllerDelegate::WillAuthorizePayment(PassKit.PKPaymentAuthorizationViewController) */ },
		{ /* #7010 = 0x36C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018A21 /* System.Void PassKit.PKPaymentAuthorizationViewController/_PKPaymentAuthorizationViewControllerDelegate::.ctor() */ },
		{ /* #7011 = 0x36C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200065E /* PassKit.PKPaymentAuthorizationViewController */ },
		{ /* #7012 = 0x36C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000697 /* PassKit.PKVehicleConnectionSession */ },
		{ /* #7013 = 0x36C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006A7 /* NetworkExtension.NEVpnManager */ },
		{ /* #7014 = 0x36CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006A8 /* NetworkExtension.NEAppProxyFlow */ },
		{ /* #7015 = 0x36CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006F5 /* NetworkExtension.NETunnelProviderManager */ },
		{ /* #7016 = 0x36CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006AC /* NetworkExtension.NEAppProxyProviderManager */ },
		{ /* #7017 = 0x36D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006AD /* NetworkExtension.NEAppProxyTcpFlow */ },
		{ /* #7018 = 0x36D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006AE /* NetworkExtension.NEAppProxyUdpFlow */ },
		{ /* #7019 = 0x36D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006B4 /* NetworkExtension.NEDnsProxyManager */ },
		{ /* #7020 = 0x36D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006B7 /* NetworkExtension.NEDnsProxyProvider */ },
		{ /* #7021 = 0x36D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006BA /* NetworkExtension.NEDnsSettingsManager */ },
		{ /* #7022 = 0x36DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006C3 /* NetworkExtension.NEFilterDataProvider */ },
		{ /* #7023 = 0x36DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006C6 /* NetworkExtension.NEFilterManager */ },
		{ /* #7024 = 0x36DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006E6 /* NetworkExtension.NEPacketTunnelFlow */ },
		{ /* #7025 = 0x36E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20006EE /* NetworkExtension.NETransparentProxyManager */ },
		{ /* #7026 = 0x36E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000710 /* NetworkExtension.NWTcpConnection */ },
		{ /* #7027 = 0x36E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000717 /* NetworkExtension.NWUdpSession */ },
		{ /* #7028 = 0x36E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000776 /* NaturalLanguage.NLEmbedding */ },
		{ /* #7029 = 0x36E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000778 /* NaturalLanguage.NLLanguageRecognizer */ },
		{ /* #7030 = 0x36EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200077B /* NaturalLanguage.NLTagger */ },
		{ /* #7031 = 0x36ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200078D /* MultipeerConnectivity.MCSession */ },
		{ /* #7032 = 0x36EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20007BB /* ModelIO.MDLMesh */ },
		{ /* #7033 = 0x36F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000831 /* MetalPerformanceShadersGraph.MPSGraphTensorData */ },
		{ /* #7034 = 0x36F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000851 /* MetalPerformanceShadersGraph.MPSGraphDepthwiseConvolution3DOpDescriptor */ },
		{ /* #7035 = 0x36F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200085D /* MetalPerformanceShadersGraph.MPSGraphPooling4DOpDescriptor */ },
		{ /* #7036 = 0x36F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000864 /* MetalPerformanceShadersGraph.MPSGraphShapedType */ },
		{ /* #7037 = 0x36F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000866 /* MetalPerformanceShadersGraph.MPSGraphStencilOpDescriptor */ },
		{ /* #7038 = 0x36FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000867 /* MetalPerformanceShadersGraph.MPSGraphTensor */ },
		{ /* #7039 = 0x36FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200086A /* MetalPerformanceShadersGraph.MPSGraphVariableOp */ },
		{ /* #7040 = 0x36FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20008A0 /* MetalPerformanceShaders.MPSNNGraph */ },
		{ /* #7041 = 0x3701 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20009AD /* MetalPerformanceShaders.MPSNDArrayDescriptor */ },
		{ /* #7042 = 0x3703 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000A30 /* MetalKit.MTKTextureLoader */ },
		{ /* #7043 = 0x3705 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000B7A /* MediaPlayer.MPSkipIntervalCommand */ },
		{ /* #7044 = 0x3707 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BAE /* MapKit.MKLocalSearch */ },
		{ /* #7045 = 0x3709 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BC9 /* MapKit.MKDirections */ },
		{ /* #7046 = 0x370B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BD9 /* MapKit.MKGradientPolylineRenderer */ },
		{ /* #7047 = 0x370D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BE9 /* MapKit.MKLookAroundSceneRequest */ },
		{ /* #7048 = 0x370F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BEC /* MapKit.MKLookAroundSnapshotter */ },
		{ /* #7049 = 0x3711 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BF9 /* MapKit.MKMapSnapshotter */ },
		{ /* #7050 = 0x3713 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200261A /* MapKit.MKMapView/_MKMapViewDelegate */ },
		{ /* #7051 = 0x3715 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C21 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::ChangedDragState(MapKit.MKMapView,MapKit.MKAnnotationView,MapKit.MKAnnotationViewDragState,MapKit.MKAnnotationViewDragState) */ },
		{ /* #7052 = 0x3717 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C22 /* MapKit.MKClusterAnnotation MapKit.MKMapView/_MKMapViewDelegate::CreateClusterAnnotation(MapKit.MKMapView,MapKit.IMKAnnotation[]) */ },
		{ /* #7053 = 0x3719 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C23 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::DidAddAnnotationViews(MapKit.MKMapView,MapKit.MKAnnotationView[]) */ },
		{ /* #7054 = 0x371B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C24 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::DidAddOverlayRenderers(MapKit.MKMapView,MapKit.MKOverlayRenderer[]) */ },
		{ /* #7055 = 0x371D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C25 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::DidChangeUserTrackingMode(MapKit.MKMapView,MapKit.MKUserTrackingMode,System.Boolean) */ },
		{ /* #7056 = 0x371F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C26 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::DidChangeVisibleRegion(MapKit.MKMapView) */ },
		{ /* #7057 = 0x3721 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C27 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::DidDeselectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView) */ },
		{ /* #7058 = 0x3723 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C28 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::DidFailToLocateUser(MapKit.MKMapView,Foundation.NSError) */ },
		{ /* #7059 = 0x3725 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C29 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::DidFinishRenderingMap(MapKit.MKMapView,System.Boolean) */ },
		{ /* #7060 = 0x3727 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C2A /* System.Void MapKit.MKMapView/_MKMapViewDelegate::DidSelectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView) */ },
		{ /* #7061 = 0x3729 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C2B /* System.Void MapKit.MKMapView/_MKMapViewDelegate::DidStopLocatingUser(MapKit.MKMapView) */ },
		{ /* #7062 = 0x372B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C2C /* System.Void MapKit.MKMapView/_MKMapViewDelegate::DidUpdateUserLocation(MapKit.MKMapView,MapKit.MKUserLocation) */ },
		{ /* #7063 = 0x372D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C2D /* MapKit.MKAnnotationView MapKit.MKMapView/_MKMapViewDelegate::GetViewForAnnotation(MapKit.MKMapView,MapKit.IMKAnnotation) */ },
		{ /* #7064 = 0x372F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C2E /* System.Void MapKit.MKMapView/_MKMapViewDelegate::LoadingMapFailed(MapKit.MKMapView,Foundation.NSError) */ },
		{ /* #7065 = 0x3731 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C2F /* System.Void MapKit.MKMapView/_MKMapViewDelegate::MapLoaded(MapKit.MKMapView) */ },
		{ /* #7066 = 0x3733 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C30 /* MapKit.MKOverlayRenderer MapKit.MKMapView/_MKMapViewDelegate::OverlayRenderer(MapKit.MKMapView,MapKit.IMKOverlay) */ },
		{ /* #7067 = 0x3735 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C31 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::RegionChanged(MapKit.MKMapView,System.Boolean) */ },
		{ /* #7068 = 0x3737 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C32 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::RegionWillChange(MapKit.MKMapView,System.Boolean) */ },
		{ /* #7069 = 0x3739 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C33 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::WillStartLoadingMap(MapKit.MKMapView) */ },
		{ /* #7070 = 0x373B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C34 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::WillStartLocatingUser(MapKit.MKMapView) */ },
		{ /* #7071 = 0x373D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C35 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::WillStartRenderingMap(MapKit.MKMapView) */ },
		{ /* #7072 = 0x373F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018C20 /* System.Void MapKit.MKMapView/_MKMapViewDelegate::.ctor() */ },
		{ /* #7073 = 0x3741 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000BFB /* MapKit.MKMapView */ },
		{ /* #7074 = 0x3743 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C1B /* MapKit.MKPointOfInterestFilter */ },
		{ /* #7075 = 0x3745 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C4B /* MLCompute.MLCConvolutionDescriptor */ },
		{ /* #7076 = 0x3747 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C59 /* MLCompute.MLCGraph */ },
		{ /* #7077 = 0x3749 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C5C /* MLCompute.MLCInferenceGraph */ },
		{ /* #7078 = 0x374B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C60 /* MLCompute.MLCLayerNormalizationLayer */ },
		{ /* #7079 = 0x374D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C6D /* MLCompute.MLCPaddingLayer */ },
		{ /* #7080 = 0x374F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C71 /* MLCompute.MLCPoolingDescriptor */ },
		{ /* #7081 = 0x3751 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C75 /* MLCompute.MLCReductionLayer */ },
		{ /* #7082 = 0x3753 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C78 /* MLCompute.MLCReshapeLayer */ },
		{ /* #7083 = 0x3755 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C7E /* MLCompute.MLCSliceLayer */ },
		{ /* #7084 = 0x3757 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C81 /* MLCompute.MLCSplitLayer */ },
		{ /* #7085 = 0x3759 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C82 /* MLCompute.MLCTensor */ },
		{ /* #7086 = 0x375B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C84 /* MLCompute.MLCTensorDescriptor */ },
		{ /* #7087 = 0x375D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C87 /* MLCompute.MLCTrainingGraph */ },
		{ /* #7088 = 0x375F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C88 /* MLCompute.MLCTransposeLayer */ },
		{ /* #7089 = 0x3761 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C89 /* MLCompute.MLCUpsampleLayer */ },
		{ /* #7090 = 0x3763 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C9E /* Intents.INPerson */ },
		{ /* #7091 = 0x3765 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CC7 /* Intents.INFocusStatusCenter */ },
		{ /* #7092 = 0x3767 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000CDD /* Intents.INInteraction */ },
		{ /* #7093 = 0x3769 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D1D /* Intents.INVoiceShortcutCenter */ },
		{ /* #7094 = 0x376B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002647 /* ImageKit.IKCameraDeviceView/_IKCameraDeviceViewDelegate */ },
		{ /* #7095 = 0x376D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018CF3 /* System.Void ImageKit.IKCameraDeviceView/_IKCameraDeviceViewDelegate::DidDownloadFile(ImageKit.IKCameraDeviceView,ImageCaptureCore.ICCameraFile,Foundation.NSUrl,Foundation.NSData,Foundation.NSError) */ },
		{ /* #7096 = 0x376F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018CF4 /* System.Void ImageKit.IKCameraDeviceView/_IKCameraDeviceViewDelegate::DidEncounterError(ImageKit.IKCameraDeviceView,Foundation.NSError) */ },
		{ /* #7097 = 0x3771 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018CF5 /* System.Void ImageKit.IKCameraDeviceView/_IKCameraDeviceViewDelegate::SelectionDidChange(ImageKit.IKCameraDeviceView) */ },
		{ /* #7098 = 0x3773 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018CF2 /* System.Void ImageKit.IKCameraDeviceView/_IKCameraDeviceViewDelegate::.ctor() */ },
		{ /* #7099 = 0x3775 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D2B /* ImageKit.IKCameraDeviceView */ },
		{ /* #7100 = 0x3777 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002648 /* ImageKit.IKDeviceBrowserView/_IKDeviceBrowserViewDelegate */ },
		{ /* #7101 = 0x3779 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018CF7 /* System.Void ImageKit.IKDeviceBrowserView/_IKDeviceBrowserViewDelegate::DidEncounterError(ImageKit.IKDeviceBrowserView,Foundation.NSError) */ },
		{ /* #7102 = 0x377B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018CF8 /* System.Void ImageKit.IKDeviceBrowserView/_IKDeviceBrowserViewDelegate::SelectionDidChange(ImageKit.IKDeviceBrowserView,ImageCaptureCore.ICDevice) */ },
		{ /* #7103 = 0x377D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018CF6 /* System.Void ImageKit.IKDeviceBrowserView/_IKDeviceBrowserViewDelegate::.ctor() */ },
		{ /* #7104 = 0x377F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D32 /* ImageKit.IKDeviceBrowserView */ },
		{ /* #7105 = 0x3781 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D39 /* ImageKit.IKFilterBrowserPanel */ },
		{ /* #7106 = 0x3783 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200264A /* ImageKit.IKImageBrowserView/_IKImageBrowserDelegate */ },
		{ /* #7107 = 0x3785 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D00 /* System.Void ImageKit.IKImageBrowserView/_IKImageBrowserDelegate::BackgroundWasRightClicked(ImageKit.IKImageBrowserView,AppKit.NSEvent) */ },
		{ /* #7108 = 0x3787 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D01 /* System.Void ImageKit.IKImageBrowserView/_IKImageBrowserDelegate::CellWasDoubleClicked(ImageKit.IKImageBrowserView,System.IntPtr) */ },
		{ /* #7109 = 0x3789 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D02 /* System.Void ImageKit.IKImageBrowserView/_IKImageBrowserDelegate::CellWasRightClicked(ImageKit.IKImageBrowserView,System.IntPtr,AppKit.NSEvent) */ },
		{ /* #7110 = 0x378B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D03 /* System.Void ImageKit.IKImageBrowserView/_IKImageBrowserDelegate::SelectionDidChange(ImageKit.IKImageBrowserView) */ },
		{ /* #7111 = 0x378D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018CFF /* System.Void ImageKit.IKImageBrowserView/_IKImageBrowserDelegate::.ctor() */ },
		{ /* #7112 = 0x378F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D4C /* ImageKit.IKImageBrowserView */ },
		{ /* #7113 = 0x3791 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200264B /* ImageKit.IKSaveOptions/_IKSaveOptionsDelegate */ },
		{ /* #7114 = 0x3793 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D05 /* System.Boolean ImageKit.IKSaveOptions/_IKSaveOptionsDelegate::ShouldShowType(ImageKit.IKSaveOptions,System.String) */ },
		{ /* #7115 = 0x3795 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D04 /* System.Void ImageKit.IKSaveOptions/_IKSaveOptionsDelegate::.ctor() */ },
		{ /* #7116 = 0x3797 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D59 /* ImageKit.IKSaveOptions */ },
		{ /* #7117 = 0x3799 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200264C /* ImageKit.IKScannerDeviceView/_IKScannerDeviceViewDelegate */ },
		{ /* #7118 = 0x379B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D07 /* System.Void ImageKit.IKScannerDeviceView/_IKScannerDeviceViewDelegate::DidEncounterError(ImageKit.IKScannerDeviceView,Foundation.NSError) */ },
		{ /* #7119 = 0x379D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D08 /* System.Void ImageKit.IKScannerDeviceView/_IKScannerDeviceViewDelegate::DidScan(ImageKit.IKScannerDeviceView,Foundation.NSUrl,Foundation.NSData,Foundation.NSError) */ },
		{ /* #7120 = 0x379F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D09 /* System.Void ImageKit.IKScannerDeviceView/_IKScannerDeviceViewDelegate::DidScanToBandData(ImageKit.IKScannerDeviceView,ImageCaptureCore.ICScannerBandData,Foundation.NSDictionary,Foundation.NSError) */ },
		{ /* #7121 = 0x37A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D0A /* System.Void ImageKit.IKScannerDeviceView/_IKScannerDeviceViewDelegate::DidScanToUrl(ImageKit.IKScannerDeviceView,Foundation.NSUrl,Foundation.NSError) */ },
		{ /* #7122 = 0x37A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D06 /* System.Void ImageKit.IKScannerDeviceView/_IKScannerDeviceViewDelegate::.ctor() */ },
		{ /* #7123 = 0x37A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D5E /* ImageKit.IKScannerDeviceView */ },
		{ /* #7124 = 0x37A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002651 /* ImageCaptureCore.ICCameraDevice/DidReadDataFromFileAction */ },
		{ /* #7125 = 0x37A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D18 /* System.Void ImageCaptureCore.ICCameraDevice/DidReadDataFromFileAction::DidReadDataDelegate(Foundation.NSData,ImageCaptureCore.ICCameraFile,Foundation.NSError,System.IntPtr) */ },
		{ /* #7126 = 0x37AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002653 /* ImageCaptureCore.ICCameraDevice/DidDownloadDataFromFileAction */ },
		{ /* #7127 = 0x37AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D1E /* System.Void ImageCaptureCore.ICCameraDevice/DidDownloadDataFromFileAction::DidDownloadDataDelegate(ImageCaptureCore.ICCameraFile,Foundation.NSError,Foundation.NSDictionary`2<Foundation.NSString,Foundation.NSObject>,System.IntPtr) */ },
		{ /* #7128 = 0x37AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002655 /* ImageCaptureCore.ICCameraDevice/DidSendPtpAction */ },
		{ /* #7129 = 0x37B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D24 /* System.Void ImageCaptureCore.ICCameraDevice/DidSendPtpAction::DidSendPtpDelegate(Foundation.NSData,Foundation.NSData,Foundation.NSData,Foundation.NSError,System.IntPtr) */ },
		{ /* #7130 = 0x37B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000D91 /* ImageCaptureCore.ICCameraDevice */ },
		{ /* #7131 = 0x37B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000DE6 /* HealthKit.HKAttachmentStore */ },
		{ /* #7132 = 0x37B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E36 /* HealthKit.HKHealthStore */ },
		{ /* #7133 = 0x37B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E37 /* HealthKit.HKHeartbeatSeriesBuilder */ },
		{ /* #7134 = 0x37BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E51 /* HealthKit.HKQuantitySeriesSampleBuilder */ },
		{ /* #7135 = 0x37BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E6D /* HealthKit.HKVerifiableClinicalRecordQuery */ },
		{ /* #7136 = 0x37BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000E81 /* HealthKit.HKWorkoutRouteBuilder */ },
		{ /* #7137 = 0x37C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EFF /* GameKit.GKTurnBasedExchange */ },
		{ /* #7138 = 0x37C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002685 /* GameKit.GKMatch/_GKMatchDelegate */ },
		{ /* #7139 = 0x37C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D87 /* System.Void GameKit.GKMatch/_GKMatchDelegate::DataReceived(GameKit.GKMatch,Foundation.NSData,System.String) */ },
		{ /* #7140 = 0x37C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D88 /* System.Void GameKit.GKMatch/_GKMatchDelegate::DataReceivedForRecipient(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer,GameKit.GKPlayer) */ },
		{ /* #7141 = 0x37C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D89 /* System.Void GameKit.GKMatch/_GKMatchDelegate::DataReceivedFromPlayer(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer) */ },
		{ /* #7142 = 0x37CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D8A /* System.Void GameKit.GKMatch/_GKMatchDelegate::Failed(GameKit.GKMatch,Foundation.NSError) */ },
		{ /* #7143 = 0x37CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D8B /* System.Boolean GameKit.GKMatch/_GKMatchDelegate::ShouldReinviteDisconnectedPlayer(GameKit.GKMatch,GameKit.GKPlayer) */ },
		{ /* #7144 = 0x37CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D8C /* System.Boolean GameKit.GKMatch/_GKMatchDelegate::ShouldReinvitePlayer(GameKit.GKMatch,System.String) */ },
		{ /* #7145 = 0x37D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D8D /* System.Void GameKit.GKMatch/_GKMatchDelegate::StateChanged(GameKit.GKMatch,System.String,GameKit.GKPlayerConnectionState) */ },
		{ /* #7146 = 0x37D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D8E /* System.Void GameKit.GKMatch/_GKMatchDelegate::StateChangedForPlayer(GameKit.GKMatch,GameKit.GKPlayer,GameKit.GKPlayerConnectionState) */ },
		{ /* #7147 = 0x37D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018D86 /* System.Void GameKit.GKMatch/_GKMatchDelegate::.ctor() */ },
		{ /* #7148 = 0x37D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F02 /* GameKit.GKMatch */ },
		{ /* #7149 = 0x37D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F05 /* GameKit.GKAchievement */ },
		{ /* #7150 = 0x37DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F08 /* GameKit.GKAchievementDescription */ },
		{ /* #7151 = 0x37DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002697 /* GameKit.GKGameCenterViewController/_GKGameCenterControllerDelegate */ },
		{ /* #7152 = 0x37DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DB8 /* System.Void GameKit.GKGameCenterViewController/_GKGameCenterControllerDelegate::Finished(GameKit.GKGameCenterViewController) */ },
		{ /* #7153 = 0x37E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DB7 /* System.Void GameKit.GKGameCenterViewController/_GKGameCenterControllerDelegate::.ctor() */ },
		{ /* #7154 = 0x37E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002694 /* GameKit.GKAchievementViewController/_GKAchievementViewControllerDelegate */ },
		{ /* #7155 = 0x37E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DAC /* System.Void GameKit.GKAchievementViewController/_GKAchievementViewControllerDelegate::DidFinish(GameKit.GKAchievementViewController) */ },
		{ /* #7156 = 0x37E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DAB /* System.Void GameKit.GKAchievementViewController/_GKAchievementViewControllerDelegate::.ctor() */ },
		{ /* #7157 = 0x37E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F29 /* GameKit.GKGameCenterViewController */ },
		{ /* #7158 = 0x37EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F09 /* GameKit.GKAchievementViewController */ },
		{ /* #7159 = 0x37ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002695 /* GameKit.GKChallengeEventHandler/_GKChallengeEventHandlerDelegate */ },
		{ /* #7160 = 0x37EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DAE /* System.Void GameKit.GKChallengeEventHandler/_GKChallengeEventHandlerDelegate::LocalPlayerCompletedChallenge(GameKit.GKChallenge) */ },
		{ /* #7161 = 0x37F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DAF /* System.Void GameKit.GKChallengeEventHandler/_GKChallengeEventHandlerDelegate::LocalPlayerReceivedChallenge(GameKit.GKChallenge) */ },
		{ /* #7162 = 0x37F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DB0 /* System.Void GameKit.GKChallengeEventHandler/_GKChallengeEventHandlerDelegate::LocalPlayerSelectedChallenge(GameKit.GKChallenge) */ },
		{ /* #7163 = 0x37F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DB1 /* System.Void GameKit.GKChallengeEventHandler/_GKChallengeEventHandlerDelegate::RemotePlayerCompletedChallenge(GameKit.GKChallenge) */ },
		{ /* #7164 = 0x37F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DB2 /* System.Boolean GameKit.GKChallengeEventHandler/_GKChallengeEventHandlerDelegate::ShouldShowBannerForLocallyCompletedChallenge(GameKit.GKChallenge) */ },
		{ /* #7165 = 0x37F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DB3 /* System.Boolean GameKit.GKChallengeEventHandler/_GKChallengeEventHandlerDelegate::ShouldShowBannerForLocallyReceivedChallenge(GameKit.GKChallenge) */ },
		{ /* #7166 = 0x37FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DB4 /* System.Boolean GameKit.GKChallengeEventHandler/_GKChallengeEventHandlerDelegate::ShouldShowBannerForRemotelyCompletedChallenge(GameKit.GKChallenge) */ },
		{ /* #7167 = 0x37FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DAD /* System.Void GameKit.GKChallengeEventHandler/_GKChallengeEventHandlerDelegate::.ctor() */ },
		{ /* #7168 = 0x37FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F0E /* GameKit.GKChallengeEventHandler */ },
		{ /* #7169 = 0x3801 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002696 /* GameKit.GKFriendRequestComposeViewController/_GKFriendRequestComposeViewControllerDelegate */ },
		{ /* #7170 = 0x3803 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DB6 /* System.Void GameKit.GKFriendRequestComposeViewController/_GKFriendRequestComposeViewControllerDelegate::DidFinish(GameKit.GKFriendRequestComposeViewController) */ },
		{ /* #7171 = 0x3805 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DB5 /* System.Void GameKit.GKFriendRequestComposeViewController/_GKFriendRequestComposeViewControllerDelegate::.ctor() */ },
		{ /* #7172 = 0x3807 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F21 /* GameKit.GKFriendRequestComposeViewController */ },
		{ /* #7173 = 0x3809 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F2B /* GameKit.GKGameSession */ },
		{ /* #7174 = 0x380B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F38 /* GameKit.GKLeaderboard */ },
		{ /* #7175 = 0x380D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F3C /* GameKit.GKLeaderboardEntry */ },
		{ /* #7176 = 0x380F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F3F /* GameKit.GKLeaderboardSet */ },
		{ /* #7177 = 0x3811 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20026B3 /* GameKit.GKLeaderboardViewController/_GKLeaderboardViewControllerDelegate */ },
		{ /* #7178 = 0x3813 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DF0 /* System.Void GameKit.GKLeaderboardViewController/_GKLeaderboardViewControllerDelegate::DidFinish(GameKit.GKLeaderboardViewController) */ },
		{ /* #7179 = 0x3815 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018DEF /* System.Void GameKit.GKLeaderboardViewController/_GKLeaderboardViewControllerDelegate::.ctor() */ },
		{ /* #7180 = 0x3817 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F42 /* GameKit.GKLeaderboardViewController */ },
		{ /* #7181 = 0x3819 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F68 /* GameKit.GKPlayer */ },
		{ /* #7182 = 0x381B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F46 /* GameKit.GKLocalPlayer */ },
		{ /* #7183 = 0x381D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F56 /* GameKit.GKMatchmaker */ },
		{ /* #7184 = 0x381F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20026CA /* GameKit.GKMatchmakerViewController/_GKMatchmakerViewControllerDelegate */ },
		{ /* #7185 = 0x3821 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018E1E /* System.Void GameKit.GKMatchmakerViewController/_GKMatchmakerViewControllerDelegate::DidFailWithError(GameKit.GKMatchmakerViewController,Foundation.NSError) */ },
		{ /* #7186 = 0x3823 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018E1F /* System.Void GameKit.GKMatchmakerViewController/_GKMatchmakerViewControllerDelegate::DidFindHostedPlayers(GameKit.GKMatchmakerViewController,GameKit.GKPlayer[]) */ },
		{ /* #7187 = 0x3825 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018E20 /* System.Void GameKit.GKMatchmakerViewController/_GKMatchmakerViewControllerDelegate::DidFindMatch(GameKit.GKMatchmakerViewController,GameKit.GKMatch) */ },
		{ /* #7188 = 0x3827 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018E21 /* System.Void GameKit.GKMatchmakerViewController/_GKMatchmakerViewControllerDelegate::DidFindPlayers(GameKit.GKMatchmakerViewController,System.String[]) */ },
		{ /* #7189 = 0x3829 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018E22 /* System.Void GameKit.GKMatchmakerViewController/_GKMatchmakerViewControllerDelegate::HostedPlayerDidAccept(GameKit.GKMatchmakerViewController,GameKit.GKPlayer) */ },
		{ /* #7190 = 0x382B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018E23 /* System.Void GameKit.GKMatchmakerViewController/_GKMatchmakerViewControllerDelegate::ReceivedAcceptFromHostedPlayer(GameKit.GKMatchmakerViewController,System.String) */ },
		{ /* #7191 = 0x382D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018E24 /* System.Void GameKit.GKMatchmakerViewController/_GKMatchmakerViewControllerDelegate::WasCancelled(GameKit.GKMatchmakerViewController) */ },
		{ /* #7192 = 0x382F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018E1D /* System.Void GameKit.GKMatchmakerViewController/_GKMatchmakerViewControllerDelegate::.ctor() */ },
		{ /* #7193 = 0x3831 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F57 /* GameKit.GKMatchmakerViewController */ },
		{ /* #7194 = 0x3833 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F65 /* GameKit.GKNotificationBanner */ },
		{ /* #7195 = 0x3835 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F6A /* GameKit.GKSavedGame */ },
		{ /* #7196 = 0x3837 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F6F /* GameKit.GKScore */ },
		{ /* #7197 = 0x3839 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000F83 /* GameKit.GKTurnBasedMatch */ },
		{ /* #7198 = 0x383B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FA9 /* GameController.GCController */ },
		{ /* #7199 = 0x383D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FE8 /* GameController.GCKeyboard */ },
		{ /* #7200 = 0x383F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FF0 /* GameController.GCMouse */ },
		{ /* #7201 = 0x3841 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000FF8 /* GameController.GCRacingWheel */ },
		{ /* #7202 = 0x3843 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001021 /* GLKit.GLKTextureLoader */ },
		{ /* #7203 = 0x3845 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001035 /* WebKit.WKWebView */ },
		{ /* #7204 = 0x3847 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200270C /* WebKit.DomNode/DomNodeEventProxy */ },
		{ /* #7205 = 0x3849 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EB8 /* System.Void WebKit.DomNode/DomNodeEventProxy::HandleEvent(WebKit.DomEvent) */ },
		{ /* #7206 = 0x384B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200270D /* WebKit.DomNode/DomNodeEventProxy2 */ },
		{ /* #7207 = 0x384D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EBA /* System.Void WebKit.DomNode/DomNodeEventProxy2::HandleEvent(WebKit.DomEvent) */ },
		{ /* #7208 = 0x384F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200270E /* WebKit.WebView/_WebFrameLoadDelegate */ },
		{ /* #7209 = 0x3851 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EBC /* System.Void WebKit.WebView/_WebFrameLoadDelegate::CanceledClientRedirect(WebKit.WebView,WebKit.WebFrame) */ },
		{ /* #7210 = 0x3853 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EBD /* System.Void WebKit.WebView/_WebFrameLoadDelegate::ChangedLocationWithinPage(WebKit.WebView,WebKit.WebFrame) */ },
		{ /* #7211 = 0x3855 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EBE /* System.Void WebKit.WebView/_WebFrameLoadDelegate::ClearedWindowObject(WebKit.WebView,WebKit.WebScriptObject,WebKit.WebFrame) */ },
		{ /* #7212 = 0x3857 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EBF /* System.Void WebKit.WebView/_WebFrameLoadDelegate::CommitedLoad(WebKit.WebView,WebKit.WebFrame) */ },
		{ /* #7213 = 0x3859 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EC0 /* System.Void WebKit.WebView/_WebFrameLoadDelegate::DidCreateJavaScriptContext(WebKit.WebView,JavaScriptCore.JSContext,WebKit.WebFrame) */ },
		{ /* #7214 = 0x385B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EC1 /* System.Void WebKit.WebView/_WebFrameLoadDelegate::FailedLoadWithError(WebKit.WebView,Foundation.NSError,WebKit.WebFrame) */ },
		{ /* #7215 = 0x385D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EC2 /* System.Void WebKit.WebView/_WebFrameLoadDelegate::FailedProvisionalLoad(WebKit.WebView,Foundation.NSError,WebKit.WebFrame) */ },
		{ /* #7216 = 0x385F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EC3 /* System.Void WebKit.WebView/_WebFrameLoadDelegate::FinishedLoad(WebKit.WebView,WebKit.WebFrame) */ },
		{ /* #7217 = 0x3861 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EC4 /* System.Void WebKit.WebView/_WebFrameLoadDelegate::ReceivedIcon(WebKit.WebView,AppKit.NSImage,WebKit.WebFrame) */ },
		{ /* #7218 = 0x3863 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EC5 /* System.Void WebKit.WebView/_WebFrameLoadDelegate::ReceivedServerRedirectForProvisionalLoad(WebKit.WebView,WebKit.WebFrame) */ },
		{ /* #7219 = 0x3865 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EC6 /* System.Void WebKit.WebView/_WebFrameLoadDelegate::ReceivedTitle(WebKit.WebView,System.String,WebKit.WebFrame) */ },
		{ /* #7220 = 0x3867 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EC7 /* System.Void WebKit.WebView/_WebFrameLoadDelegate::StartedProvisionalLoad(WebKit.WebView,WebKit.WebFrame) */ },
		{ /* #7221 = 0x3869 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EC8 /* System.Void WebKit.WebView/_WebFrameLoadDelegate::WillCloseFrame(WebKit.WebView,WebKit.WebFrame) */ },
		{ /* #7222 = 0x386B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EC9 /* System.Void WebKit.WebView/_WebFrameLoadDelegate::WillPerformClientRedirect(WebKit.WebView,Foundation.NSUrl,System.Double,Foundation.NSDate,WebKit.WebFrame) */ },
		{ /* #7223 = 0x386D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ECA /* System.Void WebKit.WebView/_WebFrameLoadDelegate::WindowScriptObjectAvailable(WebKit.WebView,WebKit.WebScriptObject) */ },
		{ /* #7224 = 0x386F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EBB /* System.Void WebKit.WebView/_WebFrameLoadDelegate::.ctor() */ },
		{ /* #7225 = 0x3871 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200270F /* WebKit.WebView/_WebDownloadDelegate */ },
		{ /* #7226 = 0x3873 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ECC /* AppKit.NSWindow WebKit.WebView/_WebDownloadDelegate::OnDownloadWindowForSheet(WebKit.WebDownload) */ },
		{ /* #7227 = 0x3875 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ECB /* System.Void WebKit.WebView/_WebDownloadDelegate::.ctor() */ },
		{ /* #7228 = 0x3877 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002710 /* WebKit.WebView/_WebResourceLoadDelegate */ },
		{ /* #7229 = 0x3879 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ECE /* System.Void WebKit.WebView/_WebResourceLoadDelegate::OnCancelledAuthenticationChallenge(WebKit.WebView,Foundation.NSObject,Foundation.NSUrlAuthenticationChallenge,WebKit.WebDataSource) */ },
		{ /* #7230 = 0x387B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ECF /* System.Void WebKit.WebView/_WebResourceLoadDelegate::OnFailedLoading(WebKit.WebView,Foundation.NSObject,Foundation.NSError,WebKit.WebDataSource) */ },
		{ /* #7231 = 0x387D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ED0 /* System.Void WebKit.WebView/_WebResourceLoadDelegate::OnFinishedLoading(WebKit.WebView,Foundation.NSObject,WebKit.WebDataSource) */ },
		{ /* #7232 = 0x387F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ED1 /* Foundation.NSObject WebKit.WebView/_WebResourceLoadDelegate::OnIdentifierForInitialRequest(WebKit.WebView,Foundation.NSUrlRequest,WebKit.WebDataSource) */ },
		{ /* #7233 = 0x3881 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ED2 /* System.Void WebKit.WebView/_WebResourceLoadDelegate::OnPlugInFailed(WebKit.WebView,Foundation.NSError,WebKit.WebDataSource) */ },
		{ /* #7234 = 0x3883 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ED3 /* System.Void WebKit.WebView/_WebResourceLoadDelegate::OnReceivedAuthenticationChallenge(WebKit.WebView,Foundation.NSObject,Foundation.NSUrlAuthenticationChallenge,WebKit.WebDataSource) */ },
		{ /* #7235 = 0x3885 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ED4 /* System.Void WebKit.WebView/_WebResourceLoadDelegate::OnReceivedContentLength(WebKit.WebView,Foundation.NSObject,System.IntPtr,WebKit.WebDataSource) */ },
		{ /* #7236 = 0x3887 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ED5 /* System.Void WebKit.WebView/_WebResourceLoadDelegate::OnReceivedResponse(WebKit.WebView,Foundation.NSObject,Foundation.NSUrlResponse,WebKit.WebDataSource) */ },
		{ /* #7237 = 0x3889 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ED6 /* Foundation.NSUrlRequest WebKit.WebView/_WebResourceLoadDelegate::OnSendRequest(WebKit.WebView,Foundation.NSObject,Foundation.NSUrlRequest,Foundation.NSUrlResponse,WebKit.WebDataSource) */ },
		{ /* #7238 = 0x388B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ECD /* System.Void WebKit.WebView/_WebResourceLoadDelegate::.ctor() */ },
		{ /* #7239 = 0x388D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002711 /* WebKit.WebView/_WebUIDelegate */ },
		{ /* #7240 = 0x388F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ED8 /* System.Boolean WebKit.WebView/_WebUIDelegate::UIAreToolbarsVisible(WebKit.WebView) */ },
		{ /* #7241 = 0x3891 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ED9 /* System.Void WebKit.WebView/_WebUIDelegate::UIClose(WebKit.WebView) */ },
		{ /* #7242 = 0x3893 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EDA /* WebKit.WebView WebKit.WebView/_WebUIDelegate::UICreateModalDialog(WebKit.WebView,Foundation.NSUrlRequest) */ },
		{ /* #7243 = 0x3895 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EDB /* WebKit.WebView WebKit.WebView/_WebUIDelegate::UICreateWebView(WebKit.WebView,Foundation.NSUrlRequest) */ },
		{ /* #7244 = 0x3897 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EDC /* WebKit.WebDragSourceAction WebKit.WebView/_WebUIDelegate::UIDragSourceActionMask(WebKit.WebView,CoreGraphics.CGPoint) */ },
		{ /* #7245 = 0x3899 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EDD /* System.Void WebKit.WebView/_WebUIDelegate::UIDrawFooterInRect(WebKit.WebView,CoreGraphics.CGRect) */ },
		{ /* #7246 = 0x389B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EDE /* System.Void WebKit.WebView/_WebUIDelegate::UIDrawHeaderInRect(WebKit.WebView,CoreGraphics.CGRect) */ },
		{ /* #7247 = 0x389D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EDF /* System.Void WebKit.WebView/_WebUIDelegate::UIFocus(WebKit.WebView) */ },
		{ /* #7248 = 0x389F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EE0 /* CoreGraphics.CGRect WebKit.WebView/_WebUIDelegate::UIGetContentRect(WebKit.WebView) */ },
		{ /* #7249 = 0x38A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EE1 /* AppKit.NSMenuItem[] WebKit.WebView/_WebUIDelegate::UIGetContextMenuItems(WebKit.WebView,Foundation.NSDictionary,AppKit.NSMenuItem[]) */ },
		{ /* #7250 = 0x38A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EE2 /* WebKit.WebDragDestinationAction WebKit.WebView/_WebUIDelegate::UIGetDragDestinationActionMask(WebKit.WebView,AppKit.INSDraggingInfo) */ },
		{ /* #7251 = 0x38A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EE3 /* AppKit.NSResponder WebKit.WebView/_WebUIDelegate::UIGetFirstResponder(WebKit.WebView) */ },
		{ /* #7252 = 0x38A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EE4 /* System.Single WebKit.WebView/_WebUIDelegate::UIGetFooterHeight(WebKit.WebView) */ },
		{ /* #7253 = 0x38A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EE5 /* CoreGraphics.CGRect WebKit.WebView/_WebUIDelegate::UIGetFrame(WebKit.WebView) */ },
		{ /* #7254 = 0x38AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EE6 /* System.Single WebKit.WebView/_WebUIDelegate::UIGetHeaderHeight(WebKit.WebView) */ },
		{ /* #7255 = 0x38AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EE7 /* System.String WebKit.WebView/_WebUIDelegate::UIGetStatusText(WebKit.WebView) */ },
		{ /* #7256 = 0x38AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EE8 /* System.Boolean WebKit.WebView/_WebUIDelegate::UIIsResizable(WebKit.WebView) */ },
		{ /* #7257 = 0x38B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EE9 /* System.Boolean WebKit.WebView/_WebUIDelegate::UIIsStatusBarVisible(WebKit.WebView) */ },
		{ /* #7258 = 0x38B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EEA /* System.Void WebKit.WebView/_WebUIDelegate::UIMakeFirstResponder(WebKit.WebView,AppKit.NSResponder) */ },
		{ /* #7259 = 0x38B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EEB /* System.Void WebKit.WebView/_WebUIDelegate::UIMouseDidMoveOverElement(WebKit.WebView,Foundation.NSDictionary,AppKit.NSEventModifierMask) */ },
		{ /* #7260 = 0x38B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EEC /* System.Void WebKit.WebView/_WebUIDelegate::UIPrintFrameView(WebKit.WebView,WebKit.WebFrameView) */ },
		{ /* #7261 = 0x38B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EED /* System.Boolean WebKit.WebView/_WebUIDelegate::UIRunBeforeUnload(WebKit.WebView,System.String,WebKit.WebFrame) */ },
		{ /* #7262 = 0x38BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EEE /* System.Void WebKit.WebView/_WebUIDelegate::UIRunJavaScriptAlertPanel(WebKit.WebView,System.String) */ },
		{ /* #7263 = 0x38BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EEF /* System.Void WebKit.WebView/_WebUIDelegate::UIRunJavaScriptAlertPanelMessage(WebKit.WebView,System.String,WebKit.WebFrame) */ },
		{ /* #7264 = 0x38BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EF0 /* System.Boolean WebKit.WebView/_WebUIDelegate::UIRunJavaScriptConfirmPanel(WebKit.WebView,System.String) */ },
		{ /* #7265 = 0x38C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EF1 /* System.Boolean WebKit.WebView/_WebUIDelegate::UIRunJavaScriptConfirmationPanel(WebKit.WebView,System.String,WebKit.WebFrame) */ },
		{ /* #7266 = 0x38C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EF2 /* System.String WebKit.WebView/_WebUIDelegate::UIRunJavaScriptTextInputPanel(WebKit.WebView,System.String,System.String) */ },
		{ /* #7267 = 0x38C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EF3 /* System.String WebKit.WebView/_WebUIDelegate::UIRunJavaScriptTextInputPanelWithFrame(WebKit.WebView,System.String,System.String,WebKit.WebFrame) */ },
		{ /* #7268 = 0x38C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EF4 /* System.Void WebKit.WebView/_WebUIDelegate::UIRunModal(WebKit.WebView) */ },
		{ /* #7269 = 0x38C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EF5 /* System.Void WebKit.WebView/_WebUIDelegate::UIRunOpenPanelForFileButton(WebKit.WebView,WebKit.IWebOpenPanelResultListener) */ },
		{ /* #7270 = 0x38CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EF6 /* System.Void WebKit.WebView/_WebUIDelegate::UISetContentRect(WebKit.WebView,CoreGraphics.CGRect) */ },
		{ /* #7271 = 0x38CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EF7 /* System.Void WebKit.WebView/_WebUIDelegate::UISetFrame(WebKit.WebView,CoreGraphics.CGRect) */ },
		{ /* #7272 = 0x38CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EF8 /* System.Void WebKit.WebView/_WebUIDelegate::UISetResizable(WebKit.WebView,System.Boolean) */ },
		{ /* #7273 = 0x38D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EF9 /* System.Void WebKit.WebView/_WebUIDelegate::UISetStatusBarVisible(WebKit.WebView,System.Boolean) */ },
		{ /* #7274 = 0x38D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EFA /* System.Void WebKit.WebView/_WebUIDelegate::UISetStatusText(WebKit.WebView,System.String) */ },
		{ /* #7275 = 0x38D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EFB /* System.Void WebKit.WebView/_WebUIDelegate::UISetToolbarsVisible(WebKit.WebView,System.Boolean) */ },
		{ /* #7276 = 0x38D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EFC /* System.Boolean WebKit.WebView/_WebUIDelegate::UIShouldPerformAction(WebKit.WebView,ObjCRuntime.Selector,Foundation.NSObject) */ },
		{ /* #7277 = 0x38D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EFD /* System.Void WebKit.WebView/_WebUIDelegate::UIShow(WebKit.WebView) */ },
		{ /* #7278 = 0x38DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EFE /* System.Void WebKit.WebView/_WebUIDelegate::UIUnfocus(WebKit.WebView) */ },
		{ /* #7279 = 0x38DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018EFF /* System.Boolean WebKit.WebView/_WebUIDelegate::UIValidateUserInterfaceItem(WebKit.WebView,Foundation.NSObject,System.Boolean) */ },
		{ /* #7280 = 0x38DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F00 /* System.Void WebKit.WebView/_WebUIDelegate::UIWillPerformDragDestination(WebKit.WebView,WebKit.WebDragDestinationAction,AppKit.INSDraggingInfo) */ },
		{ /* #7281 = 0x38E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F01 /* System.Void WebKit.WebView/_WebUIDelegate::UIWillPerformDragSource(WebKit.WebView,WebKit.WebDragSourceAction,CoreGraphics.CGPoint,AppKit.NSPasteboard) */ },
		{ /* #7282 = 0x38E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018ED7 /* System.Void WebKit.WebView/_WebUIDelegate::.ctor() */ },
		{ /* #7283 = 0x38E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002712 /* WebKit.WebView/_WebPolicyDelegate */ },
		{ /* #7284 = 0x38E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F03 /* System.Void WebKit.WebView/_WebPolicyDelegate::DecidePolicyForMimeType(WebKit.WebView,System.String,Foundation.NSUrlRequest,WebKit.WebFrame,Foundation.NSObject) */ },
		{ /* #7285 = 0x38E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F04 /* System.Void WebKit.WebView/_WebPolicyDelegate::DecidePolicyForNavigation(WebKit.WebView,Foundation.NSDictionary,Foundation.NSUrlRequest,WebKit.WebFrame,Foundation.NSObject) */ },
		{ /* #7286 = 0x38EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F05 /* System.Void WebKit.WebView/_WebPolicyDelegate::DecidePolicyForNewWindow(WebKit.WebView,Foundation.NSDictionary,Foundation.NSUrlRequest,System.String,Foundation.NSObject) */ },
		{ /* #7287 = 0x38ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F06 /* System.Void WebKit.WebView/_WebPolicyDelegate::UnableToImplementPolicy(WebKit.WebView,Foundation.NSError,WebKit.WebFrame) */ },
		{ /* #7288 = 0x38EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F02 /* System.Void WebKit.WebView/_WebPolicyDelegate::.ctor() */ },
		{ /* #7289 = 0x38F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200104A /* WebKit.WebView */ },
		{ /* #7290 = 0x38F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20010DE /* WebKit.WebHistoryItem */ },
		{ /* #7291 = 0x38F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200111B /* WebKit.WKContentRuleListStore */ },
		{ /* #7292 = 0x38F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200111E /* WebKit.WKDownload */ },
		{ /* #7293 = 0x38F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200112A /* WebKit.WKHttpCookieStore */ },
		{ /* #7294 = 0x38FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001154 /* WebKit.WKWebsiteDataStore */ },
		{ /* #7295 = 0x38FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001172 /* Foundation.NSCalendar */ },
		{ /* #7296 = 0x38FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001179 /* Foundation.NSDictionary */ },
		{ /* #7297 = 0x3901 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001188 /* Foundation.NSFileManager */ },
		{ /* #7298 = 0x3903 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200118B /* Foundation.NSHost */ },
		{ /* #7299 = 0x3905 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200118D /* Foundation.NSIndexPath */ },
		{ /* #7300 = 0x3907 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001190 /* Foundation.NSItemProvider */ },
		{ /* #7301 = 0x3909 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002744 /* Foundation.NSKeyedArchiver/_NSKeyedArchiverDelegate */ },
		{ /* #7302 = 0x390B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F8F /* System.Void Foundation.NSKeyedArchiver/_NSKeyedArchiverDelegate::EncodedObject(Foundation.NSKeyedArchiver,Foundation.NSObject) */ },
		{ /* #7303 = 0x390D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F90 /* System.Void Foundation.NSKeyedArchiver/_NSKeyedArchiverDelegate::Finished(Foundation.NSKeyedArchiver) */ },
		{ /* #7304 = 0x390F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F91 /* System.Void Foundation.NSKeyedArchiver/_NSKeyedArchiverDelegate::Finishing(Foundation.NSKeyedArchiver) */ },
		{ /* #7305 = 0x3911 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F92 /* System.Void Foundation.NSKeyedArchiver/_NSKeyedArchiverDelegate::ReplacingObject(Foundation.NSKeyedArchiver,Foundation.NSObject,Foundation.NSObject) */ },
		{ /* #7306 = 0x3913 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F93 /* Foundation.NSObject Foundation.NSKeyedArchiver/_NSKeyedArchiverDelegate::WillEncode(Foundation.NSKeyedArchiver,Foundation.NSObject) */ },
		{ /* #7307 = 0x3915 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F8E /* System.Void Foundation.NSKeyedArchiver/_NSKeyedArchiverDelegate::.ctor() */ },
		{ /* #7308 = 0x3917 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001191 /* Foundation.NSKeyedArchiver */ },
		{ /* #7309 = 0x3919 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002745 /* Foundation.NSKeyedUnarchiver/_NSKeyedUnarchiverDelegate */ },
		{ /* #7310 = 0x391B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F95 /* ObjCRuntime.Class Foundation.NSKeyedUnarchiver/_NSKeyedUnarchiverDelegate::CannotDecodeClass(Foundation.NSKeyedUnarchiver,System.String,System.String[]) */ },
		{ /* #7311 = 0x391D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F96 /* Foundation.NSObject Foundation.NSKeyedUnarchiver/_NSKeyedUnarchiverDelegate::DecodedObject(Foundation.NSKeyedUnarchiver,Foundation.NSObject) */ },
		{ /* #7312 = 0x391F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F97 /* System.Void Foundation.NSKeyedUnarchiver/_NSKeyedUnarchiverDelegate::Finished(Foundation.NSKeyedUnarchiver) */ },
		{ /* #7313 = 0x3921 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F98 /* System.Void Foundation.NSKeyedUnarchiver/_NSKeyedUnarchiverDelegate::Finishing(Foundation.NSKeyedUnarchiver) */ },
		{ /* #7314 = 0x3923 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F99 /* System.Void Foundation.NSKeyedUnarchiver/_NSKeyedUnarchiverDelegate::ReplacingObject(Foundation.NSKeyedUnarchiver,Foundation.NSObject,Foundation.NSObject) */ },
		{ /* #7315 = 0x3925 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018F94 /* System.Void Foundation.NSKeyedUnarchiver/_NSKeyedUnarchiverDelegate::.ctor() */ },
		{ /* #7316 = 0x3927 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001193 /* Foundation.NSLocale */ },
		{ /* #7317 = 0x3929 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001198 /* Foundation.NSMutableDictionary */ },
		{ /* #7318 = 0x392B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200274C /* Foundation.NSNetService/_NSNetServiceDelegate */ },
		{ /* #7319 = 0x392D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FB8 /* System.Void Foundation.NSNetService/_NSNetServiceDelegate::AddressResolved(Foundation.NSNetService) */ },
		{ /* #7320 = 0x392F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FB9 /* System.Void Foundation.NSNetService/_NSNetServiceDelegate::DidAcceptConnection(Foundation.NSNetService,Foundation.NSInputStream,Foundation.NSOutputStream) */ },
		{ /* #7321 = 0x3931 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FBA /* System.Void Foundation.NSNetService/_NSNetServiceDelegate::PublishFailure(Foundation.NSNetService,Foundation.NSDictionary) */ },
		{ /* #7322 = 0x3933 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FBB /* System.Void Foundation.NSNetService/_NSNetServiceDelegate::Published(Foundation.NSNetService) */ },
		{ /* #7323 = 0x3935 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FBC /* System.Void Foundation.NSNetService/_NSNetServiceDelegate::ResolveFailure(Foundation.NSNetService,Foundation.NSDictionary) */ },
		{ /* #7324 = 0x3937 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FBD /* System.Void Foundation.NSNetService/_NSNetServiceDelegate::Stopped(Foundation.NSNetService) */ },
		{ /* #7325 = 0x3939 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FBE /* System.Void Foundation.NSNetService/_NSNetServiceDelegate::UpdatedTxtRecordData(Foundation.NSNetService,Foundation.NSData) */ },
		{ /* #7326 = 0x393B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FBF /* System.Void Foundation.NSNetService/_NSNetServiceDelegate::WillPublish(Foundation.NSNetService) */ },
		{ /* #7327 = 0x393D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FC0 /* System.Void Foundation.NSNetService/_NSNetServiceDelegate::WillResolve(Foundation.NSNetService) */ },
		{ /* #7328 = 0x393F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FB7 /* System.Void Foundation.NSNetService/_NSNetServiceDelegate::.ctor() */ },
		{ /* #7329 = 0x3941 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011A0 /* Foundation.NSNetService */ },
		{ /* #7330 = 0x3943 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002751 /* Foundation.NSObject/NSObject_Disposer */ },
		{ /* #7331 = 0x3945 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FC5 /* System.Void Foundation.NSObject/NSObject_Disposer::Drain(Foundation.NSObject) */ },
		{ /* #7332 = 0x3947 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FC2 /* System.Void Foundation.NSObject/NSObject_Disposer::.ctor() */ },
		{ /* #7333 = 0x3949 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002752 /* Foundation.NSObject/Observer */ },
		{ /* #7334 = 0x394B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FC8 /* System.Void Foundation.NSObject/Observer::ObserveValue(Foundation.NSString,Foundation.NSObject,Foundation.NSDictionary,System.IntPtr) */ },
		{ /* #7335 = 0x394D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011AF /* Foundation.NSProgress */ },
		{ /* #7336 = 0x394F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002758 /* Foundation.NSStream/_NSStreamDelegate */ },
		{ /* #7337 = 0x3951 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FE2 /* System.Void Foundation.NSStream/_NSStreamDelegate::HandleEvent(Foundation.NSStream,Foundation.NSStreamEvent) */ },
		{ /* #7338 = 0x3953 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FE1 /* System.Void Foundation.NSStream/_NSStreamDelegate::.ctor() */ },
		{ /* #7339 = 0x3955 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011C4 /* Foundation.NSThread */ },
		{ /* #7340 = 0x3957 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200275B /* Foundation.NSThread/ActionThread */ },
		{ /* #7341 = 0x3959 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6018FE8 /* System.Void Foundation.NSThread/ActionThread::Main() */ },
		{ /* #7342 = 0x395B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011C7 /* Foundation.NSUbiquitousKeyValueStore */ },
		{ /* #7343 = 0x395D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011C8 /* Foundation.NSUndoManager */ },
		{ /* #7344 = 0x395F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011C9 /* Foundation.NSUrl */ },
		{ /* #7345 = 0x3961 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011CB /* Foundation.NSUrlConnection */ },
		{ /* #7346 = 0x3963 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011D1 /* Foundation.NSUrlSessionConfiguration */ },
		{ /* #7347 = 0x3965 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011D3 /* Foundation.NSUserDefaults */ },
		{ /* #7348 = 0x3967 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002769 /* Foundation.NSUrlSessionHandler/WrappedNSInputStream */ },
		{ /* #7349 = 0x3969 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601904C /* Foundation.NSStreamStatus Foundation.NSUrlSessionHandler/WrappedNSInputStream::get_Status() */ },
		{ /* #7350 = 0x396B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601904D /* System.Void Foundation.NSUrlSessionHandler/WrappedNSInputStream::Open() */ },
		{ /* #7351 = 0x396D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601904E /* System.Void Foundation.NSUrlSessionHandler/WrappedNSInputStream::Close() */ },
		{ /* #7352 = 0x396F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601904F /* System.IntPtr Foundation.NSUrlSessionHandler/WrappedNSInputStream::Read(System.IntPtr,System.UIntPtr) */ },
		{ /* #7353 = 0x3971 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019050 /* System.Boolean Foundation.NSUrlSessionHandler/WrappedNSInputStream::HasBytesAvailable() */ },
		{ /* #7354 = 0x3973 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019051 /* System.Boolean Foundation.NSUrlSessionHandler/WrappedNSInputStream::GetBuffer(System.IntPtr&,System.UIntPtr&) */ },
		{ /* #7355 = 0x3975 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019052 /* Foundation.NSObject Foundation.NSUrlSessionHandler/WrappedNSInputStream::GetProperty(Foundation.NSString) */ },
		{ /* #7356 = 0x3977 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019053 /* System.Boolean Foundation.NSUrlSessionHandler/WrappedNSInputStream::SetProperty(Foundation.NSObject,Foundation.NSString) */ },
		{ /* #7357 = 0x3979 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019054 /* System.Boolean Foundation.NSUrlSessionHandler/WrappedNSInputStream::SetCFClientFlags(CoreFoundation.CFStreamEventType,System.IntPtr,System.IntPtr) */ },
		{ /* #7358 = 0x397B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019055 /* System.Void Foundation.NSUrlSessionHandler/WrappedNSInputStream::Schedule(Foundation.NSRunLoop,Foundation.NSString) */ },
		{ /* #7359 = 0x397D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019056 /* System.Void Foundation.NSUrlSessionHandler/WrappedNSInputStream::Unschedule(Foundation.NSRunLoop,Foundation.NSString) */ },
		{ /* #7360 = 0x397F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200276E /* Foundation.NSCache/_NSCacheDelegate */ },
		{ /* #7361 = 0x3981 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019063 /* System.Void Foundation.NSCache/_NSCacheDelegate::WillEvictObject(Foundation.NSCache,Foundation.NSObject) */ },
		{ /* #7362 = 0x3983 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019062 /* System.Void Foundation.NSCache/_NSCacheDelegate::.ctor() */ },
		{ /* #7363 = 0x3985 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011FE /* Foundation.NSCache */ },
		{ /* #7364 = 0x3987 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001247 /* Foundation.NSFileHandle */ },
		{ /* #7365 = 0x3989 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001252 /* Foundation.NSFileVersion */ },
		{ /* #7366 = 0x398B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200125F /* Foundation.NSHttpCookieStorage */ },
		{ /* #7367 = 0x398D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002778 /* Foundation.NSMetadataQuery/_NSMetadataQueryDelegate */ },
		{ /* #7368 = 0x398F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019080 /* Foundation.NSObject Foundation.NSMetadataQuery/_NSMetadataQueryDelegate::ReplacementObjectForResultObject(Foundation.NSMetadataQuery,Foundation.NSMetadataItem) */ },
		{ /* #7369 = 0x3991 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019081 /* Foundation.NSObject Foundation.NSMetadataQuery/_NSMetadataQueryDelegate::ReplacementValueForAttributevalue(Foundation.NSMetadataQuery,System.String,Foundation.NSObject) */ },
		{ /* #7370 = 0x3993 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601907F /* System.Void Foundation.NSMetadataQuery/_NSMetadataQueryDelegate::.ctor() */ },
		{ /* #7371 = 0x3995 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012A1 /* Foundation.NSMetadataQuery */ },
		{ /* #7372 = 0x3997 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200277A /* Foundation.NSNetServiceBrowser/_NSNetServiceBrowserDelegate */ },
		{ /* #7373 = 0x3999 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601908B /* System.Void Foundation.NSNetServiceBrowser/_NSNetServiceBrowserDelegate::DomainRemoved(Foundation.NSNetServiceBrowser,System.String,System.Boolean) */ },
		{ /* #7374 = 0x399B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601908C /* System.Void Foundation.NSNetServiceBrowser/_NSNetServiceBrowserDelegate::FoundDomain(Foundation.NSNetServiceBrowser,System.String,System.Boolean) */ },
		{ /* #7375 = 0x399D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601908D /* System.Void Foundation.NSNetServiceBrowser/_NSNetServiceBrowserDelegate::FoundService(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean) */ },
		{ /* #7376 = 0x399F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601908E /* System.Void Foundation.NSNetServiceBrowser/_NSNetServiceBrowserDelegate::NotSearched(Foundation.NSNetServiceBrowser,Foundation.NSDictionary) */ },
		{ /* #7377 = 0x39A1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601908F /* System.Void Foundation.NSNetServiceBrowser/_NSNetServiceBrowserDelegate::SearchStarted(Foundation.NSNetServiceBrowser) */ },
		{ /* #7378 = 0x39A3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019090 /* System.Void Foundation.NSNetServiceBrowser/_NSNetServiceBrowserDelegate::SearchStopped(Foundation.NSNetServiceBrowser) */ },
		{ /* #7379 = 0x39A5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019091 /* System.Void Foundation.NSNetServiceBrowser/_NSNetServiceBrowserDelegate::ServiceRemoved(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean) */ },
		{ /* #7380 = 0x39A7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601908A /* System.Void Foundation.NSNetServiceBrowser/_NSNetServiceBrowserDelegate::.ctor() */ },
		{ /* #7381 = 0x39A9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012B4 /* Foundation.NSNetServiceBrowser */ },
		{ /* #7382 = 0x39AB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20012EC /* Foundation.NSProcessInfo */ },
		{ /* #7383 = 0x39AD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001303 /* Foundation.NSSecureUnarchiveFromDataTransformer */ },
		{ /* #7384 = 0x39AF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001314 /* Foundation.NSTask */ },
		{ /* #7385 = 0x39B1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200133F /* Foundation.NSUrlCache */ },
		{ /* #7386 = 0x39B3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200134F /* Foundation.NSUrlCredentialStorage */ },
		{ /* #7387 = 0x39B5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001378 /* Foundation.NSUrlSessionStreamTask */ },
		{ /* #7388 = 0x39B7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200138D /* Foundation.NSUrlSessionWebSocketTask */ },
		{ /* #7389 = 0x39B9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001390 /* Foundation.NSUserActivity */ },
		{ /* #7390 = 0x39BB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200279C /* Foundation.NSUserNotificationCenter/_NSUserNotificationCenterDelegate */ },
		{ /* #7391 = 0x39BD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60190D8 /* System.Void Foundation.NSUserNotificationCenter/_NSUserNotificationCenterDelegate::DidActivateNotification(Foundation.NSUserNotificationCenter,Foundation.NSUserNotification) */ },
		{ /* #7392 = 0x39BF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60190D9 /* System.Void Foundation.NSUserNotificationCenter/_NSUserNotificationCenterDelegate::DidDeliverNotification(Foundation.NSUserNotificationCenter,Foundation.NSUserNotification) */ },
		{ /* #7393 = 0x39C1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60190DA /* System.Boolean Foundation.NSUserNotificationCenter/_NSUserNotificationCenterDelegate::ShouldPresentNotification(Foundation.NSUserNotificationCenter,Foundation.NSUserNotification) */ },
		{ /* #7394 = 0x39C3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60190D7 /* System.Void Foundation.NSUserNotificationCenter/_NSUserNotificationCenterDelegate::.ctor() */ },
		{ /* #7395 = 0x39C5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200139A /* Foundation.NSUserNotificationCenter */ },
		{ /* #7396 = 0x39C7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013E2 /* FinderSync.FIFinderSync */ },
		{ /* #7397 = 0x39C9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013E3 /* FinderSync.FIFinderSyncController */ },
		{ /* #7398 = 0x39CB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20013F1 /* FileProvider.NSFileProviderDomain */ },
		{ /* #7399 = 0x39CD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200140E /* FileProvider.NSFileProviderManager */ },
		{ /* #7400 = 0x39CF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001451 /* EventKit.EKEventStore */ },
		{ /* #7401 = 0x39D1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001462 /* EventKit.EKVirtualConferenceProvider */ },
		{ /* #7402 = 0x39D3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200146A /* CoreWlan.CWInterface */ },
		{ /* #7403 = 0x39D5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001534 /* CoreSpotlight.CSSearchableIndex */ },
		{ /* #7404 = 0x39D7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001561 /* CoreMotion.CMPedometer */ },
		{ /* #7405 = 0x39D9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200158C /* CoreMidi.MidiCIResponder */ },
		{ /* #7406 = 0x39DB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015D3 /* CoreML.MLMultiArray */ },
		{ /* #7407 = 0x39DD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015EE /* CoreML.MLModel */ },
		{ /* #7408 = 0x39DF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20015F2 /* CoreML.MLModelCollection */ },
		{ /* #7409 = 0x39E1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002812 /* CoreLocation.CLLocationManager/_CLLocationManagerDelegate */ },
		{ /* #7410 = 0x39E3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601918E /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::AuthorizationChanged(CoreLocation.CLLocationManager,CoreLocation.CLAuthorizationStatus) */ },
		{ /* #7411 = 0x39E5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601918F /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::DeferredUpdatesFinished(CoreLocation.CLLocationManager,Foundation.NSError) */ },
		{ /* #7412 = 0x39E7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019190 /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::DidChangeAuthorization(CoreLocation.CLLocationManager) */ },
		{ /* #7413 = 0x39E9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019191 /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::DidDetermineState(CoreLocation.CLLocationManager,CoreLocation.CLRegionState,CoreLocation.CLRegion) */ },
		{ /* #7414 = 0x39EB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019192 /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::DidFailRangingBeacons(CoreLocation.CLLocationManager,CoreLocation.CLBeaconIdentityConstraint,Foundation.NSError) */ },
		{ /* #7415 = 0x39ED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019193 /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::DidRangeBeaconsSatisfyingConstraint(CoreLocation.CLLocationManager,CoreLocation.CLBeacon[],CoreLocation.CLBeaconIdentityConstraint) */ },
		{ /* #7416 = 0x39EF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019194 /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::DidStartMonitoringForRegion(CoreLocation.CLLocationManager,CoreLocation.CLRegion) */ },
		{ /* #7417 = 0x39F1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019195 /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::DidVisit(CoreLocation.CLLocationManager,CoreLocation.CLVisit) */ },
		{ /* #7418 = 0x39F3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019196 /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::Failed(CoreLocation.CLLocationManager,Foundation.NSError) */ },
		{ /* #7419 = 0x39F5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019197 /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::LocationUpdatesPaused(CoreLocation.CLLocationManager) */ },
		{ /* #7420 = 0x39F7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019198 /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::LocationUpdatesResumed(CoreLocation.CLLocationManager) */ },
		{ /* #7421 = 0x39F9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019199 /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::LocationsUpdated(CoreLocation.CLLocationManager,CoreLocation.CLLocation[]) */ },
		{ /* #7422 = 0x39FB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601919A /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::MonitoringFailed(CoreLocation.CLLocationManager,CoreLocation.CLRegion,Foundation.NSError) */ },
		{ /* #7423 = 0x39FD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601919B /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::RegionEntered(CoreLocation.CLLocationManager,CoreLocation.CLRegion) */ },
		{ /* #7424 = 0x39FF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601919C /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::RegionLeft(CoreLocation.CLLocationManager,CoreLocation.CLRegion) */ },
		{ /* #7425 = 0x3A01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601919D /* System.Boolean CoreLocation.CLLocationManager/_CLLocationManagerDelegate::ShouldDisplayHeadingCalibration(CoreLocation.CLLocationManager) */ },
		{ /* #7426 = 0x3A03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601919E /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::UpdatedHeading(CoreLocation.CLLocationManager,CoreLocation.CLHeading) */ },
		{ /* #7427 = 0x3A05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601919F /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::UpdatedLocation(CoreLocation.CLLocationManager,CoreLocation.CLLocation,CoreLocation.CLLocation) */ },
		{ /* #7428 = 0x3A07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601918D /* System.Void CoreLocation.CLLocationManager/_CLLocationManagerDelegate::.ctor() */ },
		{ /* #7429 = 0x3A09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200160D /* CoreLocation.CLLocationManager */ },
		{ /* #7430 = 0x3A0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001619 /* CoreLocation.CLGeocoder */ },
		{ /* #7431 = 0x3A0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019B7 /* CoreData.NSCoreDataCoreSpotlightDelegate */ },
		{ /* #7432 = 0x3A0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019CB /* CoreData.NSManagedObjectContext */ },
		{ /* #7433 = 0x3A11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019E1 /* CoreData.NSPersistentContainer */ },
		{ /* #7434 = 0x3A13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019D4 /* CoreData.NSPersistentCloudKitContainer */ },
		{ /* #7435 = 0x3A15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019DA /* CoreData.NSPersistentCloudKitContainerEvent */ },
		{ /* #7436 = 0x3A17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20019EB /* CoreData.NSPersistentStoreCoordinator */ },
		{ /* #7437 = 0x3A19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002874 /* CoreBluetooth.CBCentralManager/_CBCentralManagerDelegate */ },
		{ /* #7438 = 0x3A1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192E0 /* System.Void CoreBluetooth.CBCentralManager/_CBCentralManagerDelegate::ConnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral) */ },
		{ /* #7439 = 0x3A1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192E1 /* System.Void CoreBluetooth.CBCentralManager/_CBCentralManagerDelegate::DisconnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError) */ },
		{ /* #7440 = 0x3A1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192E2 /* System.Void CoreBluetooth.CBCentralManager/_CBCentralManagerDelegate::DiscoveredPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSDictionary,Foundation.NSNumber) */ },
		{ /* #7441 = 0x3A21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192E3 /* System.Void CoreBluetooth.CBCentralManager/_CBCentralManagerDelegate::FailedToConnectPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError) */ },
		{ /* #7442 = 0x3A23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192E4 /* System.Void CoreBluetooth.CBCentralManager/_CBCentralManagerDelegate::UpdatedState(CoreBluetooth.CBCentralManager) */ },
		{ /* #7443 = 0x3A25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192E5 /* System.Void CoreBluetooth.CBCentralManager/_CBCentralManagerDelegate::WillRestoreState(CoreBluetooth.CBCentralManager,Foundation.NSDictionary) */ },
		{ /* #7444 = 0x3A27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192DF /* System.Void CoreBluetooth.CBCentralManager/_CBCentralManagerDelegate::.ctor() */ },
		{ /* #7445 = 0x3A29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A09 /* CoreBluetooth.CBCentralManager */ },
		{ /* #7446 = 0x3A2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002875 /* CoreBluetooth.CBPeripheral/_CBPeripheralDelegate */ },
		{ /* #7447 = 0x3A2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192E7 /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::DidOpenL2CapChannel(CoreBluetooth.CBPeripheral,CoreBluetooth.CBL2CapChannel,Foundation.NSError) */ },
		{ /* #7448 = 0x3A2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192E8 /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::DiscoveredCharacteristics(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError) */ },
		{ /* #7449 = 0x3A31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192E9 /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::DiscoveredDescriptor(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError) */ },
		{ /* #7450 = 0x3A33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192EA /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::DiscoveredIncludedService(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError) */ },
		{ /* #7451 = 0x3A35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192EB /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::DiscoveredService(CoreBluetooth.CBPeripheral,Foundation.NSError) */ },
		{ /* #7452 = 0x3A37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192EC /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::IsReadyToSendWriteWithoutResponse(CoreBluetooth.CBPeripheral) */ },
		{ /* #7453 = 0x3A39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192ED /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::ModifiedServices(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService[]) */ },
		{ /* #7454 = 0x3A3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192EE /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::RssiRead(CoreBluetooth.CBPeripheral,Foundation.NSNumber,Foundation.NSError) */ },
		{ /* #7455 = 0x3A3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192EF /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::RssiUpdated(CoreBluetooth.CBPeripheral,Foundation.NSError) */ },
		{ /* #7456 = 0x3A3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192F0 /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::UpdatedCharacterteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError) */ },
		{ /* #7457 = 0x3A41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192F1 /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::UpdatedName(CoreBluetooth.CBPeripheral) */ },
		{ /* #7458 = 0x3A43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192F2 /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::UpdatedNotificationState(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError) */ },
		{ /* #7459 = 0x3A45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192F3 /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::UpdatedValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError) */ },
		{ /* #7460 = 0x3A47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192F4 /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::WroteCharacteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError) */ },
		{ /* #7461 = 0x3A49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192F5 /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::WroteDescriptorValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError) */ },
		{ /* #7462 = 0x3A4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192E6 /* System.Void CoreBluetooth.CBPeripheral/_CBPeripheralDelegate::.ctor() */ },
		{ /* #7463 = 0x3A4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A0B /* CoreBluetooth.CBPeripheral */ },
		{ /* #7464 = 0x3A4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002876 /* CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate */ },
		{ /* #7465 = 0x3A51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192F7 /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::AdvertisingStarted(CoreBluetooth.CBPeripheralManager,Foundation.NSError) */ },
		{ /* #7466 = 0x3A53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192F8 /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::CharacteristicSubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic) */ },
		{ /* #7467 = 0x3A55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192F9 /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::CharacteristicUnsubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic) */ },
		{ /* #7468 = 0x3A57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192FA /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::DidOpenL2CapChannel(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBL2CapChannel,Foundation.NSError) */ },
		{ /* #7469 = 0x3A59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192FB /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::DidPublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError) */ },
		{ /* #7470 = 0x3A5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192FC /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::DidUnpublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError) */ },
		{ /* #7471 = 0x3A5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192FD /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::ReadRequestReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest) */ },
		{ /* #7472 = 0x3A5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192FE /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::ReadyToUpdateSubscribers(CoreBluetooth.CBPeripheralManager) */ },
		{ /* #7473 = 0x3A61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192FF /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::ServiceAdded(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBService,Foundation.NSError) */ },
		{ /* #7474 = 0x3A63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019300 /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::StateUpdated(CoreBluetooth.CBPeripheralManager) */ },
		{ /* #7475 = 0x3A65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019301 /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::WillRestoreState(CoreBluetooth.CBPeripheralManager,Foundation.NSDictionary) */ },
		{ /* #7476 = 0x3A67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019302 /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::WriteRequestsReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest[]) */ },
		{ /* #7477 = 0x3A69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60192F6 /* System.Void CoreBluetooth.CBPeripheralManager/_CBPeripheralManagerDelegate::.ctor() */ },
		{ /* #7478 = 0x3A6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A3C /* CoreBluetooth.CBPeripheralManager */ },
		{ /* #7479 = 0x3A6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002877 /* CoreAnimation.CAAnimation/_CAAnimationDelegate */ },
		{ /* #7480 = 0x3A6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019304 /* System.Void CoreAnimation.CAAnimation/_CAAnimationDelegate::AnimationStarted(CoreAnimation.CAAnimation) */ },
		{ /* #7481 = 0x3A71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019305 /* System.Void CoreAnimation.CAAnimation/_CAAnimationDelegate::AnimationStopped(CoreAnimation.CAAnimation,System.Boolean) */ },
		{ /* #7482 = 0x3A73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019303 /* System.Void CoreAnimation.CAAnimation/_CAAnimationDelegate::.ctor() */ },
		{ /* #7483 = 0x3A75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001A8F /* Contacts.CNContactStore */ },
		{ /* #7484 = 0x3A77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AE9 /* CloudKit.CKContainer */ },
		{ /* #7485 = 0x3A79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001AEA /* CloudKit.CKDatabase */ },
		{ /* #7486 = 0x3A7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B49 /* ClassKit.CLSContext */ },
		{ /* #7487 = 0x3A7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B53 /* ClassKit.CLSDataStore */ },
		{ /* #7488 = 0x3A7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B6A /* BackgroundAssets.BADownloadManager */ },
		{ /* #7489 = 0x3A81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B7E /* AuthenticationServices.ASAuthorizationAppleIdCredential */ },
		{ /* #7490 = 0x3A83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B7F /* AuthenticationServices.ASAuthorizationAppleIdProvider */ },
		{ /* #7491 = 0x3A85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001B9E /* AuthenticationServices.ASAuthorizationProviderExtensionAuthorizationRequest */ },
		{ /* #7492 = 0x3A87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BA5 /* AuthenticationServices.ASAuthorizationProviderExtensionLoginConfiguration */ },
		{ /* #7493 = 0x3A89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BA6 /* AuthenticationServices.ASAuthorizationProviderExtensionLoginManager */ },
		{ /* #7494 = 0x3A8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BBE /* AuthenticationServices.ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor */ },
		{ /* #7495 = 0x3A8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BC4 /* AuthenticationServices.ASAuthorizationSingleSignOnCredential */ },
		{ /* #7496 = 0x3A8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BCA /* AuthenticationServices.ASAuthorizationWebBrowserPublicKeyCredentialManager */ },
		{ /* #7497 = 0x3A91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001BCD /* AuthenticationServices.ASCredentialIdentityStore */ },
		{ /* #7498 = 0x3A93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001C1F /* AudioUnit.AUAudioUnit */ },
		{ /* #7499 = 0x3A95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028CF /* AppKit.NSApplication/_NSApplicationDelegate */ },
		{ /* #7500 = 0x3A97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193CF /* AppKit.NSMenu AppKit.NSApplication/_NSApplicationDelegate::ApplicationDockMenu(AppKit.NSApplication) */ },
		{ /* #7501 = 0x3A99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193D0 /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::ApplicationOpenUntitledFile(AppKit.NSApplication) */ },
		{ /* #7502 = 0x3A9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193D1 /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::ApplicationShouldHandleReopen(AppKit.NSApplication,System.Boolean) */ },
		{ /* #7503 = 0x3A9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193D2 /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::ApplicationShouldOpenUntitledFile(AppKit.NSApplication) */ },
		{ /* #7504 = 0x3A9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193D3 /* AppKit.NSApplicationTerminateReply AppKit.NSApplication/_NSApplicationDelegate::ApplicationShouldTerminate(AppKit.NSApplication) */ },
		{ /* #7505 = 0x3AA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193D4 /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::ApplicationShouldTerminateAfterLastWindowClosed(AppKit.NSApplication) */ },
		{ /* #7506 = 0x3AA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193D5 /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::ContinueUserActivity(AppKit.NSApplication,Foundation.NSUserActivity,AppKit.ContinueUserActivityRestorationHandler) */ },
		{ /* #7507 = 0x3AA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019CAB /* AppKit.ContinueUserActivityRestorationHandler ObjCRuntime.Trampolines/NIDContinueUserActivityRestorationHandler::Create(System.IntPtr) */ },
		{ /* #7508 = 0x3AA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193D6 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::DecodedRestorableState(AppKit.NSApplication,Foundation.NSCoder) */ },
		{ /* #7509 = 0x3AA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193D7 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::DidBecomeActive(Foundation.NSNotification) */ },
		{ /* #7510 = 0x3AAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193D8 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::DidFinishLaunching(Foundation.NSNotification) */ },
		{ /* #7511 = 0x3AAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193D9 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::DidHide(Foundation.NSNotification) */ },
		{ /* #7512 = 0x3AAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193DA /* System.Void AppKit.NSApplication/_NSApplicationDelegate::DidResignActive(Foundation.NSNotification) */ },
		{ /* #7513 = 0x3AB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193DB /* System.Void AppKit.NSApplication/_NSApplicationDelegate::DidUnhide(Foundation.NSNotification) */ },
		{ /* #7514 = 0x3AB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193DC /* System.Void AppKit.NSApplication/_NSApplicationDelegate::DidUpdate(Foundation.NSNotification) */ },
		{ /* #7515 = 0x3AB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193DD /* System.Void AppKit.NSApplication/_NSApplicationDelegate::FailedToContinueUserActivity(AppKit.NSApplication,System.String,Foundation.NSError) */ },
		{ /* #7516 = 0x3AB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193DE /* System.Void AppKit.NSApplication/_NSApplicationDelegate::FailedToRegisterForRemoteNotifications(AppKit.NSApplication,Foundation.NSError) */ },
		{ /* #7517 = 0x3AB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193DF /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::HandlesKey(AppKit.NSApplication,System.String) */ },
		{ /* #7518 = 0x3ABB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193E0 /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::OpenFile(AppKit.NSApplication,System.String) */ },
		{ /* #7519 = 0x3ABD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193E1 /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::OpenFileWithoutUI(Foundation.NSObject,System.String) */ },
		{ /* #7520 = 0x3ABF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193E2 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::OpenFiles(AppKit.NSApplication,System.String[]) */ },
		{ /* #7521 = 0x3AC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193E3 /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::OpenTempFile(AppKit.NSApplication,System.String) */ },
		{ /* #7522 = 0x3AC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193E4 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::OpenUrls(AppKit.NSApplication,Foundation.NSUrl[]) */ },
		{ /* #7523 = 0x3AC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193E5 /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::PrintFile(AppKit.NSApplication,System.String) */ },
		{ /* #7524 = 0x3AC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193E6 /* AppKit.NSApplicationPrintReply AppKit.NSApplication/_NSApplicationDelegate::PrintFiles(AppKit.NSApplication,System.String[],Foundation.NSDictionary,System.Boolean) */ },
		{ /* #7525 = 0x3AC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193E7 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::ProtectedDataDidBecomeAvailable(Foundation.NSNotification) */ },
		{ /* #7526 = 0x3ACB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193E8 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::ProtectedDataWillBecomeUnavailable(Foundation.NSNotification) */ },
		{ /* #7527 = 0x3ACD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193E9 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::ReceivedRemoteNotification(AppKit.NSApplication,Foundation.NSDictionary) */ },
		{ /* #7528 = 0x3ACF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193EA /* System.Void AppKit.NSApplication/_NSApplicationDelegate::RegisteredForRemoteNotifications(AppKit.NSApplication,Foundation.NSData) */ },
		{ /* #7529 = 0x3AD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193EB /* System.Void AppKit.NSApplication/_NSApplicationDelegate::ScreenParametersChanged(Foundation.NSNotification) */ },
		{ /* #7530 = 0x3AD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193EC /* System.Void AppKit.NSApplication/_NSApplicationDelegate::UpdatedUserActivity(AppKit.NSApplication,Foundation.NSUserActivity) */ },
		{ /* #7531 = 0x3AD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193ED /* System.Void AppKit.NSApplication/_NSApplicationDelegate::UserDidAcceptCloudKitShare(AppKit.NSApplication,CloudKit.CKShareMetadata) */ },
		{ /* #7532 = 0x3AD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193EE /* System.Void AppKit.NSApplication/_NSApplicationDelegate::WillBecomeActive(Foundation.NSNotification) */ },
		{ /* #7533 = 0x3AD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193EF /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::WillContinueUserActivity(AppKit.NSApplication,System.String) */ },
		{ /* #7534 = 0x3ADB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193F0 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::WillEncodeRestorableState(AppKit.NSApplication,Foundation.NSCoder) */ },
		{ /* #7535 = 0x3ADD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193F1 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::WillFinishLaunching(Foundation.NSNotification) */ },
		{ /* #7536 = 0x3ADF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193F2 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::WillHide(Foundation.NSNotification) */ },
		{ /* #7537 = 0x3AE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193F3 /* Foundation.NSError AppKit.NSApplication/_NSApplicationDelegate::WillPresentError(AppKit.NSApplication,Foundation.NSError) */ },
		{ /* #7538 = 0x3AE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193F4 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::WillResignActive(Foundation.NSNotification) */ },
		{ /* #7539 = 0x3AE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193F5 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::WillTerminate(Foundation.NSNotification) */ },
		{ /* #7540 = 0x3AE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193F6 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::WillUnhide(Foundation.NSNotification) */ },
		{ /* #7541 = 0x3AE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193F7 /* System.Void AppKit.NSApplication/_NSApplicationDelegate::WillUpdate(Foundation.NSNotification) */ },
		{ /* #7542 = 0x3AEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193F8 /* System.Boolean AppKit.NSApplication/_NSApplicationDelegate::RespondsToSelector(ObjCRuntime.Selector) */ },
		{ /* #7543 = 0x3AED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60193CE /* System.Void AppKit.NSApplication/_NSApplicationDelegate::.ctor() */ },
		{ /* #7544 = 0x3AEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CEA /* AppKit.NSApplication */ },
		{ /* #7545 = 0x3AF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CEE /* AppKit.NSBrowser */ },
		{ /* #7546 = 0x3AF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028D2 /* AppKit.NSMatrix/_NSMatrixDelegate */ },
		{ /* #7547 = 0x3AF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019460 /* System.Void AppKit.NSMatrix/_NSMatrixDelegate::.ctor() */ },
		{ /* #7548 = 0x3AF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028D3 /* AppKit.NSPathCell/_NSPathCellDelegate */ },
		{ /* #7549 = 0x3AF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019462 /* System.Void AppKit.NSPathCell/_NSPathCellDelegate::WillDisplayOpenPanel(AppKit.NSPathCell,AppKit.NSOpenPanel) */ },
		{ /* #7550 = 0x3AFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019463 /* System.Void AppKit.NSPathCell/_NSPathCellDelegate::WillPopupMenu(AppKit.NSPathCell,AppKit.NSMenu) */ },
		{ /* #7551 = 0x3AFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019461 /* System.Void AppKit.NSPathCell/_NSPathCellDelegate::.ctor() */ },
		{ /* #7552 = 0x3AFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CF0 /* AppKit.NSPathCell */ },
		{ /* #7553 = 0x3B01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028D4 /* AppKit.NSTableView/_NSTableViewDelegate */ },
		{ /* #7554 = 0x3B03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019465 /* System.Void AppKit.NSTableView/_NSTableViewDelegate::ColumnDidMove(Foundation.NSNotification) */ },
		{ /* #7555 = 0x3B05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019466 /* System.Void AppKit.NSTableView/_NSTableViewDelegate::ColumnDidResize(Foundation.NSNotification) */ },
		{ /* #7556 = 0x3B07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019467 /* AppKit.NSTableRowView AppKit.NSTableView/_NSTableViewDelegate::CoreGetRowView(AppKit.NSTableView,System.IntPtr) */ },
		{ /* #7557 = 0x3B09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019468 /* System.Void AppKit.NSTableView/_NSTableViewDelegate::DidAddRowView(AppKit.NSTableView,AppKit.NSTableRowView,System.IntPtr) */ },
		{ /* #7558 = 0x3B0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019469 /* System.Void AppKit.NSTableView/_NSTableViewDelegate::DidClickTableColumn(AppKit.NSTableView,AppKit.NSTableColumn) */ },
		{ /* #7559 = 0x3B0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601946A /* System.Void AppKit.NSTableView/_NSTableViewDelegate::DidDragTableColumn(AppKit.NSTableView,AppKit.NSTableColumn) */ },
		{ /* #7560 = 0x3B0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601946B /* System.Void AppKit.NSTableView/_NSTableViewDelegate::DidRemoveRowView(AppKit.NSTableView,AppKit.NSTableRowView,System.IntPtr) */ },
		{ /* #7561 = 0x3B11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601946C /* AppKit.NSCell AppKit.NSTableView/_NSTableViewDelegate::GetDataCell(AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr) */ },
		{ /* #7562 = 0x3B13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601946D /* System.IntPtr AppKit.NSTableView/_NSTableViewDelegate::GetNextTypeSelectMatch(AppKit.NSTableView,System.IntPtr,System.IntPtr,System.String) */ },
		{ /* #7563 = 0x3B15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601946E /* System.Runtime.InteropServices.NFloat AppKit.NSTableView/_NSTableViewDelegate::GetRowHeight(AppKit.NSTableView,System.IntPtr) */ },
		{ /* #7564 = 0x3B17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601946F /* System.String AppKit.NSTableView/_NSTableViewDelegate::GetSelectString(AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr) */ },
		{ /* #7565 = 0x3B19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019470 /* Foundation.NSIndexSet AppKit.NSTableView/_NSTableViewDelegate::GetSelectionIndexes(AppKit.NSTableView,Foundation.NSIndexSet) */ },
		{ /* #7566 = 0x3B1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019471 /* System.Runtime.InteropServices.NFloat AppKit.NSTableView/_NSTableViewDelegate::GetSizeToFitColumnWidth(AppKit.NSTableView,System.IntPtr) */ },
		{ /* #7567 = 0x3B1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019472 /* Foundation.NSString AppKit.NSTableView/_NSTableViewDelegate::GetToolTip(AppKit.NSTableView,AppKit.NSCell,CoreGraphics.CGRect&,AppKit.NSTableColumn,System.IntPtr,CoreGraphics.CGPoint) */ },
		{ /* #7568 = 0x3B1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019473 /* AppKit.NSView AppKit.NSTableView/_NSTableViewDelegate::GetViewForItem(AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr) */ },
		{ /* #7569 = 0x3B21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019474 /* System.Boolean AppKit.NSTableView/_NSTableViewDelegate::IsGroupRow(AppKit.NSTableView,System.IntPtr) */ },
		{ /* #7570 = 0x3B23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019475 /* System.Void AppKit.NSTableView/_NSTableViewDelegate::MouseDownInHeaderOfTableColumn(AppKit.NSTableView,AppKit.NSTableColumn) */ },
		{ /* #7571 = 0x3B25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019476 /* AppKit.NSTableViewRowAction[] AppKit.NSTableView/_NSTableViewDelegate::RowActions(AppKit.NSTableView,System.IntPtr,AppKit.NSTableRowActionEdge) */ },
		{ /* #7572 = 0x3B27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019477 /* System.Void AppKit.NSTableView/_NSTableViewDelegate::SelectionDidChange(Foundation.NSNotification) */ },
		{ /* #7573 = 0x3B29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019478 /* System.Void AppKit.NSTableView/_NSTableViewDelegate::SelectionIsChanging(Foundation.NSNotification) */ },
		{ /* #7574 = 0x3B2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019479 /* System.Boolean AppKit.NSTableView/_NSTableViewDelegate::SelectionShouldChange(AppKit.NSTableView) */ },
		{ /* #7575 = 0x3B2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601947A /* System.Boolean AppKit.NSTableView/_NSTableViewDelegate::ShouldEditTableColumn(AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr) */ },
		{ /* #7576 = 0x3B2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601947B /* System.Boolean AppKit.NSTableView/_NSTableViewDelegate::ShouldReorder(AppKit.NSTableView,System.IntPtr,System.IntPtr) */ },
		{ /* #7577 = 0x3B31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601947C /* System.Boolean AppKit.NSTableView/_NSTableViewDelegate::ShouldSelectRow(AppKit.NSTableView,System.IntPtr) */ },
		{ /* #7578 = 0x3B33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601947D /* System.Boolean AppKit.NSTableView/_NSTableViewDelegate::ShouldSelectTableColumn(AppKit.NSTableView,AppKit.NSTableColumn) */ },
		{ /* #7579 = 0x3B35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601947E /* System.Boolean AppKit.NSTableView/_NSTableViewDelegate::ShouldShowCellExpansion(AppKit.NSTableView,AppKit.NSTableColumn,System.IntPtr) */ },
		{ /* #7580 = 0x3B37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601947F /* System.Boolean AppKit.NSTableView/_NSTableViewDelegate::ShouldTrackCell(AppKit.NSTableView,AppKit.NSCell,AppKit.NSTableColumn,System.IntPtr) */ },
		{ /* #7581 = 0x3B39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019480 /* System.Boolean AppKit.NSTableView/_NSTableViewDelegate::ShouldTypeSelect(AppKit.NSTableView,AppKit.NSEvent,System.String) */ },
		{ /* #7582 = 0x3B3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019481 /* System.Void AppKit.NSTableView/_NSTableViewDelegate::WillDisplayCell(AppKit.NSTableView,Foundation.NSObject,AppKit.NSTableColumn,System.IntPtr) */ },
		{ /* #7583 = 0x3B3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019482 /* System.Boolean AppKit.NSTableView/_NSTableViewDelegate::RespondsToSelector(ObjCRuntime.Selector) */ },
		{ /* #7584 = 0x3B3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019464 /* System.Void AppKit.NSTableView/_NSTableViewDelegate::.ctor() */ },
		{ /* #7585 = 0x3B41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CF3 /* AppKit.NSTableView */ },
		{ /* #7586 = 0x3B43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028D6 /* AppKit.NSAlert/_NSAlertDelegate */ },
		{ /* #7587 = 0x3B45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601948D /* System.Boolean AppKit.NSAlert/_NSAlertDelegate::ShowHelp(AppKit.NSAlert) */ },
		{ /* #7588 = 0x3B47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601948C /* System.Void AppKit.NSAlert/_NSAlertDelegate::.ctor() */ },
		{ /* #7589 = 0x3B49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001CFD /* AppKit.NSAlert */ },
		{ /* #7590 = 0x3B4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D07 /* AppKit.NSColor */ },
		{ /* #7591 = 0x3B4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028FC /* AppKit.NSTextField/_NSTextFieldDelegate */ },
		{ /* #7592 = 0x3B4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195DB /* System.Void AppKit.NSTextField/_NSTextFieldDelegate::Changed(Foundation.NSNotification) */ },
		{ /* #7593 = 0x3B51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195DC /* System.Boolean AppKit.NSTextField/_NSTextFieldDelegate::DidFailToFormatString(AppKit.NSControl,System.String,System.String) */ },
		{ /* #7594 = 0x3B53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195DD /* System.Void AppKit.NSTextField/_NSTextFieldDelegate::DidFailToValidatePartialString(AppKit.NSControl,System.String,System.String) */ },
		{ /* #7595 = 0x3B55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195DE /* System.Boolean AppKit.NSTextField/_NSTextFieldDelegate::DoCommandBySelector(AppKit.NSControl,AppKit.NSTextView,ObjCRuntime.Selector) */ },
		{ /* #7596 = 0x3B57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195DF /* System.Void AppKit.NSTextField/_NSTextFieldDelegate::EditingBegan(Foundation.NSNotification) */ },
		{ /* #7597 = 0x3B59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195E0 /* System.Void AppKit.NSTextField/_NSTextFieldDelegate::EditingEnded(Foundation.NSNotification) */ },
		{ /* #7598 = 0x3B5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195E1 /* Foundation.NSObject[] AppKit.NSTextField/_NSTextFieldDelegate::GetCandidates(AppKit.NSTextField,AppKit.NSTextView,Foundation.NSRange) */ },
		{ /* #7599 = 0x3B5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195E2 /* System.String[] AppKit.NSTextField/_NSTextFieldDelegate::GetCompletions(AppKit.NSControl,AppKit.NSTextView,System.String[],Foundation.NSRange,System.IntPtr&) */ },
		{ /* #7600 = 0x3B5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195E3 /* Foundation.NSTextCheckingResult[] AppKit.NSTextField/_NSTextFieldDelegate::GetTextCheckingResults(AppKit.NSTextField,AppKit.NSTextView,Foundation.NSTextCheckingResult[],Foundation.NSRange) */ },
		{ /* #7601 = 0x3B61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195E4 /* System.Boolean AppKit.NSTextField/_NSTextFieldDelegate::IsValidObject(AppKit.NSControl,Foundation.NSObject) */ },
		{ /* #7602 = 0x3B63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195E5 /* System.Boolean AppKit.NSTextField/_NSTextFieldDelegate::ShouldSelectCandidate(AppKit.NSTextField,AppKit.NSTextView,System.UIntPtr) */ },
		{ /* #7603 = 0x3B65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195E6 /* System.Boolean AppKit.NSTextField/_NSTextFieldDelegate::TextShouldBeginEditing(AppKit.NSControl,AppKit.NSText) */ },
		{ /* #7604 = 0x3B67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195E7 /* System.Boolean AppKit.NSTextField/_NSTextFieldDelegate::TextShouldEndEditing(AppKit.NSControl,AppKit.NSText) */ },
		{ /* #7605 = 0x3B69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195DA /* System.Void AppKit.NSTextField/_NSTextFieldDelegate::.ctor() */ },
		{ /* #7606 = 0x3B6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028DC /* AppKit.NSComboBox/_NSComboBoxDelegate */ },
		{ /* #7607 = 0x3B6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60194DB /* System.Void AppKit.NSComboBox/_NSComboBoxDelegate::SelectionChanged(Foundation.NSNotification) */ },
		{ /* #7608 = 0x3B6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60194DC /* System.Void AppKit.NSComboBox/_NSComboBoxDelegate::SelectionIsChanging(Foundation.NSNotification) */ },
		{ /* #7609 = 0x3B71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60194DD /* System.Void AppKit.NSComboBox/_NSComboBoxDelegate::WillDismiss(Foundation.NSNotification) */ },
		{ /* #7610 = 0x3B73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60194DE /* System.Void AppKit.NSComboBox/_NSComboBoxDelegate::WillPopUp(Foundation.NSNotification) */ },
		{ /* #7611 = 0x3B75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60194DA /* System.Void AppKit.NSComboBox/_NSComboBoxDelegate::.ctor() */ },
		{ /* #7612 = 0x3B77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D09 /* AppKit.NSComboBox */ },
		{ /* #7613 = 0x3B79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028E0 /* AppKit.NSDocument/Callback */ },
		{ /* #7614 = 0x3B7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60194F2 /* System.Void AppKit.NSDocument/Callback::SelectorCallback(AppKit.NSDocument,System.Boolean,System.IntPtr) */ },
		{ /* #7615 = 0x3B7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D0B /* AppKit.NSDocument */ },
		{ /* #7616 = 0x3B7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D10 /* AppKit.NSEvent */ },
		{ /* #7617 = 0x3B81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D11 /* AppKit.NSFont */ },
		{ /* #7618 = 0x3B83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028E5 /* AppKit.NSGestureRecognizer/Token */ },
		{ /* #7619 = 0x3B85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019541 /* System.Void AppKit.NSGestureRecognizer/Token::.ctor() */ },
		{ /* #7620 = 0x3B87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028E6 /* AppKit.NSGestureRecognizer/ParameterlessDispatch */ },
		{ /* #7621 = 0x3B89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019543 /* System.Void AppKit.NSGestureRecognizer/ParameterlessDispatch::Activated() */ },
		{ /* #7622 = 0x3B8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028E7 /* AppKit.NSGestureRecognizer/ParametrizedDispatch */ },
		{ /* #7623 = 0x3B8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019545 /* System.Void AppKit.NSGestureRecognizer/ParametrizedDispatch::Activated(AppKit.NSGestureRecognizer) */ },
		{ /* #7624 = 0x3B8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028E8 /* AppKit.NSGestureRecognizer/_NSGestureRecognizerDelegate */ },
		{ /* #7625 = 0x3B91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019547 /* System.Boolean AppKit.NSGestureRecognizer/_NSGestureRecognizerDelegate::ShouldAttemptToRecognize(AppKit.NSGestureRecognizer,AppKit.NSEvent) */ },
		{ /* #7626 = 0x3B93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019548 /* System.Boolean AppKit.NSGestureRecognizer/_NSGestureRecognizerDelegate::ShouldBeRequiredToFail(AppKit.NSGestureRecognizer,AppKit.NSGestureRecognizer) */ },
		{ /* #7627 = 0x3B95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019549 /* System.Boolean AppKit.NSGestureRecognizer/_NSGestureRecognizerDelegate::ShouldBegin(AppKit.NSGestureRecognizer) */ },
		{ /* #7628 = 0x3B97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601954A /* System.Boolean AppKit.NSGestureRecognizer/_NSGestureRecognizerDelegate::ShouldReceiveTouch(AppKit.NSGestureRecognizer,AppKit.NSTouch) */ },
		{ /* #7629 = 0x3B99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601954B /* System.Boolean AppKit.NSGestureRecognizer/_NSGestureRecognizerDelegate::ShouldRecognizeSimultaneously(AppKit.NSGestureRecognizer,AppKit.NSGestureRecognizer) */ },
		{ /* #7630 = 0x3B9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601954C /* System.Boolean AppKit.NSGestureRecognizer/_NSGestureRecognizerDelegate::ShouldRequireFailure(AppKit.NSGestureRecognizer,AppKit.NSGestureRecognizer) */ },
		{ /* #7631 = 0x3B9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019546 /* System.Void AppKit.NSGestureRecognizer/_NSGestureRecognizerDelegate::.ctor() */ },
		{ /* #7632 = 0x3B9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D12 /* AppKit.NSGestureRecognizer */ },
		{ /* #7633 = 0x3BA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028E9 /* AppKit.NSClickGestureRecognizer/Callback */ },
		{ /* #7634 = 0x3BA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601954E /* System.Void AppKit.NSClickGestureRecognizer/Callback::Activated(AppKit.NSClickGestureRecognizer) */ },
		{ /* #7635 = 0x3BA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D13 /* AppKit.NSClickGestureRecognizer */ },
		{ /* #7636 = 0x3BA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028EA /* AppKit.NSMagnificationGestureRecognizer/Callback */ },
		{ /* #7637 = 0x3BA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019550 /* System.Void AppKit.NSMagnificationGestureRecognizer/Callback::Activated(AppKit.NSMagnificationGestureRecognizer) */ },
		{ /* #7638 = 0x3BAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D14 /* AppKit.NSMagnificationGestureRecognizer */ },
		{ /* #7639 = 0x3BAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028EB /* AppKit.NSPanGestureRecognizer/Callback */ },
		{ /* #7640 = 0x3BAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019552 /* System.Void AppKit.NSPanGestureRecognizer/Callback::Activated(AppKit.NSPanGestureRecognizer) */ },
		{ /* #7641 = 0x3BB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D15 /* AppKit.NSPanGestureRecognizer */ },
		{ /* #7642 = 0x3BB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028EC /* AppKit.NSPressGestureRecognizer/Callback */ },
		{ /* #7643 = 0x3BB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019554 /* System.Void AppKit.NSPressGestureRecognizer/Callback::Activated(AppKit.NSPressGestureRecognizer) */ },
		{ /* #7644 = 0x3BB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D16 /* AppKit.NSPressGestureRecognizer */ },
		{ /* #7645 = 0x3BB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028ED /* AppKit.NSRotationGestureRecognizer/Callback */ },
		{ /* #7646 = 0x3BBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019556 /* System.Void AppKit.NSRotationGestureRecognizer/Callback::Activated(AppKit.NSRotationGestureRecognizer) */ },
		{ /* #7647 = 0x3BBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D17 /* AppKit.NSRotationGestureRecognizer */ },
		{ /* #7648 = 0x3BBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D18 /* AppKit.NSGradient */ },
		{ /* #7649 = 0x3BC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028EF /* AppKit.NSImage/_NSImageDelegate */ },
		{ /* #7650 = 0x3BC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601955B /* System.Void AppKit.NSImage/_NSImageDelegate::DidLoadPartOfRepresentation(AppKit.NSImage,AppKit.NSImageRep,System.IntPtr) */ },
		{ /* #7651 = 0x3BC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601955C /* System.Void AppKit.NSImage/_NSImageDelegate::DidLoadRepresentation(AppKit.NSImage,AppKit.NSImageRep,AppKit.NSImageLoadStatus) */ },
		{ /* #7652 = 0x3BC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601955D /* System.Void AppKit.NSImage/_NSImageDelegate::DidLoadRepresentationHeader(AppKit.NSImage,AppKit.NSImageRep) */ },
		{ /* #7653 = 0x3BC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601955E /* AppKit.NSImage AppKit.NSImage/_NSImageDelegate::ImageDidNotDraw(Foundation.NSObject,CoreGraphics.CGRect) */ },
		{ /* #7654 = 0x3BCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601955F /* System.Void AppKit.NSImage/_NSImageDelegate::WillLoadRepresentation(AppKit.NSImage,AppKit.NSImageRep) */ },
		{ /* #7655 = 0x3BCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601955A /* System.Void AppKit.NSImage/_NSImageDelegate::.ctor() */ },
		{ /* #7656 = 0x3BCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D1B /* AppKit.NSImage */ },
		{ /* #7657 = 0x3BD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D1F /* AppKit.NSMenuItem */ },
		{ /* #7658 = 0x3BD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D24 /* AppKit.NSPopUpButton */ },
		{ /* #7659 = 0x3BD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D25 /* AppKit.NSPopUpButtonCell */ },
		{ /* #7660 = 0x3BD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D26 /* AppKit.NSPredicateEditorRowTemplate */ },
		{ /* #7661 = 0x3BD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D28 /* AppKit.NSScreen */ },
		{ /* #7662 = 0x3BDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028F6 /* AppKit.NSSharingService/_NSSharingServiceDelegate */ },
		{ /* #7663 = 0x3BDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195B3 /* AppKit.NSView AppKit.NSSharingService/_NSSharingServiceDelegate::CreateAnchoringView(AppKit.NSSharingService,CoreGraphics.CGRect&,AppKit.NSRectEdge&) */ },
		{ /* #7664 = 0x3BDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195B4 /* System.Void AppKit.NSSharingService/_NSSharingServiceDelegate::DidFailToShareItems(AppKit.NSSharingService,Foundation.NSObject[],Foundation.NSError) */ },
		{ /* #7665 = 0x3BE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195B5 /* System.Void AppKit.NSSharingService/_NSSharingServiceDelegate::DidShareItems(AppKit.NSSharingService,Foundation.NSObject[]) */ },
		{ /* #7666 = 0x3BE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195B6 /* CoreGraphics.CGRect AppKit.NSSharingService/_NSSharingServiceDelegate::SourceFrameOnScreenForShareItem(AppKit.NSSharingService,AppKit.INSPasteboardWriting) */ },
		{ /* #7667 = 0x3BE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195B7 /* AppKit.NSWindow AppKit.NSSharingService/_NSSharingServiceDelegate::SourceWindowForShareItems(AppKit.NSSharingService,Foundation.NSObject[],AppKit.NSSharingContentScope) */ },
		{ /* #7668 = 0x3BE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195B8 /* AppKit.NSImage AppKit.NSSharingService/_NSSharingServiceDelegate::TransitionImageForShareItem(AppKit.NSSharingService,AppKit.INSPasteboardWriting,CoreGraphics.CGRect) */ },
		{ /* #7669 = 0x3BE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195B9 /* System.Void AppKit.NSSharingService/_NSSharingServiceDelegate::WillShareItems(AppKit.NSSharingService,Foundation.NSObject[]) */ },
		{ /* #7670 = 0x3BEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195B2 /* System.Void AppKit.NSSharingService/_NSSharingServiceDelegate::.ctor() */ },
		{ /* #7671 = 0x3BED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D2A /* AppKit.NSSharingService */ },
		{ /* #7672 = 0x3BEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028F7 /* AppKit.NSSound/_NSSoundDelegate */ },
		{ /* #7673 = 0x3BF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195BB /* System.Void AppKit.NSSound/_NSSoundDelegate::DidFinishPlaying(AppKit.NSSound,System.Boolean) */ },
		{ /* #7674 = 0x3BF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195BA /* System.Void AppKit.NSSound/_NSSoundDelegate::.ctor() */ },
		{ /* #7675 = 0x3BF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D2D /* AppKit.NSSound */ },
		{ /* #7676 = 0x3BF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D2F /* AppKit.NSSpellChecker */ },
		{ /* #7677 = 0x3BF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20028FD /* AppKit.NSTextStorage/_NSTextStorageDelegate */ },
		{ /* #7678 = 0x3BFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195E9 /* System.Void AppKit.NSTextStorage/_NSTextStorageDelegate::DidProcessEditing(AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr) */ },
		{ /* #7679 = 0x3BFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195EA /* System.Void AppKit.NSTextStorage/_NSTextStorageDelegate::TextStorageDidProcessEditing(Foundation.NSNotification) */ },
		{ /* #7680 = 0x3BFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195EB /* System.Void AppKit.NSTextStorage/_NSTextStorageDelegate::TextStorageWillProcessEditing(Foundation.NSNotification) */ },
		{ /* #7681 = 0x3C01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195EC /* System.Void AppKit.NSTextStorage/_NSTextStorageDelegate::WillProcessEditing(AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.IntPtr) */ },
		{ /* #7682 = 0x3C03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60195E8 /* System.Void AppKit.NSTextStorage/_NSTextStorageDelegate::.ctor() */ },
		{ /* #7683 = 0x3C05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D36 /* AppKit.NSTextStorage */ },
		{ /* #7684 = 0x3C07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002901 /* AppKit.NSWindow/_NSWindowDelegate */ },
		{ /* #7685 = 0x3C09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601963F /* AppKit.NSWindow[] AppKit.NSWindow/_NSWindowDelegate::CustomWindowsToEnterFullScreen(AppKit.NSWindow) */ },
		{ /* #7686 = 0x3C0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019640 /* AppKit.NSWindow[] AppKit.NSWindow/_NSWindowDelegate::CustomWindowsToExitFullScreen(AppKit.NSWindow) */ },
		{ /* #7687 = 0x3C0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019641 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidBecomeKey(Foundation.NSNotification) */ },
		{ /* #7688 = 0x3C0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019642 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidBecomeMain(Foundation.NSNotification) */ },
		{ /* #7689 = 0x3C11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019643 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidChangeBackingProperties(Foundation.NSNotification) */ },
		{ /* #7690 = 0x3C13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019644 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidChangeScreen(Foundation.NSNotification) */ },
		{ /* #7691 = 0x3C15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019645 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidChangeScreenProfile(Foundation.NSNotification) */ },
		{ /* #7692 = 0x3C17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019646 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidDecodeRestorableState(AppKit.NSWindow,Foundation.NSCoder) */ },
		{ /* #7693 = 0x3C19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019647 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidDeminiaturize(Foundation.NSNotification) */ },
		{ /* #7694 = 0x3C1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019648 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidEndLiveResize(Foundation.NSNotification) */ },
		{ /* #7695 = 0x3C1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019649 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidEndSheet(Foundation.NSNotification) */ },
		{ /* #7696 = 0x3C1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601964A /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidEnterFullScreen(Foundation.NSNotification) */ },
		{ /* #7697 = 0x3C21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601964B /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidEnterVersionBrowser(Foundation.NSNotification) */ },
		{ /* #7698 = 0x3C23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601964C /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidExitFullScreen(Foundation.NSNotification) */ },
		{ /* #7699 = 0x3C25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601964D /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidExitVersionBrowser(Foundation.NSNotification) */ },
		{ /* #7700 = 0x3C27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601964E /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidExpose(Foundation.NSNotification) */ },
		{ /* #7701 = 0x3C29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601964F /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidFailToEnterFullScreen(AppKit.NSWindow) */ },
		{ /* #7702 = 0x3C2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019650 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidFailToExitFullScreen(AppKit.NSWindow) */ },
		{ /* #7703 = 0x3C2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019651 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidMiniaturize(Foundation.NSNotification) */ },
		{ /* #7704 = 0x3C2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019652 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidMove(Foundation.NSNotification) */ },
		{ /* #7705 = 0x3C31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019653 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidResignKey(Foundation.NSNotification) */ },
		{ /* #7706 = 0x3C33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019654 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidResignMain(Foundation.NSNotification) */ },
		{ /* #7707 = 0x3C35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019655 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidResize(Foundation.NSNotification) */ },
		{ /* #7708 = 0x3C37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019656 /* System.Void AppKit.NSWindow/_NSWindowDelegate::DidUpdate(Foundation.NSNotification) */ },
		{ /* #7709 = 0x3C39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019657 /* System.Boolean AppKit.NSWindow/_NSWindowDelegate::ShouldDragDocumentWithEvent(AppKit.NSWindow,AppKit.NSEvent,CoreGraphics.CGPoint,AppKit.NSPasteboard) */ },
		{ /* #7710 = 0x3C3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019658 /* System.Boolean AppKit.NSWindow/_NSWindowDelegate::ShouldPopUpDocumentPathMenu(AppKit.NSWindow,AppKit.NSMenu) */ },
		{ /* #7711 = 0x3C3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019659 /* System.Boolean AppKit.NSWindow/_NSWindowDelegate::ShouldZoom(AppKit.NSWindow,CoreGraphics.CGRect) */ },
		{ /* #7712 = 0x3C3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601965A /* System.Void AppKit.NSWindow/_NSWindowDelegate::StartCustomAnimationToEnterFullScreen(AppKit.NSWindow,System.Double) */ },
		{ /* #7713 = 0x3C41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601965B /* System.Void AppKit.NSWindow/_NSWindowDelegate::StartCustomAnimationToExitFullScreen(AppKit.NSWindow,System.Double) */ },
		{ /* #7714 = 0x3C43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601965C /* System.Void AppKit.NSWindow/_NSWindowDelegate::WillBeginSheet(Foundation.NSNotification) */ },
		{ /* #7715 = 0x3C45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601965D /* System.Void AppKit.NSWindow/_NSWindowDelegate::WillClose(Foundation.NSNotification) */ },
		{ /* #7716 = 0x3C47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601965E /* System.Void AppKit.NSWindow/_NSWindowDelegate::WillEncodeRestorableState(AppKit.NSWindow,Foundation.NSCoder) */ },
		{ /* #7717 = 0x3C49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601965F /* System.Void AppKit.NSWindow/_NSWindowDelegate::WillEnterFullScreen(Foundation.NSNotification) */ },
		{ /* #7718 = 0x3C4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019660 /* System.Void AppKit.NSWindow/_NSWindowDelegate::WillEnterVersionBrowser(Foundation.NSNotification) */ },
		{ /* #7719 = 0x3C4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019661 /* System.Void AppKit.NSWindow/_NSWindowDelegate::WillExitFullScreen(Foundation.NSNotification) */ },
		{ /* #7720 = 0x3C4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019662 /* System.Void AppKit.NSWindow/_NSWindowDelegate::WillExitVersionBrowser(Foundation.NSNotification) */ },
		{ /* #7721 = 0x3C51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019663 /* System.Void AppKit.NSWindow/_NSWindowDelegate::WillMiniaturize(Foundation.NSNotification) */ },
		{ /* #7722 = 0x3C53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019664 /* System.Void AppKit.NSWindow/_NSWindowDelegate::WillMove(Foundation.NSNotification) */ },
		{ /* #7723 = 0x3C55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019665 /* CoreGraphics.CGRect AppKit.NSWindow/_NSWindowDelegate::WillPositionSheet(AppKit.NSWindow,AppKit.NSWindow,CoreGraphics.CGRect) */ },
		{ /* #7724 = 0x3C57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019666 /* CoreGraphics.CGSize AppKit.NSWindow/_NSWindowDelegate::WillResize(AppKit.NSWindow,CoreGraphics.CGSize) */ },
		{ /* #7725 = 0x3C59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019667 /* CoreGraphics.CGSize AppKit.NSWindow/_NSWindowDelegate::WillResizeForVersionBrowser(AppKit.NSWindow,CoreGraphics.CGSize,CoreGraphics.CGSize) */ },
		{ /* #7726 = 0x3C5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019668 /* Foundation.NSObject AppKit.NSWindow/_NSWindowDelegate::WillReturnFieldEditor(AppKit.NSWindow,Foundation.NSObject) */ },
		{ /* #7727 = 0x3C5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019669 /* Foundation.NSUndoManager AppKit.NSWindow/_NSWindowDelegate::WillReturnUndoManager(AppKit.NSWindow) */ },
		{ /* #7728 = 0x3C5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601966A /* System.Void AppKit.NSWindow/_NSWindowDelegate::WillStartLiveResize(Foundation.NSNotification) */ },
		{ /* #7729 = 0x3C61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601966B /* CoreGraphics.CGSize AppKit.NSWindow/_NSWindowDelegate::WillUseFullScreenContentSize(AppKit.NSWindow,CoreGraphics.CGSize) */ },
		{ /* #7730 = 0x3C63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601966C /* AppKit.NSApplicationPresentationOptions AppKit.NSWindow/_NSWindowDelegate::WillUseFullScreenPresentationOptions(AppKit.NSWindow,AppKit.NSApplicationPresentationOptions) */ },
		{ /* #7731 = 0x3C65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601966D /* CoreGraphics.CGRect AppKit.NSWindow/_NSWindowDelegate::WillUseStandardFrame(AppKit.NSWindow,CoreGraphics.CGRect) */ },
		{ /* #7732 = 0x3C67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601966E /* System.Boolean AppKit.NSWindow/_NSWindowDelegate::WindowShouldClose(Foundation.NSObject) */ },
		{ /* #7733 = 0x3C69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601963E /* System.Void AppKit.NSWindow/_NSWindowDelegate::.ctor() */ },
		{ /* #7734 = 0x3C6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D3C /* AppKit.NSWorkspace */ },
		{ /* #7735 = 0x3C6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001D55 /* AppKit.NSAccessibilityElement */ },
		{ /* #7736 = 0x3C6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200290D /* AppKit.NSAnimation/_NSAnimationDelegate */ },
		{ /* #7737 = 0x3C71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019768 /* System.Void AppKit.NSAnimation/_NSAnimationDelegate::AnimationDidEnd(AppKit.NSAnimation) */ },
		{ /* #7738 = 0x3C73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019769 /* System.Void AppKit.NSAnimation/_NSAnimationDelegate::AnimationDidReachProgressMark(AppKit.NSAnimation,System.Single) */ },
		{ /* #7739 = 0x3C75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601976A /* System.Void AppKit.NSAnimation/_NSAnimationDelegate::AnimationDidStop(AppKit.NSAnimation) */ },
		{ /* #7740 = 0x3C77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601976B /* System.Boolean AppKit.NSAnimation/_NSAnimationDelegate::AnimationShouldStart(AppKit.NSAnimation) */ },
		{ /* #7741 = 0x3C79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601976C /* System.Single AppKit.NSAnimation/_NSAnimationDelegate::ComputeAnimationCurve(AppKit.NSAnimation,System.Single) */ },
		{ /* #7742 = 0x3C7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019767 /* System.Void AppKit.NSAnimation/_NSAnimationDelegate::.ctor() */ },
		{ /* #7743 = 0x3C7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E24 /* AppKit.NSColorPanel */ },
		{ /* #7744 = 0x3C7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002910 /* AppKit.NSDatePicker/_NSDatePickerCellDelegate */ },
		{ /* #7745 = 0x3C81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019772 /* System.Void AppKit.NSDatePicker/_NSDatePickerCellDelegate::ValidateProposedDateValue(AppKit.NSDatePickerCell,Foundation.NSDate&,System.Double) */ },
		{ /* #7746 = 0x3C83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019771 /* System.Void AppKit.NSDatePicker/_NSDatePickerCellDelegate::.ctor() */ },
		{ /* #7747 = 0x3C85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E4F /* AppKit.NSDatePicker */ },
		{ /* #7748 = 0x3C87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002911 /* AppKit.NSDatePickerCell/_NSDatePickerCellDelegate */ },
		{ /* #7749 = 0x3C89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019774 /* System.Void AppKit.NSDatePickerCell/_NSDatePickerCellDelegate::ValidateProposedDateValue(AppKit.NSDatePickerCell,Foundation.NSDate&,System.Double) */ },
		{ /* #7750 = 0x3C8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019773 /* System.Void AppKit.NSDatePickerCell/_NSDatePickerCellDelegate::.ctor() */ },
		{ /* #7751 = 0x3C8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E51 /* AppKit.NSDatePickerCell */ },
		{ /* #7752 = 0x3C8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002912 /* AppKit.NSDrawer/_NSDrawerDelegate */ },
		{ /* #7753 = 0x3C91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019776 /* System.Void AppKit.NSDrawer/_NSDrawerDelegate::DrawerDidClose(Foundation.NSNotification) */ },
		{ /* #7754 = 0x3C93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019777 /* System.Void AppKit.NSDrawer/_NSDrawerDelegate::DrawerDidOpen(Foundation.NSNotification) */ },
		{ /* #7755 = 0x3C95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019778 /* System.Boolean AppKit.NSDrawer/_NSDrawerDelegate::DrawerShouldClose(AppKit.NSDrawer) */ },
		{ /* #7756 = 0x3C97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019779 /* System.Boolean AppKit.NSDrawer/_NSDrawerDelegate::DrawerShouldOpen(AppKit.NSDrawer) */ },
		{ /* #7757 = 0x3C99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601977A /* System.Void AppKit.NSDrawer/_NSDrawerDelegate::DrawerWillClose(Foundation.NSNotification) */ },
		{ /* #7758 = 0x3C9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601977B /* System.Void AppKit.NSDrawer/_NSDrawerDelegate::DrawerWillOpen(Foundation.NSNotification) */ },
		{ /* #7759 = 0x3C9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601977C /* CoreGraphics.CGSize AppKit.NSDrawer/_NSDrawerDelegate::DrawerWillResizeContents(AppKit.NSDrawer,CoreGraphics.CGSize) */ },
		{ /* #7760 = 0x3C9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019775 /* System.Void AppKit.NSDrawer/_NSDrawerDelegate::.ctor() */ },
		{ /* #7761 = 0x3CA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001E75 /* AppKit.NSDrawer */ },
		{ /* #7762 = 0x3CA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001ECA /* AppKit.NSHelpManager */ },
		{ /* #7763 = 0x3CA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F03 /* AppKit.NSMenu */ },
		{ /* #7764 = 0x3CA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F23 /* AppKit.NSOutlineView */ },
		{ /* #7765 = 0x3CA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002918 /* AppKit.NSPageController/_NSPageControllerDelegate */ },
		{ /* #7766 = 0x3CAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601982E /* System.Void AppKit.NSPageController/_NSPageControllerDelegate::DidEndLiveTransition(AppKit.NSPageController) */ },
		{ /* #7767 = 0x3CAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601982F /* System.Void AppKit.NSPageController/_NSPageControllerDelegate::DidTransition(AppKit.NSPageController,Foundation.NSObject) */ },
		{ /* #7768 = 0x3CAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019830 /* CoreGraphics.CGRect AppKit.NSPageController/_NSPageControllerDelegate::GetFrame(AppKit.NSPageController,Foundation.NSObject) */ },
		{ /* #7769 = 0x3CB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019831 /* System.String AppKit.NSPageController/_NSPageControllerDelegate::GetIdentifier(AppKit.NSPageController,Foundation.NSObject) */ },
		{ /* #7770 = 0x3CB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019832 /* AppKit.NSViewController AppKit.NSPageController/_NSPageControllerDelegate::GetViewController(AppKit.NSPageController,System.String) */ },
		{ /* #7771 = 0x3CB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019833 /* System.Void AppKit.NSPageController/_NSPageControllerDelegate::PrepareViewController(AppKit.NSPageController,AppKit.NSViewController,Foundation.NSObject) */ },
		{ /* #7772 = 0x3CB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019834 /* System.Void AppKit.NSPageController/_NSPageControllerDelegate::WillStartLiveTransition(AppKit.NSPageController) */ },
		{ /* #7773 = 0x3CB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019835 /* System.Boolean AppKit.NSPageController/_NSPageControllerDelegate::RespondsToSelector(ObjCRuntime.Selector) */ },
		{ /* #7774 = 0x3CBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601982D /* System.Void AppKit.NSPageController/_NSPageControllerDelegate::.ctor() */ },
		{ /* #7775 = 0x3CBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F2C /* AppKit.NSPageController */ },
		{ /* #7776 = 0x3CBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F57 /* AppKit.NSPopover */ },
		{ /* #7777 = 0x3CC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200291A /* AppKit.NSRuleEditor/_NSRuleEditorDelegate */ },
		{ /* #7778 = 0x3CC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019882 /* System.Void AppKit.NSRuleEditor/_NSRuleEditorDelegate::Changed(Foundation.NSNotification) */ },
		{ /* #7779 = 0x3CC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019883 /* Foundation.NSObject AppKit.NSRuleEditor/_NSRuleEditorDelegate::ChildForCriterion(AppKit.NSRuleEditor,System.IntPtr,Foundation.NSObject,AppKit.NSRuleEditorRowType) */ },
		{ /* #7780 = 0x3CC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019884 /* Foundation.NSObject AppKit.NSRuleEditor/_NSRuleEditorDelegate::DisplayValue(AppKit.NSRuleEditor,Foundation.NSObject,System.IntPtr) */ },
		{ /* #7781 = 0x3CC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019885 /* System.Void AppKit.NSRuleEditor/_NSRuleEditorDelegate::EditingBegan(Foundation.NSNotification) */ },
		{ /* #7782 = 0x3CCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019886 /* System.Void AppKit.NSRuleEditor/_NSRuleEditorDelegate::EditingEnded(Foundation.NSNotification) */ },
		{ /* #7783 = 0x3CCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019887 /* System.IntPtr AppKit.NSRuleEditor/_NSRuleEditorDelegate::NumberOfChildren(AppKit.NSRuleEditor,Foundation.NSObject,AppKit.NSRuleEditorRowType) */ },
		{ /* #7784 = 0x3CCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019888 /* Foundation.NSDictionary AppKit.NSRuleEditor/_NSRuleEditorDelegate::PredicateParts(AppKit.NSRuleEditor,Foundation.NSObject,Foundation.NSObject,System.IntPtr) */ },
		{ /* #7785 = 0x3CD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019889 /* System.Void AppKit.NSRuleEditor/_NSRuleEditorDelegate::RowsDidChange(Foundation.NSNotification) */ },
		{ /* #7786 = 0x3CD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019881 /* System.Void AppKit.NSRuleEditor/_NSRuleEditorDelegate::.ctor() */ },
		{ /* #7787 = 0x3CD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200291C /* AppKit.NSSavePanel/_NSOpenSavePanelDelegate */ },
		{ /* #7788 = 0x3CD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601988D /* Foundation.NSComparisonResult AppKit.NSSavePanel/_NSOpenSavePanelDelegate::CompareFilenames(AppKit.NSSavePanel,System.String,System.String,System.Boolean) */ },
		{ /* #7789 = 0x3CD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601988E /* System.Void AppKit.NSSavePanel/_NSOpenSavePanelDelegate::DidChangeToDirectory(AppKit.NSSavePanel,Foundation.NSUrl) */ },
		{ /* #7790 = 0x3CDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601988F /* System.Void AppKit.NSSavePanel/_NSOpenSavePanelDelegate::DirectoryDidChange(AppKit.NSSavePanel,System.String) */ },
		{ /* #7791 = 0x3CDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019890 /* System.Boolean AppKit.NSSavePanel/_NSOpenSavePanelDelegate::IsValidFilename(AppKit.NSSavePanel,System.String) */ },
		{ /* #7792 = 0x3CDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019891 /* System.Void AppKit.NSSavePanel/_NSOpenSavePanelDelegate::SelectionDidChange(AppKit.NSSavePanel) */ },
		{ /* #7793 = 0x3CE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019892 /* System.Boolean AppKit.NSSavePanel/_NSOpenSavePanelDelegate::ShouldEnableUrl(AppKit.NSSavePanel,Foundation.NSUrl) */ },
		{ /* #7794 = 0x3CE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019893 /* System.Boolean AppKit.NSSavePanel/_NSOpenSavePanelDelegate::ShouldShowFilename(AppKit.NSSavePanel,System.String) */ },
		{ /* #7795 = 0x3CE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019894 /* System.String AppKit.NSSavePanel/_NSOpenSavePanelDelegate::UserEnteredFilename(AppKit.NSSavePanel,System.String,System.Boolean) */ },
		{ /* #7796 = 0x3CE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019895 /* System.Boolean AppKit.NSSavePanel/_NSOpenSavePanelDelegate::ValidateUrl(AppKit.NSSavePanel,Foundation.NSUrl,Foundation.NSError&) */ },
		{ /* #7797 = 0x3CE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019896 /* System.Void AppKit.NSSavePanel/_NSOpenSavePanelDelegate::WillExpand(AppKit.NSSavePanel,System.Boolean) */ },
		{ /* #7798 = 0x3CEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601988C /* System.Void AppKit.NSSavePanel/_NSOpenSavePanelDelegate::.ctor() */ },
		{ /* #7799 = 0x3CED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F94 /* AppKit.NSScroller */ },
		{ /* #7800 = 0x3CEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001F99 /* AppKit.NSScrollView */ },
		{ /* #7801 = 0x3CF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200291F /* AppKit.NSSearchField/_NSSearchFieldDelegate */ },
		{ /* #7802 = 0x3CF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198A4 /* System.Void AppKit.NSSearchField/_NSSearchFieldDelegate::SearchingEnded(AppKit.NSSearchField) */ },
		{ /* #7803 = 0x3CF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198A5 /* System.Void AppKit.NSSearchField/_NSSearchFieldDelegate::SearchingStarted(AppKit.NSSearchField) */ },
		{ /* #7804 = 0x3CF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198A3 /* System.Void AppKit.NSSearchField/_NSSearchFieldDelegate::.ctor() */ },
		{ /* #7805 = 0x3CF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FB3 /* AppKit.NSSearchField */ },
		{ /* #7806 = 0x3CFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002920 /* AppKit.NSSharingServicePicker/_NSSharingServicePickerDelegate */ },
		{ /* #7807 = 0x3CFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198A7 /* AppKit.INSSharingServiceDelegate AppKit.NSSharingServicePicker/_NSSharingServicePickerDelegate::DelegateForSharingService(AppKit.NSSharingServicePicker,AppKit.NSSharingService) */ },
		{ /* #7808 = 0x3CFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198A8 /* System.Void AppKit.NSSharingServicePicker/_NSSharingServicePickerDelegate::DidChooseSharingService(AppKit.NSSharingServicePicker,AppKit.NSSharingService) */ },
		{ /* #7809 = 0x3D01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198A9 /* AppKit.NSSharingService[] AppKit.NSSharingServicePicker/_NSSharingServicePickerDelegate::SharingServicesForItems(AppKit.NSSharingServicePicker,Foundation.NSObject[],AppKit.NSSharingService[]) */ },
		{ /* #7810 = 0x3D03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198A6 /* System.Void AppKit.NSSharingServicePicker/_NSSharingServicePickerDelegate::.ctor() */ },
		{ /* #7811 = 0x3D05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FD5 /* AppKit.NSSharingServicePicker */ },
		{ /* #7812 = 0x3D07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FE3 /* AppKit.NSSliderAccessory */ },
		{ /* #7813 = 0x3D09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001FF8 /* AppKit.NSSplitView */ },
		{ /* #7814 = 0x3D0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002035 /* AppKit.NSTableViewDiffableDataSource`2 */ },
		{ /* #7815 = 0x3D0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002924 /* AppKit.NSTabView/_NSTabViewDelegate */ },
		{ /* #7816 = 0x3D0F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198F3 /* System.Void AppKit.NSTabView/_NSTabViewDelegate::DidSelect(AppKit.NSTabView,AppKit.NSTabViewItem) */ },
		{ /* #7817 = 0x3D11 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198F4 /* System.Void AppKit.NSTabView/_NSTabViewDelegate::NumberOfItemsChanged(AppKit.NSTabView) */ },
		{ /* #7818 = 0x3D13 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198F5 /* System.Boolean AppKit.NSTabView/_NSTabViewDelegate::ShouldSelectTabViewItem(AppKit.NSTabView,AppKit.NSTabViewItem) */ },
		{ /* #7819 = 0x3D15 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198F6 /* System.Void AppKit.NSTabView/_NSTabViewDelegate::WillSelect(AppKit.NSTabView,AppKit.NSTabViewItem) */ },
		{ /* #7820 = 0x3D17 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198F2 /* System.Void AppKit.NSTabView/_NSTabViewDelegate::.ctor() */ },
		{ /* #7821 = 0x3D19 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002041 /* AppKit.NSTabView */ },
		{ /* #7822 = 0x3D1B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002925 /* AppKit.NSText/_NSTextDelegate */ },
		{ /* #7823 = 0x3D1D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198F8 /* System.Void AppKit.NSText/_NSTextDelegate::TextDidBeginEditing(Foundation.NSNotification) */ },
		{ /* #7824 = 0x3D1F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198F9 /* System.Void AppKit.NSText/_NSTextDelegate::TextDidChange(Foundation.NSNotification) */ },
		{ /* #7825 = 0x3D21 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198FA /* System.Void AppKit.NSText/_NSTextDelegate::TextDidEndEditing(Foundation.NSNotification) */ },
		{ /* #7826 = 0x3D23 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198FB /* System.Boolean AppKit.NSText/_NSTextDelegate::TextShouldBeginEditing(AppKit.NSText) */ },
		{ /* #7827 = 0x3D25 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198FC /* System.Boolean AppKit.NSText/_NSTextDelegate::TextShouldEndEditing(AppKit.NSText) */ },
		{ /* #7828 = 0x3D27 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x60198F7 /* System.Void AppKit.NSText/_NSTextDelegate::.ctor() */ },
		{ /* #7829 = 0x3D29 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200204C /* AppKit.NSText */ },
		{ /* #7830 = 0x3D2B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200204E /* AppKit.NSTextAlternatives */ },
		{ /* #7831 = 0x3D2D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002093 /* AppKit.NSTextInputContext */ },
		{ /* #7832 = 0x3D2F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200292D /* AppKit.NSTextView/_NSTextViewDelegate */ },
		{ /* #7833 = 0x3D31 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019911 /* System.Void AppKit.NSTextView/_NSTextViewDelegate::CellClicked(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,System.UIntPtr) */ },
		{ /* #7834 = 0x3D33 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019912 /* System.Void AppKit.NSTextView/_NSTextViewDelegate::CellDoubleClicked(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,System.UIntPtr) */ },
		{ /* #7835 = 0x3D35 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019913 /* System.Void AppKit.NSTextView/_NSTextViewDelegate::DidChangeSelection(Foundation.NSNotification) */ },
		{ /* #7836 = 0x3D37 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019914 /* System.Void AppKit.NSTextView/_NSTextViewDelegate::DidChangeTypingAttributes(Foundation.NSNotification) */ },
		{ /* #7837 = 0x3D39 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019915 /* Foundation.NSTextCheckingResult[] AppKit.NSTextView/_NSTextViewDelegate::DidCheckText(AppKit.NSTextView,Foundation.NSRange,Foundation.NSTextCheckingTypes,Foundation.NSDictionary,Foundation.NSTextCheckingResult[],Foundation.NSOrthography,System.IntPtr) */ },
		{ /* #7838 = 0x3D3B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019916 /* System.Boolean AppKit.NSTextView/_NSTextViewDelegate::DoCommandBySelector(AppKit.NSTextView,ObjCRuntime.Selector) */ },
		{ /* #7839 = 0x3D3D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019917 /* System.Void AppKit.NSTextView/_NSTextViewDelegate::DraggedCell(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,AppKit.NSEvent,System.UIntPtr) */ },
		{ /* #7840 = 0x3D3F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019918 /* Foundation.NSObject[] AppKit.NSTextView/_NSTextViewDelegate::GetCandidates(AppKit.NSTextView,Foundation.NSRange) */ },
		{ /* #7841 = 0x3D41 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019919 /* System.String[] AppKit.NSTextView/_NSTextViewDelegate::GetCompletions(AppKit.NSTextView,System.String[],Foundation.NSRange,System.IntPtr&) */ },
		{ /* #7842 = 0x3D43 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601991A /* Foundation.NSTextCheckingResult[] AppKit.NSTextView/_NSTextViewDelegate::GetTextCheckingCandidates(AppKit.NSTextView,Foundation.NSTextCheckingResult[],Foundation.NSRange) */ },
		{ /* #7843 = 0x3D45 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601991B /* Foundation.NSUndoManager AppKit.NSTextView/_NSTextViewDelegate::GetUndoManager(AppKit.NSTextView) */ },
		{ /* #7844 = 0x3D47 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601991C /* System.String[] AppKit.NSTextView/_NSTextViewDelegate::GetWritablePasteboardTypes(AppKit.NSTextView,AppKit.NSTextAttachmentCell,System.UIntPtr) */ },
		{ /* #7845 = 0x3D49 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601991D /* System.Boolean AppKit.NSTextView/_NSTextViewDelegate::LinkClicked(AppKit.NSTextView,Foundation.NSObject,System.UIntPtr) */ },
		{ /* #7846 = 0x3D4B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601991E /* AppKit.NSMenu AppKit.NSTextView/_NSTextViewDelegate::MenuForEvent(AppKit.NSTextView,AppKit.NSMenu,AppKit.NSEvent,System.UIntPtr) */ },
		{ /* #7847 = 0x3D4D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601991F /* System.Boolean AppKit.NSTextView/_NSTextViewDelegate::ShouldChangeTextInRange(AppKit.NSTextView,Foundation.NSRange,System.String) */ },
		{ /* #7848 = 0x3D4F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019920 /* System.Boolean AppKit.NSTextView/_NSTextViewDelegate::ShouldChangeTextInRanges(AppKit.NSTextView,Foundation.NSValue[],System.String[]) */ },
		{ /* #7849 = 0x3D51 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019921 /* Foundation.NSDictionary AppKit.NSTextView/_NSTextViewDelegate::ShouldChangeTypingAttributes(AppKit.NSTextView,Foundation.NSDictionary,Foundation.NSDictionary) */ },
		{ /* #7850 = 0x3D53 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019922 /* System.Boolean AppKit.NSTextView/_NSTextViewDelegate::ShouldSelectCandidates(AppKit.NSTextView,System.UIntPtr) */ },
		{ /* #7851 = 0x3D55 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019923 /* System.IntPtr AppKit.NSTextView/_NSTextViewDelegate::ShouldSetSpellingState(AppKit.NSTextView,System.IntPtr,Foundation.NSRange) */ },
		{ /* #7852 = 0x3D57 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019924 /* System.String[] AppKit.NSTextView/_NSTextViewDelegate::ShouldUpdateTouchBarItemIdentifiers(AppKit.NSTextView,System.String[]) */ },
		{ /* #7853 = 0x3D59 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019925 /* Foundation.NSRange AppKit.NSTextView/_NSTextViewDelegate::WillChangeSelection(AppKit.NSTextView,Foundation.NSRange,Foundation.NSRange) */ },
		{ /* #7854 = 0x3D5B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019926 /* Foundation.NSValue[] AppKit.NSTextView/_NSTextViewDelegate::WillChangeSelectionFromRanges(AppKit.NSTextView,Foundation.NSValue[],Foundation.NSValue[]) */ },
		{ /* #7855 = 0x3D5D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019927 /* Foundation.NSDictionary AppKit.NSTextView/_NSTextViewDelegate::WillCheckText(AppKit.NSTextView,Foundation.NSRange,Foundation.NSDictionary,Foundation.NSTextCheckingTypes) */ },
		{ /* #7856 = 0x3D5F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019928 /* System.String AppKit.NSTextView/_NSTextViewDelegate::WillDisplayToolTip(AppKit.NSTextView,System.String,System.UIntPtr) */ },
		{ /* #7857 = 0x3D61 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019929 /* System.Boolean AppKit.NSTextView/_NSTextViewDelegate::WriteCell(AppKit.NSTextView,AppKit.NSTextAttachmentCell,System.UIntPtr,AppKit.NSPasteboard,System.String) */ },
		{ /* #7858 = 0x3D63 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601992A /* System.Boolean AppKit.NSTextView/_NSTextViewDelegate::RespondsToSelector(ObjCRuntime.Selector) */ },
		{ /* #7859 = 0x3D65 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019910 /* System.Void AppKit.NSTextView/_NSTextViewDelegate::.ctor() */ },
		{ /* #7860 = 0x3D67 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020CC /* AppKit.NSTextView */ },
		{ /* #7861 = 0x3D69 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200292F /* AppKit.NSToolbar/_NSToolbarDelegate */ },
		{ /* #7862 = 0x3D6B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019937 /* System.String[] AppKit.NSToolbar/_NSToolbarDelegate::AllowedItemIdentifiers(AppKit.NSToolbar) */ },
		{ /* #7863 = 0x3D6D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019938 /* System.String[] AppKit.NSToolbar/_NSToolbarDelegate::DefaultItemIdentifiers(AppKit.NSToolbar) */ },
		{ /* #7864 = 0x3D6F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019939 /* System.Void AppKit.NSToolbar/_NSToolbarDelegate::DidRemoveItem(Foundation.NSNotification) */ },
		{ /* #7865 = 0x3D71 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601993A /* System.Boolean AppKit.NSToolbar/_NSToolbarDelegate::GetItemCanBeInsertedAt(AppKit.NSToolbar,System.String,System.IntPtr) */ },
		{ /* #7866 = 0x3D73 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601993B /* Foundation.NSSet`1<Foundation.NSString> AppKit.NSToolbar/_NSToolbarDelegate::GetToolbarImmovableItemIdentifiers(AppKit.NSToolbar) */ },
		{ /* #7867 = 0x3D75 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601993C /* System.String[] AppKit.NSToolbar/_NSToolbarDelegate::SelectableItemIdentifiers(AppKit.NSToolbar) */ },
		{ /* #7868 = 0x3D77 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601993D /* System.Void AppKit.NSToolbar/_NSToolbarDelegate::WillAddItem(Foundation.NSNotification) */ },
		{ /* #7869 = 0x3D79 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601993E /* AppKit.NSToolbarItem AppKit.NSToolbar/_NSToolbarDelegate::WillInsertItem(AppKit.NSToolbar,System.String,System.Boolean) */ },
		{ /* #7870 = 0x3D7B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019936 /* System.Void AppKit.NSToolbar/_NSToolbarDelegate::.ctor() */ },
		{ /* #7871 = 0x3D7D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020EA /* AppKit.NSToolbar */ },
		{ /* #7872 = 0x3D7F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002931 /* AppKit.NSTouchBar/_NSTouchBarDelegate */ },
		{ /* #7873 = 0x3D81 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019944 /* AppKit.NSTouchBarItem AppKit.NSTouchBar/_NSTouchBarDelegate::MakeItem(AppKit.NSTouchBar,System.String) */ },
		{ /* #7874 = 0x3D83 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019943 /* System.Void AppKit.NSTouchBar/_NSTouchBarDelegate::.ctor() */ },
		{ /* #7875 = 0x3D85 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20020F9 /* AppKit.NSTouchBar */ },
		{ /* #7876 = 0x3D87 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20021FD /* Accounts.ACAccountStore */ },
		{ /* #7877 = 0x3D89 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002938 /* AVFoundation.AVCaptureFileOutput/recordingProxy */ },
		{ /* #7878 = 0x3D8B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019952 /* System.Void AVFoundation.AVCaptureFileOutput/recordingProxy::DidStartRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[]) */ },
		{ /* #7879 = 0x3D8D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019953 /* System.Void AVFoundation.AVCaptureFileOutput/recordingProxy::FinishedRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[],Foundation.NSError) */ },
		{ /* #7880 = 0x3D8F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002242 /* AVFoundation.AVCaptureVideoPreviewLayer */ },
		{ /* #7881 = 0x3D91 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200224A /* AVFoundation.AVPlayerItem */ },
		{ /* #7882 = 0x3D93 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200224B /* AVFoundation.AVPlayerItemVideoOutput */ },
		{ /* #7883 = 0x3D95 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002281 /* AVFoundation.AVAssetExportSession */ },
		{ /* #7884 = 0x3D97 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022AA /* AVFoundation.AVAssetWriter */ },
		{ /* #7885 = 0x3D99 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022BC /* AVFoundation.AVAsynchronousVideoCompositionRequest */ },
		{ /* #7886 = 0x3D9B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022CB /* AVFoundation.AVAudioEngine */ },
		{ /* #7887 = 0x3D9D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20022E4 /* AVFoundation.AVAudioPlayerNode */ },
		{ /* #7888 = 0x3D9F */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002308 /* AVFoundation.AVAudioUnitComponent */ },
		{ /* #7889 = 0x3DA1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002309 /* AVFoundation.AVAudioUnitComponentManager */ },
		{ /* #7890 = 0x3DA3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002349 /* AVFoundation.AVCaptureDevice */ },
		{ /* #7891 = 0x3DA5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200234A /* AVFoundation.AVCaptureDeviceDiscoverySession */ },
		{ /* #7892 = 0x3DA7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200234B /* AVFoundation.AVCaptureDeviceFormat */ },
		{ /* #7893 = 0x3DA9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002368 /* AVFoundation.AVCapturePhotoOutput */ },
		{ /* #7894 = 0x3DAB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002369 /* AVFoundation.AVCapturePhotoSettings */ },
		{ /* #7895 = 0x3DAD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002370 /* AVFoundation.AVCaptureSession */ },
		{ /* #7896 = 0x3DAF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002371 /* AVFoundation.AVCaptureStillImageOutput */ },
		{ /* #7897 = 0x3DB1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002375 /* AVFoundation.AVCaptureVideoDataOutput */ },
		{ /* #7898 = 0x3DB3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002394 /* AVFoundation.AVContentKeySession */ },
		{ /* #7899 = 0x3DB5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023B7 /* AVFoundation.AVFragmentedMovie */ },
		{ /* #7900 = 0x3DB7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023B9 /* AVFoundation.AVFragmentedMovieTrack */ },
		{ /* #7901 = 0x3DB9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023D8 /* AVFoundation.AVMidiPlayer */ },
		{ /* #7902 = 0x3DBB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023EF /* AVFoundation.AVMutableMovie */ },
		{ /* #7903 = 0x3DBD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002464 /* AVFoundation.AVVideoComposition */ },
		{ /* #7904 = 0x3DBF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023F4 /* AVFoundation.AVMutableVideoComposition */ },
		{ /* #7905 = 0x3DC1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002466 /* AVFoundation.AVVideoCompositionInstruction */ },
		{ /* #7906 = 0x3DC3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20023F5 /* AVFoundation.AVMutableVideoCompositionInstruction */ },
		{ /* #7907 = 0x3DC5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200242A /* AVFoundation.AVPlayerMediaSelectionCriteria */ },
		{ /* #7908 = 0x3DC7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200243B /* AVFoundation.AVRouteDetector */ },
		{ /* #7909 = 0x3DC9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200243C /* AVFoundation.AVSampleBufferAudioRenderer */ },
		{ /* #7910 = 0x3DCB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200243E /* AVFoundation.AVSampleBufferDisplayLayer */ },
		{ /* #7911 = 0x3DCD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200243F /* AVFoundation.AVSampleBufferGenerator */ },
		{ /* #7912 = 0x3DCF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002440 /* AVFoundation.AVSampleBufferRenderSynchronizer */ },
		{ /* #7913 = 0x3DD1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20029A3 /* AVFoundation.AVSpeechSynthesizer/_AVSpeechSynthesizerDelegate */ },
		{ /* #7914 = 0x3DD3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019B77 /* System.Void AVFoundation.AVSpeechSynthesizer/_AVSpeechSynthesizerDelegate::DidCancelSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance) */ },
		{ /* #7915 = 0x3DD5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019B78 /* System.Void AVFoundation.AVSpeechSynthesizer/_AVSpeechSynthesizerDelegate::DidContinueSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance) */ },
		{ /* #7916 = 0x3DD7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019B79 /* System.Void AVFoundation.AVSpeechSynthesizer/_AVSpeechSynthesizerDelegate::DidFinishSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance) */ },
		{ /* #7917 = 0x3DD9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019B7A /* System.Void AVFoundation.AVSpeechSynthesizer/_AVSpeechSynthesizerDelegate::DidPauseSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance) */ },
		{ /* #7918 = 0x3DDB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019B7B /* System.Void AVFoundation.AVSpeechSynthesizer/_AVSpeechSynthesizerDelegate::DidStartSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance) */ },
		{ /* #7919 = 0x3DDD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019B7C /* System.Void AVFoundation.AVSpeechSynthesizer/_AVSpeechSynthesizerDelegate::WillSpeakRangeOfSpeechString(AVFoundation.AVSpeechSynthesizer,Foundation.NSRange,AVFoundation.AVSpeechUtterance) */ },
		{ /* #7920 = 0x3DDF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019B76 /* System.Void AVFoundation.AVSpeechSynthesizer/_AVSpeechSynthesizerDelegate::.ctor() */ },
		{ /* #7921 = 0x3DE1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200244D /* AVFoundation.AVSpeechSynthesizer */ },
		{ /* #7922 = 0x3DE3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2002764 /* Foundation.NSUrlSessionHandler/NSUrlSessionHandlerDelegate */ },
		{ /* #7923 = 0x3DE5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601900E /* System.Void Foundation.NSUrlSessionHandler/NSUrlSessionHandlerDelegate::DidReceiveResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlResponse,System.Action`1<Foundation.NSUrlSessionResponseDisposition>) */ },
		{ /* #7924 = 0x3DE7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601AAED /* System.Action`1<Foundation.NSUrlSessionResponseDisposition> ObjCRuntime.Trampolines/NIDActionArity1V51::Create(System.IntPtr) */ },
		{ /* #7925 = 0x3DE9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601900F /* System.Void Foundation.NSUrlSessionHandler/NSUrlSessionHandlerDelegate::DidReceiveData(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSData) */ },
		{ /* #7926 = 0x3DEB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019010 /* System.Void Foundation.NSUrlSessionHandler/NSUrlSessionHandlerDelegate::DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError) */ },
		{ /* #7927 = 0x3DED */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019012 /* System.Void Foundation.NSUrlSessionHandler/NSUrlSessionHandlerDelegate::WillCacheResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSCachedUrlResponse,System.Action`1<Foundation.NSCachedUrlResponse>) */ },
		{ /* #7928 = 0x3DEF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601AA39 /* System.Action`1<Foundation.NSCachedUrlResponse> ObjCRuntime.Trampolines/NIDActionArity1V48::Create(System.IntPtr) */ },
		{ /* #7929 = 0x3DF1 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019013 /* System.Void Foundation.NSUrlSessionHandler/NSUrlSessionHandlerDelegate::WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action`1<Foundation.NSUrlRequest>) */ },
		{ /* #7930 = 0x3DF3 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601AAE3 /* System.Action`1<Foundation.NSUrlRequest> ObjCRuntime.Trampolines/NIDActionArity1V1::Create(System.IntPtr) */ },
		{ /* #7931 = 0x3DF5 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x6019014 /* System.Void Foundation.NSUrlSessionHandler/NSUrlSessionHandlerDelegate::DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action`2<Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential>) */ },
		{ /* #7932 = 0x3DF7 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x601B079 /* System.Action`2<Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential> ObjCRuntime.Trampolines/NIDActionArity2V7::Create(System.IntPtr) */ },
		{ /* #7933 = 0x3DF9 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000C9C /* Intents.INIntentResolutionResult`1 */ },
		{ /* #7934 = 0x3DFB */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2000EB0 /* GameplayKit.GKObstacleGraph`1 */ },
		{ /* #7935 = 0x3DFD */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200116D /* Foundation.NSArray`1 */ },
		{ /* #7936 = 0x3DFF */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200117D /* Foundation.NSEnumerator`1 */ },
		{ /* #7937 = 0x3E01 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001195 /* Foundation.NSMutableArray`1 */ },
		{ /* #7938 = 0x3E03 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200119A /* Foundation.NSMutableOrderedSet`1 */ },
		{ /* #7939 = 0x3E05 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200119C /* Foundation.NSMutableSet`1 */ },
		{ /* #7940 = 0x3E07 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011AC /* Foundation.NSOrderedSet`1 */ },
		{ /* #7941 = 0x3E09 */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x20011BE /* Foundation.NSSet`1 */ },
		{ /* #7942 = 0x3E0B */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x200117A /* Foundation.NSDictionary`2 */ },
		{ /* #7943 = 0x3E0D */ 175 /* Microsoft.macOS */, 0x1 /* Microsoft.macOS.dll */, 0x2001199 /* Foundation.NSMutableDictionary`2 */ },

	};

	static const MTProtocolWrapperMap __xamarin_protocol_wrapper_map [] = {
		{ 0x3 /* AppKit.INSApplicationDelegate */, 0x5 /* NSApplicationDelegateWrapper */ },
		{ 0xB /* Foundation.INSCoding */, 0xD /* NSCodingWrapper */ },
		{ 0xF /* AppKit.INSTouchBarProvider */, 0x11 /* NSTouchBarProviderWrapper */ },
		{ 0x13 /* AppKit.INSUserActivityRestoring */, 0x15 /* NSUserActivityRestoringWrapper */ },
		{ 0x19 /* AppKit.INSEditor */, 0x1B /* NSEditorWrapper */ },
		{ 0x1D /* Foundation.INSExtensionRequestHandling */, 0x1F /* NSExtensionRequestHandlingWrapper */ },
		{ 0x21 /* AppKit.INSSeguePerforming */, 0x23 /* NSSeguePerformingWrapper */ },
		{ 0x25 /* AppKit.INSUserInterfaceItemIdentification */, 0x27 /* NSUserInterfaceItemIdentificationWrapper */ },
		{ 0x2B /* UserNotificationsUI.IUNNotificationContentExtension */, 0x2D /* UNNotificationContentExtensionWrapper */ },
		{ 0x2F /* Foundation.INSCopying */, 0x31 /* NSCopyingWrapper */ },
		{ 0x33 /* Foundation.INSSecureCoding */, 0x35 /* NSSecureCodingWrapper */ },
		{ 0x47 /* Speech.ISFSpeechRecognitionTaskDelegate */, 0x49 /* SFSpeechRecognitionTaskDelegateWrapper */ },
		{ 0x51 /* Speech.ISFSpeechRecognizerDelegate */, 0x53 /* SFSpeechRecognizerDelegateWrapper */ },
		{ 0x65 /* SoundAnalysis.ISNResult */, 0x67 /* SNResultWrapper */ },
		{ 0x6B /* SoundAnalysis.ISNRequest */, 0x6D /* SNRequestWrapper */ },
		{ 0x71 /* SoundAnalysis.ISNResultsObserving */, 0x73 /* SNResultsObservingWrapper */ },
		{ 0x83 /* ShazamKit.ISHSessionDelegate */, 0x85 /* SHSessionDelegateWrapper */ },
		{ 0x8D /* AppKit.INSAccessibility */, 0x8F /* NSAccessibilityWrapper */ },
		{ 0x91 /* AppKit.INSAccessibilityElementProtocol */, 0x93 /* NSAccessibilityElementProtocolWrapper */ },
		{ 0x95 /* AppKit.INSAppearanceCustomization */, 0x97 /* NSAppearanceCustomizationWrapper */ },
		{ 0x99 /* AppKit.INSDraggingDestination */, 0x9B /* NSDraggingDestinationWrapper */ },
		{ 0xA7 /* SharedWithYou.ISWCollaborationViewDelegate */, 0xA9 /* SWCollaborationViewDelegateWrapper */ },
		{ 0xAF /* SharedWithYou.ISWHighlightCenterDelegate */, 0xB1 /* SWHighlightCenterDelegateWrapper */ },
		{ 0xB7 /* SharedWithYou.ISWHighlightEvent */, 0xB9 /* SWHighlightEventWrapper */ },
		{ 0xCF /* SafariServices.ISFSafariExtensionHandling */, 0xD1 /* SFSafariExtensionHandlingWrapper */ },
		{ 0xDD /* ReplayKit.IRPBroadcastActivityControllerDelegate */, 0xDF /* RPBroadcastActivityControllerDelegateWrapper */ },
		{ 0xE5 /* ReplayKit.IRPBroadcastControllerDelegate */, 0xE7 /* RPBroadcastControllerDelegateWrapper */ },
		{ 0xF3 /* ReplayKit.IRPPreviewViewControllerDelegate */, 0xF5 /* RPPreviewViewControllerDelegateWrapper */ },
		{ 0xFB /* ReplayKit.IRPScreenRecorderDelegate */, 0xFD /* RPScreenRecorderDelegateWrapper */ },
		{ 0x10F /* CoreAnimation.ICAMediaTiming */, 0x111 /* CAMediaTimingWrapper */ },
		{ 0x121 /* PushKit.IPKPushRegistryDelegate */, 0x123 /* PKPushRegistryDelegateWrapper */ },
		{ 0x129 /* PhotosUI.IPHContentEditingController */, 0x12B /* PHContentEditingControllerWrapper */ },
		{ 0x12F /* PhotosUI.IPHLivePhotoViewDelegate */, 0x131 /* PHLivePhotoViewDelegateWrapper */ },
		{ 0x13F /* PhotosUI.IPHPickerViewControllerDelegate */, 0x141 /* PHPickerViewControllerDelegateWrapper */ },
		{ 0x14F /* PhotosUI.IPHProjectExtensionController */, 0x151 /* PHProjectExtensionControllerWrapper */ },
		{ 0x163 /* PhotosUI.IPHProjectTypeDescriptionDataSource */, 0x165 /* PHProjectTypeDescriptionDataSourceWrapper */ },
		{ 0x16B /* PhotosUI.IPHProjectTypeDescriptionInvalidator */, 0x16D /* PHProjectTypeDescriptionInvalidatorWrapper */ },
		{ 0x1EF /* OSLog.IOSLogEntryFromProcess */, 0x1F1 /* OSLogEntryFromProcessWrapper */ },
		{ 0x1F7 /* OSLog.IOSLogEntryWithPayload */, 0x1F9 /* OSLogEntryWithPayloadWrapper */ },
		{ 0x20B /* NotificationCenter.INCWidgetListViewDelegate */, 0x20D /* NCWidgetListViewDelegateWrapper */ },
		{ 0x213 /* NotificationCenter.INCWidgetProviding */, 0x215 /* NCWidgetProvidingWrapper */ },
		{ 0x21B /* NotificationCenter.INCWidgetSearchViewDelegate */, 0x21D /* NCWidgetSearchViewDelegateWrapper */ },
		{ 0x231 /* MailKit.IMEComposeSessionHandler */, 0x233 /* MEComposeSessionHandlerWrapper */ },
		{ 0x235 /* MailKit.IMEContentBlocker */, 0x237 /* MEContentBlockerWrapper */ },
		{ 0x241 /* MailKit.IMEExtension */, 0x243 /* MEExtensionWrapper */ },
		{ 0x24F /* MailKit.IMEMessageActionHandler */, 0x251 /* MEMessageActionHandlerWrapper */ },
		{ 0x253 /* MailKit.IMEMessageDecoder */, 0x255 /* MEMessageDecoderWrapper */ },
		{ 0x257 /* MailKit.IMEMessageEncoder */, 0x259 /* MEMessageEncoderWrapper */ },
		{ 0x25D /* MailKit.IMEMessageSecurityHandler */, 0x25F /* MEMessageSecurityHandlerWrapper */ },
		{ 0x277 /* AppKit.INSAccessibilityButton */, 0x279 /* NSAccessibilityButtonWrapper */ },
		{ 0x27B /* AppKit.INSUserInterfaceCompression */, 0x27D /* NSUserInterfaceCompressionWrapper */ },
		{ 0x27F /* AppKit.INSUserInterfaceValidations */, 0x281 /* NSUserInterfaceValidationsWrapper */ },
		{ 0x287 /* IntentsUI.IINUIAddVoiceShortcutButtonDelegate */, 0x289 /* INUIAddVoiceShortcutButtonDelegateWrapper */ },
		{ 0x291 /* IntentsUI.IINUIAddVoiceShortcutViewControllerDelegate */, 0x293 /* INUIAddVoiceShortcutViewControllerDelegateWrapper */ },
		{ 0x29B /* IntentsUI.IINUIEditVoiceShortcutViewControllerDelegate */, 0x29D /* INUIEditVoiceShortcutViewControllerDelegateWrapper */ },
		{ 0x2A7 /* ExternalAccessory.IEAAccessoryDelegate */, 0x2A9 /* EAAccessoryDelegateWrapper */ },
		{ 0x2B5 /* ExtensionKit.IEXHostViewControllerDelegate */, 0x2B7 /* EXHostViewControllerDelegateWrapper */ },
		{ 0x2C3 /* CoreAudioKit.IAUCustomViewPersistentData */, 0x2C5 /* AUCustomViewPersistentDataWrapper */ },
		{ 0x2D9 /* ContactsUI.ICNContactPickerDelegate */, 0x2DB /* CNContactPickerDelegateWrapper */ },
		{ 0x2ED /* AutomaticAssessmentConfiguration.IAEAssessmentSessionDelegate */, 0x2EF /* AEAssessmentSessionDelegateWrapper */ },
		{ 0x2FB /* Accessibility.IAXBrailleMapRenderer */, 0x2FD /* AXBrailleMapRendererWrapper */ },
		{ 0x2FF /* Accessibility.IAXDataAxisDescriptor */, 0x301 /* AXDataAxisDescriptorWrapper */ },
		{ 0x305 /* Accessibility.IAXChart */, 0x307 /* AXChartWrapper */ },
		{ 0x30D /* Accessibility.IAXCustomContentProvider */, 0x30F /* AXCustomContentProviderWrapper */ },
		{ 0x333 /* Vision.IVNRequestRevisionProviding */, 0x335 /* VNRequestRevisionProvidingWrapper */ },
		{ 0x35B /* Vision.IVNFaceObservationAccepting */, 0x35D /* VNFaceObservationAcceptingWrapper */ },
		{ 0x39F /* Vision.IVNRequestProgressProviding */, 0x3A1 /* VNRequestProgressProvidingWrapper */ },
		{ 0x3C5 /* VideoSubscriberAccount.IVSAccountManagerDelegate */, 0x3C7 /* VSAccountManagerDelegateWrapper */ },
		{ 0x3DF /* Foundation.INSMutableCopying */, 0x3E1 /* NSMutableCopyingWrapper */ },
		{ 0x3EF /* UserNotifications.IUNNotificationContentProviding */, 0x3F1 /* UNNotificationContentProvidingWrapper */ },
		{ 0x405 /* UserNotifications.IUNUserNotificationCenterDelegate */, 0x407 /* UNUserNotificationCenterDelegateWrapper */ },
		{ 0x41D /* StoreKit.ISKPaymentQueueDelegate */, 0x41F /* SKPaymentQueueDelegateWrapper */ },
		{ 0x427 /* StoreKit.ISKPaymentTransactionObserver */, 0x429 /* SKPaymentTransactionObserverWrapper */ },
		{ 0x433 /* StoreKit.ISKRequestDelegate */, 0x435 /* SKRequestDelegateWrapper */ },
		{ 0x437 /* StoreKit.ISKProductsRequestDelegate */, 0x439 /* SKProductsRequestDelegateWrapper */ },
		{ 0x449 /* StoreKit.ISKStoreProductViewControllerDelegate */, 0x44B /* SKStoreProductViewControllerDelegateWrapper */ },
		{ 0x471 /* SpriteKit.ISKWarpable */, 0x473 /* SKWarpableWrapper */ },
		{ 0x487 /* SpriteKit.ISKPhysicsContactDelegate */, 0x489 /* SKPhysicsContactDelegateWrapper */ },
		{ 0x4A5 /* GameplayKit.IGKSceneRootNodeType */, 0x4A7 /* GKSceneRootNodeTypeWrapper */ },
		{ 0x4AB /* SpriteKit.ISKSceneDelegate */, 0x4AD /* SKSceneDelegateWrapper */ },
		{ 0x4C7 /* SpriteKit.ISKViewDelegate */, 0x4C9 /* SKViewDelegateWrapper */ },
		{ 0x4CF /* AppKit.INSTextDelegate */, 0x4D1 /* NSTextDelegateWrapper */ },
		{ 0x4D3 /* AppKit.INSTextViewDelegate */, 0x4D5 /* NSTextViewDelegateWrapper */ },
		{ 0x4DB /* SharedWithYouCore.ISWCollaborationActionHandler */, 0x4DD /* SWCollaborationActionHandlerWrapper */ },
		{ 0x4F5 /* ScriptingBridge.ISBApplicationDelegate */, 0x4F7 /* SBApplicationDelegateWrapper */ },
		{ 0x4FD /* CloudKit.ICKRecordValue */, 0x4FF /* CKRecordValueWrapper */ },
		{ 0x511 /* ScreenCaptureKit.ISCStreamDelegate */, 0x513 /* SCStreamDelegateWrapper */ },
		{ 0x519 /* ScreenCaptureKit.ISCStreamOutput */, 0x51B /* SCStreamOutputWrapper */ },
		{ 0x51F /* SceneKit.ISCNAnimatable */, 0x521 /* SCNAnimatableWrapper */ },
		{ 0x523 /* SceneKit.ISCNBoundingVolume */, 0x525 /* SCNBoundingVolumeWrapper */ },
		{ 0x527 /* SceneKit.ISCNShadable */, 0x529 /* SCNShadableWrapper */ },
		{ 0x547 /* SceneKit.ISCNActionable */, 0x549 /* SCNActionableWrapper */ },
		{ 0x54F /* SceneKit.ISCNAnimationProtocol */, 0x551 /* SCNAnimationProtocolWrapper */ },
		{ 0x55F /* SceneKit.ISCNAvoidOccluderConstraintDelegate */, 0x561 /* SCNAvoidOccluderConstraintDelegateWrapper */ },
		{ 0x56F /* SceneKit.ISCNBufferStream */, 0x571 /* SCNBufferStreamWrapper */ },
		{ 0x573 /* SceneKit.ISCNTechniqueSupport */, 0x575 /* SCNTechniqueSupportWrapper */ },
		{ 0x579 /* SceneKit.ISCNCameraControlConfiguration */, 0x57B /* SCNCameraControlConfigurationWrapper */ },
		{ 0x57F /* SceneKit.ISCNCameraControllerDelegate */, 0x581 /* SCNCameraControllerDelegateWrapper */ },
		{ 0x5A5 /* SceneKit.ISCNNodeRendererDelegate */, 0x5A7 /* SCNNodeRendererDelegateWrapper */ },
		{ 0x5B9 /* SceneKit.ISCNPhysicsContactDelegate */, 0x5BB /* SCNPhysicsContactDelegateWrapper */ },
		{ 0x5CF /* SceneKit.ISCNProgramDelegate */, 0x5D1 /* SCNProgramDelegateWrapper */ },
		{ 0x5DF /* SceneKit.ISCNSceneExportDelegate */, 0x5E1 /* SCNSceneExportDelegateWrapper */ },
		{ 0x5E7 /* SceneKit.ISCNSceneRenderer */, 0x5E9 /* SCNSceneRendererWrapper */ },
		{ 0x5EF /* SceneKit.ISCNSceneRendererDelegate */, 0x5F1 /* SCNSceneRendererDelegateWrapper */ },
		{ 0x60F /* AppKit.INSMenuItemValidation */, 0x611 /* NSMenuItemValidationWrapper */ },
		{ 0x61B /* QuickLookUI.IQLPreviewingController */, 0x61D /* QLPreviewingControllerWrapper */ },
		{ 0x61F /* QuickLookUI.IQLPreviewItem */, 0x621 /* QLPreviewItemWrapper */ },
		{ 0x627 /* QuickLookUI.IQLPreviewPanelDataSource */, 0x629 /* QLPreviewPanelDataSourceWrapper */ },
		{ 0x62F /* AppKit.INSWindowDelegate */, 0x631 /* NSWindowDelegateWrapper */ },
		{ 0x633 /* QuickLookUI.IQLPreviewPanelDelegate */, 0x635 /* QLPreviewPanelDelegateWrapper */ },
		{ 0x677 /* Photos.IPHLivePhotoFrame */, 0x679 /* PHLivePhotoFrameWrapper */ },
		{ 0x68B /* Photos.IPHPhotoLibraryAvailabilityObserver */, 0x68D /* PHPhotoLibraryAvailabilityObserverWrapper */ },
		{ 0x68F /* Photos.IPHPhotoLibraryChangeObserver */, 0x691 /* PHPhotoLibraryChangeObserverWrapper */ },
		{ 0x6CB /* PdfKit.IPdfDocumentDelegate */, 0x6CD /* PdfDocumentDelegateWrapper */ },
		{ 0x6D7 /* PdfKit.IPdfPageOverlayViewProvider */, 0x6D9 /* PdfPageOverlayViewProviderWrapper */ },
		{ 0x6DD /* PdfKit.IPdfViewDelegate */, 0x6DF /* PdfViewDelegateWrapper */ },
		{ 0x715 /* PassKit.IPKPaymentAuthorizationControllerDelegate */, 0x717 /* PKPaymentAuthorizationControllerDelegateWrapper */ },
		{ 0x71F /* PassKit.IPKPaymentAuthorizationViewControllerDelegate */, 0x721 /* PKPaymentAuthorizationViewControllerDelegateWrapper */ },
		{ 0x72B /* PassKit.IPKPaymentInformationRequestHandling */, 0x72D /* PKPaymentInformationRequestHandlingWrapper */ },
		{ 0x759 /* PassKit.IPKVehicleConnectionDelegate */, 0x75B /* PKVehicleConnectionDelegateWrapper */ },
		{ 0x7CB /* NetworkExtension.INWTcpConnectionAuthenticationDelegate */, 0x7CD /* NWTcpConnectionAuthenticationDelegateWrapper */ },
		{ 0x7DF /* MultipeerConnectivity.IMCAdvertiserAssistantDelegate */, 0x7E1 /* MCAdvertiserAssistantDelegateWrapper */ },
		{ 0x7E7 /* MultipeerConnectivity.IMCNearbyServiceBrowserDelegate */, 0x7E9 /* MCNearbyServiceBrowserDelegateWrapper */ },
		{ 0x7ED /* MultipeerConnectivity.IMCBrowserViewControllerDelegate */, 0x7EF /* MCBrowserViewControllerDelegateWrapper */ },
		{ 0x7F7 /* MultipeerConnectivity.IMCNearbyServiceAdvertiserDelegate */, 0x7F9 /* MCNearbyServiceAdvertiserDelegateWrapper */ },
		{ 0x807 /* MultipeerConnectivity.IMCSessionDelegate */, 0x809 /* MCSessionDelegateWrapper */ },
		{ 0x827 /* ModelIO.IMDLNamed */, 0x829 /* MDLNamedWrapper */ },
		{ 0x82F /* ModelIO.IMDLComponent */, 0x831 /* MDLComponentWrapper */ },
		{ 0x833 /* ModelIO.IMDLTransformComponent */, 0x835 /* MDLTransformComponentWrapper */ },
		{ 0x845 /* ModelIO.IMDLAssetResolver */, 0x847 /* MDLAssetResolverWrapper */ },
		{ 0x851 /* ModelIO.IMDLJointAnimation */, 0x853 /* MDLJointAnimationWrapper */ },
		{ 0x857 /* ModelIO.IMDLLightProbeIrradianceDataSource */, 0x859 /* MDLLightProbeIrradianceDataSourceWrapper */ },
		{ 0x869 /* ModelIO.IMDLMeshBuffer */, 0x86B /* MDLMeshBufferWrapper */ },
		{ 0x86D /* ModelIO.IMDLMeshBufferAllocator */, 0x86F /* MDLMeshBufferAllocatorWrapper */ },
		{ 0x877 /* ModelIO.IMDLMeshBufferZone */, 0x879 /* MDLMeshBufferZoneWrapper */ },
		{ 0x87F /* ModelIO.IMDLObjectContainerComponent */, 0x881 /* MDLObjectContainerComponentWrapper */ },
		{ 0x89F /* ModelIO.IMDLTransformOp */, 0x8A1 /* MDLTransformOpWrapper */ },
		{ 0x8D7 /* MetricKit.IMXMetricManagerSubscriber */, 0x8D9 /* MXMetricManagerSubscriberWrapper */ },
		{ 0x94D /* MetalPerformanceShaders.IMPSCnnBatchNormalizationDataSource */, 0x94F /* MPSCnnBatchNormalizationDataSourceWrapper */ },
		{ 0x95B /* MetalPerformanceShaders.IMPSNNTrainableNode */, 0x95D /* MPSNNTrainableNodeWrapper */ },
		{ 0x96B /* MetalPerformanceShaders.IMPSCnnConvolutionDataSource */, 0x96D /* MPSCnnConvolutionDataSourceWrapper */ },
		{ 0x977 /* MetalPerformanceShaders.IMPSImageSizeEncodingState */, 0x979 /* MPSImageSizeEncodingStateWrapper */ },
		{ 0x9B7 /* MetalPerformanceShaders.IMPSCnnInstanceNormalizationDataSource */, 0x9B9 /* MPSCnnInstanceNormalizationDataSourceWrapper */ },
		{ 0xA71 /* Metal.IMTLCommandBuffer */, 0xA73 /* MTLCommandBufferWrapper */ },
		{ 0xA77 /* MetalPerformanceShaders.IMPSDeviceProvider */, 0xA79 /* MPSDeviceProviderWrapper */ },
		{ 0xA7F /* MetalPerformanceShaders.IMPSHandle */, 0xA81 /* MPSHandleWrapper */ },
		{ 0xA83 /* MetalPerformanceShaders.IMPSHeapProvider */, 0xA85 /* MPSHeapProviderWrapper */ },
		{ 0xA8B /* MetalPerformanceShaders.IMPSImageAllocator */, 0xA8D /* MPSImageAllocatorWrapper */ },
		{ 0xAD7 /* MetalPerformanceShaders.IMPSImageTransformProvider */, 0xAD9 /* MPSImageTransformProviderWrapper */ },
		{ 0xB25 /* MetalPerformanceShaders.IMPSNDArrayAllocator */, 0xB27 /* MPSNDArrayAllocatorWrapper */ },
		{ 0xB43 /* MetalPerformanceShaders.IMPSNNPadding */, 0xB45 /* MPSNNPaddingWrapper */ },
		{ 0xB55 /* MetalPerformanceShaders.IMPSNNLossCallback */, 0xB57 /* MPSNNLossCallbackWrapper */ },
		{ 0xBF1 /* CoreAnimation.ICALayerDelegate */, 0xBF3 /* CALayerDelegateWrapper */ },
		{ 0xBF7 /* MetalKit.IMTKViewDelegate */, 0xBF9 /* MTKViewDelegateWrapper */ },
		{ 0xC19 /* Metal.IMTLResource */, 0xC1B /* MTLResourceWrapper */ },
		{ 0xC1D /* Metal.IMTLAccelerationStructure */, 0xC1F /* MTLAccelerationStructureWrapper */ },
		{ 0xC25 /* Metal.IMTLCommandEncoder */, 0xC27 /* MTLCommandEncoderWrapper */ },
		{ 0xC29 /* Metal.IMTLAccelerationStructureCommandEncoder */, 0xC2B /* MTLAccelerationStructureCommandEncoderWrapper */ },
		{ 0xC39 /* Metal.IMTLArgumentEncoder */, 0xC3B /* MTLArgumentEncoderWrapper */ },
		{ 0xC45 /* Metal.IMTLBinaryArchive */, 0xC47 /* MTLBinaryArchiveWrapper */ },
		{ 0xC4B /* Metal.IMTLBlitCommandEncoder */, 0xC4D /* MTLBlitCommandEncoderWrapper */ },
		{ 0xC53 /* Metal.IMTLBuffer */, 0xC55 /* MTLBufferWrapper */ },
		{ 0xC5D /* Metal.IMTLCaptureScope */, 0xC5F /* MTLCaptureScopeWrapper */ },
		{ 0xC67 /* Metal.IMTLCommandBufferEncoderInfo */, 0xC69 /* MTLCommandBufferEncoderInfoWrapper */ },
		{ 0xC6B /* Metal.IMTLCommandQueue */, 0xC6D /* MTLCommandQueueWrapper */ },
		{ 0xC71 /* Metal.IMTLComputeCommandEncoder */, 0xC73 /* MTLComputeCommandEncoderWrapper */ },
		{ 0xC7D /* Metal.IMTLComputePipelineState */, 0xC7F /* MTLComputePipelineStateWrapper */ },
		{ 0xC81 /* Metal.IMTLCounter */, 0xC83 /* MTLCounterWrapper */ },
		{ 0xC85 /* Metal.IMTLCounterSampleBuffer */, 0xC87 /* MTLCounterSampleBufferWrapper */ },
		{ 0xC8B /* Metal.IMTLCounterSet */, 0xC8D /* MTLCounterSetWrapper */ },
		{ 0xC91 /* Metal.IMTLDepthStencilState */, 0xC93 /* MTLDepthStencilStateWrapper */ },
		{ 0xC95 /* Metal.IMTLDevice */, 0xC97 /* MTLDeviceWrapper */ },
		{ 0xC99 /* Metal.IMTLDrawable */, 0xC9B /* MTLDrawableWrapper */ },
		{ 0xCA1 /* Metal.IMTLDynamicLibrary */, 0xCA3 /* MTLDynamicLibraryWrapper */ },
		{ 0xCA5 /* Metal.IMTLEvent */, 0xCA7 /* MTLEventWrapper */ },
		{ 0xCA9 /* Metal.IMTLFence */, 0xCAB /* MTLFenceWrapper */ },
		{ 0xCAD /* Metal.IMTLFunction */, 0xCAF /* MTLFunctionWrapper */ },
		{ 0xCB7 /* Metal.IMTLFunctionHandle */, 0xCB9 /* MTLFunctionHandleWrapper */ },
		{ 0xCBB /* Metal.IMTLFunctionLog */, 0xCBD /* MTLFunctionLogWrapper */ },
		{ 0xCBF /* Metal.IMTLFunctionLogDebugLocation */, 0xCC1 /* MTLFunctionLogDebugLocationWrapper */ },
		{ 0xCC3 /* Metal.IMTLFunctionStitchingAttribute */, 0xCC5 /* MTLFunctionStitchingAttributeWrapper */ },
		{ 0xCC7 /* Metal.IMTLFunctionStitchingNode */, 0xCC9 /* MTLFunctionStitchingNodeWrapper */ },
		{ 0xCD1 /* Metal.IMTLHeap */, 0xCD3 /* MTLHeapWrapper */ },
		{ 0xCD7 /* Metal.IMTLIndirectCommandBuffer */, 0xCD9 /* MTLIndirectCommandBufferWrapper */ },
		{ 0xCDD /* Metal.IMTLIndirectComputeCommand */, 0xCDF /* MTLIndirectComputeCommandWrapper */ },
		{ 0xCE1 /* Metal.IMTLIndirectRenderCommand */, 0xCE3 /* MTLIndirectRenderCommandWrapper */ },
		{ 0xCE9 /* Metal.IMTLIntersectionFunctionTable */, 0xCEB /* MTLIntersectionFunctionTableWrapper */ },
		{ 0xCEF /* Metal.IMTLLibrary */, 0xCF1 /* MTLLibraryWrapper */ },
		{ 0xCF5 /* Metal.IMTLLogContainer */, 0xCF7 /* MTLLogContainerWrapper */ },
		{ 0xCFB /* Metal.IMTLParallelRenderCommandEncoder */, 0xCFD /* MTLParallelRenderCommandEncoderWrapper */ },
		{ 0xD09 /* Metal.IMTLRasterizationRateMap */, 0xD0B /* MTLRasterizationRateMapWrapper */ },
		{ 0xD11 /* Metal.IMTLRenderCommandEncoder */, 0xD13 /* MTLRenderCommandEncoderWrapper */ },
		{ 0xD27 /* Metal.IMTLRenderPipelineState */, 0xD29 /* MTLRenderPipelineStateWrapper */ },
		{ 0xD2B /* Metal.IMTLResourceStateCommandEncoder */, 0xD2D /* MTLResourceStateCommandEncoderWrapper */ },
		{ 0xD35 /* Metal.IMTLSamplerState */, 0xD37 /* MTLSamplerStateWrapper */ },
		{ 0xD39 /* Metal.IMTLSharedEvent */, 0xD3B /* MTLSharedEventWrapper */ },
		{ 0xD4D /* Metal.IMTLTexture */, 0xD4F /* MTLTextureWrapper */ },
		{ 0xD61 /* Metal.IMTLVisibleFunctionTable */, 0xD63 /* MTLVisibleFunctionTableWrapper */ },
		{ 0xD97 /* MapKit.IMKAnnotation */, 0xD99 /* MKAnnotationWrapper */ },
		{ 0xD9D /* MapKit.IMKGeoJsonObject */, 0xD9F /* MKGeoJsonObjectWrapper */ },
		{ 0xDA3 /* MapKit.IMKOverlay */, 0xDA5 /* MKOverlayWrapper */ },
		{ 0xDD9 /* MapKit.IMKLocalSearchCompleterDelegate */, 0xDDB /* MKLocalSearchCompleterDelegateWrapper */ },
		{ 0xDEF /* MapKit.IMKLookAroundViewControllerDelegate */, 0xDF1 /* MKLookAroundViewControllerDelegateWrapper */ },
		{ 0xE01 /* MapKit.IMKMapViewDelegate */, 0xE03 /* MKMapViewDelegateWrapper */ },
		{ 0xE8B /* JavaScriptCore.IJSExport */, 0xE8D /* JSExportWrapper */ },
		{ 0xE9D /* Intents.IINSpeakable */, 0xE9F /* INSpeakableWrapper */ },
		{ 0xEAD /* Intents.IINAnswerCallIntentHandling */, 0xEAF /* INAnswerCallIntentHandlingWrapper */ },
		{ 0xED7 /* Intents.IINIntentHandlerProviding */, 0xED9 /* INIntentHandlerProvidingWrapper */ },
		{ 0xEED /* Intents.IINHangUpCallIntentHandling */, 0xEEF /* INHangUpCallIntentHandlingWrapper */ },
		{ 0xF23 /* Intents.IINSendMessageIntentHandling */, 0xF25 /* INSendMessageIntentHandlingWrapper */ },
		{ 0xF2D /* Intents.IINShareFocusStatusIntentHandling */, 0xF2F /* INShareFocusStatusIntentHandlingWrapper */ },
		{ 0xF4B /* ImageKit.IIKCameraDeviceViewDelegate */, 0xF4D /* IKCameraDeviceViewDelegateWrapper */ },
		{ 0xF53 /* ImageKit.IIKDeviceBrowserViewDelegate */, 0xF55 /* IKDeviceBrowserViewDelegateWrapper */ },
		{ 0xF5D /* ImageKit.IIKFilterCustomUIProvider */, 0xF5F /* IKFilterCustomUIProviderWrapper */ },
		{ 0xF77 /* ImageKit.IIKImageEditPanelDataSource */, 0xF79 /* IKImageEditPanelDataSourceWrapper */ },
		{ 0xF87 /* ImageKit.IIKScannerDeviceViewDelegate */, 0xF89 /* IKScannerDeviceViewDelegateWrapper */ },
		{ 0xF91 /* ImageKit.IIKSlideshowDataSource */, 0xF93 /* IKSlideshowDataSourceWrapper */ },
		{ 0xF99 /* ImageCaptureCore.IICDeviceDelegate */, 0xF9B /* ICDeviceDelegateWrapper */ },
		{ 0xF9D /* ImageCaptureCore.IICCameraDeviceDelegate */, 0xF9F /* ICCameraDeviceDelegateWrapper */ },
		{ 0xFA5 /* ImageCaptureCore.IICCameraDeviceDownloadDelegate */, 0xFA7 /* ICCameraDeviceDownloadDelegateWrapper */ },
		{ 0xFB7 /* ImageCaptureCore.IICDeviceBrowserDelegate */, 0xFB9 /* ICDeviceBrowserDelegateWrapper */ },
		{ 0xFC7 /* ImageCaptureCore.IICScannerDeviceDelegate */, 0xFC9 /* ICScannerDeviceDelegateWrapper */ },
		{ 0x1055 /* HealthKit.IHKLiveWorkoutBuilderDelegate */, 0x1057 /* HKLiveWorkoutBuilderDelegateWrapper */ },
		{ 0x1093 /* HealthKit.IHKWorkoutSessionDelegate */, 0x1095 /* HKWorkoutSessionDelegateWrapper */ },
		{ 0x10BD /* GameplayKit.IGKAgentDelegate */, 0x10BF /* GKAgentDelegateWrapper */ },
		{ 0x10C5 /* GameplayKit.IGKRandom */, 0x10C7 /* GKRandomWrapper */ },
		{ 0x10DF /* GameplayKit.IGKGameModel */, 0x10E1 /* GKGameModelWrapper */ },
		{ 0x10E3 /* GameplayKit.IGKGameModelPlayer */, 0x10E5 /* GKGameModelPlayerWrapper */ },
		{ 0x10E7 /* GameplayKit.IGKGameModelUpdate */, 0x10E9 /* GKGameModelUpdateWrapper */ },
		{ 0x10FF /* GameplayKit.IGKStrategist */, 0x1101 /* GKStrategistWrapper */ },
		{ 0x1137 /* GameKit.IGKAchievementViewControllerDelegate */, 0x1139 /* GKAchievementViewControllerDelegateWrapper */ },
		{ 0x1141 /* GameKit.IGKChallengeEventHandlerDelegate */, 0x1143 /* GKChallengeEventHandlerDelegateWrapper */ },
		{ 0x1149 /* GameKit.IGKChallengeListener */, 0x114B /* GKChallengeListenerWrapper */ },
		{ 0x1151 /* GameKit.IGKViewController */, 0x1153 /* GKViewControllerWrapper */ },
		{ 0x1157 /* GameKit.IGKChallengesViewControllerDelegate */, 0x1159 /* GKChallengesViewControllerDelegateWrapper */ },
		{ 0x1163 /* GameKit.IGKFriendRequestComposeViewControllerDelegate */, 0x1165 /* GKFriendRequestComposeViewControllerDelegateWrapper */ },
		{ 0x116B /* GameKit.IGKGameCenterControllerDelegate */, 0x116D /* GKGameCenterControllerDelegateWrapper */ },
		{ 0x1173 /* GameKit.IGKGameSessionEventListener */, 0x1175 /* GKGameSessionEventListenerWrapper */ },
		{ 0x1179 /* GameKit.IGKInviteEventListener */, 0x117B /* GKInviteEventListenerWrapper */ },
		{ 0x1183 /* GameKit.IGKLeaderboardViewControllerDelegate */, 0x1185 /* GKLeaderboardViewControllerDelegateWrapper */ },
		{ 0x118B /* GameKit.IGKSavedGameListener */, 0x118D /* GKSavedGameListenerWrapper */ },
		{ 0x118F /* GameKit.IGKTurnBasedEventListener */, 0x1191 /* GKTurnBasedEventListenerWrapper */ },
		{ 0x1193 /* GameKit.IGKLocalPlayerListener */, 0x1195 /* GKLocalPlayerListenerWrapper */ },
		{ 0x119B /* GameKit.IGKMatchDelegate */, 0x119D /* GKMatchDelegateWrapper */ },
		{ 0x11A3 /* GameKit.IGKMatchmakerViewControllerDelegate */, 0x11A5 /* GKMatchmakerViewControllerDelegateWrapper */ },
		{ 0x11B5 /* GameKit.IGKSessionDelegate */, 0x11B7 /* GKSessionDelegateWrapper */ },
		{ 0x11BF /* GameKit.IGKTurnBasedEventHandlerDelegate */, 0x11C1 /* GKTurnBasedEventHandlerDelegateWrapper */ },
		{ 0x11CD /* GameKit.IGKTurnBasedMatchmakerViewControllerDelegate */, 0x11CF /* GKTurnBasedMatchmakerViewControllerDelegateWrapper */ },
		{ 0x11E5 /* GameController.IGCPhysicalInputElement */, 0x11E7 /* GCPhysicalInputElementWrapper */ },
		{ 0x11E9 /* GameController.IGCAxisElement */, 0x11EB /* GCAxisElementWrapper */ },
		{ 0x11ED /* GameController.IGCAxisInput */, 0x11EF /* GCAxisInputWrapper */ },
		{ 0x11F1 /* GameController.IGCButtonElement */, 0x11F3 /* GCButtonElementWrapper */ },
		{ 0x1201 /* GameController.IGCDevice */, 0x1203 /* GCDeviceWrapper */ },
		{ 0x120D /* GameController.IGCDevicePhysicalInputState */, 0x120F /* GCDevicePhysicalInputStateWrapper */ },
		{ 0x1211 /* GameController.IGCDevicePhysicalInput */, 0x1213 /* GCDevicePhysicalInputWrapper */ },
		{ 0x1215 /* GameController.IGCDevicePhysicalInputStateDiff */, 0x1217 /* GCDevicePhysicalInputStateDiffWrapper */ },
		{ 0x121B /* GameController.IGCDirectionPadElement */, 0x121D /* GCDirectionPadElementWrapper */ },
		{ 0x122B /* GameController.IGCLinearInput */, 0x122D /* GCLinearInputWrapper */ },
		{ 0x1233 /* GameController.IGCPressedStateInput */, 0x1235 /* GCPressedStateInputWrapper */ },
		{ 0x123B /* GameController.IGCRelativeInput */, 0x123D /* GCRelativeInputWrapper */ },
		{ 0x1241 /* GameController.IGCSwitchElement */, 0x1243 /* GCSwitchElementWrapper */ },
		{ 0x1245 /* GameController.IGCSwitchPositionInput */, 0x1247 /* GCSwitchPositionInputWrapper */ },
		{ 0x1249 /* GameController.IGCTouchedStateInput */, 0x124B /* GCTouchedStateInputWrapper */ },
		{ 0x1251 /* GLKit.IGLKNamedEffect */, 0x1253 /* GLKNamedEffectWrapper */ },
		{ 0x1277 /* WebKit.IDomEventTarget */, 0x1279 /* DomEventTargetWrapper */ },
		{ 0x1299 /* WebKit.IWebPolicyDelegate */, 0x129B /* WebPolicyDelegateWrapper */ },
		{ 0x12CD /* WebKit.IDomEventListener */, 0x12CF /* DomEventListenerWrapper */ },
		{ 0x134D /* WebKit.IDomNodeFilter */, 0x134F /* DomNodeFilterWrapper */ },
		{ 0x1367 /* WebKit.IWebDocumentRepresentation */, 0x1369 /* WebDocumentRepresentationWrapper */ },
		{ 0x1373 /* WebKit.IWebDownloadDelegate */, 0x1375 /* WebDownloadDelegateWrapper */ },
		{ 0x137B /* WebKit.IWebFrameLoadDelegate */, 0x137D /* WebFrameLoadDelegateWrapper */ },
		{ 0x1387 /* WebKit.IWebOpenPanelResultListener */, 0x1389 /* WebOpenPanelResultListenerWrapper */ },
		{ 0x138F /* WebKit.IWebPolicyDecisionListener */, 0x1391 /* WebPolicyDecisionListenerWrapper */ },
		{ 0x139B /* WebKit.IWebResourceLoadDelegate */, 0x139D /* WebResourceLoadDelegateWrapper */ },
		{ 0x13A3 /* WebKit.IWebUIDelegate */, 0x13A5 /* WebUIDelegateWrapper */ },
		{ 0x13B3 /* WebKit.IWKDownloadDelegate */, 0x13B5 /* WKDownloadDelegateWrapper */ },
		{ 0x13C1 /* WebKit.IWKHttpCookieStoreObserver */, 0x13C3 /* WKHttpCookieStoreObserverWrapper */ },
		{ 0x13C9 /* WebKit.IWKNavigationDelegate */, 0x13CB /* WKNavigationDelegateWrapper */ },
		{ 0x13DB /* WebKit.IWKScriptMessageHandler */, 0x13DD /* WKScriptMessageHandlerWrapper */ },
		{ 0x13E3 /* WebKit.IWKScriptMessageHandlerWithReply */, 0x13E5 /* WKScriptMessageHandlerWithReplyWrapper */ },
		{ 0x13EB /* WebKit.IWKUIDelegate */, 0x13ED /* WKUIDelegateWrapper */ },
		{ 0x13F3 /* WebKit.IWKUrlSchemeHandler */, 0x13F5 /* WKUrlSchemeHandlerWrapper */ },
		{ 0x13F7 /* WebKit.IWKUrlSchemeTask */, 0x13F9 /* WKUrlSchemeTaskWrapper */ },
		{ 0x1439 /* Foundation.INSFileManagerDelegate */, 0x143B /* NSFileManagerDelegateWrapper */ },
		{ 0x1449 /* AppKit.INSPasteboardReading */, 0x144B /* NSPasteboardReadingWrapper */ },
		{ 0x144D /* AppKit.INSPasteboardWriting */, 0x144F /* NSPasteboardWritingWrapper */ },
		{ 0x145D /* Foundation.INSItemProviderReading */, 0x145F /* NSItemProviderReadingWrapper */ },
		{ 0x1461 /* Foundation.INSItemProviderWriting */, 0x1463 /* NSItemProviderWritingWrapper */ },
		{ 0x1471 /* CoreAnimation.ICAAction */, 0x1473 /* CAActionWrapper */ },
		{ 0x1479 /* CoreData.INSFetchRequestResult */, 0x147B /* NSFetchRequestResultWrapper */ },
		{ 0x14B3 /* Foundation.INSCacheDelegate */, 0x14B5 /* NSCacheDelegateWrapper */ },
		{ 0x14CB /* Foundation.INSLocking */, 0x14CD /* NSLockingWrapper */ },
		{ 0x14D3 /* Foundation.INSConnectionDelegate */, 0x14D5 /* NSConnectionDelegateWrapper */ },
		{ 0x14ED /* Foundation.INSDiscardableContent */, 0x14EF /* NSDiscardableContentWrapper */ },
		{ 0x1507 /* Foundation.INSFilePresenter */, 0x1509 /* NSFilePresenterWrapper */ },
		{ 0x1521 /* Foundation.INSKeyedArchiverDelegate */, 0x1523 /* NSKeyedArchiverDelegateWrapper */ },
		{ 0x1529 /* Foundation.INSKeyedUnarchiverDelegate */, 0x152B /* NSKeyedUnarchiverDelegateWrapper */ },
		{ 0x153D /* Foundation.INSPortDelegate */, 0x153F /* NSPortDelegateWrapper */ },
		{ 0x1541 /* Foundation.INSMachPortDelegate */, 0x1543 /* NSMachPortDelegateWrapper */ },
		{ 0x1555 /* Foundation.INSMetadataQueryDelegate */, 0x1557 /* NSMetadataQueryDelegateWrapper */ },
		{ 0x156F /* Foundation.INSNetServiceBrowserDelegate */, 0x1571 /* NSNetServiceBrowserDelegateWrapper */ },
		{ 0x1577 /* Foundation.INSNetServiceDelegate */, 0x1579 /* NSNetServiceDelegateWrapper */ },
		{ 0x1585 /* Foundation.INSObjectProtocol */, 0x1587 /* NSObjectProtocolWrapper */ },
		{ 0x1589 /* Foundation.INSProgressReporting */, 0x158B /* NSProgressReportingWrapper */ },
		{ 0x15AB /* Foundation.INSStreamDelegate */, 0x15AD /* NSStreamDelegateWrapper */ },
		{ 0x15E7 /* Foundation.INSUrlAuthenticationChallengeSender */, 0x15E9 /* NSUrlAuthenticationChallengeSenderWrapper */ },
		{ 0x15EB /* Foundation.INSUrlConnectionDelegate */, 0x15ED /* NSUrlConnectionDelegateWrapper */ },
		{ 0x15EF /* Foundation.INSUrlConnectionDataDelegate */, 0x15F1 /* NSUrlConnectionDataDelegateWrapper */ },
		{ 0x15FB /* Foundation.INSUrlConnectionDownloadDelegate */, 0x15FD /* NSUrlConnectionDownloadDelegateWrapper */ },
		{ 0x1603 /* Foundation.INSUrlDownloadDelegate */, 0x1605 /* NSUrlDownloadDelegateWrapper */ },
		{ 0x160B /* Foundation.INSUrlProtocolClient */, 0x160D /* NSUrlProtocolClientWrapper */ },
		{ 0x1611 /* Foundation.INSUrlSessionDelegate */, 0x1613 /* NSUrlSessionDelegateWrapper */ },
		{ 0x1615 /* Foundation.INSUrlSessionTaskDelegate */, 0x1617 /* NSUrlSessionTaskDelegateWrapper */ },
		{ 0x1619 /* Foundation.INSUrlSessionDataDelegate */, 0x161B /* NSUrlSessionDataDelegateWrapper */ },
		{ 0x162D /* Foundation.INSUrlSessionDownloadDelegate */, 0x162F /* NSUrlSessionDownloadDelegateWrapper */ },
		{ 0x1637 /* Foundation.INSUrlSessionStreamDelegate */, 0x1639 /* NSUrlSessionStreamDelegateWrapper */ },
		{ 0x1645 /* Foundation.INSUrlSessionWebSocketDelegate */, 0x1647 /* NSUrlSessionWebSocketDelegateWrapper */ },
		{ 0x164F /* Foundation.INSUserActivityDelegate */, 0x1651 /* NSUserActivityDelegateWrapper */ },
		{ 0x165B /* Foundation.INSUserNotificationCenterDelegate */, 0x165D /* NSUserNotificationCenterDelegateWrapper */ },
		{ 0x1667 /* Foundation.INSXpcListenerDelegate */, 0x1669 /* NSXpcListenerDelegateWrapper */ },
		{ 0x1671 /* FinderSync.IFIFinderSyncProtocol */, 0x1673 /* FIFinderSyncProtocolWrapper */ },
		{ 0x1675 /* FileProvider.INSFileProviderChangeObserver */, 0x1677 /* NSFileProviderChangeObserverWrapper */ },
		{ 0x1679 /* FileProvider.INSFileProviderCustomAction */, 0x167B /* NSFileProviderCustomActionWrapper */ },
		{ 0x167D /* FileProvider.INSFileProviderDomainState */, 0x167F /* NSFileProviderDomainStateWrapper */ },
		{ 0x1683 /* FileProvider.INSFileProviderEnumerating */, 0x1685 /* NSFileProviderEnumeratingWrapper */ },
		{ 0x1687 /* FileProvider.INSFileProviderEnumerationObserver */, 0x1689 /* NSFileProviderEnumerationObserverWrapper */ },
		{ 0x168B /* FileProvider.INSFileProviderEnumerator */, 0x168D /* NSFileProviderEnumeratorWrapper */ },
		{ 0x168F /* FileProvider.INSFileProviderIncrementalContentFetching */, 0x1691 /* NSFileProviderIncrementalContentFetchingWrapper */ },
		{ 0x1693 /* FileProvider.INSFileProviderItem */, 0x1695 /* NSFileProviderItemWrapper */ },
		{ 0x1699 /* FileProvider.INSFileProviderPartialContentFetching */, 0x169B /* NSFileProviderPartialContentFetchingWrapper */ },
		{ 0x169D /* FileProvider.INSFileProviderPendingSetEnumerator */, 0x169F /* NSFileProviderPendingSetEnumeratorWrapper */ },
		{ 0x16A1 /* FileProvider.INSFileProviderReplicatedExtension */, 0x16A3 /* NSFileProviderReplicatedExtensionWrapper */ },
		{ 0x16A7 /* FileProvider.INSFileProviderServiceSource */, 0x16A9 /* NSFileProviderServiceSourceWrapper */ },
		{ 0x16AB /* FileProvider.INSFileProviderServicing */, 0x16AD /* NSFileProviderServicingWrapper */ },
		{ 0x16AF /* FileProvider.INSFileProviderTestingOperation */, 0x16B1 /* NSFileProviderTestingOperationWrapper */ },
		{ 0x16B3 /* FileProvider.INSFileProviderTestingChildrenEnumeration */, 0x16B5 /* NSFileProviderTestingChildrenEnumerationWrapper */ },
		{ 0x16B7 /* FileProvider.INSFileProviderTestingCollisionResolution */, 0x16B9 /* NSFileProviderTestingCollisionResolutionWrapper */ },
		{ 0x16BB /* FileProvider.INSFileProviderTestingContentFetch */, 0x16BD /* NSFileProviderTestingContentFetchWrapper */ },
		{ 0x16BF /* FileProvider.INSFileProviderTestingCreation */, 0x16C1 /* NSFileProviderTestingCreationWrapper */ },
		{ 0x16C3 /* FileProvider.INSFileProviderTestingDeletion */, 0x16C5 /* NSFileProviderTestingDeletionWrapper */ },
		{ 0x16C7 /* FileProvider.INSFileProviderTestingIngestion */, 0x16C9 /* NSFileProviderTestingIngestionWrapper */ },
		{ 0x16CB /* FileProvider.INSFileProviderTestingLookup */, 0x16CD /* NSFileProviderTestingLookupWrapper */ },
		{ 0x16CF /* FileProvider.INSFileProviderTestingModification */, 0x16D1 /* NSFileProviderTestingModificationWrapper */ },
		{ 0x16D3 /* FileProvider.INSFileProviderThumbnailing */, 0x16D5 /* NSFileProviderThumbnailingWrapper */ },
		{ 0x16D7 /* FileProvider.INSFileProviderUserInteractionSuppressing */, 0x16D9 /* NSFileProviderUserInteractionSuppressingWrapper */ },
		{ 0x16FD /* CoreWlan.ICWEventDelegate */, 0x16FF /* CWEventDelegateWrapper */ },
		{ 0x1717 /* CoreSpotlight.ICSSearchableIndexDelegate */, 0x1719 /* CSSearchableIndexDelegateWrapper */ },
		{ 0x1747 /* CoreMidi.IMidiCIProfileResponderDelegate */, 0x1749 /* MidiCIProfileResponderDelegateWrapper */ },
		{ 0x1759 /* CoreML.IMLFeatureProvider */, 0x175B /* MLFeatureProviderWrapper */ },
		{ 0x1761 /* CoreML.IMLBatchProvider */, 0x1763 /* MLBatchProviderWrapper */ },
		{ 0x1767 /* CoreML.IMLCustomLayer */, 0x1769 /* MLCustomLayerWrapper */ },
		{ 0x176B /* CoreML.IMLCustomModel */, 0x176D /* MLCustomModelWrapper */ },
		{ 0x17A3 /* CoreML.IMLWritable */, 0x17A5 /* MLWritableWrapper */ },
		{ 0x17B7 /* CoreLocation.ICLLocationManagerDelegate */, 0x17B9 /* CLLocationManagerDelegateWrapper */ },
		{ 0x17D1 /* CoreImage.ICIFilterProtocol */, 0x17D3 /* CIFilterProtocolWrapper */ },
		{ 0x17D5 /* CoreImage.ICITransitionFilterProtocol */, 0x17D7 /* CITransitionFilterProtocolWrapper */ },
		{ 0x17D9 /* CoreImage.ICIAccordionFoldTransitionProtocol */, 0x17DB /* CIAccordionFoldTransitionProtocolWrapper */ },
		{ 0x180D /* CoreImage.ICIAffineClampProtocol */, 0x180F /* CIAffineClampProtocolWrapper */ },
		{ 0x1821 /* CoreImage.ICIAffineTileProtocol */, 0x1823 /* CIAffineTileProtocolWrapper */ },
		{ 0x1845 /* CoreImage.ICIAreaAverageProtocol */, 0x1847 /* CIAreaAverageProtocolWrapper */ },
		{ 0x1849 /* CoreImage.ICIAreaReductionFilterProtocol */, 0x184B /* CIAreaReductionFilterProtocolWrapper */ },
		{ 0x184D /* CoreImage.ICIAreaHistogramProtocol */, 0x184F /* CIAreaHistogramProtocolWrapper */ },
		{ 0x1869 /* CoreImage.ICIAreaLogarithmicHistogramProtocol */, 0x186B /* CIAreaLogarithmicHistogramProtocolWrapper */ },
		{ 0x188D /* CoreImage.ICIAreaMaximumProtocol */, 0x188F /* CIAreaMaximumProtocolWrapper */ },
		{ 0x18A1 /* CoreImage.ICIAreaMaximumAlphaProtocol */, 0x18A3 /* CIAreaMaximumAlphaProtocolWrapper */ },
		{ 0x18D5 /* CoreImage.ICIAreaMinimumAlphaProtocol */, 0x18D7 /* CIAreaMinimumAlphaProtocolWrapper */ },
		{ 0x18D9 /* CoreImage.ICIAreaMinimumProtocol */, 0x18DB /* CIAreaMinimumProtocolWrapper */ },
		{ 0x18ED /* CoreImage.ICIAreaMinMaxProtocol */, 0x18EF /* CIAreaMinMaxProtocolWrapper */ },
		{ 0x18F1 /* CoreImage.ICIAreaMinMaxRedProtocol */, 0x18F3 /* CIAreaMinMaxRedProtocolWrapper */ },
		{ 0x1909 /* CoreImage.ICIAttributedTextImageGeneratorProtocol */, 0x190B /* CIAttributedTextImageGeneratorProtocolWrapper */ },
		{ 0x1929 /* CoreImage.ICIAztecCodeGeneratorProtocol */, 0x192B /* CIAztecCodeGeneratorProtocolWrapper */ },
		{ 0x1945 /* CoreImage.ICIBarcodeGeneratorProtocol */, 0x1947 /* CIBarcodeGeneratorProtocolWrapper */ },
		{ 0x196D /* CoreImage.ICIBarsSwipeTransitionProtocol */, 0x196F /* CIBarsSwipeTransitionProtocolWrapper */ },
		{ 0x1971 /* CoreImage.ICIBicubicScaleTransformProtocol */, 0x1973 /* CIBicubicScaleTransformProtocolWrapper */ },
		{ 0x199B /* CoreImage.ICIBlendWithMaskProtocol */, 0x199D /* CIBlendWithMaskProtocolWrapper */ },
		{ 0x19C5 /* CoreImage.ICIBloomProtocol */, 0x19C7 /* CIBloomProtocolWrapper */ },
		{ 0x19E1 /* CoreImage.ICIBokehBlurProtocol */, 0x19E3 /* CIBokehBlurProtocolWrapper */ },
		{ 0x1A01 /* CoreImage.ICIBoxBlurProtocol */, 0x1A03 /* CIBoxBlurProtocolWrapper */ },
		{ 0x1A19 /* CoreImage.ICIBumpDistortionProtocol */, 0x1A1B /* CIBumpDistortionProtocolWrapper */ },
		{ 0x1A35 /* CoreImage.ICIBumpDistortionLinearProtocol */, 0x1A37 /* CIBumpDistortionLinearProtocolWrapper */ },
		{ 0x1A5B /* CoreImage.ICICheckerboardGeneratorProtocol */, 0x1A5D /* CICheckerboardGeneratorProtocolWrapper */ },
		{ 0x1A7B /* CoreImage.ICICircleSplashDistortionProtocol */, 0x1A7D /* CICircleSplashDistortionProtocolWrapper */ },
		{ 0x1A97 /* CoreImage.ICICircularScreenProtocol */, 0x1A99 /* CICircularScreenProtocolWrapper */ },
		{ 0x1AB3 /* CoreImage.ICICircularWrapProtocol */, 0x1AB5 /* CICircularWrapProtocolWrapper */ },
		{ 0x1AD5 /* CoreImage.ICICmykHalftoneProtocol */, 0x1AD7 /* CICmykHalftoneProtocolWrapper */ },
		{ 0x1AFD /* CoreImage.ICICode128BarcodeGeneratorProtocol */, 0x1AFF /* CICode128BarcodeGeneratorProtocolWrapper */ },
		{ 0x1B15 /* CoreImage.ICIColorAbsoluteDifferenceProtocol */, 0x1B17 /* CIColorAbsoluteDifferenceProtocolWrapper */ },
		{ 0x1B35 /* CoreImage.ICIColorClampProtocol */, 0x1B37 /* CIColorClampProtocolWrapper */ },
		{ 0x1B4D /* CoreImage.ICIColorControlsProtocol */, 0x1B4F /* CIColorControlsProtocolWrapper */ },
		{ 0x1B69 /* CoreImage.ICIColorCrossPolynomialProtocol */, 0x1B6B /* CIColorCrossPolynomialProtocolWrapper */ },
		{ 0x1B85 /* CoreImage.ICIColorCubeProtocol */, 0x1B87 /* CIColorCubeProtocolWrapper */ },
		{ 0x1BA1 /* CoreImage.ICIColorCubesMixedWithMaskProtocol */, 0x1BA3 /* CIColorCubesMixedWithMaskProtocolWrapper */ },
		{ 0x1BC9 /* CoreImage.ICIColorCubeWithColorSpaceProtocol */, 0x1BCB /* CIColorCubeWithColorSpaceProtocolWrapper */ },
		{ 0x1BE9 /* CoreImage.ICIColorCurvesProtocol */, 0x1BEB /* CIColorCurvesProtocolWrapper */ },
		{ 0x1C0B /* CoreImage.ICIColorInvertProtocol */, 0x1C0D /* CIColorInvertProtocolWrapper */ },
		{ 0x1C1B /* CoreImage.ICIColorMapProtocol */, 0x1C1D /* CIColorMapProtocolWrapper */ },
		{ 0x1C2F /* CoreImage.ICIColorMatrixProtocol */, 0x1C31 /* CIColorMatrixProtocolWrapper */ },
		{ 0x1C53 /* CoreImage.ICIColorMonochromeProtocol */, 0x1C55 /* CIColorMonochromeProtocolWrapper */ },
		{ 0x1C6B /* CoreImage.ICIColorPolynomialProtocol */, 0x1C6D /* CIColorPolynomialProtocolWrapper */ },
		{ 0x1C8B /* CoreImage.ICIColorPosterizeProtocol */, 0x1C8D /* CIColorPosterizeProtocolWrapper */ },
		{ 0x1C9F /* CoreImage.ICIColorThresholdProtocol */, 0x1CA1 /* CIColorThresholdProtocolWrapper */ },
		{ 0x1CB3 /* CoreImage.ICIColorThresholdOtsuProtocol */, 0x1CB5 /* CIColorThresholdOtsuProtocolWrapper */ },
		{ 0x1CC3 /* CoreImage.ICIColumnAverageProtocol */, 0x1CC5 /* CIColumnAverageProtocolWrapper */ },
		{ 0x1CD7 /* CoreImage.ICIComicEffectProtocol */, 0x1CD9 /* CIComicEffectProtocolWrapper */ },
		{ 0x1CE7 /* CoreImage.ICICompositeOperationProtocol */, 0x1CE9 /* CICompositeOperationProtocolWrapper */ },
		{ 0x1CF1 /* CoreImage.ICIConvertLabProtocol */, 0x1CF3 /* CIConvertLabProtocolWrapper */ },
		{ 0x1D17 /* CoreImage.ICIConvolutionProtocol */, 0x1D19 /* CIConvolutionProtocolWrapper */ },
		{ 0x1D49 /* CoreImage.ICICopyMachineTransitionProtocol */, 0x1D4B /* CICopyMachineTransitionProtocolWrapper */ },
		{ 0x1D53 /* CoreImage.ICICoreMLModelProtocol */, 0x1D55 /* CICoreMLModelProtocolWrapper */ },
		{ 0x1D5D /* CoreImage.ICICrystallizeProtocol */, 0x1D5F /* CICrystallizeProtocolWrapper */ },
		{ 0x1D87 /* CoreImage.ICIDepthOfFieldProtocol */, 0x1D89 /* CIDepthOfFieldProtocolWrapper */ },
		{ 0x1DAF /* CoreImage.ICIDepthToDisparityProtocol */, 0x1DB1 /* CIDepthToDisparityProtocolWrapper */ },
		{ 0x1DC5 /* CoreImage.ICIDiscBlurProtocol */, 0x1DC7 /* CIDiscBlurProtocolWrapper */ },
		{ 0x1DD9 /* CoreImage.ICIDisintegrateWithMaskTransitionProtocol */, 0x1DDB /* CIDisintegrateWithMaskTransitionProtocolWrapper */ },
		{ 0x1DF5 /* CoreImage.ICIDisparityToDepthProtocol */, 0x1DF7 /* CIDisparityToDepthProtocolWrapper */ },
		{ 0x1E05 /* CoreImage.ICIDisplacementDistortionProtocol */, 0x1E07 /* CIDisplacementDistortionProtocolWrapper */ },
		{ 0x1E23 /* CoreImage.ICIDissolveTransitionProtocol */, 0x1E25 /* CIDissolveTransitionProtocolWrapper */ },
		{ 0x1E27 /* CoreImage.ICIDitherProtocol */, 0x1E29 /* CIDitherProtocolWrapper */ },
		{ 0x1E41 /* CoreImage.ICIDocumentEnhancerProtocol */, 0x1E43 /* CIDocumentEnhancerProtocolWrapper */ },
		{ 0x1E55 /* CoreImage.ICIDotScreenProtocol */, 0x1E57 /* CIDotScreenProtocolWrapper */ },
		{ 0x1E75 /* CoreImage.ICIDrosteProtocol */, 0x1E77 /* CIDrosteProtocolWrapper */ },
		{ 0x1E9D /* CoreImage.ICIEdgePreserveUpsampleProtocol */, 0x1E9F /* CIEdgePreserveUpsampleProtocolWrapper */ },
		{ 0x1EB9 /* CoreImage.ICIEdgesProtocol */, 0x1EBB /* CIEdgesProtocolWrapper */ },
		{ 0x1ECD /* CoreImage.ICIEdgeWorkProtocol */, 0x1ECF /* CIEdgeWorkProtocolWrapper */ },
		{ 0x1EE5 /* CoreImage.ICIEightfoldReflectedTileProtocol */, 0x1EE7 /* CIEightfoldReflectedTileProtocolWrapper */ },
		{ 0x1F07 /* CoreImage.ICIExposureAdjustProtocol */, 0x1F09 /* CIExposureAdjustProtocolWrapper */ },
		{ 0x1F23 /* CoreImage.ICIFalseColorProtocol */, 0x1F25 /* CIFalseColorProtocolWrapper */ },
		{ 0x1F3B /* CoreImage.ICIFilterConstructor */, 0x1F3D /* CIFilterConstructorWrapper */ },
		{ 0x1F43 /* CoreImage.ICIFlashTransitionProtocol */, 0x1F45 /* CIFlashTransitionProtocolWrapper */ },
		{ 0x1F77 /* CoreImage.ICIFourCoordinateGeometryFilterProtocol */, 0x1F79 /* CIFourCoordinateGeometryFilterProtocolWrapper */ },
		{ 0x1F7B /* CoreImage.ICIFourfoldReflectedTileProtocol */, 0x1F7D /* CIFourfoldReflectedTileProtocolWrapper */ },
		{ 0x1F9B /* CoreImage.ICIFourfoldRotatedTileProtocol */, 0x1F9D /* CIFourfoldRotatedTileProtocolWrapper */ },
		{ 0x1FB7 /* CoreImage.ICIFourfoldTranslatedTileProtocol */, 0x1FB9 /* CIFourfoldTranslatedTileProtocolWrapper */ },
		{ 0x1FD7 /* CoreImage.ICIGaborGradientsProtocol */, 0x1FD9 /* CIGaborGradientsProtocolWrapper */ },
		{ 0x1FE7 /* CoreImage.ICIGammaAdjustProtocol */, 0x1FE9 /* CIGammaAdjustProtocolWrapper */ },
		{ 0x1FFB /* CoreImage.ICIGaussianBlurProtocol */, 0x1FFD /* CIGaussianBlurProtocolWrapper */ },
		{ 0x200F /* CoreImage.ICIGaussianGradientProtocol */, 0x2011 /* CIGaussianGradientProtocolWrapper */ },
		{ 0x202B /* CoreImage.ICIGlassDistortionProtocol */, 0x202D /* CIGlassDistortionProtocolWrapper */ },
		{ 0x2047 /* CoreImage.ICIGlassLozengeProtocol */, 0x2049 /* CIGlassLozengeProtocolWrapper */ },
		{ 0x2067 /* CoreImage.ICIGlideReflectedTileProtocol */, 0x2069 /* CIGlideReflectedTileProtocolWrapper */ },
		{ 0x2083 /* CoreImage.ICIGloomProtocol */, 0x2085 /* CIGloomProtocolWrapper */ },
		{ 0x20A7 /* CoreImage.ICIHatchedScreenProtocol */, 0x20A9 /* CIHatchedScreenProtocolWrapper */ },
		{ 0x20C7 /* CoreImage.ICIHeightFieldFromMaskProtocol */, 0x20C9 /* CIHeightFieldFromMaskProtocolWrapper */ },
		{ 0x20DB /* CoreImage.ICIHexagonalPixellateProtocol */, 0x20DD /* CIHexagonalPixellateProtocolWrapper */ },
		{ 0x20F3 /* CoreImage.ICIHighlightShadowAdjustProtocol */, 0x20F5 /* CIHighlightShadowAdjustProtocolWrapper */ },
		{ 0x210F /* CoreImage.ICIHistogramDisplayProtocol */, 0x2111 /* CIHistogramDisplayProtocolWrapper */ },
		{ 0x212B /* CoreImage.ICIHoleDistortionProtocol */, 0x212D /* CIHoleDistortionProtocolWrapper */ },
		{ 0x2143 /* CoreImage.ICIHueAdjustProtocol */, 0x2145 /* CIHueAdjustProtocolWrapper */ },
		{ 0x215D /* CoreImage.ICIHueSaturationValueGradientProtocol */, 0x215F /* CIHueSaturationValueGradientProtocolWrapper */ },
		{ 0x217F /* CoreImage.ICIImageProcessorInput */, 0x2181 /* CIImageProcessorInputWrapper */ },
		{ 0x2185 /* CoreImage.ICIImageProcessorOutput */, 0x2187 /* CIImageProcessorOutputWrapper */ },
		{ 0x2189 /* CoreImage.ICIKaleidoscopeProtocol */, 0x218B /* CIKaleidoscopeProtocolWrapper */ },
		{ 0x21A9 /* CoreImage.ICIKeystoneCorrectionCombinedProtocol */, 0x21AB /* CIKeystoneCorrectionCombinedProtocolWrapper */ },
		{ 0x21CD /* CoreImage.ICIKeystoneCorrectionHorizontalProtocol */, 0x21CF /* CIKeystoneCorrectionHorizontalProtocolWrapper */ },
		{ 0x21F1 /* CoreImage.ICIKeystoneCorrectionVerticalProtocol */, 0x21F3 /* CIKeystoneCorrectionVerticalProtocolWrapper */ },
		{ 0x2215 /* CoreImage.ICIKMeansProtocol */, 0x2217 /* CIKMeansProtocolWrapper */ },
		{ 0x2239 /* CoreImage.ICILabDeltaEProtocol */, 0x223B /* CILabDeltaEProtocolWrapper */ },
		{ 0x224D /* CoreImage.ICILanczosScaleTransformProtocol */, 0x224F /* CILanczosScaleTransformProtocolWrapper */ },
		{ 0x2265 /* CoreImage.ICILenticularHaloGeneratorProtocol */, 0x2267 /* CILenticularHaloGeneratorProtocolWrapper */ },
		{ 0x2297 /* CoreImage.ICILightTunnelProtocol */, 0x2299 /* CILightTunnelProtocolWrapper */ },
		{ 0x22BF /* CoreImage.ICILinearGradientProtocol */, 0x22C1 /* CILinearGradientProtocolWrapper */ },
		{ 0x22E3 /* CoreImage.ICILinearToSrgbToneCurveProtocol */, 0x22E5 /* CILinearToSrgbToneCurveProtocolWrapper */ },
		{ 0x22F3 /* CoreImage.ICILineOverlayProtocol */, 0x22F5 /* CILineOverlayProtocolWrapper */ },
		{ 0x2317 /* CoreImage.ICILineScreenProtocol */, 0x2319 /* CILineScreenProtocolWrapper */ },
		{ 0x233D /* CoreImage.ICIMaskedVariableBlurProtocol */, 0x233F /* CIMaskedVariableBlurProtocolWrapper */ },
		{ 0x2355 /* CoreImage.ICIMaskToAlphaProtocol */, 0x2357 /* CIMaskToAlphaProtocolWrapper */ },
		{ 0x2365 /* CoreImage.ICIMaximumComponentProtocol */, 0x2367 /* CIMaximumComponentProtocolWrapper */ },
		{ 0x237B /* CoreImage.ICIMedianProtocol */, 0x237D /* CIMedianProtocolWrapper */ },
		{ 0x238B /* CoreImage.ICIMeshGeneratorProtocol */, 0x238D /* CIMeshGeneratorProtocolWrapper */ },
		{ 0x23A3 /* CoreImage.ICIMinimumComponentProtocol */, 0x23A5 /* CIMinimumComponentProtocolWrapper */ },
		{ 0x23B9 /* CoreImage.ICIMixProtocol */, 0x23BB /* CIMixProtocolWrapper */ },
		{ 0x23D1 /* CoreImage.ICIModTransitionProtocol */, 0x23D3 /* CIModTransitionProtocolWrapper */ },
		{ 0x23FD /* CoreImage.ICIMorphologyGradientProtocol */, 0x23FF /* CIMorphologyGradientProtocolWrapper */ },
		{ 0x2411 /* CoreImage.ICIMorphologyMaximumProtocol */, 0x2413 /* CIMorphologyMaximumProtocolWrapper */ },
		{ 0x2425 /* CoreImage.ICIMorphologyMinimumProtocol */, 0x2427 /* CIMorphologyMinimumProtocolWrapper */ },
		{ 0x243D /* CoreImage.ICIMorphologyRectangleMaximumProtocol */, 0x243F /* CIMorphologyRectangleMaximumProtocolWrapper */ },
		{ 0x2455 /* CoreImage.ICIMorphologyRectangleMinimumProtocol */, 0x2457 /* CIMorphologyRectangleMinimumProtocolWrapper */ },
		{ 0x246D /* CoreImage.ICIMotionBlurProtocol */, 0x246F /* CIMotionBlurProtocolWrapper */ },
		{ 0x2491 /* CoreImage.ICINinePartStretchedProtocol */, 0x2493 /* CINinePartStretchedProtocolWrapper */ },
		{ 0x24AD /* CoreImage.ICINinePartTiledProtocol */, 0x24AF /* CINinePartTiledProtocolWrapper */ },
		{ 0x24CD /* CoreImage.ICINoiseReductionProtocol */, 0x24CF /* CINoiseReductionProtocolWrapper */ },
		{ 0x24E5 /* CoreImage.ICIOpTileProtocol */, 0x24E7 /* CIOpTileProtocolWrapper */ },
		{ 0x250B /* CoreImage.ICIPageCurlTransitionProtocol */, 0x250D /* CIPageCurlTransitionProtocolWrapper */ },
		{ 0x2537 /* CoreImage.ICIPageCurlWithShadowTransitionProtocol */, 0x2539 /* CIPageCurlWithShadowTransitionProtocolWrapper */ },
		{ 0x256B /* CoreImage.ICIPaletteCentroidProtocol */, 0x256D /* CIPaletteCentroidProtocolWrapper */ },
		{ 0x2583 /* CoreImage.ICIPalettizeProtocol */, 0x2585 /* CIPalettizeProtocolWrapper */ },
		{ 0x259B /* CoreImage.ICIParallelogramTileProtocol */, 0x259D /* CIParallelogramTileProtocolWrapper */ },
		{ 0x25BB /* CoreImage.ICIPdf417BarcodeGeneratorProtocol */, 0x25BD /* CIPdf417BarcodeGeneratorProtocolWrapper */ },
		{ 0x25F9 /* CoreImage.ICIPersonSegmentationProtocol */, 0x25FB /* CIPersonSegmentationProtocolWrapper */ },
		{ 0x260D /* CoreImage.ICIPerspectiveTransformProtocol */, 0x260F /* CIPerspectiveTransformProtocolWrapper */ },
		{ 0x262D /* CoreImage.ICIPerspectiveCorrectionProtocol */, 0x262F /* CIPerspectiveCorrectionProtocolWrapper */ },
		{ 0x2651 /* CoreImage.ICIPerspectiveRotateProtocol */, 0x2653 /* CIPerspectiveRotateProtocolWrapper */ },
		{ 0x2671 /* CoreImage.ICIPerspectiveTileProtocol */, 0x2673 /* CIPerspectiveTileProtocolWrapper */ },
		{ 0x2691 /* CoreImage.ICIPerspectiveTransformWithExtentProtocol */, 0x2693 /* CIPerspectiveTransformWithExtentProtocolWrapper */ },
		{ 0x26B5 /* CoreImage.ICIPhotoEffectProtocol */, 0x26B7 /* CIPhotoEffectProtocolWrapper */ },
		{ 0x26F3 /* CoreImage.ICIPinchDistortionProtocol */, 0x26F5 /* CIPinchDistortionProtocolWrapper */ },
		{ 0x2715 /* CoreImage.ICIPixellateProtocol */, 0x2717 /* CIPixellateProtocolWrapper */ },
		{ 0x272F /* CoreImage.ICIPointillizeProtocol */, 0x2731 /* CIPointillizeProtocolWrapper */ },
		{ 0x274B /* CoreImage.ICIQRCodeGeneratorProtocol */, 0x274D /* CIQRCodeGeneratorProtocolWrapper */ },
		{ 0x275F /* CoreImage.ICIRadialGradientProtocol */, 0x2761 /* CIRadialGradientProtocolWrapper */ },
		{ 0x277F /* CoreImage.ICIRandomGeneratorProtocol */, 0x2781 /* CIRandomGeneratorProtocolWrapper */ },
		{ 0x2795 /* CoreImage.ICIRippleTransitionProtocol */, 0x2797 /* CIRippleTransitionProtocolWrapper */ },
		{ 0x27C1 /* CoreImage.ICIRoundedRectangleGeneratorProtocol */, 0x27C3 /* CIRoundedRectangleGeneratorProtocolWrapper */ },
		{ 0x27D9 /* CoreImage.ICIRowAverageProtocol */, 0x27DB /* CIRowAverageProtocolWrapper */ },
		{ 0x27ED /* CoreImage.ICISaliencyMapProtocol */, 0x27EF /* CISaliencyMapProtocolWrapper */ },
		{ 0x280F /* CoreImage.ICISepiaToneProtocol */, 0x2811 /* CISepiaToneProtocolWrapper */ },
		{ 0x2823 /* CoreImage.ICIShadedMaterialProtocol */, 0x2825 /* CIShadedMaterialProtocolWrapper */ },
		{ 0x283B /* CoreImage.ICISharpenLuminanceProtocol */, 0x283D /* CISharpenLuminanceProtocolWrapper */ },
		{ 0x2853 /* CoreImage.ICISixfoldReflectedTileProtocol */, 0x2855 /* CISixfoldReflectedTileProtocolWrapper */ },
		{ 0x286F /* CoreImage.ICISixfoldRotatedTileProtocol */, 0x2871 /* CISixfoldRotatedTileProtocolWrapper */ },
		{ 0x288B /* CoreImage.ICISmoothLinearGradientProtocol */, 0x288D /* CISmoothLinearGradientProtocolWrapper */ },
		{ 0x28C5 /* CoreImage.ICISpotColorProtocol */, 0x28C7 /* CISpotColorProtocolWrapper */ },
		{ 0x2905 /* CoreImage.ICISpotLightProtocol */, 0x2907 /* CISpotLightProtocolWrapper */ },
		{ 0x2929 /* CoreImage.ICISrgbToneCurveToLinearProtocol */, 0x292B /* CISrgbToneCurveToLinearProtocolWrapper */ },
		{ 0x2939 /* CoreImage.ICIStarShineGeneratorProtocol */, 0x293B /* CIStarShineGeneratorProtocolWrapper */ },
		{ 0x2965 /* CoreImage.ICIStraightenProtocol */, 0x2967 /* CIStraightenProtocolWrapper */ },
		{ 0x2979 /* CoreImage.ICIStretchCropProtocol */, 0x297B /* CIStretchCropProtocolWrapper */ },
		{ 0x2995 /* CoreImage.ICIStripesGeneratorProtocol */, 0x2997 /* CIStripesGeneratorProtocolWrapper */ },
		{ 0x29BB /* CoreImage.ICISunbeamsGeneratorProtocol */, 0x29BD /* CISunbeamsGeneratorProtocolWrapper */ },
		{ 0x29E9 /* CoreImage.ICISwipeTransitionProtocol */, 0x29EB /* CISwipeTransitionProtocolWrapper */ },
		{ 0x29ED /* CoreImage.ICITemperatureAndTintProtocol */, 0x29EF /* CITemperatureAndTintProtocolWrapper */ },
		{ 0x2A07 /* CoreImage.ICITextImageGeneratorProtocol */, 0x2A09 /* CITextImageGeneratorProtocolWrapper */ },
		{ 0x2A27 /* CoreImage.ICIThermalProtocol */, 0x2A29 /* CIThermalProtocolWrapper */ },
		{ 0x2A37 /* CoreImage.ICIToneCurveProtocol */, 0x2A39 /* CIToneCurveProtocolWrapper */ },
		{ 0x2A5B /* CoreImage.ICITorusLensDistortionProtocol */, 0x2A5D /* CITorusLensDistortionProtocolWrapper */ },
		{ 0x2A7B /* CoreImage.ICITriangleKaleidoscopeProtocol */, 0x2A7D /* CITriangleKaleidoscopeProtocolWrapper */ },
		{ 0x2A9B /* CoreImage.ICITriangleTileProtocol */, 0x2A9D /* CITriangleTileProtocolWrapper */ },
		{ 0x2AB7 /* CoreImage.ICITwelvefoldReflectedTileProtocol */, 0x2AB9 /* CITwelvefoldReflectedTileProtocolWrapper */ },
		{ 0x2AD3 /* CoreImage.ICITwirlDistortionProtocol */, 0x2AD5 /* CITwirlDistortionProtocolWrapper */ },
		{ 0x2AEF /* CoreImage.ICIUnsharpMaskProtocol */, 0x2AF1 /* CIUnsharpMaskProtocolWrapper */ },
		{ 0x2B07 /* CoreImage.ICIVibranceProtocol */, 0x2B09 /* CIVibranceProtocolWrapper */ },
		{ 0x2B1B /* CoreImage.ICIVignetteProtocol */, 0x2B1D /* CIVignetteProtocolWrapper */ },
		{ 0x2B33 /* CoreImage.ICIVignetteEffectProtocol */, 0x2B35 /* CIVignetteEffectProtocolWrapper */ },
		{ 0x2B5B /* CoreImage.ICIVortexDistortionProtocol */, 0x2B5D /* CIVortexDistortionProtocolWrapper */ },
		{ 0x2B79 /* CoreImage.ICIWhitePointAdjustProtocol */, 0x2B7B /* CIWhitePointAdjustProtocolWrapper */ },
		{ 0x2B8D /* CoreImage.ICIXRayProtocol */, 0x2B8F /* CIXRayProtocolWrapper */ },
		{ 0x2B9D /* CoreImage.ICIZoomBlurProtocol */, 0x2B9F /* CIZoomBlurProtocolWrapper */ },
		{ 0x2C21 /* CoreBluetooth.ICBCentralManagerDelegate */, 0x2C23 /* CBCentralManagerDelegateWrapper */ },
		{ 0x2C39 /* CoreBluetooth.ICBPeripheralDelegate */, 0x2C3B /* CBPeripheralDelegateWrapper */ },
		{ 0x2C41 /* CoreBluetooth.ICBPeripheralManagerDelegate */, 0x2C43 /* CBPeripheralManagerDelegateWrapper */ },
		{ 0x2C5D /* CoreAnimation.ICAAnimationDelegate */, 0x2C5F /* CAAnimationDelegateWrapper */ },
		{ 0x2C75 /* CoreAnimation.ICAMetalDrawable */, 0x2C77 /* CAMetalDrawableWrapper */ },
		{ 0x2CA7 /* Contacts.ICNChangeHistoryEventVisitor */, 0x2CA9 /* CNChangeHistoryEventVisitorWrapper */ },
		{ 0x2CC5 /* Contacts.ICNKeyDescriptor */, 0x2CC7 /* CNKeyDescriptorWrapper */ },
		{ 0x2D4F /* ClassKit.ICLSContextProvider */, 0x2D51 /* CLSContextProviderWrapper */ },
		{ 0x2D53 /* ClassKit.ICLSDataStoreDelegate */, 0x2D55 /* CLSDataStoreDelegateWrapper */ },
		{ 0x2D69 /* BackgroundAssets.IBADownloaderExtension */, 0x2D6B /* BADownloaderExtensionWrapper */ },
		{ 0x2D6D /* BackgroundAssets.IBADownloadManagerDelegate */, 0x2D6F /* BADownloadManagerDelegateWrapper */ },
		{ 0x2D7B /* AuthenticationServices.IASAuthorizationProviderExtensionRegistrationHandler */, 0x2D7D /* ASAuthorizationProviderExtensionRegistrationHandlerWrapper */ },
		{ 0x2D89 /* AuthenticationServices.IASAuthorizationControllerDelegate */, 0x2D8B /* ASAuthorizationControllerDelegateWrapper */ },
		{ 0x2D91 /* AuthenticationServices.IASAuthorizationControllerPresentationContextProviding */, 0x2D93 /* ASAuthorizationControllerPresentationContextProvidingWrapper */ },
		{ 0x2D95 /* AuthenticationServices.IASAuthorizationCredential */, 0x2D97 /* ASAuthorizationCredentialWrapper */ },
		{ 0x2D99 /* AuthenticationServices.IASAuthorizationProvider */, 0x2D9B /* ASAuthorizationProviderWrapper */ },
		{ 0x2DA1 /* AuthenticationServices.IASPublicKeyCredential */, 0x2DA3 /* ASPublicKeyCredentialWrapper */ },
		{ 0x2DA5 /* AuthenticationServices.IASAuthorizationPublicKeyCredentialAssertion */, 0x2DA7 /* ASAuthorizationPublicKeyCredentialAssertionWrapper */ },
		{ 0x2DAB /* AuthenticationServices.IASAuthorizationPublicKeyCredentialAssertionRequest */, 0x2DAD /* ASAuthorizationPublicKeyCredentialAssertionRequestWrapper */ },
		{ 0x2DB1 /* AuthenticationServices.IASAuthorizationPublicKeyCredentialDescriptor */, 0x2DB3 /* ASAuthorizationPublicKeyCredentialDescriptorWrapper */ },
		{ 0x2DB9 /* AuthenticationServices.IASAuthorizationPublicKeyCredentialRegistration */, 0x2DBB /* ASAuthorizationPublicKeyCredentialRegistrationWrapper */ },
		{ 0x2DBF /* AuthenticationServices.IASAuthorizationPublicKeyCredentialRegistrationRequest */, 0x2DC1 /* ASAuthorizationPublicKeyCredentialRegistrationRequestWrapper */ },
		{ 0x2DC5 /* AuthenticationServices.IASAuthorizationProviderExtensionAuthorizationRequestHandler */, 0x2DC7 /* ASAuthorizationProviderExtensionAuthorizationRequestHandlerWrapper */ },
		{ 0x2DDD /* AuthenticationServices.IASAuthorizationWebBrowserExternallyAuthenticatableRequest */, 0x2DDF /* ASAuthorizationWebBrowserExternallyAuthenticatableRequestWrapper */ },
		{ 0x2DEF /* AuthenticationServices.IASWebAuthenticationPresentationContextProviding */, 0x2DF1 /* ASWebAuthenticationPresentationContextProvidingWrapper */ },
		{ 0x2DF7 /* AuthenticationServices.IASWebAuthenticationSessionRequestDelegate */, 0x2DF9 /* ASWebAuthenticationSessionRequestDelegateWrapper */ },
		{ 0x2DFF /* AuthenticationServices.IASWebAuthenticationSessionWebBrowserSessionHandling */, 0x2E01 /* ASWebAuthenticationSessionWebBrowserSessionHandlingWrapper */ },
		{ 0x2E0D /* AudioUnit.IAUAudioUnitFactory */, 0x2E0F /* AUAudioUnitFactoryWrapper */ },
		{ 0x2E35 /* AppKit.INSEditorRegistration */, 0x2E37 /* NSEditorRegistrationWrapper */ },
		{ 0x2E47 /* AppKit.INSDraggingSource */, 0x2E49 /* NSDraggingSourceWrapper */ },
		{ 0x2E67 /* AppKit.INSAccessibilitySlider */, 0x2E69 /* NSAccessibilitySliderWrapper */ },
		{ 0x2E73 /* AppKit.INSTextLayoutOrientationProvider */, 0x2E75 /* NSTextLayoutOrientationProviderWrapper */ },
		{ 0x2E79 /* AppKit.INSValidatedUserInterfaceItem */, 0x2E7B /* NSValidatedUserInterfaceItemWrapper */ },
		{ 0x2E85 /* AppKit.INSAccessibilityCheckBox */, 0x2E87 /* NSAccessibilityCheckBoxWrapper */ },
		{ 0x2E89 /* AppKit.INSAccessibilityContainsTransientUI */, 0x2E8B /* NSAccessibilityContainsTransientUIWrapper */ },
		{ 0x2E93 /* AppKit.INSAccessibilityCustomRotorItemSearchDelegate */, 0x2E95 /* NSAccessibilityCustomRotorItemSearchDelegateWrapper */ },
		{ 0x2E9D /* AppKit.INSAccessibilityElementLoading */, 0x2E9F /* NSAccessibilityElementLoadingWrapper */ },
		{ 0x2EA1 /* AppKit.INSAccessibilityGroup */, 0x2EA3 /* NSAccessibilityGroupWrapper */ },
		{ 0x2EA5 /* AppKit.INSAccessibilityImage */, 0x2EA7 /* NSAccessibilityImageWrapper */ },
		{ 0x2EA9 /* AppKit.INSAccessibilityLayoutArea */, 0x2EAB /* NSAccessibilityLayoutAreaWrapper */ },
		{ 0x2EAD /* AppKit.INSAccessibilityLayoutItem */, 0x2EAF /* NSAccessibilityLayoutItemWrapper */ },
		{ 0x2EB1 /* AppKit.INSAccessibilityTable */, 0x2EB3 /* NSAccessibilityTableWrapper */ },
		{ 0x2EB5 /* AppKit.INSAccessibilityList */, 0x2EB7 /* NSAccessibilityListWrapper */ },
		{ 0x2EB9 /* AppKit.INSAccessibilityStaticText */, 0x2EBB /* NSAccessibilityStaticTextWrapper */ },
		{ 0x2EBD /* AppKit.INSAccessibilityNavigableStaticText */, 0x2EBF /* NSAccessibilityNavigableStaticTextWrapper */ },
		{ 0x2EC1 /* AppKit.INSAccessibilityOutline */, 0x2EC3 /* NSAccessibilityOutlineWrapper */ },
		{ 0x2EC5 /* AppKit.INSAccessibilityProgressIndicator */, 0x2EC7 /* NSAccessibilityProgressIndicatorWrapper */ },
		{ 0x2EC9 /* AppKit.INSAccessibilityRadioButton */, 0x2ECB /* NSAccessibilityRadioButtonWrapper */ },
		{ 0x2ECD /* AppKit.INSAccessibilityRow */, 0x2ECF /* NSAccessibilityRowWrapper */ },
		{ 0x2ED1 /* AppKit.INSAccessibilityStepper */, 0x2ED3 /* NSAccessibilityStepperWrapper */ },
		{ 0x2ED5 /* AppKit.INSAccessibilitySwitch */, 0x2ED7 /* NSAccessibilitySwitchWrapper */ },
		{ 0x2ED9 /* AppKit.INSAlertDelegate */, 0x2EDB /* NSAlertDelegateWrapper */ },
		{ 0x2EE3 /* AppKit.INSAlignmentFeedbackToken */, 0x2EE5 /* NSAlignmentFeedbackTokenWrapper */ },
		{ 0x2EED /* AppKit.INSAnimationDelegate */, 0x2EEF /* NSAnimationDelegateWrapper */ },
		{ 0x2F03 /* AppKit.INSBrowserDelegate */, 0x2F05 /* NSBrowserDelegateWrapper */ },
		{ 0x2F13 /* AppKit.INSCandidateListTouchBarItemDelegate */, 0x2F15 /* NSCandidateListTouchBarItemDelegateWrapper */ },
		{ 0x2F1F /* AppKit.INSSharingServiceDelegate */, 0x2F21 /* NSSharingServiceDelegateWrapper */ },
		{ 0x2F23 /* AppKit.INSCloudSharingServiceDelegate */, 0x2F25 /* NSCloudSharingServiceDelegateWrapper */ },
		{ 0x2F2F /* AppKit.INSCloudSharingValidation */, 0x2F31 /* NSCloudSharingValidationWrapper */ },
		{ 0x2F39 /* AppKit.INSCollectionLayoutContainer */, 0x2F3B /* NSCollectionLayoutContainerWrapper */ },
		{ 0x2F43 /* AppKit.INSCollectionLayoutEnvironment */, 0x2F45 /* NSCollectionLayoutEnvironmentWrapper */ },
		{ 0x2F51 /* AppKit.INSCollectionLayoutVisibleItem */, 0x2F53 /* NSCollectionLayoutVisibleItemWrapper */ },
		{ 0x2F59 /* AppKit.INSCollectionViewDataSource */, 0x2F5B /* NSCollectionViewDataSourceWrapper */ },
		{ 0x2F61 /* AppKit.INSCollectionViewDelegate */, 0x2F63 /* NSCollectionViewDelegateWrapper */ },
		{ 0x2F69 /* AppKit.INSCollectionViewDelegateFlowLayout */, 0x2F6B /* NSCollectionViewDelegateFlowLayoutWrapper */ },
		{ 0x2F73 /* AppKit.INSCollectionViewElement */, 0x2F75 /* NSCollectionViewElementWrapper */ },
		{ 0x2F87 /* AppKit.INSCollectionViewPrefetching */, 0x2F89 /* NSCollectionViewPrefetchingWrapper */ },
		{ 0x2F8B /* AppKit.INSCollectionViewSectionHeaderView */, 0x2F8D /* NSCollectionViewSectionHeaderViewWrapper */ },
		{ 0x2F93 /* AppKit.INSColorChanging */, 0x2F95 /* NSColorChangingWrapper */ },
		{ 0x2FA5 /* AppKit.INSComboBoxCellDataSource */, 0x2FA7 /* NSComboBoxCellDataSourceWrapper */ },
		{ 0x2FAD /* AppKit.INSComboBoxDataSource */, 0x2FAF /* NSComboBoxDataSourceWrapper */ },
		{ 0x2FB5 /* AppKit.INSTextFieldDelegate */, 0x2FB7 /* NSTextFieldDelegateWrapper */ },
		{ 0x2FB9 /* AppKit.INSComboBoxDelegate */, 0x2FBB /* NSComboBoxDelegateWrapper */ },
		{ 0x2FC7 /* AppKit.INSControlTextEditingDelegate */, 0x2FC9 /* NSControlTextEditingDelegateWrapper */ },
		{ 0x2FD7 /* AppKit.INSDatePickerCellDelegate */, 0x2FD9 /* NSDatePickerCellDelegateWrapper */ },
		{ 0x2FE7 /* AppKit.INSDockTilePlugIn */, 0x2FE9 /* NSDockTilePlugInWrapper */ },
		{ 0x2FEF /* AppKit.INSWindowRestoration */, 0x2FF1 /* NSWindowRestorationWrapper */ },
		{ 0x2FFB /* AppKit.INSDraggingInfo */, 0x2FFD /* NSDraggingInfoWrapper */ },
		{ 0x3005 /* AppKit.INSDrawerDelegate */, 0x3007 /* NSDrawerDelegateWrapper */ },
		{ 0x3011 /* AppKit.INSFilePromiseProviderDelegate */, 0x3013 /* NSFilePromiseProviderDelegateWrapper */ },
		{ 0x301D /* AppKit.INSFontChanging */, 0x301F /* NSFontChangingWrapper */ },
		{ 0x3027 /* AppKit.INSViewToolTipOwner */, 0x3029 /* NSViewToolTipOwnerWrapper */ },
		{ 0x3031 /* AppKit.INSGestureRecognizerDelegate */, 0x3033 /* NSGestureRecognizerDelegateWrapper */ },
		{ 0x3049 /* AppKit.INSHapticFeedbackPerformer */, 0x304B /* NSHapticFeedbackPerformerWrapper */ },
		{ 0x3053 /* AppKit.INSImageDelegate */, 0x3055 /* NSImageDelegateWrapper */ },
		{ 0x3065 /* AppKit.INSLayoutManagerDelegate */, 0x3067 /* NSLayoutManagerDelegateWrapper */ },
		{ 0x3073 /* AppKit.INSMatrixDelegate */, 0x3075 /* NSMatrixDelegateWrapper */ },
		{ 0x307B /* AppKit.INSMenuDelegate */, 0x307D /* NSMenuDelegateWrapper */ },
		{ 0x3097 /* AppKit.INSOpenSavePanelDelegate */, 0x3099 /* NSOpenSavePanelDelegateWrapper */ },
		{ 0x309F /* AppKit.INSOutlineViewDataSource */, 0x30A1 /* NSOutlineViewDataSourceWrapper */ },
		{ 0x30A7 /* AppKit.INSOutlineViewDelegate */, 0x30A9 /* NSOutlineViewDelegateWrapper */ },
		{ 0x30AF /* AppKit.INSPageControllerDelegate */, 0x30B1 /* NSPageControllerDelegateWrapper */ },
		{ 0x30B9 /* AppKit.INSPasteboardItemDataProvider */, 0x30BB /* NSPasteboardItemDataProviderWrapper */ },
		{ 0x30C1 /* AppKit.INSPasteboardTypeOwner */, 0x30C3 /* NSPasteboardTypeOwnerWrapper */ },
		{ 0x30C5 /* AppKit.INSPathCellDelegate */, 0x30C7 /* NSPathCellDelegateWrapper */ },
		{ 0x30CF /* AppKit.INSPathControlDelegate */, 0x30D1 /* NSPathControlDelegateWrapper */ },
		{ 0x30DB /* AppKit.INSPopoverDelegate */, 0x30DD /* NSPopoverDelegateWrapper */ },
		{ 0x30EB /* AppKit.INSPreviewRepresentableActivityItem */, 0x30ED /* NSPreviewRepresentableActivityItemWrapper */ },
		{ 0x30F7 /* AppKit.INSPrintPanelAccessorizing */, 0x30F9 /* NSPrintPanelAccessorizingWrapper */ },
		{ 0x3103 /* AppKit.INSRuleEditorDelegate */, 0x3105 /* NSRuleEditorDelegateWrapper */ },
		{ 0x3115 /* AppKit.INSScrubberDataSource */, 0x3117 /* NSScrubberDataSourceWrapper */ },
		{ 0x311D /* AppKit.INSScrubberDelegate */, 0x311F /* NSScrubberDelegateWrapper */ },
		{ 0x3129 /* AppKit.INSScrubberFlowLayoutDelegate */, 0x312B /* NSScrubberFlowLayoutDelegateWrapper */ },
		{ 0x3141 /* AppKit.INSSearchFieldDelegate */, 0x3143 /* NSSearchFieldDelegateWrapper */ },
		{ 0x314B /* AppKit.INSTextContent */, 0x314D /* NSTextContentWrapper */ },
		{ 0x315B /* AppKit.INSServicesMenuRequestor */, 0x315D /* NSServicesMenuRequestorWrapper */ },
		{ 0x3161 /* AppKit.INSSharingServicePickerDelegate */, 0x3163 /* NSSharingServicePickerDelegateWrapper */ },
		{ 0x316B /* AppKit.INSSharingServicePickerToolbarItemDelegate */, 0x316D /* NSSharingServicePickerToolbarItemDelegateWrapper */ },
		{ 0x3175 /* AppKit.INSSharingServicePickerTouchBarItemDelegate */, 0x3177 /* NSSharingServicePickerTouchBarItemDelegateWrapper */ },
		{ 0x3181 /* AppKit.INSSoundDelegate */, 0x3183 /* NSSoundDelegateWrapper */ },
		{ 0x318B /* AppKit.INSSpeechRecognizerDelegate */, 0x318D /* NSSpeechRecognizerDelegateWrapper */ },
		{ 0x3193 /* AppKit.INSSpeechSynthesizerDelegate */, 0x3195 /* NSSpeechSynthesizerDelegateWrapper */ },
		{ 0x319B /* AppKit.INSSplitViewDelegate */, 0x319D /* NSSplitViewDelegateWrapper */ },
		{ 0x31A7 /* AppKit.INSSpringLoadingDestination */, 0x31A9 /* NSSpringLoadingDestinationWrapper */ },
		{ 0x31B1 /* AppKit.INSStackViewDelegate */, 0x31B3 /* NSStackViewDelegateWrapper */ },
		{ 0x31B9 /* AppKit.INSStandardKeyBindingResponding */, 0x31BB /* NSStandardKeyBindingRespondingWrapper */ },
		{ 0x31D7 /* AppKit.INSTableViewDataSource */, 0x31D9 /* NSTableViewDataSourceWrapper */ },
		{ 0x31DF /* AppKit.INSTableViewDelegate */, 0x31E1 /* NSTableViewDelegateWrapper */ },
		{ 0x31ED /* AppKit.INSTabViewDelegate */, 0x31EF /* NSTabViewDelegateWrapper */ },
		{ 0x31F1 /* AppKit.INSToolbarDelegate */, 0x31F3 /* NSToolbarDelegateWrapper */ },
		{ 0x31FD /* AppKit.INSTextAttachmentContainer */, 0x31FF /* NSTextAttachmentContainerWrapper */ },
		{ 0x3201 /* AppKit.INSTextAttachmentLayout */, 0x3203 /* NSTextAttachmentLayoutWrapper */ },
		{ 0x3207 /* AppKit.INSTextAttachmentCellProtocol */, 0x3209 /* NSTextAttachmentCellProtocolWrapper */ },
		{ 0x3215 /* AppKit.INSTextInputClient */, 0x3217 /* NSTextInputClientWrapper */ },
		{ 0x3219 /* AppKit.INSTextInputTraits */, 0x321B /* NSTextInputTraitsWrapper */ },
		{ 0x321D /* AppKit.INSTextCheckingClient */, 0x321F /* NSTextCheckingClientWrapper */ },
		{ 0x3223 /* AppKit.INSTextContentManagerDelegate */, 0x3225 /* NSTextContentManagerDelegateWrapper */ },
		{ 0x322B /* AppKit.INSTextElementProvider */, 0x322D /* NSTextElementProviderWrapper */ },
		{ 0x3231 /* AppKit.INSTextStorageObserving */, 0x3233 /* NSTextStorageObservingWrapper */ },
		{ 0x3237 /* AppKit.INSTextContentStorageDelegate */, 0x3239 /* NSTextContentStorageDelegateWrapper */ },
		{ 0x3247 /* AppKit.INSTextFinderBarContainer */, 0x3249 /* NSTextFinderBarContainerWrapper */ },
		{ 0x324F /* AppKit.INSTextFinderClient */, 0x3251 /* NSTextFinderClientWrapper */ },
		{ 0x3253 /* AppKit.INSTextInput */, 0x3255 /* NSTextInputWrapper */ },
		{ 0x325D /* AppKit.INSTextSelectionDataSource */, 0x325F /* NSTextSelectionDataSourceWrapper */ },
		{ 0x3263 /* AppKit.INSTextLayoutManagerDelegate */, 0x3265 /* NSTextLayoutManagerDelegateWrapper */ },
		{ 0x3273 /* AppKit.INSTextLocation */, 0x3275 /* NSTextLocationWrapper */ },
		{ 0x3281 /* AppKit.INSTextStorageDelegate */, 0x3283 /* NSTextStorageDelegateWrapper */ },
		{ 0x3295 /* AppKit.INSTextViewportLayoutControllerDelegate */, 0x3297 /* NSTextViewportLayoutControllerDelegateWrapper */ },
		{ 0x32A5 /* AppKit.INSTokenFieldCellDelegate */, 0x32A7 /* NSTokenFieldCellDelegateWrapper */ },
		{ 0x32AD /* AppKit.INSTokenFieldDelegate */, 0x32AF /* NSTokenFieldDelegateWrapper */ },
		{ 0x32BB /* AppKit.INSToolbarItemValidation */, 0x32BD /* NSToolbarItemValidationWrapper */ },
		{ 0x32BF /* AppKit.INSTouchBarDelegate */, 0x32C1 /* NSTouchBarDelegateWrapper */ },
		{ 0x32D5 /* AppKit.INSViewControllerPresentationAnimator */, 0x32D7 /* NSViewControllerPresentationAnimatorWrapper */ },
		{ 0x32F7 /* AVKit.IAVCaptureViewDelegate */, 0x32F9 /* AVCaptureViewDelegateWrapper */ },
		{ 0x3303 /* AVKit.IAVPictureInPictureControllerDelegate */, 0x3305 /* AVPictureInPictureControllerDelegateWrapper */ },
		{ 0x330B /* AVKit.IAVPictureInPictureSampleBufferPlaybackDelegate */, 0x330D /* AVPictureInPictureSampleBufferPlaybackDelegateWrapper */ },
		{ 0x3317 /* AVKit.IAVPlayerViewDelegate */, 0x3319 /* AVPlayerViewDelegateWrapper */ },
		{ 0x331F /* AVKit.IAVPlayerViewPictureInPictureDelegate */, 0x3321 /* AVPlayerViewPictureInPictureDelegateWrapper */ },
		{ 0x3329 /* AVKit.IAVRoutePickerViewDelegate */, 0x332B /* AVRoutePickerViewDelegateWrapper */ },
		{ 0x334D /* AVFoundation.IAVAudioPlayerDelegate */, 0x334F /* AVAudioPlayerDelegateWrapper */ },
		{ 0x335D /* AVFoundation.IAVAudioRecorderDelegate */, 0x335F /* AVAudioRecorderDelegateWrapper */ },
		{ 0x3375 /* AVFoundation.IAVAssetDownloadDelegate */, 0x3377 /* AVAssetDownloadDelegateWrapper */ },
		{ 0x338F /* AVFoundation.IAVAssetReaderCaptionValidationHandling */, 0x3391 /* AVAssetReaderCaptionValidationHandlingWrapper */ },
		{ 0x339F /* AVFoundation.IAVAssetResourceLoaderDelegate */, 0x33A1 /* AVAssetResourceLoaderDelegateWrapper */ },
		{ 0x33C3 /* AVFoundation.IAVAssetWriterDelegate */, 0x33C5 /* AVAssetWriterDelegateWrapper */ },
		{ 0x33DB /* AVFoundation.IAVAsynchronousKeyValueLoading */, 0x33DD /* AVAsynchronousKeyValueLoadingWrapper */ },
		{ 0x33E3 /* AVFoundation.IAVAudio3DMixing */, 0x33E5 /* AVAudio3DMixingWrapper */ },
		{ 0x33F5 /* AVFoundation.IAVAudioStereoMixing */, 0x33F7 /* AVAudioStereoMixingWrapper */ },
		{ 0x33F9 /* AVFoundation.IAVAudioMixing */, 0x33FB /* AVAudioMixingWrapper */ },
		{ 0x345B /* AVFoundation.IAVCaptureAudioDataOutputSampleBufferDelegate */, 0x345D /* AVCaptureAudioDataOutputSampleBufferDelegateWrapper */ },
		{ 0x346D /* AVFoundation.IAVCaptureFileOutputDelegate */, 0x346F /* AVCaptureFileOutputDelegateWrapper */ },
		{ 0x3475 /* AVFoundation.IAVCaptureFileOutputRecordingDelegate */, 0x3477 /* AVCaptureFileOutputRecordingDelegateWrapper */ },
		{ 0x3483 /* AVFoundation.IAVCapturePhotoCaptureDelegate */, 0x3485 /* AVCapturePhotoCaptureDelegateWrapper */ },
		{ 0x3491 /* AVFoundation.IAVCaptureVideoDataOutputSampleBufferDelegate */, 0x3493 /* AVCaptureVideoDataOutputSampleBufferDelegateWrapper */ },
		{ 0x34A7 /* AVFoundation.IAVContentKeyRecipient */, 0x34A9 /* AVContentKeyRecipientWrapper */ },
		{ 0x34AB /* AVFoundation.IAVContentKeySessionDelegate */, 0x34AD /* AVContentKeySessionDelegateWrapper */ },
		{ 0x34CD /* AVFoundation.IAVFragmentMinding */, 0x34CF /* AVFragmentMindingWrapper */ },
		{ 0x3521 /* AVFoundation.IAVPlaybackCoordinatorPlaybackControlDelegate */, 0x3523 /* AVPlaybackCoordinatorPlaybackControlDelegateWrapper */ },
		{ 0x353B /* AVFoundation.IAVPlayerItemOutputPushDelegate */, 0x353D /* AVPlayerItemOutputPushDelegateWrapper */ },
		{ 0x353F /* AVFoundation.IAVPlayerItemLegibleOutputPushDelegate */, 0x3541 /* AVPlayerItemLegibleOutputPushDelegateWrapper */ },
		{ 0x354F /* AVFoundation.IAVPlayerItemMetadataCollectorPushDelegate */, 0x3551 /* AVPlayerItemMetadataCollectorPushDelegateWrapper */ },
		{ 0x3559 /* AVFoundation.IAVPlayerItemMetadataOutputPushDelegate */, 0x355B /* AVPlayerItemMetadataOutputPushDelegateWrapper */ },
		{ 0x3561 /* AVFoundation.IAVPlayerItemOutputPullDelegate */, 0x3563 /* AVPlayerItemOutputPullDelegateWrapper */ },
		{ 0x356D /* AVFoundation.IAVPlayerPlaybackCoordinatorDelegate */, 0x356F /* AVPlayerPlaybackCoordinatorDelegateWrapper */ },
		{ 0x3577 /* AVFoundation.IAVQueuedSampleBufferRendering */, 0x3579 /* AVQueuedSampleBufferRenderingWrapper */ },
		{ 0x3587 /* AVFoundation.IAVSpeechSynthesizerDelegate */, 0x3589 /* AVSpeechSynthesizerDelegateWrapper */ },
		{ 0x3593 /* AVFoundation.IAVVideoCompositing */, 0x3595 /* AVVideoCompositingWrapper */ },
		{ 0x35A1 /* AVFoundation.IAVVideoCompositionValidationHandling */, 0x35A3 /* AVVideoCompositionValidationHandlingWrapper */ },
	};

	static struct MTRegistrationMap __xamarin_registration_map = {
		"c70a2f50f88ee470d197d2b4fff3de5b75237a0d",
		__xamarin_registration_assemblies,
		__xamarin_class_map,
		__xamarin_token_references,
		__xamarin_skipped_map,
		__xamarin_protocol_wrapper_map,
		{ NULL, NULL },
		176,
		3653,
		7943,
		11,
		715,
		0
	};

void xamarin_create_classes () {
	__xamarin_class_map [0].handle = objc_getClass ("NSObject");
	__xamarin_class_map [1].handle = objc_getClass ("Microsoft_macOS__AppKit_NSApplicationDelegate");
	__xamarin_class_map [2].handle = [AppDelegate class];
	__xamarin_class_map [3].handle = objc_getClass ("NSResponder");
	__xamarin_class_map [4].handle = objc_getClass ("NSViewController");
	__xamarin_class_map [5].handle = [ViewController class];
	__xamarin_class_map [6].handle = objc_getClass ("UTType");
	__xamarin_class_map [7].handle = objc_getClass ("THCredentials");
	__xamarin_class_map [8].handle = objc_getClass ("SFAcousticFeature");
	__xamarin_class_map [9].handle = objc_getClass ("SFSpeechRecognitionRequest");
	__xamarin_class_map [10].handle = objc_getClass ("SFSpeechAudioBufferRecognitionRequest");
	__xamarin_class_map [11].handle = objc_getClass ("SFSpeechRecognitionMetadata");
	__xamarin_class_map [12].handle = objc_getClass ("SFSpeechRecognitionResult");
	__xamarin_class_map [13].handle = objc_getClass ("SFSpeechRecognitionTask");
	__xamarin_class_map [14].handle = objc_getClass ("Microsoft_macOS__Speech_SFSpeechRecognitionTaskDelegate");
	__xamarin_class_map [15].handle = objc_getClass ("SFSpeechRecognizer");
	__xamarin_class_map [16].handle = objc_getClass ("Microsoft_macOS__Speech_SFSpeechRecognizerDelegate");
	__xamarin_class_map [17].handle = objc_getClass ("SFSpeechURLRecognitionRequest");
	__xamarin_class_map [18].handle = objc_getClass ("SFTranscription");
	__xamarin_class_map [19].handle = objc_getClass ("SFTranscriptionSegment");
	__xamarin_class_map [20].handle = objc_getClass ("SFVoiceAnalytics");
	__xamarin_class_map [21].handle = objc_getClass ("SNAudioStreamAnalyzer");
	__xamarin_class_map [22].handle = objc_getClass ("SNClassification");
	__xamarin_class_map [23].handle = objc_getClass ("SNClassificationResult");
	__xamarin_class_map [24].handle = objc_getClass ("SNClassifySoundRequest");
	__xamarin_class_map [25].handle = objc_getClass ("SHCatalog");
	__xamarin_class_map [26].handle = objc_getClass ("SHCustomCatalog");
	__xamarin_class_map [27].handle = objc_getClass ("SHMatch");
	__xamarin_class_map [28].handle = objc_getClass ("SHMediaItem");
	__xamarin_class_map [29].handle = objc_getClass ("SHMatchedMediaItem");
	__xamarin_class_map [30].handle = objc_getClass ("SHRange");
	__xamarin_class_map [31].handle = objc_getClass ("SHSession");
	__xamarin_class_map [32].handle = objc_getClass ("Microsoft_macOS__ShazamKit_SHSessionDelegate");
	__xamarin_class_map [33].handle = objc_getClass ("SHSignature");
	__xamarin_class_map [34].handle = objc_getClass ("NSView");
	__xamarin_class_map [35].handle = objc_getClass ("SWAttributionView");
	__xamarin_class_map [36].handle = objc_getClass ("SWHighlight");
	__xamarin_class_map [37].handle = objc_getClass ("SWCollaborationHighlight");
	__xamarin_class_map [38].handle = objc_getClass ("SWCollaborationView");
	__xamarin_class_map [39].handle = objc_getClass ("Microsoft_macOS__SharedWithYou_SWCollaborationViewDelegate");
	__xamarin_class_map [40].handle = objc_getClass ("Microsoft_macOS__SharedWithYou_SWHighlightCenterDelegate");
	__xamarin_class_map [41].handle = objc_getClass ("SWHighlightChangeEvent");
	__xamarin_class_map [42].handle = objc_getClass ("SWHighlightMembershipEvent");
	__xamarin_class_map [43].handle = objc_getClass ("SWHighlightMentionEvent");
	__xamarin_class_map [44].handle = objc_getClass ("SWHighlightPersistenceEvent");
	__xamarin_class_map [45].handle = objc_getClass ("SWRemoveParticipantAlert");
	__xamarin_class_map [46].handle = objc_getClass ("STScreenTimeConfiguration");
	__xamarin_class_map [47].handle = objc_getClass ("STScreenTimeConfigurationObserver");
	__xamarin_class_map [48].handle = objc_getClass ("STWebHistory");
	__xamarin_class_map [49].handle = objc_getClass ("STWebpageController");
	__xamarin_class_map [50].handle = objc_getClass ("SFContentBlockerState");
	__xamarin_class_map [51].handle = objc_getClass ("SFSafariExtensionViewController");
	__xamarin_class_map [52].handle = objc_getClass ("SFSafariPageProperties");
	__xamarin_class_map [53].handle = objc_getClass ("SFSafariToolbarItem");
	__xamarin_class_map [54].handle = objc_getClass ("SFUniversalLink");
	__xamarin_class_map [55].handle = objc_getClass ("RPBroadcastActivityController");
	__xamarin_class_map [56].handle = objc_getClass ("Microsoft_macOS__ReplayKit_RPBroadcastActivityControllerDelegate");
	__xamarin_class_map [57].handle = objc_getClass ("Microsoft_macOS__ReplayKit_RPBroadcastControllerDelegate");
	__xamarin_class_map [58].handle = objc_getClass ("RPBroadcastHandler");
	__xamarin_class_map [59].handle = objc_getClass ("RPBroadcastSampleHandler");
	__xamarin_class_map [60].handle = objc_getClass ("RPPreviewViewController");
	__xamarin_class_map [61].handle = objc_getClass ("Microsoft_macOS__ReplayKit_RPPreviewViewControllerDelegate");
	__xamarin_class_map [62].handle = objc_getClass ("Microsoft_macOS__ReplayKit_RPScreenRecorderDelegate");
	__xamarin_class_map [63].handle = objc_getClass ("QLFileThumbnailRequest");
	__xamarin_class_map [64].handle = objc_getClass ("QLThumbnailGenerationRequest");
	__xamarin_class_map [65].handle = objc_getClass ("QLThumbnailProvider");
	__xamarin_class_map [66].handle = objc_getClass ("QLThumbnailReply");
	__xamarin_class_map [67].handle = objc_getClass ("QLThumbnailRepresentation");
	__xamarin_class_map [68].handle = objc_getClass ("QCComposition");
	__xamarin_class_map [69].handle = objc_getClass ("CALayer");
	__xamarin_class_map [70].handle = objc_getClass ("CAOpenGLLayer");
	__xamarin_class_map [71].handle = objc_getClass ("QCCompositionLayer");
	__xamarin_class_map [72].handle = objc_getClass ("QCCompositionRepository");
	__xamarin_class_map [73].handle = objc_getClass ("PKPushCredentials");
	__xamarin_class_map [74].handle = objc_getClass ("PKPushPayload");
	__xamarin_class_map [75].handle = objc_getClass ("PKPushRegistry");
	__xamarin_class_map [76].handle = objc_getClass ("Microsoft_macOS__PushKit_PKPushRegistryDelegate");
	__xamarin_class_map [77].handle = objc_getClass ("PHLivePhotoView");
	__xamarin_class_map [78].handle = objc_getClass ("Microsoft_macOS__PhotosUI_PHLivePhotoViewDelegate");
	__xamarin_class_map [79].handle = objc_getClass ("PHPickerConfiguration");
	__xamarin_class_map [80].handle = objc_getClass ("PHPickerFilter");
	__xamarin_class_map [81].handle = objc_getClass ("PHPickerResult");
	__xamarin_class_map [82].handle = objc_getClass ("PHPickerViewController");
	__xamarin_class_map [83].handle = objc_getClass ("Microsoft_macOS__PhotosUI_PHPickerViewControllerDelegate");
	__xamarin_class_map [84].handle = objc_getClass ("PHProjectElement");
	__xamarin_class_map [85].handle = objc_getClass ("PHProjectAssetElement");
	__xamarin_class_map [86].handle = objc_getClass ("NSExtensionContext");
	__xamarin_class_map [87].handle = objc_getClass ("PHProjectExtensionContext");
	__xamarin_class_map [88].handle = objc_getClass ("PHProjectInfo");
	__xamarin_class_map [89].handle = objc_getClass ("PHProjectJournalEntryElement");
	__xamarin_class_map [90].handle = objc_getClass ("PHProjectMapElement");
	__xamarin_class_map [91].handle = objc_getClass ("PHProjectRegionOfInterest");
	__xamarin_class_map [92].handle = objc_getClass ("PHProjectSection");
	__xamarin_class_map [93].handle = objc_getClass ("PHProjectSectionContent");
	__xamarin_class_map [94].handle = objc_getClass ("PHProjectTextElement");
	__xamarin_class_map [95].handle = objc_getClass ("PHProjectTypeDescription");
	__xamarin_class_map [96].handle = objc_getClass ("Microsoft_macOS__PhotosUI_PHProjectTypeDescriptionDataSource");
	__xamarin_class_map [97].handle = objc_getClass ("PHASEDefinition");
	__xamarin_class_map [98].handle = objc_getClass ("PHASEMixerDefinition");
	__xamarin_class_map [99].handle = objc_getClass ("PHASEAmbientMixerDefinition");
	__xamarin_class_map [100].handle = objc_getClass ("PHASEAsset");
	__xamarin_class_map [101].handle = objc_getClass ("PHASESoundEventNodeDefinition");
	__xamarin_class_map [102].handle = objc_getClass ("PHASEBlendNodeDefinition");
	__xamarin_class_map [103].handle = objc_getClass ("PHASEDirectivityModelParameters");
	__xamarin_class_map [104].handle = objc_getClass ("PHASECardioidDirectivityModelParameters");
	__xamarin_class_map [105].handle = objc_getClass ("PHASECardioidDirectivityModelSubbandParameters");
	__xamarin_class_map [106].handle = objc_getClass ("PHASEChannelMixerDefinition");
	__xamarin_class_map [107].handle = objc_getClass ("PHASEConeDirectivityModelParameters");
	__xamarin_class_map [108].handle = objc_getClass ("PHASEConeDirectivityModelSubbandParameters");
	__xamarin_class_map [109].handle = objc_getClass ("PHASEContainerNodeDefinition");
	__xamarin_class_map [110].handle = objc_getClass ("PHASEDistanceModelFadeOutParameters");
	__xamarin_class_map [111].handle = objc_getClass ("PHASEDistanceModelParameters");
	__xamarin_class_map [112].handle = objc_getClass ("PHASEDucker");
	__xamarin_class_map [113].handle = objc_getClass ("PHASEEngine");
	__xamarin_class_map [114].handle = objc_getClass ("PHASEEnvelope");
	__xamarin_class_map [115].handle = objc_getClass ("PHASEEnvelopeDistanceModelParameters");
	__xamarin_class_map [116].handle = objc_getClass ("PHASEEnvelopeSegment");
	__xamarin_class_map [117].handle = objc_getClass ("PHASEGeneratorNodeDefinition");
	__xamarin_class_map [118].handle = objc_getClass ("PHASEGeometricSpreadingDistanceModelParameters");
	__xamarin_class_map [119].handle = objc_getClass ("PHASEGlobalMetaParameterAsset");
	__xamarin_class_map [120].handle = objc_getClass ("PHASEGroup");
	__xamarin_class_map [121].handle = objc_getClass ("PHASEGroupPreset");
	__xamarin_class_map [122].handle = objc_getClass ("PHASEGroupPresetSetting");
	__xamarin_class_map [123].handle = objc_getClass ("PHASEObject");
	__xamarin_class_map [124].handle = objc_getClass ("PHASEListener");
	__xamarin_class_map [125].handle = objc_getClass ("PHASEMetaParameterDefinition");
	__xamarin_class_map [126].handle = objc_getClass ("PHASENumberMetaParameterDefinition");
	__xamarin_class_map [127].handle = objc_getClass ("PHASEMappedMetaParameterDefinition");
	__xamarin_class_map [128].handle = objc_getClass ("PHASEMaterial");
	__xamarin_class_map [129].handle = objc_getClass ("PHASEMedium");
	__xamarin_class_map [130].handle = objc_getClass ("PHASEMetaParameter");
	__xamarin_class_map [131].handle = objc_getClass ("PHASEMixer");
	__xamarin_class_map [132].handle = objc_getClass ("PHASEMixerParameters");
	__xamarin_class_map [133].handle = objc_getClass ("PHASENumberMetaParameter");
	__xamarin_class_map [134].handle = objc_getClass ("PHASENumericPair");
	__xamarin_class_map [135].handle = objc_getClass ("PHASEOccluder");
	__xamarin_class_map [136].handle = objc_getClass ("PHASEPushStreamNodeDefinition");
	__xamarin_class_map [137].handle = objc_getClass ("PHASERandomNodeDefinition");
	__xamarin_class_map [138].handle = objc_getClass ("PHASESamplerNodeDefinition");
	__xamarin_class_map [139].handle = objc_getClass ("PHASEShape");
	__xamarin_class_map [140].handle = objc_getClass ("PHASEShapeElement");
	__xamarin_class_map [141].handle = objc_getClass ("PHASESoundAsset");
	__xamarin_class_map [142].handle = objc_getClass ("PHASESoundEventNodeAsset");
	__xamarin_class_map [143].handle = objc_getClass ("PHASESource");
	__xamarin_class_map [144].handle = objc_getClass ("PHASESpatialMixerDefinition");
	__xamarin_class_map [145].handle = objc_getClass ("PHASESpatialPipeline");
	__xamarin_class_map [146].handle = objc_getClass ("PHASESpatialPipelineEntry");
	__xamarin_class_map [147].handle = objc_getClass ("PHASEStringMetaParameter");
	__xamarin_class_map [148].handle = objc_getClass ("PHASEStringMetaParameterDefinition");
	__xamarin_class_map [149].handle = objc_getClass ("PHASESwitchNodeDefinition");
	__xamarin_class_map [150].handle = objc_getClass ("PKDrawing");
	__xamarin_class_map [151].handle = objc_getClass ("PKTool");
	__xamarin_class_map [152].handle = objc_getClass ("PKEraserTool");
	__xamarin_class_map [153].handle = objc_getClass ("PKFloatRange");
	__xamarin_class_map [154].handle = objc_getClass ("PKInk");
	__xamarin_class_map [155].handle = objc_getClass ("PKInkingTool");
	__xamarin_class_map [156].handle = objc_getClass ("PKLassoTool");
	__xamarin_class_map [157].handle = objc_getClass ("PKStroke");
	__xamarin_class_map [158].handle = objc_getClass ("PKStrokePath");
	__xamarin_class_map [159].handle = objc_getClass ("PKStrokePoint");
	__xamarin_class_map [160].handle = objc_getClass ("OSLogEntry");
	__xamarin_class_map [161].handle = objc_getClass ("OSLogEntryActivity");
	__xamarin_class_map [162].handle = objc_getClass ("OSLogEntryBoundary");
	__xamarin_class_map [163].handle = objc_getClass ("OSLogEntryLog");
	__xamarin_class_map [164].handle = objc_getClass ("OSLogEntrySignpost");
	__xamarin_class_map [165].handle = objc_getClass ("NSEnumerator");
	__xamarin_class_map [166].handle = objc_getClass ("OSLogEnumerator");
	__xamarin_class_map [167].handle = objc_getClass ("OSLogMessageComponent");
	__xamarin_class_map [168].handle = objc_getClass ("OSLogPosition");
	__xamarin_class_map [169].handle = objc_getClass ("OSLogStore");
	__xamarin_class_map [170].handle = objc_getClass ("NCWidgetController");
	__xamarin_class_map [171].handle = objc_getClass ("Microsoft_macOS__NotificationCenter_NCWidgetListViewDelegate");
	__xamarin_class_map [172].handle = objc_getClass ("Microsoft_macOS__NotificationCenter_NCWidgetProviding");
	__xamarin_class_map [173].handle = objc_getClass ("Microsoft_macOS__NotificationCenter_NCWidgetSearchViewDelegate");
	__xamarin_class_map [174].handle = objc_getClass ("MLMediaGroup");
	__xamarin_class_map [175].handle = objc_getClass ("MLMediaLibrary");
	__xamarin_class_map [176].handle = objc_getClass ("MLMediaObject");
	__xamarin_class_map [177].handle = objc_getClass ("MLMediaSource");
	__xamarin_class_map [178].handle = objc_getClass ("MEAddressAnnotation");
	__xamarin_class_map [179].handle = objc_getClass ("MEComposeContext");
	__xamarin_class_map [180].handle = objc_getClass ("MEComposeSession");
	__xamarin_class_map [181].handle = objc_getClass ("MEDecodedMessage");
	__xamarin_class_map [182].handle = objc_getClass ("MEDecodedMessageBanner");
	__xamarin_class_map [183].handle = objc_getClass ("MEEmailAddress");
	__xamarin_class_map [184].handle = objc_getClass ("MEEncodedOutgoingMessage");
	__xamarin_class_map [185].handle = objc_getClass ("MEExtensionManager");
	__xamarin_class_map [186].handle = objc_getClass ("MEExtensionViewController");
	__xamarin_class_map [187].handle = objc_getClass ("MEMessage");
	__xamarin_class_map [188].handle = objc_getClass ("MEMessageAction");
	__xamarin_class_map [189].handle = objc_getClass ("MEMessageActionDecision");
	__xamarin_class_map [190].handle = objc_getClass ("MEMessageEncodingResult");
	__xamarin_class_map [191].handle = objc_getClass ("MEMessageSecurityInformation");
	__xamarin_class_map [192].handle = objc_getClass ("MEMessageSigner");
	__xamarin_class_map [193].handle = objc_getClass ("MEOutgoingMessageEncodingStatus");
	__xamarin_class_map [194].handle = objc_getClass ("LAAuthenticationView");
	__xamarin_class_map [195].handle = objc_getClass ("LAAuthenticationRequirement");
	__xamarin_class_map [196].handle = objc_getClass ("LABiometryFallbackRequirement");
	__xamarin_class_map [197].handle = objc_getClass ("LARight");
	__xamarin_class_map [198].handle = objc_getClass ("LAPersistedRight");
	__xamarin_class_map [199].handle = objc_getClass ("LPLinkMetadata");
	__xamarin_class_map [200].handle = objc_getClass ("LPLinkView");
	__xamarin_class_map [201].handle = objc_getClass ("NSControl");
	__xamarin_class_map [202].handle = objc_getClass ("NSButton");
	__xamarin_class_map [203].handle = objc_getClass ("INUIAddVoiceShortcutButton");
	__xamarin_class_map [204].handle = objc_getClass ("Microsoft_macOS__IntentsUI_INUIAddVoiceShortcutButtonDelegate");
	__xamarin_class_map [205].handle = objc_getClass ("INUIAddVoiceShortcutViewController");
	__xamarin_class_map [206].handle = objc_getClass ("Microsoft_macOS__IntentsUI_INUIAddVoiceShortcutViewControllerDelegate");
	__xamarin_class_map [207].handle = objc_getClass ("INUIEditVoiceShortcutViewController");
	__xamarin_class_map [208].handle = objc_getClass ("Microsoft_macOS__IntentsUI_INUIEditVoiceShortcutViewControllerDelegate");
	__xamarin_class_map [209].handle = objc_getClass ("FPUIActionExtensionContext");
	__xamarin_class_map [210].handle = objc_getClass ("FPUIActionExtensionViewController");
	__xamarin_class_map [211].handle = objc_getClass ("Microsoft_macOS__ExternalAccessory_EAAccessoryDelegate");
	__xamarin_class_map [212].handle = objc_getClass ("EASession");
	__xamarin_class_map [213].handle = objc_getClass ("EXAppExtensionBrowserViewController");
	__xamarin_class_map [214].handle = objc_getClass ("EXHostViewController");
	__xamarin_class_map [215].handle = objc_getClass ("Microsoft_macOS__ExtensionKit_EXHostViewControllerDelegate");
	__xamarin_class_map [216].handle = objc_getClass ("EPDeveloperTool");
	__xamarin_class_map [217].handle = objc_getClass ("EPExecutionPolicy");
	__xamarin_class_map [218].handle = objc_getClass ("AUAudioUnitViewConfiguration");
	__xamarin_class_map [219].handle = objc_getClass ("AUGenericView");
	__xamarin_class_map [220].handle = objc_getClass ("AUGenericViewController");
	__xamarin_class_map [221].handle = objc_getClass ("AUPannerView");
	__xamarin_class_map [222].handle = objc_getClass ("AUViewController");
	__xamarin_class_map [223].handle = objc_getClass ("NSWindowController");
	__xamarin_class_map [224].handle = objc_getClass ("CABTLEMIDIWindowController");
	__xamarin_class_map [225].handle = objc_getClass ("CAInterDeviceAudioViewController");
	__xamarin_class_map [226].handle = objc_getClass ("CANetworkBrowserWindowController");
	__xamarin_class_map [227].handle = objc_getClass ("CNContactPicker");
	__xamarin_class_map [228].handle = objc_getClass ("Microsoft_macOS__ContactsUI_CNContactPickerDelegate");
	__xamarin_class_map [229].handle = objc_getClass ("CNContactViewController");
	__xamarin_class_map [230].handle = objc_getClass ("CXProviderConfiguration");
	__xamarin_class_map [231].handle = objc_getClass ("AEAssessmentApplication");
	__xamarin_class_map [232].handle = objc_getClass ("AEAssessmentConfiguration");
	__xamarin_class_map [233].handle = objc_getClass ("AEAssessmentParticipantConfiguration");
	__xamarin_class_map [234].handle = objc_getClass ("AEAssessmentSession");
	__xamarin_class_map [235].handle = objc_getClass ("Microsoft_macOS__AutomaticAssessmentConfiguration_AEAssessmentSessionDelegate");
	__xamarin_class_map [236].handle = objc_getClass ("ASIdentifierManager");
	__xamarin_class_map [237].handle = objc_getClass ("AAAttribution");
	__xamarin_class_map [238].handle = objc_getClass ("AXBrailleMap");
	__xamarin_class_map [239].handle = objc_getClass ("AXCategoricalDataAxisDescriptor");
	__xamarin_class_map [240].handle = objc_getClass ("AXChartDescriptor");
	__xamarin_class_map [241].handle = objc_getClass ("AXCustomContent");
	__xamarin_class_map [242].handle = objc_getClass ("AXDataPoint");
	__xamarin_class_map [243].handle = objc_getClass ("AXDataPointValue");
	__xamarin_class_map [244].handle = objc_getClass ("AXDataSeriesDescriptor");
	__xamarin_class_map [245].handle = objc_getClass ("AXLiveAudioGraph");
	__xamarin_class_map [246].handle = objc_getClass ("AXNumericDataAxisDescriptor");
	__xamarin_class_map [247].handle = objc_getClass ("ITLibAlbum");
	__xamarin_class_map [248].handle = objc_getClass ("ITLibArtist");
	__xamarin_class_map [249].handle = objc_getClass ("ITLibArtwork");
	__xamarin_class_map [250].handle = objc_getClass ("ITLibMediaEntity");
	__xamarin_class_map [251].handle = objc_getClass ("ITLibMediaItem");
	__xamarin_class_map [252].handle = objc_getClass ("ITLibMediaItemVideoInfo");
	__xamarin_class_map [253].handle = objc_getClass ("ITLibPlaylist");
	__xamarin_class_map [254].handle = objc_getClass ("ITLibrary");
	__xamarin_class_map [255].handle = objc_getClass ("VNCircle");
	__xamarin_class_map [256].handle = objc_getClass ("VNRequest");
	__xamarin_class_map [257].handle = objc_getClass ("VNImageBasedRequest");
	__xamarin_class_map [258].handle = objc_getClass ("VNDetectBarcodesRequest");
	__xamarin_class_map [259].handle = objc_getClass ("VNObservation");
	__xamarin_class_map [260].handle = objc_getClass ("VNFeaturePrintObservation");
	__xamarin_class_map [261].handle = objc_getClass ("VNGeometryUtils");
	__xamarin_class_map [262].handle = objc_getClass ("VNVector");
	__xamarin_class_map [263].handle = objc_getClass ("VNDetectedObjectObservation");
	__xamarin_class_map [264].handle = objc_getClass ("VNRectangleObservation");
	__xamarin_class_map [265].handle = objc_getClass ("VNBarcodeObservation");
	__xamarin_class_map [266].handle = objc_getClass ("VNClassificationObservation");
	__xamarin_class_map [267].handle = objc_getClass ("VNClassifyImageRequest");
	__xamarin_class_map [268].handle = objc_getClass ("VNContour");
	__xamarin_class_map [269].handle = objc_getClass ("VNContoursObservation");
	__xamarin_class_map [270].handle = objc_getClass ("VNCoreMLFeatureValueObservation");
	__xamarin_class_map [271].handle = objc_getClass ("VNCoreMLModel");
	__xamarin_class_map [272].handle = objc_getClass ("VNCoreMLRequest");
	__xamarin_class_map [273].handle = objc_getClass ("VNDetectContoursRequest");
	__xamarin_class_map [274].handle = objc_getClass ("VNDetectDocumentSegmentationRequest");
	__xamarin_class_map [275].handle = objc_getClass ("VNPoint");
	__xamarin_class_map [276].handle = objc_getClass ("VNDetectedPoint");
	__xamarin_class_map [277].handle = objc_getClass ("VNDetectFaceCaptureQualityRequest");
	__xamarin_class_map [278].handle = objc_getClass ("VNDetectFaceLandmarksRequest");
	__xamarin_class_map [279].handle = objc_getClass ("VNDetectFaceRectanglesRequest");
	__xamarin_class_map [280].handle = objc_getClass ("VNDetectHorizonRequest");
	__xamarin_class_map [281].handle = objc_getClass ("VNDetectHumanRectanglesRequest");
	__xamarin_class_map [282].handle = objc_getClass ("VNDetectRectanglesRequest");
	__xamarin_class_map [283].handle = objc_getClass ("VNDetectTextRectanglesRequest");
	__xamarin_class_map [284].handle = objc_getClass ("VNStatefulRequest");
	__xamarin_class_map [285].handle = objc_getClass ("VNDetectTrajectoriesRequest");
	__xamarin_class_map [286].handle = objc_getClass ("VNFaceLandmarkRegion");
	__xamarin_class_map [287].handle = objc_getClass ("VNFaceLandmarks");
	__xamarin_class_map [288].handle = objc_getClass ("VNFaceLandmarks2D");
	__xamarin_class_map [289].handle = objc_getClass ("VNFaceObservation");
	__xamarin_class_map [290].handle = objc_getClass ("VNGenerateAttentionBasedSaliencyImageRequest");
	__xamarin_class_map [291].handle = objc_getClass ("VNGenerateImageFeaturePrintRequest");
	__xamarin_class_map [292].handle = objc_getClass ("VNGenerateObjectnessBasedSaliencyImageRequest");
	__xamarin_class_map [293].handle = objc_getClass ("VNTargetedImageRequest");
	__xamarin_class_map [294].handle = objc_getClass ("VNGenerateOpticalFlowRequest");
	__xamarin_class_map [295].handle = objc_getClass ("VNGeneratePersonSegmentationRequest");
	__xamarin_class_map [296].handle = objc_getClass ("VNImageRegistrationRequest");
	__xamarin_class_map [297].handle = objc_getClass ("VNHomographicImageRegistrationRequest");
	__xamarin_class_map [298].handle = objc_getClass ("VNHorizonObservation");
	__xamarin_class_map [299].handle = objc_getClass ("VNHumanObservation");
	__xamarin_class_map [300].handle = objc_getClass ("VNImageAlignmentObservation");
	__xamarin_class_map [301].handle = objc_getClass ("VNImageHomographicAlignmentObservation");
	__xamarin_class_map [302].handle = objc_getClass ("VNImageRequestHandler");
	__xamarin_class_map [303].handle = objc_getClass ("VNImageTranslationAlignmentObservation");
	__xamarin_class_map [304].handle = objc_getClass ("VNPixelBufferObservation");
	__xamarin_class_map [305].handle = objc_getClass ("VNRecognizedObjectObservation");
	__xamarin_class_map [306].handle = objc_getClass ("VNRecognizedPoint");
	__xamarin_class_map [307].handle = objc_getClass ("VNRecognizedText");
	__xamarin_class_map [308].handle = objc_getClass ("VNRecognizedTextObservation");
	__xamarin_class_map [309].handle = objc_getClass ("VNRecognizeTextRequest");
	__xamarin_class_map [310].handle = objc_getClass ("VNSaliencyImageObservation");
	__xamarin_class_map [311].handle = objc_getClass ("VNSequenceRequestHandler");
	__xamarin_class_map [312].handle = objc_getClass ("VNTextObservation");
	__xamarin_class_map [313].handle = objc_getClass ("VNTrackingRequest");
	__xamarin_class_map [314].handle = objc_getClass ("VNTrackObjectRequest");
	__xamarin_class_map [315].handle = objc_getClass ("VNTrackRectangleRequest");
	__xamarin_class_map [316].handle = objc_getClass ("VNTrajectoryObservation");
	__xamarin_class_map [317].handle = objc_getClass ("VNTranslationalImageRegistrationRequest");
	__xamarin_class_map [318].handle = objc_getClass ("VNVideoProcessor");
	__xamarin_class_map [319].handle = objc_getClass ("VNVideoProcessorCadence");
	__xamarin_class_map [320].handle = objc_getClass ("VNVideoProcessorFrameRateCadence");
	__xamarin_class_map [321].handle = objc_getClass ("VNVideoProcessorRequestProcessingOptions");
	__xamarin_class_map [322].handle = objc_getClass ("VNVideoProcessorTimeIntervalCadence");
	__xamarin_class_map [323].handle = objc_getClass ("VSAccountMetadataRequest");
	__xamarin_class_map [324].handle = objc_getClass ("VSAccountApplicationProvider");
	__xamarin_class_map [325].handle = objc_getClass ("VSAccountManager");
	__xamarin_class_map [326].handle = objc_getClass ("Microsoft_macOS__VideoSubscriberAccount_VSAccountManagerDelegate");
	__xamarin_class_map [327].handle = objc_getClass ("VSAccountManagerResult");
	__xamarin_class_map [328].handle = objc_getClass ("VSAccountMetadata");
	__xamarin_class_map [329].handle = objc_getClass ("VSAccountProviderResponse");
	__xamarin_class_map [330].handle = objc_getClass ("VSSubscription");
	__xamarin_class_map [331].handle = objc_getClass ("VSSubscriptionRegistrationCenter");
	__xamarin_class_map [332].handle = objc_getClass ("VSUserAccount");
	__xamarin_class_map [333].handle = objc_getClass ("UNNotificationAttachment");
	__xamarin_class_map [334].handle = objc_getClass ("UNNotificationTrigger");
	__xamarin_class_map [335].handle = objc_getClass ("UNCalendarNotificationTrigger");
	__xamarin_class_map [336].handle = objc_getClass ("UNNotificationContent");
	__xamarin_class_map [337].handle = objc_getClass ("UNMutableNotificationContent");
	__xamarin_class_map [338].handle = objc_getClass ("UNNotification");
	__xamarin_class_map [339].handle = objc_getClass ("UNNotificationAction");
	__xamarin_class_map [340].handle = objc_getClass ("UNNotificationActionIcon");
	__xamarin_class_map [341].handle = objc_getClass ("UNNotificationCategory");
	__xamarin_class_map [342].handle = objc_getClass ("UNNotificationRequest");
	__xamarin_class_map [343].handle = objc_getClass ("UNNotificationResponse");
	__xamarin_class_map [344].handle = objc_getClass ("UNNotificationServiceExtension");
	__xamarin_class_map [345].handle = objc_getClass ("UNNotificationSettings");
	__xamarin_class_map [346].handle = objc_getClass ("UNNotificationSound");
	__xamarin_class_map [347].handle = objc_getClass ("UNPushNotificationTrigger");
	__xamarin_class_map [348].handle = objc_getClass ("UNTextInputNotificationAction");
	__xamarin_class_map [349].handle = objc_getClass ("UNTextInputNotificationResponse");
	__xamarin_class_map [350].handle = objc_getClass ("UNTimeIntervalNotificationTrigger");
	__xamarin_class_map [351].handle = objc_getClass ("Microsoft_macOS__UserNotifications_UNUserNotificationCenterDelegate");
	__xamarin_class_map [352].handle = objc_getClass ("SKRequest");
	__xamarin_class_map [353].handle = objc_getClass ("SKReceiptRefreshRequest");
	__xamarin_class_map [354].handle = objc_getClass ("SKPayment");
	__xamarin_class_map [355].handle = objc_getClass ("SKArcadeService");
	__xamarin_class_map [356].handle = objc_getClass ("SKDownload");
	__xamarin_class_map [357].handle = objc_getClass ("SKMutablePayment");
	__xamarin_class_map [358].handle = objc_getClass ("SKPaymentDiscount");
	__xamarin_class_map [359].handle = objc_getClass ("SKPaymentQueue");
	__xamarin_class_map [360].handle = objc_getClass ("Microsoft_macOS__StoreKit_SKPaymentQueueDelegate");
	__xamarin_class_map [361].handle = objc_getClass ("SKPaymentTransaction");
	__xamarin_class_map [362].handle = objc_getClass ("Microsoft_macOS__StoreKit_SKPaymentTransactionObserver");
	__xamarin_class_map [363].handle = objc_getClass ("SKProduct");
	__xamarin_class_map [364].handle = objc_getClass ("SKProductDiscount");
	__xamarin_class_map [365].handle = objc_getClass ("Microsoft_macOS__StoreKit_SKRequestDelegate");
	__xamarin_class_map [366].handle = objc_getClass ("Microsoft_macOS__StoreKit_SKProductsRequestDelegate");
	__xamarin_class_map [367].handle = objc_getClass ("SKProductsResponse");
	__xamarin_class_map [368].handle = objc_getClass ("SKProductSubscriptionPeriod");
	__xamarin_class_map [369].handle = objc_getClass ("SKStorefront");
	__xamarin_class_map [370].handle = objc_getClass ("Microsoft_macOS__StoreKit_SKStoreProductViewControllerDelegate");
	__xamarin_class_map [371].handle = objc_getClass ("SKStoreReviewController");
	__xamarin_class_map [372].handle = objc_getClass ("SKAction");
	__xamarin_class_map [373].handle = objc_getClass ("SKKeyframeSequence");
	__xamarin_class_map [374].handle = objc_getClass ("SKNode");
	__xamarin_class_map [375].handle = objc_getClass ("SKShapeNode");
	__xamarin_class_map [376].handle = objc_getClass ("SKUniform");
	__xamarin_class_map [377].handle = objc_getClass ("SKVideoNode");
	__xamarin_class_map [378].handle = objc_getClass ("SKWarpGeometry");
	__xamarin_class_map [379].handle = objc_getClass ("SKWarpGeometryGrid");
	__xamarin_class_map [380].handle = objc_getClass ("SK3DNode");
	__xamarin_class_map [381].handle = objc_getClass ("SKAttribute");
	__xamarin_class_map [382].handle = objc_getClass ("SKAttributeValue");
	__xamarin_class_map [383].handle = objc_getClass ("SKAudioNode");
	__xamarin_class_map [384].handle = objc_getClass ("SKCameraNode");
	__xamarin_class_map [385].handle = objc_getClass ("SKConstraint");
	__xamarin_class_map [386].handle = objc_getClass ("SKCropNode");
	__xamarin_class_map [387].handle = objc_getClass ("SKEffectNode");
	__xamarin_class_map [388].handle = objc_getClass ("SKEmitterNode");
	__xamarin_class_map [389].handle = objc_getClass ("SKFieldNode");
	__xamarin_class_map [390].handle = objc_getClass ("SKLabelNode");
	__xamarin_class_map [391].handle = objc_getClass ("SKLightNode");
	__xamarin_class_map [392].handle = objc_getClass ("SKTexture");
	__xamarin_class_map [393].handle = objc_getClass ("SKMutableTexture");
	__xamarin_class_map [394].handle = objc_getClass ("SKPhysicsBody");
	__xamarin_class_map [395].handle = objc_getClass ("SKPhysicsContact");
	__xamarin_class_map [396].handle = objc_getClass ("Microsoft_macOS__SpriteKit_SKPhysicsContactDelegate");
	__xamarin_class_map [397].handle = objc_getClass ("SKPhysicsJoint");
	__xamarin_class_map [398].handle = objc_getClass ("SKPhysicsJointFixed");
	__xamarin_class_map [399].handle = objc_getClass ("SKPhysicsJointLimit");
	__xamarin_class_map [400].handle = objc_getClass ("SKPhysicsJointPin");
	__xamarin_class_map [401].handle = objc_getClass ("SKPhysicsJointSliding");
	__xamarin_class_map [402].handle = objc_getClass ("SKPhysicsJointSpring");
	__xamarin_class_map [403].handle = objc_getClass ("SKRange");
	__xamarin_class_map [404].handle = objc_getClass ("SKReachConstraints");
	__xamarin_class_map [405].handle = objc_getClass ("SKReferenceNode");
	__xamarin_class_map [406].handle = objc_getClass ("SKRegion");
	__xamarin_class_map [407].handle = objc_getClass ("SKRenderer");
	__xamarin_class_map [408].handle = objc_getClass ("SKScene");
	__xamarin_class_map [409].handle = objc_getClass ("Microsoft_macOS__SpriteKit_SKSceneDelegate");
	__xamarin_class_map [410].handle = objc_getClass ("SKShader");
	__xamarin_class_map [411].handle = objc_getClass ("SKSpriteNode");
	__xamarin_class_map [412].handle = objc_getClass ("SKTileDefinition");
	__xamarin_class_map [413].handle = objc_getClass ("SKTileGroup");
	__xamarin_class_map [414].handle = objc_getClass ("SKTileGroupRule");
	__xamarin_class_map [415].handle = objc_getClass ("SKTileMapNode");
	__xamarin_class_map [416].handle = objc_getClass ("SKTileSet");
	__xamarin_class_map [417].handle = objc_getClass ("SKTransformNode");
	__xamarin_class_map [418].handle = objc_getClass ("SKTransition");
	__xamarin_class_map [419].handle = objc_getClass ("SKView");
	__xamarin_class_map [420].handle = objc_getClass ("Microsoft_macOS__SpriteKit_SKViewDelegate");
	__xamarin_class_map [421].handle = objc_getClass ("SLComposeServiceViewController");
	__xamarin_class_map [422].handle = objc_getClass ("SWAction");
	__xamarin_class_map [423].handle = objc_getClass ("SWCollaborationCoordinator");
	__xamarin_class_map [424].handle = objc_getClass ("SWCollaborationOption");
	__xamarin_class_map [425].handle = objc_getClass ("SWCollaborationOptionsGroup");
	__xamarin_class_map [426].handle = objc_getClass ("SWCollaborationOptionsPickerGroup");
	__xamarin_class_map [427].handle = objc_getClass ("SWCollaborationShareOptions");
	__xamarin_class_map [428].handle = objc_getClass ("SWPerson");
	__xamarin_class_map [429].handle = objc_getClass ("SWPersonIdentity");
	__xamarin_class_map [430].handle = objc_getClass ("SWPersonIdentityProof");
	__xamarin_class_map [431].handle = objc_getClass ("SWSignedPersonIdentityProof");
	__xamarin_class_map [432].handle = objc_getClass ("SWStartCollaborationAction");
	__xamarin_class_map [433].handle = objc_getClass ("SWUpdateCollaborationParticipantsAction");
	__xamarin_class_map [434].handle = objc_getClass ("Microsoft_macOS__ScriptingBridge_SBApplicationDelegate");
	__xamarin_class_map [435].handle = objc_getClass ("NSArray");
	__xamarin_class_map [436].handle = objc_getClass ("NSMutableArray");
	__xamarin_class_map [437].handle = objc_getClass ("SBElementArray");
	__xamarin_class_map [438].handle = objc_getClass ("SBObject");
	__xamarin_class_map [439].handle = objc_getClass ("SCContentFilter");
	__xamarin_class_map [440].handle = objc_getClass ("SCDisplay");
	__xamarin_class_map [441].handle = objc_getClass ("SCRunningApplication");
	__xamarin_class_map [442].handle = objc_getClass ("SCStreamConfiguration");
	__xamarin_class_map [443].handle = objc_getClass ("Microsoft_macOS__ScreenCaptureKit_SCStreamDelegate");
	__xamarin_class_map [444].handle = objc_getClass ("SCWindow");
	__xamarin_class_map [445].handle = objc_getClass ("SCNGeometry");
	__xamarin_class_map [446].handle = objc_getClass ("SCNText");
	__xamarin_class_map [447].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNAnimatable");
	__xamarin_class_map [448].handle = objc_getClass ("SCNAction");
	__xamarin_class_map [449].handle = objc_getClass ("SCNGeometrySource");
	__xamarin_class_map [450].handle = objc_getClass ("SCNParticleSystem");
	__xamarin_class_map [451].handle = objc_getClass ("SCNPhysicsShape");
	__xamarin_class_map [452].handle = objc_getClass ("SCNScene");
	__xamarin_class_map [453].handle = objc_getClass ("SCNSceneSource");
	__xamarin_class_map [454].handle = objc_getClass ("SCNSkinner");
	__xamarin_class_map [455].handle = objc_getClass ("SCNTechnique");
	__xamarin_class_map [456].handle = objc_getClass ("SCNConstraint");
	__xamarin_class_map [457].handle = objc_getClass ("SCNAccelerationConstraint");
	__xamarin_class_map [458].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNActionable");
	__xamarin_class_map [459].handle = objc_getClass ("SCNAnimation");
	__xamarin_class_map [460].handle = objc_getClass ("SCNAnimationEvent");
	__xamarin_class_map [461].handle = objc_getClass ("SCNAnimationPlayer");
	__xamarin_class_map [462].handle = objc_getClass ("SCNAudioPlayer");
	__xamarin_class_map [463].handle = objc_getClass ("SCNAudioSource");
	__xamarin_class_map [464].handle = objc_getClass ("SCNAvoidOccluderConstraint");
	__xamarin_class_map [465].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNAvoidOccluderConstraintDelegate");
	__xamarin_class_map [466].handle = objc_getClass ("SCNBillboardConstraint");
	__xamarin_class_map [467].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNBoundingVolume");
	__xamarin_class_map [468].handle = objc_getClass ("SCNBox");
	__xamarin_class_map [469].handle = objc_getClass ("SCNCamera");
	__xamarin_class_map [470].handle = objc_getClass ("SCNCameraController");
	__xamarin_class_map [471].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNCameraControllerDelegate");
	__xamarin_class_map [472].handle = objc_getClass ("SCNCapsule");
	__xamarin_class_map [473].handle = objc_getClass ("SCNCone");
	__xamarin_class_map [474].handle = objc_getClass ("SCNCylinder");
	__xamarin_class_map [475].handle = objc_getClass ("SCNDistanceConstraint");
	__xamarin_class_map [476].handle = objc_getClass ("SCNFloor");
	__xamarin_class_map [477].handle = objc_getClass ("SCNGeometryElement");
	__xamarin_class_map [478].handle = objc_getClass ("SCNGeometryTessellator");
	__xamarin_class_map [479].handle = objc_getClass ("SCNHitTestResult");
	__xamarin_class_map [480].handle = objc_getClass ("SCNIKConstraint");
	__xamarin_class_map [481].handle = objc_getClass ("SCNLevelOfDetail");
	__xamarin_class_map [482].handle = objc_getClass ("SCNLight");
	__xamarin_class_map [483].handle = objc_getClass ("SCNLookAtConstraint");
	__xamarin_class_map [484].handle = objc_getClass ("SCNMaterial");
	__xamarin_class_map [485].handle = objc_getClass ("SCNMaterialProperty");
	__xamarin_class_map [486].handle = objc_getClass ("SCNMorpher");
	__xamarin_class_map [487].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNNodeRendererDelegate");
	__xamarin_class_map [488].handle = objc_getClass ("SCNParticlePropertyController");
	__xamarin_class_map [489].handle = objc_getClass ("SCNPhysicsBehavior");
	__xamarin_class_map [490].handle = objc_getClass ("SCNPhysicsBallSocketJoint");
	__xamarin_class_map [491].handle = objc_getClass ("SCNPhysicsBody");
	__xamarin_class_map [492].handle = objc_getClass ("SCNPhysicsConeTwistJoint");
	__xamarin_class_map [493].handle = objc_getClass ("SCNPhysicsContact");
	__xamarin_class_map [494].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNPhysicsContactDelegate");
	__xamarin_class_map [495].handle = objc_getClass ("SCNPhysicsField");
	__xamarin_class_map [496].handle = objc_getClass ("SCNPhysicsHingeJoint");
	__xamarin_class_map [497].handle = objc_getClass ("SCNPhysicsSliderJoint");
	__xamarin_class_map [498].handle = objc_getClass ("SCNPhysicsVehicle");
	__xamarin_class_map [499].handle = objc_getClass ("SCNPhysicsVehicleWheel");
	__xamarin_class_map [500].handle = objc_getClass ("SCNPlane");
	__xamarin_class_map [501].handle = objc_getClass ("SCNProgram");
	__xamarin_class_map [502].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNProgramDelegate");
	__xamarin_class_map [503].handle = objc_getClass ("SCNPyramid");
	__xamarin_class_map [504].handle = objc_getClass ("SCNNode");
	__xamarin_class_map [505].handle = objc_getClass ("SCNReferenceNode");
	__xamarin_class_map [506].handle = objc_getClass ("SCNReplicatorConstraint");
	__xamarin_class_map [507].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNSceneExportDelegate");
	__xamarin_class_map [508].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNSceneRenderer");
	__xamarin_class_map [509].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNSceneRendererDelegate");
	__xamarin_class_map [510].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNShadable");
	__xamarin_class_map [511].handle = objc_getClass ("SCNShape");
	__xamarin_class_map [512].handle = objc_getClass ("SCNSliderConstraint");
	__xamarin_class_map [513].handle = objc_getClass ("SCNSphere");
	__xamarin_class_map [514].handle = objc_getClass ("Microsoft_macOS__SceneKit_SCNTechniqueSupport");
	__xamarin_class_map [515].handle = objc_getClass ("SCNTimingFunction");
	__xamarin_class_map [516].handle = objc_getClass ("SCNTorus");
	__xamarin_class_map [517].handle = objc_getClass ("SCNTransaction");
	__xamarin_class_map [518].handle = objc_getClass ("SCNTransformConstraint");
	__xamarin_class_map [519].handle = objc_getClass ("SCNTube");
	__xamarin_class_map [520].handle = objc_getClass ("NSWindow");
	__xamarin_class_map [521].handle = objc_getClass ("NSPanel");
	__xamarin_class_map [522].handle = objc_getClass ("QLPreviewPanel");
	__xamarin_class_map [523].handle = objc_getClass ("QLFilePreviewRequest");
	__xamarin_class_map [524].handle = objc_getClass ("Microsoft_macOS__QuickLookUI_QLPreviewItem");
	__xamarin_class_map [525].handle = objc_getClass ("Microsoft_macOS__QuickLookUI_QLPreviewPanelDataSource");
	__xamarin_class_map [526].handle = objc_getClass ("Microsoft_macOS__QuickLookUI_QLPreviewPanelDelegate");
	__xamarin_class_map [527].handle = objc_getClass ("QLPreviewProvider");
	__xamarin_class_map [528].handle = objc_getClass ("QLPreviewReply");
	__xamarin_class_map [529].handle = objc_getClass ("QLPreviewReplyAttachment");
	__xamarin_class_map [530].handle = objc_getClass ("QLPreviewView");
	__xamarin_class_map [531].handle = objc_getClass ("PHChangeRequest");
	__xamarin_class_map [532].handle = objc_getClass ("PHAssetChangeRequest");
	__xamarin_class_map [533].handle = objc_getClass ("PHAssetCreationRequest");
	__xamarin_class_map [534].handle = objc_getClass ("PHLivePhoto");
	__xamarin_class_map [535].handle = objc_getClass ("PHAdjustmentData");
	__xamarin_class_map [536].handle = objc_getClass ("PHObject");
	__xamarin_class_map [537].handle = objc_getClass ("PHAsset");
	__xamarin_class_map [538].handle = objc_getClass ("PHCollection");
	__xamarin_class_map [539].handle = objc_getClass ("PHAssetCollection");
	__xamarin_class_map [540].handle = objc_getClass ("PHAssetCollectionChangeRequest");
	__xamarin_class_map [541].handle = objc_getClass ("PHAssetResource");
	__xamarin_class_map [542].handle = objc_getClass ("PHAssetResourceCreationOptions");
	__xamarin_class_map [543].handle = objc_getClass ("PHAssetResourceRequestOptions");
	__xamarin_class_map [544].handle = objc_getClass ("PHImageManager");
	__xamarin_class_map [545].handle = objc_getClass ("PHCachingImageManager");
	__xamarin_class_map [546].handle = objc_getClass ("PHChange");
	__xamarin_class_map [547].handle = objc_getClass ("PHCloudIdentifier");
	__xamarin_class_map [548].handle = objc_getClass ("PHCloudIdentifierMapping");
	__xamarin_class_map [549].handle = objc_getClass ("PHCollectionList");
	__xamarin_class_map [550].handle = objc_getClass ("PHCollectionListChangeRequest");
	__xamarin_class_map [551].handle = objc_getClass ("PHContentEditingInput");
	__xamarin_class_map [552].handle = objc_getClass ("PHContentEditingInputRequestOptions");
	__xamarin_class_map [553].handle = objc_getClass ("PHContentEditingOutput");
	__xamarin_class_map [554].handle = objc_getClass ("PHFetchOptions");
	__xamarin_class_map [555].handle = objc_getClass ("PHFetchResultChangeDetails");
	__xamarin_class_map [556].handle = objc_getClass ("PHImageRequestOptions");
	__xamarin_class_map [557].handle = objc_getClass ("PHLivePhotoRequestOptions");
	__xamarin_class_map [558].handle = objc_getClass ("PHLocalIdentifierMapping");
	__xamarin_class_map [559].handle = objc_getClass ("PHObjectChangeDetails");
	__xamarin_class_map [560].handle = objc_getClass ("PHObjectPlaceholder");
	__xamarin_class_map [561].handle = objc_getClass ("PHPersistentChange");
	__xamarin_class_map [562].handle = objc_getClass ("PHPersistentChangeFetchResult");
	__xamarin_class_map [563].handle = objc_getClass ("PHPersistentChangeToken");
	__xamarin_class_map [564].handle = objc_getClass ("PHPersistentObjectChangeDetails");
	__xamarin_class_map [565].handle = objc_getClass ("Microsoft_macOS__Photos_PHPhotoLibraryChangeObserver");
	__xamarin_class_map [566].handle = objc_getClass ("PHProject");
	__xamarin_class_map [567].handle = objc_getClass ("PHProjectChangeRequest");
	__xamarin_class_map [568].handle = objc_getClass ("PHVideoRequestOptions");
	__xamarin_class_map [569].handle = objc_getClass ("PDFBorder");
	__xamarin_class_map [570].handle = objc_getClass ("PDFAnnotation");
	__xamarin_class_map [571].handle = objc_getClass ("PDFAnnotationMarkup");
	__xamarin_class_map [572].handle = objc_getClass ("PDFAction");
	__xamarin_class_map [573].handle = objc_getClass ("PDFActionGoTo");
	__xamarin_class_map [574].handle = objc_getClass ("PDFActionNamed");
	__xamarin_class_map [575].handle = objc_getClass ("PDFActionRemoteGoTo");
	__xamarin_class_map [576].handle = objc_getClass ("PDFActionResetForm");
	__xamarin_class_map [577].handle = objc_getClass ("PDFActionURL");
	__xamarin_class_map [578].handle = objc_getClass ("PDFAnnotationButtonWidget");
	__xamarin_class_map [579].handle = objc_getClass ("PDFAnnotationChoiceWidget");
	__xamarin_class_map [580].handle = objc_getClass ("PDFAnnotationCircle");
	__xamarin_class_map [581].handle = objc_getClass ("PDFAnnotationFreeText");
	__xamarin_class_map [582].handle = objc_getClass ("PDFAnnotationInk");
	__xamarin_class_map [583].handle = objc_getClass ("PDFAnnotationLine");
	__xamarin_class_map [584].handle = objc_getClass ("PDFAnnotationLink");
	__xamarin_class_map [585].handle = objc_getClass ("PDFAnnotationPopup");
	__xamarin_class_map [586].handle = objc_getClass ("PDFAnnotationSquare");
	__xamarin_class_map [587].handle = objc_getClass ("PDFAnnotationStamp");
	__xamarin_class_map [588].handle = objc_getClass ("PDFAnnotationText");
	__xamarin_class_map [589].handle = objc_getClass ("PDFAnnotationTextWidget");
	__xamarin_class_map [590].handle = objc_getClass ("PDFAppearanceCharacteristics");
	__xamarin_class_map [591].handle = objc_getClass ("PDFDestination");
	__xamarin_class_map [592].handle = objc_getClass ("Microsoft_macOS__PdfKit_PdfDocumentDelegate");
	__xamarin_class_map [593].handle = objc_getClass ("PDFOutline");
	__xamarin_class_map [594].handle = objc_getClass ("PDFPage");
	__xamarin_class_map [595].handle = objc_getClass ("PDFSelection");
	__xamarin_class_map [596].handle = objc_getClass ("Microsoft_macOS__PdfKit_PdfViewDelegate");
	__xamarin_class_map [597].handle = objc_getClass ("PKPaymentRequest");
	__xamarin_class_map [598].handle = objc_getClass ("PKAddSecureElementPassConfiguration");
	__xamarin_class_map [599].handle = objc_getClass ("PKAddCarKeyPassConfiguration");
	__xamarin_class_map [600].handle = objc_getClass ("PKAddPaymentPassRequest");
	__xamarin_class_map [601].handle = objc_getClass ("PKAddPaymentPassRequestConfiguration");
	__xamarin_class_map [602].handle = objc_getClass ("PKAutomaticReloadPaymentRequest");
	__xamarin_class_map [603].handle = objc_getClass ("PKPaymentSummaryItem");
	__xamarin_class_map [604].handle = objc_getClass ("PKAutomaticReloadPaymentSummaryItem");
	__xamarin_class_map [605].handle = objc_getClass ("PKBarcodeEventConfigurationRequest");
	__xamarin_class_map [606].handle = objc_getClass ("PKBarcodeEventMetadataRequest");
	__xamarin_class_map [607].handle = objc_getClass ("PKBarcodeEventMetadataResponse");
	__xamarin_class_map [608].handle = objc_getClass ("PKBarcodeEventSignatureRequest");
	__xamarin_class_map [609].handle = objc_getClass ("PKBarcodeEventSignatureResponse");
	__xamarin_class_map [610].handle = objc_getClass ("PKContact");
	__xamarin_class_map [611].handle = objc_getClass ("PKDateComponentsRange");
	__xamarin_class_map [612].handle = objc_getClass ("PKDeferredPaymentRequest");
	__xamarin_class_map [613].handle = objc_getClass ("PKDeferredPaymentSummaryItem");
	__xamarin_class_map [614].handle = objc_getClass ("PKIssuerProvisioningExtensionPassEntry");
	__xamarin_class_map [615].handle = objc_getClass ("PKIssuerProvisioningExtensionPaymentPassEntry");
	__xamarin_class_map [616].handle = objc_getClass ("PKIssuerProvisioningExtensionStatus");
	__xamarin_class_map [617].handle = objc_getClass ("PKLabeledValue");
	__xamarin_class_map [618].handle = objc_getClass ("PKObject");
	__xamarin_class_map [619].handle = objc_getClass ("PKPass");
	__xamarin_class_map [620].handle = objc_getClass ("PKPayment");
	__xamarin_class_map [621].handle = objc_getClass ("Microsoft_macOS__PassKit_PKPaymentAuthorizationControllerDelegate");
	__xamarin_class_map [622].handle = objc_getClass ("PKPaymentAuthorizationResult");
	__xamarin_class_map [623].handle = objc_getClass ("Microsoft_macOS__PassKit_PKPaymentAuthorizationViewControllerDelegate");
	__xamarin_class_map [624].handle = objc_getClass ("PKPaymentButton");
	__xamarin_class_map [625].handle = objc_getClass ("PKPaymentInformationEventExtension");
	__xamarin_class_map [626].handle = objc_getClass ("PKPaymentMerchantSession");
	__xamarin_class_map [627].handle = objc_getClass ("PKPaymentMethod");
	__xamarin_class_map [628].handle = objc_getClass ("PKPaymentOrderDetails");
	__xamarin_class_map [629].handle = objc_getClass ("PKSecureElementPass");
	__xamarin_class_map [630].handle = objc_getClass ("PKPaymentPass");
	__xamarin_class_map [631].handle = objc_getClass ("PKPaymentRequestUpdate");
	__xamarin_class_map [632].handle = objc_getClass ("PKPaymentRequestCouponCodeUpdate");
	__xamarin_class_map [633].handle = objc_getClass ("PKPaymentRequestMerchantSessionUpdate");
	__xamarin_class_map [634].handle = objc_getClass ("PKPaymentRequestPaymentMethodUpdate");
	__xamarin_class_map [635].handle = objc_getClass ("PKPaymentRequestShippingContactUpdate");
	__xamarin_class_map [636].handle = objc_getClass ("PKPaymentRequestShippingMethodUpdate");
	__xamarin_class_map [637].handle = objc_getClass ("PKPaymentToken");
	__xamarin_class_map [638].handle = objc_getClass ("PKPaymentTokenContext");
	__xamarin_class_map [639].handle = objc_getClass ("PKRecurringPaymentRequest");
	__xamarin_class_map [640].handle = objc_getClass ("PKRecurringPaymentSummaryItem");
	__xamarin_class_map [641].handle = objc_getClass ("PKShareablePassMetadataPreview");
	__xamarin_class_map [642].handle = objc_getClass ("PKShippingMethod");
	__xamarin_class_map [643].handle = objc_getClass ("PKStoredValuePassBalance");
	__xamarin_class_map [644].handle = objc_getClass ("PKStoredValuePassProperties");
	__xamarin_class_map [645].handle = objc_getClass ("PKTransitPassProperties");
	__xamarin_class_map [646].handle = objc_getClass ("PKSuicaPassProperties");
	__xamarin_class_map [647].handle = objc_getClass ("Microsoft_macOS__PassKit_PKVehicleConnectionDelegate");
	__xamarin_class_map [648].handle = objc_getClass ("NEAppRule");
	__xamarin_class_map [649].handle = objc_getClass ("NEDNSSettings");
	__xamarin_class_map [650].handle = objc_getClass ("NEDNSOverHTTPSSettings");
	__xamarin_class_map [651].handle = objc_getClass ("NEDNSOverTLSSettings");
	__xamarin_class_map [652].handle = objc_getClass ("NEVPNProtocol");
	__xamarin_class_map [653].handle = objc_getClass ("NEDNSProxyProviderProtocol");
	__xamarin_class_map [654].handle = objc_getClass ("NETunnelNetworkSettings");
	__xamarin_class_map [655].handle = objc_getClass ("NEPacketTunnelNetworkSettings");
	__xamarin_class_map [656].handle = objc_getClass ("NEEthernetTunnelNetworkSettings");
	__xamarin_class_map [657].handle = objc_getClass ("NEProvider");
	__xamarin_class_map [658].handle = objc_getClass ("NETunnelProvider");
	__xamarin_class_map [659].handle = objc_getClass ("NEPacketTunnelProvider");
	__xamarin_class_map [660].handle = objc_getClass ("NEEthernetTunnelProvider");
	__xamarin_class_map [661].handle = objc_getClass ("NEEvaluateConnectionRule");
	__xamarin_class_map [662].handle = objc_getClass ("NEFilterVerdict");
	__xamarin_class_map [663].handle = objc_getClass ("NEFilterDataVerdict");
	__xamarin_class_map [664].handle = objc_getClass ("NEFilterFlow");
	__xamarin_class_map [665].handle = objc_getClass ("NEFilterNewFlowVerdict");
	__xamarin_class_map [666].handle = objc_getClass ("NEFilterPacketContext");
	__xamarin_class_map [667].handle = objc_getClass ("NEFilterProvider");
	__xamarin_class_map [668].handle = objc_getClass ("NEFilterPacketProvider");
	__xamarin_class_map [669].handle = objc_getClass ("NEFilterProviderConfiguration");
	__xamarin_class_map [670].handle = objc_getClass ("NEFilterReport");
	__xamarin_class_map [671].handle = objc_getClass ("NEFilterRule");
	__xamarin_class_map [672].handle = objc_getClass ("NEFilterSettings");
	__xamarin_class_map [673].handle = objc_getClass ("NEFilterSocketFlow");
	__xamarin_class_map [674].handle = objc_getClass ("NEFlowMetaData");
	__xamarin_class_map [675].handle = objc_getClass ("NEIPv4Route");
	__xamarin_class_map [676].handle = objc_getClass ("NEIPv4Settings");
	__xamarin_class_map [677].handle = objc_getClass ("NEIPv6Route");
	__xamarin_class_map [678].handle = objc_getClass ("NEIPv6Settings");
	__xamarin_class_map [679].handle = objc_getClass ("NENetworkRule");
	__xamarin_class_map [680].handle = objc_getClass ("NEOnDemandRule");
	__xamarin_class_map [681].handle = objc_getClass ("NEOnDemandRuleConnect");
	__xamarin_class_map [682].handle = objc_getClass ("NEOnDemandRuleDisconnect");
	__xamarin_class_map [683].handle = objc_getClass ("NEOnDemandRuleEvaluateConnection");
	__xamarin_class_map [684].handle = objc_getClass ("NEOnDemandRuleIgnore");
	__xamarin_class_map [685].handle = objc_getClass ("NEPacket");
	__xamarin_class_map [686].handle = objc_getClass ("NEProxyServer");
	__xamarin_class_map [687].handle = objc_getClass ("NEProxySettings");
	__xamarin_class_map [688].handle = objc_getClass ("NETransparentProxyNetworkSettings");
	__xamarin_class_map [689].handle = objc_getClass ("NEAppProxyProvider");
	__xamarin_class_map [690].handle = objc_getClass ("NETransparentProxyProvider");
	__xamarin_class_map [691].handle = objc_getClass ("NETunnelProviderProtocol");
	__xamarin_class_map [692].handle = objc_getClass ("NEVPNConnection");
	__xamarin_class_map [693].handle = objc_getClass ("NETunnelProviderSession");
	__xamarin_class_map [694].handle = objc_getClass ("NEVPNIKEv2SecurityAssociationParameters");
	__xamarin_class_map [695].handle = objc_getClass ("NEVPNProtocolIPSec");
	__xamarin_class_map [696].handle = objc_getClass ("NEVPNProtocolIKEv2");
	__xamarin_class_map [697].handle = objc_getClass ("NWEndpoint");
	__xamarin_class_map [698].handle = objc_getClass ("NWBonjourServiceEndpoint");
	__xamarin_class_map [699].handle = objc_getClass ("NWHostEndpoint");
	__xamarin_class_map [700].handle = objc_getClass ("NWPath");
	__xamarin_class_map [701].handle = objc_getClass ("Microsoft_macOS__NetworkExtension_NWTcpConnectionAuthenticationDelegate");
	__xamarin_class_map [702].handle = objc_getClass ("NWTLSParameters");
	__xamarin_class_map [703].handle = objc_getClass ("NLModel");
	__xamarin_class_map [704].handle = objc_getClass ("NLGazetteer");
	__xamarin_class_map [705].handle = objc_getClass ("NLModelConfiguration");
	__xamarin_class_map [706].handle = objc_getClass ("NLTokenizer");
	__xamarin_class_map [707].handle = objc_getClass ("MCAdvertiserAssistant");
	__xamarin_class_map [708].handle = objc_getClass ("Microsoft_macOS__MultipeerConnectivity_MCAdvertiserAssistantDelegate");
	__xamarin_class_map [709].handle = objc_getClass ("MCBrowserViewController");
	__xamarin_class_map [710].handle = objc_getClass ("Microsoft_macOS__MultipeerConnectivity_MCBrowserViewControllerDelegate");
	__xamarin_class_map [711].handle = objc_getClass ("MCNearbyServiceAdvertiser");
	__xamarin_class_map [712].handle = objc_getClass ("Microsoft_macOS__MultipeerConnectivity_MCNearbyServiceAdvertiserDelegate");
	__xamarin_class_map [713].handle = objc_getClass ("MCNearbyServiceBrowser");
	__xamarin_class_map [714].handle = objc_getClass ("Microsoft_macOS__MultipeerConnectivity_MCNearbyServiceBrowserDelegate");
	__xamarin_class_map [715].handle = objc_getClass ("MCPeerID");
	__xamarin_class_map [716].handle = objc_getClass ("Microsoft_macOS__MultipeerConnectivity_MCSessionDelegate");
	__xamarin_class_map [717].handle = objc_getClass ("MDLAnimatedValue");
	__xamarin_class_map [718].handle = objc_getClass ("MDLAnimatedQuaternion");
	__xamarin_class_map [719].handle = objc_getClass ("MDLAnimatedScalarArray");
	__xamarin_class_map [720].handle = objc_getClass ("MDLAnimatedVector3Array");
	__xamarin_class_map [721].handle = objc_getClass ("MDLAnimatedQuaternionArray");
	__xamarin_class_map [722].handle = objc_getClass ("MDLAnimatedScalar");
	__xamarin_class_map [723].handle = objc_getClass ("MDLAnimatedVector2");
	__xamarin_class_map [724].handle = objc_getClass ("MDLAnimatedVector3");
	__xamarin_class_map [725].handle = objc_getClass ("MDLAnimatedVector4");
	__xamarin_class_map [726].handle = objc_getClass ("MDLAnimatedMatrix4x4");
	__xamarin_class_map [727].handle = objc_getClass ("MDLMatrix4x4Array");
	__xamarin_class_map [728].handle = objc_getClass ("MDLAsset");
	__xamarin_class_map [729].handle = objc_getClass ("MDLTexture");
	__xamarin_class_map [730].handle = objc_getClass ("MDLNoiseTexture");
	__xamarin_class_map [731].handle = objc_getClass ("MDLTransform");
	__xamarin_class_map [732].handle = objc_getClass ("MDLVertexDescriptor");
	__xamarin_class_map [733].handle = objc_getClass ("MDLAnimationBindComponent");
	__xamarin_class_map [734].handle = objc_getClass ("MDLObject");
	__xamarin_class_map [735].handle = objc_getClass ("MDLLight");
	__xamarin_class_map [736].handle = objc_getClass ("MDLPhysicallyPlausibleLight");
	__xamarin_class_map [737].handle = objc_getClass ("MDLAreaLight");
	__xamarin_class_map [738].handle = objc_getClass ("MDLBundleAssetResolver");
	__xamarin_class_map [739].handle = objc_getClass ("MDLCamera");
	__xamarin_class_map [740].handle = objc_getClass ("MDLCheckerboardTexture");
	__xamarin_class_map [741].handle = objc_getClass ("MDLColorSwatchTexture");
	__xamarin_class_map [742].handle = objc_getClass ("MDLLightProbe");
	__xamarin_class_map [743].handle = objc_getClass ("Microsoft_macOS__ModelIO_MDLLightProbeIrradianceDataSource");
	__xamarin_class_map [744].handle = objc_getClass ("MDLMaterial");
	__xamarin_class_map [745].handle = objc_getClass ("MDLMaterialProperty");
	__xamarin_class_map [746].handle = objc_getClass ("MDLMaterialPropertyConnection");
	__xamarin_class_map [747].handle = objc_getClass ("MDLMaterialPropertyNode");
	__xamarin_class_map [748].handle = objc_getClass ("MDLMaterialPropertyGraph");
	__xamarin_class_map [749].handle = objc_getClass ("MDLMeshBufferData");
	__xamarin_class_map [750].handle = objc_getClass ("MDLMeshBufferDataAllocator");
	__xamarin_class_map [751].handle = objc_getClass ("MDLMeshBufferMap");
	__xamarin_class_map [752].handle = objc_getClass ("MDLMeshBufferZoneDefault");
	__xamarin_class_map [753].handle = objc_getClass ("MDLNormalMapTexture");
	__xamarin_class_map [754].handle = objc_getClass ("MDLObjectContainer");
	__xamarin_class_map [755].handle = objc_getClass ("MDLPackedJointAnimation");
	__xamarin_class_map [756].handle = objc_getClass ("MDLPathAssetResolver");
	__xamarin_class_map [757].handle = objc_getClass ("MDLPhotometricLight");
	__xamarin_class_map [758].handle = objc_getClass ("MDLScatteringFunction");
	__xamarin_class_map [759].handle = objc_getClass ("MDLPhysicallyPlausibleScatteringFunction");
	__xamarin_class_map [760].handle = objc_getClass ("MDLRelativeAssetResolver");
	__xamarin_class_map [761].handle = objc_getClass ("MDLSkeleton");
	__xamarin_class_map [762].handle = objc_getClass ("MDLSkyCubeTexture");
	__xamarin_class_map [763].handle = objc_getClass ("MDLStereoscopicCamera");
	__xamarin_class_map [764].handle = objc_getClass ("MDLSubmesh");
	__xamarin_class_map [765].handle = objc_getClass ("MDLSubmeshTopology");
	__xamarin_class_map [766].handle = objc_getClass ("MDLTextureFilter");
	__xamarin_class_map [767].handle = objc_getClass ("MDLTextureSampler");
	__xamarin_class_map [768].handle = objc_getClass ("MDLTransformMatrixOp");
	__xamarin_class_map [769].handle = objc_getClass ("MDLTransformOrientOp");
	__xamarin_class_map [770].handle = objc_getClass ("MDLTransformRotateOp");
	__xamarin_class_map [771].handle = objc_getClass ("MDLTransformRotateXOp");
	__xamarin_class_map [772].handle = objc_getClass ("MDLTransformRotateYOp");
	__xamarin_class_map [773].handle = objc_getClass ("MDLTransformRotateZOp");
	__xamarin_class_map [774].handle = objc_getClass ("MDLTransformScaleOp");
	__xamarin_class_map [775].handle = objc_getClass ("MDLTransformStack");
	__xamarin_class_map [776].handle = objc_getClass ("MDLTransformTranslateOp");
	__xamarin_class_map [777].handle = objc_getClass ("MDLURLTexture");
	__xamarin_class_map [778].handle = objc_getClass ("MDLVertexAttribute");
	__xamarin_class_map [779].handle = objc_getClass ("MDLVertexAttributeData");
	__xamarin_class_map [780].handle = objc_getClass ("MDLVertexBufferLayout");
	__xamarin_class_map [781].handle = objc_getClass ("MDLVoxelArray");
	__xamarin_class_map [782].handle = objc_getClass ("MXMetricManager");
	__xamarin_class_map [783].handle = objc_getClass ("MXAverage");
	__xamarin_class_map [784].handle = objc_getClass ("MXCallStackTree");
	__xamarin_class_map [785].handle = objc_getClass ("MXDiagnostic");
	__xamarin_class_map [786].handle = objc_getClass ("MXCPUExceptionDiagnostic");
	__xamarin_class_map [787].handle = objc_getClass ("MXCrashDiagnostic");
	__xamarin_class_map [788].handle = objc_getClass ("MXDiagnosticPayload");
	__xamarin_class_map [789].handle = objc_getClass ("MXDiskWriteExceptionDiagnostic");
	__xamarin_class_map [790].handle = objc_getClass ("MXHangDiagnostic");
	__xamarin_class_map [791].handle = objc_getClass ("MXHistogram");
	__xamarin_class_map [792].handle = objc_getClass ("MXHistogramBucket");
	__xamarin_class_map [793].handle = objc_getClass ("MXMetaData");
	__xamarin_class_map [794].handle = objc_getClass ("MPSGraph");
	__xamarin_class_map [795].handle = objc_getClass ("MPSGraphCompilationDescriptor");
	__xamarin_class_map [796].handle = objc_getClass ("MPSGraphConvolution2DOpDescriptor");
	__xamarin_class_map [797].handle = objc_getClass ("MPSGraphCreateSparseOpDescriptor");
	__xamarin_class_map [798].handle = objc_getClass ("MPSGraphDepthwiseConvolution2DOpDescriptor");
	__xamarin_class_map [799].handle = objc_getClass ("MPSGraphDevice");
	__xamarin_class_map [800].handle = objc_getClass ("MPSGraphExecutable");
	__xamarin_class_map [801].handle = objc_getClass ("MPSGraphExecutableExecutionDescriptor");
	__xamarin_class_map [802].handle = objc_getClass ("MPSGraphExecutionDescriptor");
	__xamarin_class_map [803].handle = objc_getClass ("MPSGraphOperation");
	__xamarin_class_map [804].handle = objc_getClass ("MPSGraphPooling2DOpDescriptor");
	__xamarin_class_map [805].handle = objc_getClass ("MPSGraphRandomOpDescriptor");
	__xamarin_class_map [806].handle = objc_getClass ("MPSGraphType");
	__xamarin_class_map [807].handle = objc_getClass ("MPSCNNConvolutionDescriptor");
	__xamarin_class_map [808].handle = objc_getClass ("MPSKernel");
	__xamarin_class_map [809].handle = objc_getClass ("MPSCNNKernel");
	__xamarin_class_map [810].handle = objc_getClass ("MPSCNNBinaryConvolution");
	__xamarin_class_map [811].handle = objc_getClass ("MPSCNNBinaryFullyConnected");
	__xamarin_class_map [812].handle = objc_getClass ("MPSCNNNeuron");
	__xamarin_class_map [813].handle = objc_getClass ("MPSCNNNeuronPReLU");
	__xamarin_class_map [814].handle = objc_getClass ("MPSUnaryImageKernel");
	__xamarin_class_map [815].handle = objc_getClass ("MPSImageScale");
	__xamarin_class_map [816].handle = objc_getClass ("MPSImage");
	__xamarin_class_map [817].handle = objc_getClass ("MPSImageDilate");
	__xamarin_class_map [818].handle = objc_getClass ("MPSImageErode");
	__xamarin_class_map [819].handle = objc_getClass ("MPSImageThresholdBinary");
	__xamarin_class_map [820].handle = objc_getClass ("MPSImageThresholdBinaryInverse");
	__xamarin_class_map [821].handle = objc_getClass ("MPSImageThresholdTruncate");
	__xamarin_class_map [822].handle = objc_getClass ("MPSImageThresholdToZero");
	__xamarin_class_map [823].handle = objc_getClass ("MPSImageThresholdToZeroInverse");
	__xamarin_class_map [824].handle = objc_getClass ("MPSImageSobel");
	__xamarin_class_map [825].handle = objc_getClass ("MPSCNNConvolution");
	__xamarin_class_map [826].handle = objc_getClass ("MPSCNNFullyConnected");
	__xamarin_class_map [827].handle = objc_getClass ("MPSImageConversion");
	__xamarin_class_map [828].handle = objc_getClass ("MPSImagePyramid");
	__xamarin_class_map [829].handle = objc_getClass ("MPSImageGaussianPyramid");
	__xamarin_class_map [830].handle = objc_getClass ("MPSImageLaplacianPyramid");
	__xamarin_class_map [831].handle = objc_getClass ("MPSImageLaplacianPyramidSubtract");
	__xamarin_class_map [832].handle = objc_getClass ("MPSImageLaplacianPyramidAdd");
	__xamarin_class_map [833].handle = objc_getClass ("MPSNNFilterNode");
	__xamarin_class_map [834].handle = objc_getClass ("MPSCNNConvolutionNode");
	__xamarin_class_map [835].handle = objc_getClass ("MPSCNNBinaryConvolutionNode");
	__xamarin_class_map [836].handle = objc_getClass ("MPSCNNBinaryFullyConnectedNode");
	__xamarin_class_map [837].handle = objc_getClass ("MPSNDArray");
	__xamarin_class_map [838].handle = objc_getClass ("MPSStateResourceList");
	__xamarin_class_map [839].handle = objc_getClass ("MPSAccelerationStructureGroup");
	__xamarin_class_map [840].handle = objc_getClass ("MPSBinaryImageKernel");
	__xamarin_class_map [841].handle = objc_getClass ("MPSCNNBinaryKernel");
	__xamarin_class_map [842].handle = objc_getClass ("MPSCNNArithmetic");
	__xamarin_class_map [843].handle = objc_getClass ("MPSCNNAdd");
	__xamarin_class_map [844].handle = objc_getClass ("MPSCNNGradientKernel");
	__xamarin_class_map [845].handle = objc_getClass ("MPSCNNArithmeticGradient");
	__xamarin_class_map [846].handle = objc_getClass ("MPSCNNAddGradient");
	__xamarin_class_map [847].handle = objc_getClass ("MPSState");
	__xamarin_class_map [848].handle = objc_getClass ("MPSNNBinaryGradientState");
	__xamarin_class_map [849].handle = objc_getClass ("MPSCNNArithmeticGradientState");
	__xamarin_class_map [850].handle = objc_getClass ("MPSCNNBatchNormalization");
	__xamarin_class_map [851].handle = objc_getClass ("Microsoft_macOS__MetalPerformanceShaders_MPSCnnBatchNormalizationDataSource");
	__xamarin_class_map [852].handle = objc_getClass ("MPSCNNBatchNormalizationGradient");
	__xamarin_class_map [853].handle = objc_getClass ("MPSNNGradientFilterNode");
	__xamarin_class_map [854].handle = objc_getClass ("MPSCNNBatchNormalizationGradientNode");
	__xamarin_class_map [855].handle = objc_getClass ("MPSCNNBatchNormalizationNode");
	__xamarin_class_map [856].handle = objc_getClass ("MPSNNGradientState");
	__xamarin_class_map [857].handle = objc_getClass ("MPSCNNBatchNormalizationState");
	__xamarin_class_map [858].handle = objc_getClass ("MPSCNNBatchNormalizationStatistics");
	__xamarin_class_map [859].handle = objc_getClass ("MPSCNNBatchNormalizationStatisticsGradient");
	__xamarin_class_map [860].handle = objc_getClass ("Microsoft_macOS__MetalPerformanceShaders_MPSCnnConvolutionDataSource");
	__xamarin_class_map [861].handle = objc_getClass ("MPSCNNConvolutionGradient");
	__xamarin_class_map [862].handle = objc_getClass ("MPSCNNConvolutionGradientNode");
	__xamarin_class_map [863].handle = objc_getClass ("MPSCNNConvolutionGradientState");
	__xamarin_class_map [864].handle = objc_getClass ("MPSNNStateNode");
	__xamarin_class_map [865].handle = objc_getClass ("MPSNNGradientStateNode");
	__xamarin_class_map [866].handle = objc_getClass ("MPSCNNConvolutionGradientStateNode");
	__xamarin_class_map [867].handle = objc_getClass ("MPSCNNConvolutionStateNode");
	__xamarin_class_map [868].handle = objc_getClass ("MPSCNNConvolutionTranspose");
	__xamarin_class_map [869].handle = objc_getClass ("MPSCNNConvolutionTransposeNode");
	__xamarin_class_map [870].handle = objc_getClass ("MPSCNNConvolutionWeightsAndBiasesState");
	__xamarin_class_map [871].handle = objc_getClass ("MPSCNNCrossChannelNormalization");
	__xamarin_class_map [872].handle = objc_getClass ("MPSCNNCrossChannelNormalizationGradient");
	__xamarin_class_map [873].handle = objc_getClass ("MPSCNNCrossChannelNormalizationGradientNode");
	__xamarin_class_map [874].handle = objc_getClass ("MPSCNNNormalizationNode");
	__xamarin_class_map [875].handle = objc_getClass ("MPSCNNCrossChannelNormalizationNode");
	__xamarin_class_map [876].handle = objc_getClass ("MPSCNNDepthWiseConvolutionDescriptor");
	__xamarin_class_map [877].handle = objc_getClass ("MPSCNNPooling");
	__xamarin_class_map [878].handle = objc_getClass ("MPSCNNDilatedPoolingMax");
	__xamarin_class_map [879].handle = objc_getClass ("MPSCNNPoolingGradient");
	__xamarin_class_map [880].handle = objc_getClass ("MPSCNNDilatedPoolingMaxGradient");
	__xamarin_class_map [881].handle = objc_getClass ("MPSCNNPoolingGradientNode");
	__xamarin_class_map [882].handle = objc_getClass ("MPSCNNDilatedPoolingMaxGradientNode");
	__xamarin_class_map [883].handle = objc_getClass ("MPSCNNDilatedPoolingMaxNode");
	__xamarin_class_map [884].handle = objc_getClass ("MPSCNNDivide");
	__xamarin_class_map [885].handle = objc_getClass ("MPSCNNDropout");
	__xamarin_class_map [886].handle = objc_getClass ("MPSCNNDropoutGradient");
	__xamarin_class_map [887].handle = objc_getClass ("MPSCNNDropoutGradientNode");
	__xamarin_class_map [888].handle = objc_getClass ("MPSCNNDropoutGradientState");
	__xamarin_class_map [889].handle = objc_getClass ("MPSCNNDropoutNode");
	__xamarin_class_map [890].handle = objc_getClass ("MPSCNNFullyConnectedGradient");
	__xamarin_class_map [891].handle = objc_getClass ("MPSCNNFullyConnectedNode");
	__xamarin_class_map [892].handle = objc_getClass ("MPSCNNInstanceNormalization");
	__xamarin_class_map [893].handle = objc_getClass ("Microsoft_macOS__MetalPerformanceShaders_MPSCnnInstanceNormalizationDataSource");
	__xamarin_class_map [894].handle = objc_getClass ("MPSCNNInstanceNormalizationGradient");
	__xamarin_class_map [895].handle = objc_getClass ("MPSCNNInstanceNormalizationGradientNode");
	__xamarin_class_map [896].handle = objc_getClass ("MPSCNNInstanceNormalizationGradientState");
	__xamarin_class_map [897].handle = objc_getClass ("MPSCNNInstanceNormalizationNode");
	__xamarin_class_map [898].handle = objc_getClass ("MPSCNNLocalContrastNormalization");
	__xamarin_class_map [899].handle = objc_getClass ("MPSCNNLocalContrastNormalizationGradient");
	__xamarin_class_map [900].handle = objc_getClass ("MPSCNNLocalContrastNormalizationGradientNode");
	__xamarin_class_map [901].handle = objc_getClass ("MPSCNNLocalContrastNormalizationNode");
	__xamarin_class_map [902].handle = objc_getClass ("MPSCNNLogSoftMax");
	__xamarin_class_map [903].handle = objc_getClass ("MPSCNNLogSoftMaxGradient");
	__xamarin_class_map [904].handle = objc_getClass ("MPSCNNLogSoftMaxGradientNode");
	__xamarin_class_map [905].handle = objc_getClass ("MPSCNNLogSoftMaxNode");
	__xamarin_class_map [906].handle = objc_getClass ("MPSCNNLoss");
	__xamarin_class_map [907].handle = objc_getClass ("MPSCNNLossDataDescriptor");
	__xamarin_class_map [908].handle = objc_getClass ("MPSCNNLossDescriptor");
	__xamarin_class_map [909].handle = objc_getClass ("MPSCNNLossLabels");
	__xamarin_class_map [910].handle = objc_getClass ("MPSCNNLossNode");
	__xamarin_class_map [911].handle = objc_getClass ("MPSCNNMultiply");
	__xamarin_class_map [912].handle = objc_getClass ("MPSCNNMultiplyGradient");
	__xamarin_class_map [913].handle = objc_getClass ("MPSCNNNeuronAbsolute");
	__xamarin_class_map [914].handle = objc_getClass ("MPSCNNNeuronNode");
	__xamarin_class_map [915].handle = objc_getClass ("MPSCNNNeuronAbsoluteNode");
	__xamarin_class_map [916].handle = objc_getClass ("MPSCNNNeuronELU");
	__xamarin_class_map [917].handle = objc_getClass ("MPSCNNNeuronELUNode");
	__xamarin_class_map [918].handle = objc_getClass ("MPSCNNNeuronExponential");
	__xamarin_class_map [919].handle = objc_getClass ("MPSCNNNeuronExponentialNode");
	__xamarin_class_map [920].handle = objc_getClass ("MPSCNNNeuronGradient");
	__xamarin_class_map [921].handle = objc_getClass ("MPSCNNNeuronGradientNode");
	__xamarin_class_map [922].handle = objc_getClass ("MPSCNNNeuronHardSigmoid");
	__xamarin_class_map [923].handle = objc_getClass ("MPSCNNNeuronHardSigmoidNode");
	__xamarin_class_map [924].handle = objc_getClass ("MPSCNNNeuronLinear");
	__xamarin_class_map [925].handle = objc_getClass ("MPSCNNNeuronLinearNode");
	__xamarin_class_map [926].handle = objc_getClass ("MPSCNNNeuronLogarithm");
	__xamarin_class_map [927].handle = objc_getClass ("MPSCNNNeuronLogarithmNode");
	__xamarin_class_map [928].handle = objc_getClass ("MPSCNNNeuronPower");
	__xamarin_class_map [929].handle = objc_getClass ("MPSCNNNeuronPowerNode");
	__xamarin_class_map [930].handle = objc_getClass ("MPSCNNNeuronPReLUNode");
	__xamarin_class_map [931].handle = objc_getClass ("MPSCNNNeuronReLU");
	__xamarin_class_map [932].handle = objc_getClass ("MPSCNNNeuronReLUN");
	__xamarin_class_map [933].handle = objc_getClass ("MPSCNNNeuronReLUNNode");
	__xamarin_class_map [934].handle = objc_getClass ("MPSCNNNeuronReLUNode");
	__xamarin_class_map [935].handle = objc_getClass ("MPSCNNNeuronSigmoid");
	__xamarin_class_map [936].handle = objc_getClass ("MPSCNNNeuronSigmoidNode");
	__xamarin_class_map [937].handle = objc_getClass ("MPSCNNNeuronSoftPlus");
	__xamarin_class_map [938].handle = objc_getClass ("MPSCNNNeuronSoftPlusNode");
	__xamarin_class_map [939].handle = objc_getClass ("MPSCNNNeuronSoftSign");
	__xamarin_class_map [940].handle = objc_getClass ("MPSCNNNeuronSoftSignNode");
	__xamarin_class_map [941].handle = objc_getClass ("MPSCNNNeuronTanH");
	__xamarin_class_map [942].handle = objc_getClass ("MPSCNNNeuronTanHNode");
	__xamarin_class_map [943].handle = objc_getClass ("MPSCNNNormalizationGammaAndBetaState");
	__xamarin_class_map [944].handle = objc_getClass ("MPSCNNNormalizationMeanAndVarianceState");
	__xamarin_class_map [945].handle = objc_getClass ("MPSCNNPoolingAverage");
	__xamarin_class_map [946].handle = objc_getClass ("MPSCNNPoolingAverageGradient");
	__xamarin_class_map [947].handle = objc_getClass ("MPSCNNPoolingAverageGradientNode");
	__xamarin_class_map [948].handle = objc_getClass ("MPSCNNPoolingNode");
	__xamarin_class_map [949].handle = objc_getClass ("MPSCNNPoolingAverageNode");
	__xamarin_class_map [950].handle = objc_getClass ("MPSCNNPoolingL2Norm");
	__xamarin_class_map [951].handle = objc_getClass ("MPSCNNPoolingL2NormGradient");
	__xamarin_class_map [952].handle = objc_getClass ("MPSCNNPoolingL2NormGradientNode");
	__xamarin_class_map [953].handle = objc_getClass ("MPSCNNPoolingL2NormNode");
	__xamarin_class_map [954].handle = objc_getClass ("MPSCNNPoolingMax");
	__xamarin_class_map [955].handle = objc_getClass ("MPSCNNPoolingMaxGradient");
	__xamarin_class_map [956].handle = objc_getClass ("MPSCNNPoolingMaxGradientNode");
	__xamarin_class_map [957].handle = objc_getClass ("MPSCNNPoolingMaxNode");
	__xamarin_class_map [958].handle = objc_getClass ("MPSCNNSoftMax");
	__xamarin_class_map [959].handle = objc_getClass ("MPSCNNSoftMaxGradient");
	__xamarin_class_map [960].handle = objc_getClass ("MPSCNNSoftMaxGradientNode");
	__xamarin_class_map [961].handle = objc_getClass ("MPSCNNSoftMaxNode");
	__xamarin_class_map [962].handle = objc_getClass ("MPSCNNSpatialNormalization");
	__xamarin_class_map [963].handle = objc_getClass ("MPSCNNSpatialNormalizationGradient");
	__xamarin_class_map [964].handle = objc_getClass ("MPSCNNSpatialNormalizationGradientNode");
	__xamarin_class_map [965].handle = objc_getClass ("MPSCNNSpatialNormalizationNode");
	__xamarin_class_map [966].handle = objc_getClass ("MPSCNNSubPixelConvolutionDescriptor");
	__xamarin_class_map [967].handle = objc_getClass ("MPSCNNSubtract");
	__xamarin_class_map [968].handle = objc_getClass ("MPSCNNSubtractGradient");
	__xamarin_class_map [969].handle = objc_getClass ("MPSCNNUpsampling");
	__xamarin_class_map [970].handle = objc_getClass ("MPSCNNUpsamplingBilinear");
	__xamarin_class_map [971].handle = objc_getClass ("MPSCNNUpsamplingGradient");
	__xamarin_class_map [972].handle = objc_getClass ("MPSCNNUpsamplingBilinearGradient");
	__xamarin_class_map [973].handle = objc_getClass ("MPSCNNUpsamplingBilinearGradientNode");
	__xamarin_class_map [974].handle = objc_getClass ("MPSCNNUpsamplingBilinearNode");
	__xamarin_class_map [975].handle = objc_getClass ("MPSCNNUpsamplingNearest");
	__xamarin_class_map [976].handle = objc_getClass ("MPSCNNUpsamplingNearestGradient");
	__xamarin_class_map [977].handle = objc_getClass ("MPSCNNUpsamplingNearestGradientNode");
	__xamarin_class_map [978].handle = objc_getClass ("MPSCNNUpsamplingNearestNode");
	__xamarin_class_map [979].handle = objc_getClass ("MPSCNNYOLOLoss");
	__xamarin_class_map [980].handle = objc_getClass ("MPSCNNYOLOLossDescriptor");
	__xamarin_class_map [981].handle = objc_getClass ("MPSCNNYOLOLossNode");
	__xamarin_class_map [982].handle = objc_getClass ("MPSCommandBuffer");
	__xamarin_class_map [983].handle = objc_getClass ("MPSRNNDescriptor");
	__xamarin_class_map [984].handle = objc_getClass ("MPSGRUDescriptor");
	__xamarin_class_map [985].handle = objc_getClass ("MPSImageArithmetic");
	__xamarin_class_map [986].handle = objc_getClass ("MPSImageAdd");
	__xamarin_class_map [987].handle = objc_getClass ("MPSImageAreaMax");
	__xamarin_class_map [988].handle = objc_getClass ("MPSImageAreaMin");
	__xamarin_class_map [989].handle = objc_getClass ("MPSImageBilinearScale");
	__xamarin_class_map [990].handle = objc_getClass ("MPSImageBox");
	__xamarin_class_map [991].handle = objc_getClass ("MPSImageConvolution");
	__xamarin_class_map [992].handle = objc_getClass ("MPSImageCopyToMatrix");
	__xamarin_class_map [993].handle = objc_getClass ("MPSImageDescriptor");
	__xamarin_class_map [994].handle = objc_getClass ("MPSImageDivide");
	__xamarin_class_map [995].handle = objc_getClass ("MPSImageEuclideanDistanceTransform");
	__xamarin_class_map [996].handle = objc_getClass ("MPSImageFindKeypoints");
	__xamarin_class_map [997].handle = objc_getClass ("MPSImageGaussianBlur");
	__xamarin_class_map [998].handle = objc_getClass ("MPSImageGuidedFilter");
	__xamarin_class_map [999].handle = objc_getClass ("MPSImageHistogram");
	__xamarin_class_map [1000].handle = objc_getClass ("MPSImageHistogramEqualization");
	__xamarin_class_map [1001].handle = objc_getClass ("MPSImageHistogramSpecification");
	__xamarin_class_map [1002].handle = objc_getClass ("MPSImageIntegral");
	__xamarin_class_map [1003].handle = objc_getClass ("MPSImageIntegralOfSquares");
	__xamarin_class_map [1004].handle = objc_getClass ("MPSImageLanczosScale");
	__xamarin_class_map [1005].handle = objc_getClass ("MPSImageLaplacian");
	__xamarin_class_map [1006].handle = objc_getClass ("MPSImageMedian");
	__xamarin_class_map [1007].handle = objc_getClass ("MPSImageMultiply");
	__xamarin_class_map [1008].handle = objc_getClass ("MPSImageNormalizedHistogram");
	__xamarin_class_map [1009].handle = objc_getClass ("MPSImageReduceUnary");
	__xamarin_class_map [1010].handle = objc_getClass ("MPSImageReduceColumnMax");
	__xamarin_class_map [1011].handle = objc_getClass ("MPSImageReduceColumnMean");
	__xamarin_class_map [1012].handle = objc_getClass ("MPSImageReduceColumnMin");
	__xamarin_class_map [1013].handle = objc_getClass ("MPSImageReduceColumnSum");
	__xamarin_class_map [1014].handle = objc_getClass ("MPSImageReduceRowMax");
	__xamarin_class_map [1015].handle = objc_getClass ("MPSImageReduceRowMean");
	__xamarin_class_map [1016].handle = objc_getClass ("MPSImageReduceRowMin");
	__xamarin_class_map [1017].handle = objc_getClass ("MPSImageReduceRowSum");
	__xamarin_class_map [1018].handle = objc_getClass ("MPSImageStatisticsMean");
	__xamarin_class_map [1019].handle = objc_getClass ("MPSImageStatisticsMeanAndVariance");
	__xamarin_class_map [1020].handle = objc_getClass ("MPSImageStatisticsMinAndMax");
	__xamarin_class_map [1021].handle = objc_getClass ("MPSImageSubtract");
	__xamarin_class_map [1022].handle = objc_getClass ("MPSImageTent");
	__xamarin_class_map [1023].handle = objc_getClass ("MPSImageTranspose");
	__xamarin_class_map [1024].handle = objc_getClass ("MPSAccelerationStructure");
	__xamarin_class_map [1025].handle = objc_getClass ("MPSInstanceAccelerationStructure");
	__xamarin_class_map [1026].handle = objc_getClass ("NSCoder");
	__xamarin_class_map [1027].handle = objc_getClass ("NSKeyedUnarchiver");
	__xamarin_class_map [1028].handle = objc_getClass ("MPSKeyedUnarchiver");
	__xamarin_class_map [1029].handle = objc_getClass ("MPSLSTMDescriptor");
	__xamarin_class_map [1030].handle = objc_getClass ("MPSMatrix");
	__xamarin_class_map [1031].handle = objc_getClass ("MPSMatrixUnaryKernel");
	__xamarin_class_map [1032].handle = objc_getClass ("MPSMatrixBatchNormalization");
	__xamarin_class_map [1033].handle = objc_getClass ("MPSMatrixBinaryKernel");
	__xamarin_class_map [1034].handle = objc_getClass ("MPSMatrixBatchNormalizationGradient");
	__xamarin_class_map [1035].handle = objc_getClass ("MPSMatrixCopy");
	__xamarin_class_map [1036].handle = objc_getClass ("MPSMatrixCopyDescriptor");
	__xamarin_class_map [1037].handle = objc_getClass ("MPSMatrixCopyToImage");
	__xamarin_class_map [1038].handle = objc_getClass ("MPSMatrixDecompositionCholesky");
	__xamarin_class_map [1039].handle = objc_getClass ("MPSMatrixDecompositionLU");
	__xamarin_class_map [1040].handle = objc_getClass ("MPSMatrixDescriptor");
	__xamarin_class_map [1041].handle = objc_getClass ("MPSMatrixFindTopK");
	__xamarin_class_map [1042].handle = objc_getClass ("MPSMatrixFullyConnected");
	__xamarin_class_map [1043].handle = objc_getClass ("MPSMatrixFullyConnectedGradient");
	__xamarin_class_map [1044].handle = objc_getClass ("MPSMatrixSoftMax");
	__xamarin_class_map [1045].handle = objc_getClass ("MPSMatrixLogSoftMax");
	__xamarin_class_map [1046].handle = objc_getClass ("MPSMatrixSoftMaxGradient");
	__xamarin_class_map [1047].handle = objc_getClass ("MPSMatrixLogSoftMaxGradient");
	__xamarin_class_map [1048].handle = objc_getClass ("MPSMatrixMultiplication");
	__xamarin_class_map [1049].handle = objc_getClass ("MPSMatrixNeuron");
	__xamarin_class_map [1050].handle = objc_getClass ("MPSMatrixNeuronGradient");
	__xamarin_class_map [1051].handle = objc_getClass ("MPSMatrixRandom");
	__xamarin_class_map [1052].handle = objc_getClass ("MPSMatrixRandomDistributionDescriptor");
	__xamarin_class_map [1053].handle = objc_getClass ("MPSMatrixRandomMTGP32");
	__xamarin_class_map [1054].handle = objc_getClass ("MPSMatrixRandomPhilox");
	__xamarin_class_map [1055].handle = objc_getClass ("MPSMatrixSolveCholesky");
	__xamarin_class_map [1056].handle = objc_getClass ("MPSMatrixSolveLU");
	__xamarin_class_map [1057].handle = objc_getClass ("MPSMatrixSolveTriangular");
	__xamarin_class_map [1058].handle = objc_getClass ("MPSMatrixSum");
	__xamarin_class_map [1059].handle = objc_getClass ("MPSMatrixVectorMultiplication");
	__xamarin_class_map [1060].handle = objc_getClass ("MPSNNArithmeticGradientNode");
	__xamarin_class_map [1061].handle = objc_getClass ("MPSNNAdditionGradientNode");
	__xamarin_class_map [1062].handle = objc_getClass ("MPSNNBinaryArithmeticNode");
	__xamarin_class_map [1063].handle = objc_getClass ("MPSNNAdditionNode");
	__xamarin_class_map [1064].handle = objc_getClass ("MPSNNBinaryGradientStateNode");
	__xamarin_class_map [1065].handle = objc_getClass ("MPSNNArithmeticGradientStateNode");
	__xamarin_class_map [1066].handle = objc_getClass ("MPSNNScaleNode");
	__xamarin_class_map [1067].handle = objc_getClass ("MPSNNBilinearScaleNode");
	__xamarin_class_map [1068].handle = objc_getClass ("MPSNNCompare");
	__xamarin_class_map [1069].handle = objc_getClass ("MPSNNComparisonNode");
	__xamarin_class_map [1070].handle = objc_getClass ("MPSNNConcatenationGradientNode");
	__xamarin_class_map [1071].handle = objc_getClass ("MPSNNConcatenationNode");
	__xamarin_class_map [1072].handle = objc_getClass ("MPSNNCropAndResizeBilinear");
	__xamarin_class_map [1073].handle = objc_getClass ("MPSNNDefaultPadding");
	__xamarin_class_map [1074].handle = objc_getClass ("MPSNNDivisionNode");
	__xamarin_class_map [1075].handle = objc_getClass ("MPSNNForwardLossNode");
	__xamarin_class_map [1076].handle = objc_getClass ("MPSNNImageNode");
	__xamarin_class_map [1077].handle = objc_getClass ("MPSNNInitialGradientNode");
	__xamarin_class_map [1078].handle = objc_getClass ("MPSNNLabelsNode");
	__xamarin_class_map [1079].handle = objc_getClass ("MPSNNLanczosScaleNode");
	__xamarin_class_map [1080].handle = objc_getClass ("MPSNNLossGradientNode");
	__xamarin_class_map [1081].handle = objc_getClass ("MPSNNMultiplicationGradientNode");
	__xamarin_class_map [1082].handle = objc_getClass ("MPSNNMultiplicationNode");
	__xamarin_class_map [1083].handle = objc_getClass ("MPSNNNeuronDescriptor");
	__xamarin_class_map [1084].handle = objc_getClass ("MPSNNOptimizer");
	__xamarin_class_map [1085].handle = objc_getClass ("MPSNNOptimizerAdam");
	__xamarin_class_map [1086].handle = objc_getClass ("MPSNNOptimizerDescriptor");
	__xamarin_class_map [1087].handle = objc_getClass ("MPSNNOptimizerRMSProp");
	__xamarin_class_map [1088].handle = objc_getClass ("MPSNNOptimizerStochasticGradientDescent");
	__xamarin_class_map [1089].handle = objc_getClass ("MPSNNPad");
	__xamarin_class_map [1090].handle = objc_getClass ("MPSNNPadGradient");
	__xamarin_class_map [1091].handle = objc_getClass ("MPSNNPadGradientNode");
	__xamarin_class_map [1092].handle = objc_getClass ("MPSNNPadNode");
	__xamarin_class_map [1093].handle = objc_getClass ("MPSNNReduceBinary");
	__xamarin_class_map [1094].handle = objc_getClass ("MPSNNReduceUnary");
	__xamarin_class_map [1095].handle = objc_getClass ("MPSNNReduceColumnMax");
	__xamarin_class_map [1096].handle = objc_getClass ("MPSNNReduceColumnMean");
	__xamarin_class_map [1097].handle = objc_getClass ("MPSNNReduceColumnMin");
	__xamarin_class_map [1098].handle = objc_getClass ("MPSNNReduceColumnSum");
	__xamarin_class_map [1099].handle = objc_getClass ("MPSNNReduceFeatureChannelsAndWeightsMean");
	__xamarin_class_map [1100].handle = objc_getClass ("MPSNNReduceFeatureChannelsAndWeightsSum");
	__xamarin_class_map [1101].handle = objc_getClass ("MPSNNReduceFeatureChannelsArgumentMax");
	__xamarin_class_map [1102].handle = objc_getClass ("MPSNNReduceFeatureChannelsArgumentMin");
	__xamarin_class_map [1103].handle = objc_getClass ("MPSNNReduceFeatureChannelsMax");
	__xamarin_class_map [1104].handle = objc_getClass ("MPSNNReduceFeatureChannelsMean");
	__xamarin_class_map [1105].handle = objc_getClass ("MPSNNReduceFeatureChannelsMin");
	__xamarin_class_map [1106].handle = objc_getClass ("MPSNNReduceFeatureChannelsSum");
	__xamarin_class_map [1107].handle = objc_getClass ("MPSNNReduceRowMax");
	__xamarin_class_map [1108].handle = objc_getClass ("MPSNNReduceRowMean");
	__xamarin_class_map [1109].handle = objc_getClass ("MPSNNReduceRowMin");
	__xamarin_class_map [1110].handle = objc_getClass ("MPSNNReduceRowSum");
	__xamarin_class_map [1111].handle = objc_getClass ("MPSNNUnaryReductionNode");
	__xamarin_class_map [1112].handle = objc_getClass ("MPSNNReductionColumnMaxNode");
	__xamarin_class_map [1113].handle = objc_getClass ("MPSNNReductionColumnMeanNode");
	__xamarin_class_map [1114].handle = objc_getClass ("MPSNNReductionColumnMinNode");
	__xamarin_class_map [1115].handle = objc_getClass ("MPSNNReductionColumnSumNode");
	__xamarin_class_map [1116].handle = objc_getClass ("MPSNNReductionFeatureChannelsArgumentMaxNode");
	__xamarin_class_map [1117].handle = objc_getClass ("MPSNNReductionFeatureChannelsArgumentMinNode");
	__xamarin_class_map [1118].handle = objc_getClass ("MPSNNReductionFeatureChannelsMaxNode");
	__xamarin_class_map [1119].handle = objc_getClass ("MPSNNReductionFeatureChannelsMeanNode");
	__xamarin_class_map [1120].handle = objc_getClass ("MPSNNReductionFeatureChannelsMinNode");
	__xamarin_class_map [1121].handle = objc_getClass ("MPSNNReductionFeatureChannelsSumNode");
	__xamarin_class_map [1122].handle = objc_getClass ("MPSNNReductionRowMaxNode");
	__xamarin_class_map [1123].handle = objc_getClass ("MPSNNReductionRowMeanNode");
	__xamarin_class_map [1124].handle = objc_getClass ("MPSNNReductionRowMinNode");
	__xamarin_class_map [1125].handle = objc_getClass ("MPSNNReductionRowSumNode");
	__xamarin_class_map [1126].handle = objc_getClass ("MPSNNReductionSpatialMeanGradientNode");
	__xamarin_class_map [1127].handle = objc_getClass ("MPSNNReductionSpatialMeanNode");
	__xamarin_class_map [1128].handle = objc_getClass ("MPSNNReshape");
	__xamarin_class_map [1129].handle = objc_getClass ("MPSNNReshapeGradient");
	__xamarin_class_map [1130].handle = objc_getClass ("MPSNNReshapeGradientNode");
	__xamarin_class_map [1131].handle = objc_getClass ("MPSNNReshapeNode");
	__xamarin_class_map [1132].handle = objc_getClass ("MPSNNResizeBilinear");
	__xamarin_class_map [1133].handle = objc_getClass ("MPSNNSlice");
	__xamarin_class_map [1134].handle = objc_getClass ("MPSNNSubtractionGradientNode");
	__xamarin_class_map [1135].handle = objc_getClass ("MPSNNSubtractionNode");
	__xamarin_class_map [1136].handle = objc_getClass ("MPSPredicate");
	__xamarin_class_map [1137].handle = objc_getClass ("MPSRayIntersector");
	__xamarin_class_map [1138].handle = objc_getClass ("MPSRNNImageInferenceLayer");
	__xamarin_class_map [1139].handle = objc_getClass ("MPSRNNMatrixInferenceLayer");
	__xamarin_class_map [1140].handle = objc_getClass ("MPSRNNMatrixTrainingLayer");
	__xamarin_class_map [1141].handle = objc_getClass ("MPSRNNMatrixTrainingState");
	__xamarin_class_map [1142].handle = objc_getClass ("MPSRNNRecurrentImageState");
	__xamarin_class_map [1143].handle = objc_getClass ("MPSRNNRecurrentMatrixState");
	__xamarin_class_map [1144].handle = objc_getClass ("MPSRNNSingleGateDescriptor");
	__xamarin_class_map [1145].handle = objc_getClass ("MPSTemporaryImage");
	__xamarin_class_map [1146].handle = objc_getClass ("MPSTemporaryMatrix");
	__xamarin_class_map [1147].handle = objc_getClass ("MPSTemporaryNDArray");
	__xamarin_class_map [1148].handle = objc_getClass ("MPSVector");
	__xamarin_class_map [1149].handle = objc_getClass ("MPSTemporaryVector");
	__xamarin_class_map [1150].handle = objc_getClass ("MPSTriangleAccelerationStructure");
	__xamarin_class_map [1151].handle = objc_getClass ("MPSVectorDescriptor");
	__xamarin_class_map [1152].handle = objc_getClass ("MTKMesh");
	__xamarin_class_map [1153].handle = objc_getClass ("MTKMeshBufferAllocator");
	__xamarin_class_map [1154].handle = objc_getClass ("MTKMeshBuffer");
	__xamarin_class_map [1155].handle = objc_getClass ("MTKSubmesh");
	__xamarin_class_map [1156].handle = objc_getClass ("MTKView");
	__xamarin_class_map [1157].handle = objc_getClass ("Microsoft_macOS__MetalKit_MTKViewDelegate");
	__xamarin_class_map [1158].handle = objc_getClass ("MTLRenderPipelineColorAttachmentDescriptorArray");
	__xamarin_class_map [1159].handle = objc_getClass ("MTLRenderPassColorAttachmentDescriptorArray");
	__xamarin_class_map [1160].handle = objc_getClass ("MTLVertexAttributeDescriptorArray");
	__xamarin_class_map [1161].handle = objc_getClass ("MTLVertexBufferLayoutDescriptorArray");
	__xamarin_class_map [1162].handle = objc_getClass ("MTLBufferLayoutDescriptorArray");
	__xamarin_class_map [1163].handle = objc_getClass ("MTLAttributeDescriptorArray");
	__xamarin_class_map [1164].handle = objc_getClass ("MTLPipelineBufferDescriptorArray");
	__xamarin_class_map [1165].handle = objc_getClass ("MTLBlitPassSampleBufferAttachmentDescriptorArray");
	__xamarin_class_map [1166].handle = objc_getClass ("MTLComputePassSampleBufferAttachmentDescriptorArray");
	__xamarin_class_map [1167].handle = objc_getClass ("MTLRenderPassDescriptor");
	__xamarin_class_map [1168].handle = objc_getClass ("MTLRenderPassSampleBufferAttachmentDescriptorArray");
	__xamarin_class_map [1169].handle = objc_getClass ("MTLResourceStatePassSampleBufferAttachmentDescriptorArray");
	__xamarin_class_map [1170].handle = objc_getClass ("MTLVertexDescriptor");
	__xamarin_class_map [1171].handle = objc_getClass ("MTLAccelerationStructureGeometryDescriptor");
	__xamarin_class_map [1172].handle = objc_getClass ("MTLAccelerationStructureBoundingBoxGeometryDescriptor");
	__xamarin_class_map [1173].handle = objc_getClass ("MTLAccelerationStructureDescriptor");
	__xamarin_class_map [1174].handle = objc_getClass ("MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor");
	__xamarin_class_map [1175].handle = objc_getClass ("MTLAccelerationStructureMotionTriangleGeometryDescriptor");
	__xamarin_class_map [1176].handle = objc_getClass ("MTLAccelerationStructureTriangleGeometryDescriptor");
	__xamarin_class_map [1177].handle = objc_getClass ("MTLArgument");
	__xamarin_class_map [1178].handle = objc_getClass ("MTLArgumentDescriptor");
	__xamarin_class_map [1179].handle = objc_getClass ("MTLType");
	__xamarin_class_map [1180].handle = objc_getClass ("MTLArrayType");
	__xamarin_class_map [1181].handle = objc_getClass ("MTLAttribute");
	__xamarin_class_map [1182].handle = objc_getClass ("MTLAttributeDescriptor");
	__xamarin_class_map [1183].handle = objc_getClass ("MTLBinaryArchiveDescriptor");
	__xamarin_class_map [1184].handle = objc_getClass ("MTLBlitPassDescriptor");
	__xamarin_class_map [1185].handle = objc_getClass ("MTLBlitPassSampleBufferAttachmentDescriptor");
	__xamarin_class_map [1186].handle = objc_getClass ("MTLBufferLayoutDescriptor");
	__xamarin_class_map [1187].handle = objc_getClass ("MTLCaptureDescriptor");
	__xamarin_class_map [1188].handle = objc_getClass ("MTLCaptureManager");
	__xamarin_class_map [1189].handle = objc_getClass ("Microsoft_macOS__Metal_MTLCaptureScope");
	__xamarin_class_map [1190].handle = objc_getClass ("MTLCommandBufferDescriptor");
	__xamarin_class_map [1191].handle = objc_getClass ("MTLCompileOptions");
	__xamarin_class_map [1192].handle = objc_getClass ("MTLComputePassDescriptor");
	__xamarin_class_map [1193].handle = objc_getClass ("MTLComputePassSampleBufferAttachmentDescriptor");
	__xamarin_class_map [1194].handle = objc_getClass ("MTLComputePipelineDescriptor");
	__xamarin_class_map [1195].handle = objc_getClass ("MTLComputePipelineReflection");
	__xamarin_class_map [1196].handle = objc_getClass ("MTLCounterSampleBufferDescriptor");
	__xamarin_class_map [1197].handle = objc_getClass ("MTLDepthStencilDescriptor");
	__xamarin_class_map [1198].handle = objc_getClass ("Microsoft_macOS__Metal_MTLDrawable");
	__xamarin_class_map [1199].handle = objc_getClass ("MTLFunctionConstant");
	__xamarin_class_map [1200].handle = objc_getClass ("MTLFunctionConstantValues");
	__xamarin_class_map [1201].handle = objc_getClass ("MTLFunctionDescriptor");
	__xamarin_class_map [1202].handle = objc_getClass ("MTLFunctionStitchingFunctionNode");
	__xamarin_class_map [1203].handle = objc_getClass ("MTLFunctionStitchingGraph");
	__xamarin_class_map [1204].handle = objc_getClass ("MTLFunctionStitchingInputNode");
	__xamarin_class_map [1205].handle = objc_getClass ("MTLHeapDescriptor");
	__xamarin_class_map [1206].handle = objc_getClass ("MTLIndirectCommandBufferDescriptor");
	__xamarin_class_map [1207].handle = objc_getClass ("MTLInstanceAccelerationStructureDescriptor");
	__xamarin_class_map [1208].handle = objc_getClass ("MTLIntersectionFunctionDescriptor");
	__xamarin_class_map [1209].handle = objc_getClass ("MTLIntersectionFunctionTableDescriptor");
	__xamarin_class_map [1210].handle = objc_getClass ("MTLLinkedFunctions");
	__xamarin_class_map [1211].handle = objc_getClass ("MTLMotionKeyframeData");
	__xamarin_class_map [1212].handle = objc_getClass ("MTLPipelineBufferDescriptor");
	__xamarin_class_map [1213].handle = objc_getClass ("MTLPointerType");
	__xamarin_class_map [1214].handle = objc_getClass ("MTLPrimitiveAccelerationStructureDescriptor");
	__xamarin_class_map [1215].handle = objc_getClass ("MTLRasterizationRateLayerArray");
	__xamarin_class_map [1216].handle = objc_getClass ("MTLRasterizationRateLayerDescriptor");
	__xamarin_class_map [1217].handle = objc_getClass ("MTLRasterizationRateMapDescriptor");
	__xamarin_class_map [1218].handle = objc_getClass ("MTLRasterizationRateSampleArray");
	__xamarin_class_map [1219].handle = objc_getClass ("MTLRenderPassAttachmentDescriptor");
	__xamarin_class_map [1220].handle = objc_getClass ("MTLRenderPassColorAttachmentDescriptor");
	__xamarin_class_map [1221].handle = objc_getClass ("MTLRenderPassDepthAttachmentDescriptor");
	__xamarin_class_map [1222].handle = objc_getClass ("MTLRenderPassSampleBufferAttachmentDescriptor");
	__xamarin_class_map [1223].handle = objc_getClass ("MTLRenderPassStencilAttachmentDescriptor");
	__xamarin_class_map [1224].handle = objc_getClass ("MTLRenderPipelineColorAttachmentDescriptor");
	__xamarin_class_map [1225].handle = objc_getClass ("MTLRenderPipelineDescriptor");
	__xamarin_class_map [1226].handle = objc_getClass ("MTLRenderPipelineFunctionsDescriptor");
	__xamarin_class_map [1227].handle = objc_getClass ("MTLRenderPipelineReflection");
	__xamarin_class_map [1228].handle = objc_getClass ("MTLResourceStatePassDescriptor");
	__xamarin_class_map [1229].handle = objc_getClass ("MTLResourceStatePassSampleBufferAttachmentDescriptor");
	__xamarin_class_map [1230].handle = objc_getClass ("MTLSamplerDescriptor");
	__xamarin_class_map [1231].handle = objc_getClass ("MTLSharedEventHandle");
	__xamarin_class_map [1232].handle = objc_getClass ("MTLSharedEventListener");
	__xamarin_class_map [1233].handle = objc_getClass ("MTLSharedTextureHandle");
	__xamarin_class_map [1234].handle = objc_getClass ("MTLStageInputOutputDescriptor");
	__xamarin_class_map [1235].handle = objc_getClass ("MTLStencilDescriptor");
	__xamarin_class_map [1236].handle = objc_getClass ("MTLStitchedLibraryDescriptor");
	__xamarin_class_map [1237].handle = objc_getClass ("MTLStructMember");
	__xamarin_class_map [1238].handle = objc_getClass ("MTLStructType");
	__xamarin_class_map [1239].handle = objc_getClass ("MTLTextureDescriptor");
	__xamarin_class_map [1240].handle = objc_getClass ("MTLTextureReferenceType");
	__xamarin_class_map [1241].handle = objc_getClass ("MTLTileRenderPipelineColorAttachmentDescriptor");
	__xamarin_class_map [1242].handle = objc_getClass ("MTLTileRenderPipelineColorAttachmentDescriptorArray");
	__xamarin_class_map [1243].handle = objc_getClass ("MTLTileRenderPipelineDescriptor");
	__xamarin_class_map [1244].handle = objc_getClass ("MTLVertexAttribute");
	__xamarin_class_map [1245].handle = objc_getClass ("MTLVertexAttributeDescriptor");
	__xamarin_class_map [1246].handle = objc_getClass ("MTLVertexBufferLayoutDescriptor");
	__xamarin_class_map [1247].handle = objc_getClass ("MTLVisibleFunctionTableDescriptor");
	__xamarin_class_map [1248].handle = objc_getClass ("MPNowPlayingInfoCenter");
	__xamarin_class_map [1249].handle = objc_getClass ("MPRemoteCommandEvent");
	__xamarin_class_map [1250].handle = objc_getClass ("MPChangeLanguageOptionCommandEvent");
	__xamarin_class_map [1251].handle = objc_getClass ("MPRemoteCommand");
	__xamarin_class_map [1252].handle = objc_getClass ("MPChangePlaybackPositionCommand");
	__xamarin_class_map [1253].handle = objc_getClass ("MPChangePlaybackPositionCommandEvent");
	__xamarin_class_map [1254].handle = objc_getClass ("MPChangePlaybackRateCommand");
	__xamarin_class_map [1255].handle = objc_getClass ("MPChangePlaybackRateCommandEvent");
	__xamarin_class_map [1256].handle = objc_getClass ("MPChangeRepeatModeCommand");
	__xamarin_class_map [1257].handle = objc_getClass ("MPChangeRepeatModeCommandEvent");
	__xamarin_class_map [1258].handle = objc_getClass ("MPChangeShuffleModeCommand");
	__xamarin_class_map [1259].handle = objc_getClass ("MPChangeShuffleModeCommandEvent");
	__xamarin_class_map [1260].handle = objc_getClass ("MPContentItem");
	__xamarin_class_map [1261].handle = objc_getClass ("MPFeedbackCommand");
	__xamarin_class_map [1262].handle = objc_getClass ("MPFeedbackCommandEvent");
	__xamarin_class_map [1263].handle = objc_getClass ("MPMediaItem");
	__xamarin_class_map [1264].handle = objc_getClass ("MPMediaItemArtwork");
	__xamarin_class_map [1265].handle = objc_getClass ("MPNowPlayingInfoLanguageOption");
	__xamarin_class_map [1266].handle = objc_getClass ("MPNowPlayingInfoLanguageOptionGroup");
	__xamarin_class_map [1267].handle = objc_getClass ("MPRatingCommand");
	__xamarin_class_map [1268].handle = objc_getClass ("MPRatingCommandEvent");
	__xamarin_class_map [1269].handle = objc_getClass ("MPRemoteCommandCenter");
	__xamarin_class_map [1270].handle = objc_getClass ("MPSeekCommandEvent");
	__xamarin_class_map [1271].handle = objc_getClass ("MPSkipIntervalCommandEvent");
	__xamarin_class_map [1272].handle = objc_getClass ("MKShape");
	__xamarin_class_map [1273].handle = objc_getClass ("MKMultiPoint");
	__xamarin_class_map [1274].handle = objc_getClass ("MKPolyline");
	__xamarin_class_map [1275].handle = objc_getClass ("MKGeodesicPolyline");
	__xamarin_class_map [1276].handle = objc_getClass ("MKMapItem");
	__xamarin_class_map [1277].handle = objc_getClass ("MKOverlayRenderer");
	__xamarin_class_map [1278].handle = objc_getClass ("MKPolygon");
	__xamarin_class_map [1279].handle = objc_getClass ("Microsoft_macOS__MapKit_MKAnnotation");
	__xamarin_class_map [1280].handle = objc_getClass ("MKAnnotationView");
	__xamarin_class_map [1281].handle = objc_getClass ("MKCircle");
	__xamarin_class_map [1282].handle = objc_getClass ("MKOverlayPathRenderer");
	__xamarin_class_map [1283].handle = objc_getClass ("MKCircleRenderer");
	__xamarin_class_map [1284].handle = objc_getClass ("MKClusterAnnotation");
	__xamarin_class_map [1285].handle = objc_getClass ("MKCompassButton");
	__xamarin_class_map [1286].handle = objc_getClass ("MKDirectionsRequest");
	__xamarin_class_map [1287].handle = objc_getClass ("MKDirectionsResponse");
	__xamarin_class_map [1288].handle = objc_getClass ("NSFormatter");
	__xamarin_class_map [1289].handle = objc_getClass ("MKDistanceFormatter");
	__xamarin_class_map [1290].handle = objc_getClass ("MKETAResponse");
	__xamarin_class_map [1291].handle = objc_getClass ("MKGeoJSONDecoder");
	__xamarin_class_map [1292].handle = objc_getClass ("MKGeoJSONFeature");
	__xamarin_class_map [1293].handle = objc_getClass ("MKMapConfiguration");
	__xamarin_class_map [1294].handle = objc_getClass ("MKHybridMapConfiguration");
	__xamarin_class_map [1295].handle = objc_getClass ("MKImageryMapConfiguration");
	__xamarin_class_map [1296].handle = objc_getClass ("MKLocalPointsOfInterestRequest");
	__xamarin_class_map [1297].handle = objc_getClass ("MKLocalSearchCompleter");
	__xamarin_class_map [1298].handle = objc_getClass ("Microsoft_macOS__MapKit_MKLocalSearchCompleterDelegate");
	__xamarin_class_map [1299].handle = objc_getClass ("MKLocalSearchCompletion");
	__xamarin_class_map [1300].handle = objc_getClass ("MKLocalSearchRequest");
	__xamarin_class_map [1301].handle = objc_getClass ("MKLocalSearchResponse");
	__xamarin_class_map [1302].handle = objc_getClass ("MKLookAroundScene");
	__xamarin_class_map [1303].handle = objc_getClass ("MKLookAroundSnapshot");
	__xamarin_class_map [1304].handle = objc_getClass ("MKLookAroundSnapshotOptions");
	__xamarin_class_map [1305].handle = objc_getClass ("MKLookAroundViewController");
	__xamarin_class_map [1306].handle = objc_getClass ("Microsoft_macOS__MapKit_MKLookAroundViewControllerDelegate");
	__xamarin_class_map [1307].handle = objc_getClass ("MKMapCamera");
	__xamarin_class_map [1308].handle = objc_getClass ("MKMapCameraBoundary");
	__xamarin_class_map [1309].handle = objc_getClass ("MKMapCameraZoomRange");
	__xamarin_class_map [1310].handle = objc_getClass ("MKMapSnapshot");
	__xamarin_class_map [1311].handle = objc_getClass ("MKMapSnapshotOptions");
	__xamarin_class_map [1312].handle = objc_getClass ("Microsoft_macOS__MapKit_MKMapViewDelegate");
	__xamarin_class_map [1313].handle = objc_getClass ("MKMarkerAnnotationView");
	__xamarin_class_map [1314].handle = objc_getClass ("MKMultiPolygon");
	__xamarin_class_map [1315].handle = objc_getClass ("MKMultiPolygonRenderer");
	__xamarin_class_map [1316].handle = objc_getClass ("MKMultiPolyline");
	__xamarin_class_map [1317].handle = objc_getClass ("MKMultiPolylineRenderer");
	__xamarin_class_map [1318].handle = objc_getClass ("Microsoft_macOS__MapKit_MKOverlay");
	__xamarin_class_map [1319].handle = objc_getClass ("MKPinAnnotationView");
	__xamarin_class_map [1320].handle = objc_getClass ("MKPitchControl");
	__xamarin_class_map [1321].handle = objc_getClass ("CLPlacemark");
	__xamarin_class_map [1322].handle = objc_getClass ("MKPlacemark");
	__xamarin_class_map [1323].handle = objc_getClass ("MKPointAnnotation");
	__xamarin_class_map [1324].handle = objc_getClass ("MKPolygonRenderer");
	__xamarin_class_map [1325].handle = objc_getClass ("MKPolylineRenderer");
	__xamarin_class_map [1326].handle = objc_getClass ("MKRoute");
	__xamarin_class_map [1327].handle = objc_getClass ("MKRouteStep");
	__xamarin_class_map [1328].handle = objc_getClass ("MKStandardMapConfiguration");
	__xamarin_class_map [1329].handle = objc_getClass ("MKTileOverlay");
	__xamarin_class_map [1330].handle = objc_getClass ("MKTileOverlayRenderer");
	__xamarin_class_map [1331].handle = objc_getClass ("MKUserLocation");
	__xamarin_class_map [1332].handle = objc_getClass ("MKUserLocationView");
	__xamarin_class_map [1333].handle = objc_getClass ("MKZoomControl");
	__xamarin_class_map [1334].handle = objc_getClass ("MLCActivationDescriptor");
	__xamarin_class_map [1335].handle = objc_getClass ("MLCLayer");
	__xamarin_class_map [1336].handle = objc_getClass ("MLCActivationLayer");
	__xamarin_class_map [1337].handle = objc_getClass ("MLCOptimizer");
	__xamarin_class_map [1338].handle = objc_getClass ("MLCAdamOptimizer");
	__xamarin_class_map [1339].handle = objc_getClass ("MLCAdamWOptimizer");
	__xamarin_class_map [1340].handle = objc_getClass ("MLCArithmeticLayer");
	__xamarin_class_map [1341].handle = objc_getClass ("MLCBatchNormalizationLayer");
	__xamarin_class_map [1342].handle = objc_getClass ("MLCComparisonLayer");
	__xamarin_class_map [1343].handle = objc_getClass ("MLCConcatenationLayer");
	__xamarin_class_map [1344].handle = objc_getClass ("MLCConvolutionLayer");
	__xamarin_class_map [1345].handle = objc_getClass ("MLCDevice");
	__xamarin_class_map [1346].handle = objc_getClass ("MLCDropoutLayer");
	__xamarin_class_map [1347].handle = objc_getClass ("MLCEmbeddingDescriptor");
	__xamarin_class_map [1348].handle = objc_getClass ("MLCEmbeddingLayer");
	__xamarin_class_map [1349].handle = objc_getClass ("MLCFullyConnectedLayer");
	__xamarin_class_map [1350].handle = objc_getClass ("MLCGatherLayer");
	__xamarin_class_map [1351].handle = objc_getClass ("MLCGramMatrixLayer");
	__xamarin_class_map [1352].handle = objc_getClass ("MLCGroupNormalizationLayer");
	__xamarin_class_map [1353].handle = objc_getClass ("MLCInstanceNormalizationLayer");
	__xamarin_class_map [1354].handle = objc_getClass ("MLCLossDescriptor");
	__xamarin_class_map [1355].handle = objc_getClass ("MLCLossLayer");
	__xamarin_class_map [1356].handle = objc_getClass ("MLCLSTMDescriptor");
	__xamarin_class_map [1357].handle = objc_getClass ("MLCLSTMLayer");
	__xamarin_class_map [1358].handle = objc_getClass ("MLCMatMulDescriptor");
	__xamarin_class_map [1359].handle = objc_getClass ("MLCMatMulLayer");
	__xamarin_class_map [1360].handle = objc_getClass ("MLCMultiheadAttentionDescriptor");
	__xamarin_class_map [1361].handle = objc_getClass ("MLCMultiheadAttentionLayer");
	__xamarin_class_map [1362].handle = objc_getClass ("MLCOptimizerDescriptor");
	__xamarin_class_map [1363].handle = objc_getClass ("MLCPlatform");
	__xamarin_class_map [1364].handle = objc_getClass ("MLCPoolingLayer");
	__xamarin_class_map [1365].handle = objc_getClass ("MLCRMSPropOptimizer");
	__xamarin_class_map [1366].handle = objc_getClass ("MLCScatterLayer");
	__xamarin_class_map [1367].handle = objc_getClass ("MLCSelectionLayer");
	__xamarin_class_map [1368].handle = objc_getClass ("MLCSGDOptimizer");
	__xamarin_class_map [1369].handle = objc_getClass ("MLCSoftmaxLayer");
	__xamarin_class_map [1370].handle = objc_getClass ("MLCTensorData");
	__xamarin_class_map [1371].handle = objc_getClass ("MLCTensorOptimizerDeviceData");
	__xamarin_class_map [1372].handle = objc_getClass ("MLCTensorParameter");
	__xamarin_class_map [1373].handle = objc_getClass ("MLCYOLOLossDescriptor");
	__xamarin_class_map [1374].handle = objc_getClass ("MLCYOLOLossLayer");
	__xamarin_class_map [1375].handle = objc_getClass ("JSContext");
	__xamarin_class_map [1376].handle = objc_getClass ("JSValue");
	__xamarin_class_map [1377].handle = objc_getClass ("Microsoft_macOS__JavaScriptCore_JSExport");
	__xamarin_class_map [1378].handle = objc_getClass ("JSManagedValue");
	__xamarin_class_map [1379].handle = objc_getClass ("JSVirtualMachine");
	__xamarin_class_map [1380].handle = objc_getClass ("INCallRecord");
	__xamarin_class_map [1381].handle = objc_getClass ("INIntentResolutionResult");
	__xamarin_class_map [1382].handle = objc_getClass ("INCallRecordTypeResolutionResult");
	__xamarin_class_map [1383].handle = objc_getClass ("INSpeakableString");
	__xamarin_class_map [1384].handle = objc_getClass ("INAirline");
	__xamarin_class_map [1385].handle = objc_getClass ("INAirport");
	__xamarin_class_map [1386].handle = objc_getClass ("INAirportGate");
	__xamarin_class_map [1387].handle = objc_getClass ("INIntent");
	__xamarin_class_map [1388].handle = objc_getClass ("INAnswerCallIntent");
	__xamarin_class_map [1389].handle = objc_getClass ("INIntentResponse");
	__xamarin_class_map [1390].handle = objc_getClass ("INAnswerCallIntentResponse");
	__xamarin_class_map [1391].handle = objc_getClass ("INReservation");
	__xamarin_class_map [1392].handle = objc_getClass ("INBoatReservation");
	__xamarin_class_map [1393].handle = objc_getClass ("INBoatTrip");
	__xamarin_class_map [1394].handle = objc_getClass ("INBooleanResolutionResult");
	__xamarin_class_map [1395].handle = objc_getClass ("INBusReservation");
	__xamarin_class_map [1396].handle = objc_getClass ("INBusTrip");
	__xamarin_class_map [1397].handle = objc_getClass ("INCallCapabilityResolutionResult");
	__xamarin_class_map [1398].handle = objc_getClass ("INCallDestinationTypeResolutionResult");
	__xamarin_class_map [1399].handle = objc_getClass ("INCallGroup");
	__xamarin_class_map [1400].handle = objc_getClass ("INCallRecordFilter");
	__xamarin_class_map [1401].handle = objc_getClass ("INCallRecordResolutionResult");
	__xamarin_class_map [1402].handle = objc_getClass ("INCallRecordTypeOptionsResolutionResult");
	__xamarin_class_map [1403].handle = objc_getClass ("INCurrencyAmount");
	__xamarin_class_map [1404].handle = objc_getClass ("INDateComponentsRange");
	__xamarin_class_map [1405].handle = objc_getClass ("INDateComponentsResolutionResult");
	__xamarin_class_map [1406].handle = objc_getClass ("INEnergyResolutionResult");
	__xamarin_class_map [1407].handle = objc_getClass ("INEnumResolutionResult");
	__xamarin_class_map [1408].handle = objc_getClass ("INExtension");
	__xamarin_class_map [1409].handle = objc_getClass ("INFile");
	__xamarin_class_map [1410].handle = objc_getClass ("INFileResolutionResult");
	__xamarin_class_map [1411].handle = objc_getClass ("INFlight");
	__xamarin_class_map [1412].handle = objc_getClass ("INFlightReservation");
	__xamarin_class_map [1413].handle = objc_getClass ("INFocusStatus");
	__xamarin_class_map [1414].handle = objc_getClass ("INGetReservationDetailsIntent");
	__xamarin_class_map [1415].handle = objc_getClass ("INGetReservationDetailsIntentResponse");
	__xamarin_class_map [1416].handle = objc_getClass ("INHangUpCallIntent");
	__xamarin_class_map [1417].handle = objc_getClass ("INHangUpCallIntentResponse");
	__xamarin_class_map [1418].handle = objc_getClass ("INImage");
	__xamarin_class_map [1419].handle = objc_getClass ("INIntegerResolutionResult");
	__xamarin_class_map [1420].handle = objc_getClass ("INIntentDonationMetadata");
	__xamarin_class_map [1421].handle = objc_getClass ("INLengthResolutionResult");
	__xamarin_class_map [1422].handle = objc_getClass ("INLodgingReservation");
	__xamarin_class_map [1423].handle = objc_getClass ("INMassResolutionResult");
	__xamarin_class_map [1424].handle = objc_getClass ("INObject");
	__xamarin_class_map [1425].handle = objc_getClass ("INObjectCollection");
	__xamarin_class_map [1426].handle = objc_getClass ("INObjectResolutionResult");
	__xamarin_class_map [1427].handle = objc_getClass ("INObjectSection");
	__xamarin_class_map [1428].handle = objc_getClass ("INOutgoingMessageTypeResolutionResult");
	__xamarin_class_map [1429].handle = objc_getClass ("INPaymentMethod");
	__xamarin_class_map [1430].handle = objc_getClass ("INPaymentMethodResolutionResult");
	__xamarin_class_map [1431].handle = objc_getClass ("INPersonHandle");
	__xamarin_class_map [1432].handle = objc_getClass ("INPersonResolutionResult");
	__xamarin_class_map [1433].handle = objc_getClass ("INPlacemarkResolutionResult");
	__xamarin_class_map [1434].handle = objc_getClass ("INRentalCar");
	__xamarin_class_map [1435].handle = objc_getClass ("INRentalCarReservation");
	__xamarin_class_map [1436].handle = objc_getClass ("INReservationAction");
	__xamarin_class_map [1437].handle = objc_getClass ("INRestaurantReservation");
	__xamarin_class_map [1438].handle = objc_getClass ("INSeat");
	__xamarin_class_map [1439].handle = objc_getClass ("INSendMessageAttachment");
	__xamarin_class_map [1440].handle = objc_getClass ("INSendMessageIntent");
	__xamarin_class_map [1441].handle = objc_getClass ("INSendMessageIntentDonationMetadata");
	__xamarin_class_map [1442].handle = objc_getClass ("INSendMessageIntentResponse");
	__xamarin_class_map [1443].handle = objc_getClass ("INSendMessageRecipientResolutionResult");
	__xamarin_class_map [1444].handle = objc_getClass ("INShareFocusStatusIntent");
	__xamarin_class_map [1445].handle = objc_getClass ("INShareFocusStatusIntentResponse");
	__xamarin_class_map [1446].handle = objc_getClass ("INShortcut");
	__xamarin_class_map [1447].handle = objc_getClass ("INSpeedResolutionResult");
	__xamarin_class_map [1448].handle = objc_getClass ("INStartCallCallRecordToCallBackResolutionResult");
	__xamarin_class_map [1449].handle = objc_getClass ("INStartCallIntent");
	__xamarin_class_map [1450].handle = objc_getClass ("INStringResolutionResult");
	__xamarin_class_map [1451].handle = objc_getClass ("INTemperatureResolutionResult");
	__xamarin_class_map [1452].handle = objc_getClass ("INTimeIntervalResolutionResult");
	__xamarin_class_map [1453].handle = objc_getClass ("INTrainReservation");
	__xamarin_class_map [1454].handle = objc_getClass ("INTrainTrip");
	__xamarin_class_map [1455].handle = objc_getClass ("INURLResolutionResult");
	__xamarin_class_map [1456].handle = objc_getClass ("INVoiceShortcut");
	__xamarin_class_map [1457].handle = objc_getClass ("INVolumeResolutionResult");
	__xamarin_class_map [1458].handle = objc_getClass ("Microsoft_macOS__ImageKit_IKCameraDeviceViewDelegate");
	__xamarin_class_map [1459].handle = objc_getClass ("Microsoft_macOS__ImageKit_IKDeviceBrowserViewDelegate");
	__xamarin_class_map [1460].handle = objc_getClass ("IKFilterBrowserView");
	__xamarin_class_map [1461].handle = objc_getClass ("Microsoft_macOS__ImageKit_IKFilterCustomUIProvider");
	__xamarin_class_map [1462].handle = objc_getClass ("IKFilterUIView");
	__xamarin_class_map [1463].handle = objc_getClass ("IKImageBrowserCell");
	__xamarin_class_map [1464].handle = objc_getClass ("Microsoft_macOS__ImageKit_IKImageBrowserDataSource");
	__xamarin_class_map [1465].handle = objc_getClass ("Microsoft_macOS__ImageKit_IKImageBrowserDelegate");
	__xamarin_class_map [1466].handle = objc_getClass ("Microsoft_macOS__ImageKit_IKImageBrowserItem");
	__xamarin_class_map [1467].handle = objc_getClass ("IKImageEditPanel");
	__xamarin_class_map [1468].handle = objc_getClass ("Microsoft_macOS__ImageKit_IKImageEditPanelDataSource");
	__xamarin_class_map [1469].handle = objc_getClass ("IKImageView");
	__xamarin_class_map [1470].handle = objc_getClass ("IKPictureTaker");
	__xamarin_class_map [1471].handle = objc_getClass ("Microsoft_macOS__ImageKit_IKSaveOptionsDelegate");
	__xamarin_class_map [1472].handle = objc_getClass ("Microsoft_macOS__ImageKit_IKScannerDeviceViewDelegate");
	__xamarin_class_map [1473].handle = objc_getClass ("IKSlideshow");
	__xamarin_class_map [1474].handle = objc_getClass ("Microsoft_macOS__ImageKit_IKSlideshowDataSource");
	__xamarin_class_map [1475].handle = objc_getClass ("Microsoft_macOS__ImageCaptureCore_ICCameraDeviceDelegate");
	__xamarin_class_map [1476].handle = objc_getClass ("Microsoft_macOS__ImageCaptureCore_ICCameraDeviceDownloadDelegate");
	__xamarin_class_map [1477].handle = objc_getClass ("ICCameraItem");
	__xamarin_class_map [1478].handle = objc_getClass ("ICCameraFile");
	__xamarin_class_map [1479].handle = objc_getClass ("ICCameraFolder");
	__xamarin_class_map [1480].handle = objc_getClass ("ICDevice");
	__xamarin_class_map [1481].handle = objc_getClass ("ICDeviceBrowser");
	__xamarin_class_map [1482].handle = objc_getClass ("Microsoft_macOS__ImageCaptureCore_ICDeviceBrowserDelegate");
	__xamarin_class_map [1483].handle = objc_getClass ("Microsoft_macOS__ImageCaptureCore_ICDeviceDelegate");
	__xamarin_class_map [1484].handle = objc_getClass ("ICScannerBandData");
	__xamarin_class_map [1485].handle = objc_getClass ("ICScannerDevice");
	__xamarin_class_map [1486].handle = objc_getClass ("Microsoft_macOS__ImageCaptureCore_ICScannerDeviceDelegate");
	__xamarin_class_map [1487].handle = objc_getClass ("ICScannerFeature");
	__xamarin_class_map [1488].handle = objc_getClass ("ICScannerFeatureBoolean");
	__xamarin_class_map [1489].handle = objc_getClass ("ICScannerFeatureEnumeration");
	__xamarin_class_map [1490].handle = objc_getClass ("ICScannerFeatureRange");
	__xamarin_class_map [1491].handle = objc_getClass ("ICScannerFeatureTemplate");
	__xamarin_class_map [1492].handle = objc_getClass ("ICScannerFunctionalUnit");
	__xamarin_class_map [1493].handle = objc_getClass ("ICScannerFunctionalUnitDocumentFeeder");
	__xamarin_class_map [1494].handle = objc_getClass ("ICScannerFunctionalUnitFlatbed");
	__xamarin_class_map [1495].handle = objc_getClass ("ICScannerFunctionalUnitNegativeTransparency");
	__xamarin_class_map [1496].handle = objc_getClass ("ICScannerFunctionalUnitPositiveTransparency");
	__xamarin_class_map [1497].handle = objc_getClass ("IOSurface");
	__xamarin_class_map [1498].handle = objc_getClass ("HKQuery");
	__xamarin_class_map [1499].handle = objc_getClass ("HKAnchoredObjectQuery");
	__xamarin_class_map [1500].handle = objc_getClass ("HKObjectType");
	__xamarin_class_map [1501].handle = objc_getClass ("HKSampleType");
	__xamarin_class_map [1502].handle = objc_getClass ("HKQuantityType");
	__xamarin_class_map [1503].handle = objc_getClass ("HKCategoryType");
	__xamarin_class_map [1504].handle = objc_getClass ("HKCharacteristicType");
	__xamarin_class_map [1505].handle = objc_getClass ("HKCorrelationType");
	__xamarin_class_map [1506].handle = objc_getClass ("HKDocumentType");
	__xamarin_class_map [1507].handle = objc_getClass ("HKSampleQuery");
	__xamarin_class_map [1508].handle = objc_getClass ("HKUnit");
	__xamarin_class_map [1509].handle = objc_getClass ("HKActivityMoveModeObject");
	__xamarin_class_map [1510].handle = objc_getClass ("HKActivitySummary");
	__xamarin_class_map [1511].handle = objc_getClass ("HKActivitySummaryQuery");
	__xamarin_class_map [1512].handle = objc_getClass ("HKActivitySummaryType");
	__xamarin_class_map [1513].handle = objc_getClass ("HKAttachment");
	__xamarin_class_map [1514].handle = objc_getClass ("HKObject");
	__xamarin_class_map [1515].handle = objc_getClass ("HKSample");
	__xamarin_class_map [1516].handle = objc_getClass ("HKAudiogramSample");
	__xamarin_class_map [1517].handle = objc_getClass ("HKAudiogramSampleType");
	__xamarin_class_map [1518].handle = objc_getClass ("HKAudiogramSensitivityPoint");
	__xamarin_class_map [1519].handle = objc_getClass ("HKBiologicalSexObject");
	__xamarin_class_map [1520].handle = objc_getClass ("HKBloodTypeObject");
	__xamarin_class_map [1521].handle = objc_getClass ("HKCategorySample");
	__xamarin_class_map [1522].handle = objc_getClass ("HKCDADocument");
	__xamarin_class_map [1523].handle = objc_getClass ("HKDocumentSample");
	__xamarin_class_map [1524].handle = objc_getClass ("HKCDADocumentSample");
	__xamarin_class_map [1525].handle = objc_getClass ("HKClinicalRecord");
	__xamarin_class_map [1526].handle = objc_getClass ("HKClinicalType");
	__xamarin_class_map [1527].handle = objc_getClass ("HKLensSpecification");
	__xamarin_class_map [1528].handle = objc_getClass ("HKContactsLensSpecification");
	__xamarin_class_map [1529].handle = objc_getClass ("HKVisionPrescription");
	__xamarin_class_map [1530].handle = objc_getClass ("HKContactsPrescription");
	__xamarin_class_map [1531].handle = objc_getClass ("HKCorrelation");
	__xamarin_class_map [1532].handle = objc_getClass ("HKCorrelationQuery");
	__xamarin_class_map [1533].handle = objc_getClass ("HKQuantitySample");
	__xamarin_class_map [1534].handle = objc_getClass ("HKCumulativeQuantitySample");
	__xamarin_class_map [1535].handle = objc_getClass ("HKCumulativeQuantitySeriesSample");
	__xamarin_class_map [1536].handle = objc_getClass ("HKDeletedObject");
	__xamarin_class_map [1537].handle = objc_getClass ("HKDevice");
	__xamarin_class_map [1538].handle = objc_getClass ("HKDiscreteQuantitySample");
	__xamarin_class_map [1539].handle = objc_getClass ("HKDocumentQuery");
	__xamarin_class_map [1540].handle = objc_getClass ("HKElectrocardiogram");
	__xamarin_class_map [1541].handle = objc_getClass ("HKElectrocardiogramQuery");
	__xamarin_class_map [1542].handle = objc_getClass ("HKElectrocardiogramType");
	__xamarin_class_map [1543].handle = objc_getClass ("HKElectrocardiogramVoltageMeasurement");
	__xamarin_class_map [1544].handle = objc_getClass ("HKFHIRResource");
	__xamarin_class_map [1545].handle = objc_getClass ("HKFHIRVersion");
	__xamarin_class_map [1546].handle = objc_getClass ("HKFitzpatrickSkinTypeObject");
	__xamarin_class_map [1547].handle = objc_getClass ("HKGlassesLensSpecification");
	__xamarin_class_map [1548].handle = objc_getClass ("HKGlassesPrescription");
	__xamarin_class_map [1549].handle = objc_getClass ("HKHeartbeatSeriesQuery");
	__xamarin_class_map [1550].handle = objc_getClass ("HKSeriesSample");
	__xamarin_class_map [1551].handle = objc_getClass ("HKHeartbeatSeriesSample");
	__xamarin_class_map [1552].handle = objc_getClass ("HKWorkoutBuilder");
	__xamarin_class_map [1553].handle = objc_getClass ("HKLiveWorkoutBuilder");
	__xamarin_class_map [1554].handle = objc_getClass ("Microsoft_macOS__HealthKit_HKLiveWorkoutBuilderDelegate");
	__xamarin_class_map [1555].handle = objc_getClass ("HKLiveWorkoutDataSource");
	__xamarin_class_map [1556].handle = objc_getClass ("HKObserverQuery");
	__xamarin_class_map [1557].handle = objc_getClass ("HKPrescriptionType");
	__xamarin_class_map [1558].handle = objc_getClass ("HKQuantity");
	__xamarin_class_map [1559].handle = objc_getClass ("HKQuantitySeriesSampleQuery");
	__xamarin_class_map [1560].handle = objc_getClass ("HKQueryAnchor");
	__xamarin_class_map [1561].handle = objc_getClass ("HKQueryDescriptor");
	__xamarin_class_map [1562].handle = objc_getClass ("HKSeriesBuilder");
	__xamarin_class_map [1563].handle = objc_getClass ("HKSeriesType");
	__xamarin_class_map [1564].handle = objc_getClass ("HKSource");
	__xamarin_class_map [1565].handle = objc_getClass ("HKSourceQuery");
	__xamarin_class_map [1566].handle = objc_getClass ("HKSourceRevision");
	__xamarin_class_map [1567].handle = objc_getClass ("HKStatistics");
	__xamarin_class_map [1568].handle = objc_getClass ("HKStatisticsCollection");
	__xamarin_class_map [1569].handle = objc_getClass ("HKStatisticsCollectionQuery");
	__xamarin_class_map [1570].handle = objc_getClass ("HKStatisticsQuery");
	__xamarin_class_map [1571].handle = objc_getClass ("HKVerifiableClinicalRecord");
	__xamarin_class_map [1572].handle = objc_getClass ("HKVerifiableClinicalRecordSubject");
	__xamarin_class_map [1573].handle = objc_getClass ("HKVisionPrism");
	__xamarin_class_map [1574].handle = objc_getClass ("HKWheelchairUseObject");
	__xamarin_class_map [1575].handle = objc_getClass ("HKWorkout");
	__xamarin_class_map [1576].handle = objc_getClass ("HKWorkoutActivity");
	__xamarin_class_map [1577].handle = objc_getClass ("HKWorkoutConfiguration");
	__xamarin_class_map [1578].handle = objc_getClass ("HKWorkoutEvent");
	__xamarin_class_map [1579].handle = objc_getClass ("HKWorkoutRoute");
	__xamarin_class_map [1580].handle = objc_getClass ("HKWorkoutRouteQuery");
	__xamarin_class_map [1581].handle = objc_getClass ("HKWorkoutSession");
	__xamarin_class_map [1582].handle = objc_getClass ("Microsoft_macOS__HealthKit_HKWorkoutSessionDelegate");
	__xamarin_class_map [1583].handle = objc_getClass ("HKWorkoutType");
	__xamarin_class_map [1584].handle = objc_getClass ("GKBehavior");
	__xamarin_class_map [1585].handle = objc_getClass ("GKComponentSystem");
	__xamarin_class_map [1586].handle = objc_getClass ("GKCompositeBehavior");
	__xamarin_class_map [1587].handle = objc_getClass ("GKEntity");
	__xamarin_class_map [1588].handle = objc_getClass ("GKGraph");
	__xamarin_class_map [1589].handle = objc_getClass ("GKGridGraph");
	__xamarin_class_map [1590].handle = objc_getClass ("GKObstacleGraph");
	__xamarin_class_map [1591].handle = objc_getClass ("GKPath");
	__xamarin_class_map [1592].handle = objc_getClass ("GKObstacle");
	__xamarin_class_map [1593].handle = objc_getClass ("GKPolygonObstacle");
	__xamarin_class_map [1594].handle = objc_getClass ("GKState");
	__xamarin_class_map [1595].handle = objc_getClass ("GKStateMachine");
	__xamarin_class_map [1596].handle = objc_getClass ("GKComponent");
	__xamarin_class_map [1597].handle = objc_getClass ("GKAgent");
	__xamarin_class_map [1598].handle = objc_getClass ("GKAgent2D");
	__xamarin_class_map [1599].handle = objc_getClass ("GKAgent3D");
	__xamarin_class_map [1600].handle = objc_getClass ("Microsoft_macOS__GameplayKit_GKAgentDelegate");
	__xamarin_class_map [1601].handle = objc_getClass ("GKRandomSource");
	__xamarin_class_map [1602].handle = objc_getClass ("GKARC4RandomSource");
	__xamarin_class_map [1603].handle = objc_getClass ("GKNoiseSource");
	__xamarin_class_map [1604].handle = objc_getClass ("GKCoherentNoiseSource");
	__xamarin_class_map [1605].handle = objc_getClass ("GKBillowNoiseSource");
	__xamarin_class_map [1606].handle = objc_getClass ("GKCheckerboardNoiseSource");
	__xamarin_class_map [1607].handle = objc_getClass ("GKCircleObstacle");
	__xamarin_class_map [1608].handle = objc_getClass ("GKConstantNoiseSource");
	__xamarin_class_map [1609].handle = objc_getClass ("GKCylindersNoiseSource");
	__xamarin_class_map [1610].handle = objc_getClass ("GKDecisionNode");
	__xamarin_class_map [1611].handle = objc_getClass ("GKDecisionTree");
	__xamarin_class_map [1612].handle = objc_getClass ("GKRandomDistribution");
	__xamarin_class_map [1613].handle = objc_getClass ("GKGaussianDistribution");
	__xamarin_class_map [1614].handle = objc_getClass ("GKGoal");
	__xamarin_class_map [1615].handle = objc_getClass ("GKGraphNode");
	__xamarin_class_map [1616].handle = objc_getClass ("GKGraphNode2D");
	__xamarin_class_map [1617].handle = objc_getClass ("GKGraphNode3D");
	__xamarin_class_map [1618].handle = objc_getClass ("GKGridGraphNode");
	__xamarin_class_map [1619].handle = objc_getClass ("GKLinearCongruentialRandomSource");
	__xamarin_class_map [1620].handle = objc_getClass ("GKMersenneTwisterRandomSource");
	__xamarin_class_map [1621].handle = objc_getClass ("GKMeshGraph");
	__xamarin_class_map [1622].handle = objc_getClass ("GKMinmaxStrategist");
	__xamarin_class_map [1623].handle = objc_getClass ("GKMonteCarloStrategist");
	__xamarin_class_map [1624].handle = objc_getClass ("GKNoise");
	__xamarin_class_map [1625].handle = objc_getClass ("GKNoiseMap");
	__xamarin_class_map [1626].handle = objc_getClass ("GKRule");
	__xamarin_class_map [1627].handle = objc_getClass ("GKNSPredicateRule");
	__xamarin_class_map [1628].handle = objc_getClass ("GKOctree");
	__xamarin_class_map [1629].handle = objc_getClass ("GKOctreeNode");
	__xamarin_class_map [1630].handle = objc_getClass ("GKPerlinNoiseSource");
	__xamarin_class_map [1631].handle = objc_getClass ("GKQuadtree");
	__xamarin_class_map [1632].handle = objc_getClass ("GKQuadtreeNode");
	__xamarin_class_map [1633].handle = objc_getClass ("GKRidgedNoiseSource");
	__xamarin_class_map [1634].handle = objc_getClass ("GKRTree");
	__xamarin_class_map [1635].handle = objc_getClass ("GKRuleSystem");
	__xamarin_class_map [1636].handle = objc_getClass ("GKScene");
	__xamarin_class_map [1637].handle = objc_getClass ("GKSCNNodeComponent");
	__xamarin_class_map [1638].handle = objc_getClass ("GKShuffledDistribution");
	__xamarin_class_map [1639].handle = objc_getClass ("GKSKNodeComponent");
	__xamarin_class_map [1640].handle = objc_getClass ("GKSphereObstacle");
	__xamarin_class_map [1641].handle = objc_getClass ("GKSpheresNoiseSource");
	__xamarin_class_map [1642].handle = objc_getClass ("GKVoronoiNoiseSource");
	__xamarin_class_map [1643].handle = objc_getClass ("GKVoiceChat");
	__xamarin_class_map [1644].handle = objc_getClass ("GKTurnBasedExchangeReply");
	__xamarin_class_map [1645].handle = objc_getClass ("GKAccessPoint");
	__xamarin_class_map [1646].handle = objc_getClass ("GKChallenge");
	__xamarin_class_map [1647].handle = objc_getClass ("GKAchievementChallenge");
	__xamarin_class_map [1648].handle = objc_getClass ("Microsoft_macOS__GameKit_GKAchievementViewControllerDelegate");
	__xamarin_class_map [1649].handle = objc_getClass ("GKBasePlayer");
	__xamarin_class_map [1650].handle = objc_getClass ("Microsoft_macOS__GameKit_GKChallengeEventHandlerDelegate");
	__xamarin_class_map [1651].handle = objc_getClass ("Microsoft_macOS__GameKit_GKChallengeListener");
	__xamarin_class_map [1652].handle = objc_getClass ("GKChallengesViewController");
	__xamarin_class_map [1653].handle = objc_getClass ("Microsoft_macOS__GameKit_GKChallengesViewControllerDelegate");
	__xamarin_class_map [1654].handle = objc_getClass ("GKCloudPlayer");
	__xamarin_class_map [1655].handle = objc_getClass ("GKDialogController");
	__xamarin_class_map [1656].handle = objc_getClass ("Microsoft_macOS__GameKit_GKFriendRequestComposeViewControllerDelegate");
	__xamarin_class_map [1657].handle = objc_getClass ("Microsoft_macOS__GameKit_GKGameCenterControllerDelegate");
	__xamarin_class_map [1658].handle = objc_getClass ("GKInvite");
	__xamarin_class_map [1659].handle = objc_getClass ("Microsoft_macOS__GameKit_GKInviteEventListener");
	__xamarin_class_map [1660].handle = objc_getClass ("GKLeaderboardScore");
	__xamarin_class_map [1661].handle = objc_getClass ("Microsoft_macOS__GameKit_GKLeaderboardViewControllerDelegate");
	__xamarin_class_map [1662].handle = objc_getClass ("Microsoft_macOS__GameKit_GKLocalPlayerListener");
	__xamarin_class_map [1663].handle = objc_getClass ("Microsoft_macOS__GameKit_GKMatchDelegate");
	__xamarin_class_map [1664].handle = objc_getClass ("Microsoft_macOS__GameKit_GKMatchmakerViewControllerDelegate");
	__xamarin_class_map [1665].handle = objc_getClass ("GKMatchRequest");
	__xamarin_class_map [1666].handle = objc_getClass ("Microsoft_macOS__GameKit_GKSavedGameListener");
	__xamarin_class_map [1667].handle = objc_getClass ("GKScoreChallenge");
	__xamarin_class_map [1668].handle = objc_getClass ("GKSession");
	__xamarin_class_map [1669].handle = objc_getClass ("Microsoft_macOS__GameKit_GKSessionDelegate");
	__xamarin_class_map [1670].handle = objc_getClass ("GKTurnBasedEventHandler");
	__xamarin_class_map [1671].handle = objc_getClass ("Microsoft_macOS__GameKit_GKTurnBasedEventHandlerDelegate");
	__xamarin_class_map [1672].handle = objc_getClass ("Microsoft_macOS__GameKit_GKTurnBasedEventListener");
	__xamarin_class_map [1673].handle = objc_getClass ("GKTurnBasedMatchmakerViewController");
	__xamarin_class_map [1674].handle = objc_getClass ("Microsoft_macOS__GameKit_GKTurnBasedMatchmakerViewControllerDelegate");
	__xamarin_class_map [1675].handle = objc_getClass ("GKTurnBasedParticipant");
	__xamarin_class_map [1676].handle = objc_getClass ("GCPhysicalInputProfile");
	__xamarin_class_map [1677].handle = objc_getClass ("GCExtendedGamepad");
	__xamarin_class_map [1678].handle = objc_getClass ("GCExtendedGamepadSnapshot");
	__xamarin_class_map [1679].handle = objc_getClass ("GCGamepad");
	__xamarin_class_map [1680].handle = objc_getClass ("GCGamepadSnapshot");
	__xamarin_class_map [1681].handle = objc_getClass ("GCMicroGamepad");
	__xamarin_class_map [1682].handle = objc_getClass ("GCMicroGamepadSnapshot");
	__xamarin_class_map [1683].handle = objc_getClass ("GCColor");
	__xamarin_class_map [1684].handle = objc_getClass ("GCControllerElement");
	__xamarin_class_map [1685].handle = objc_getClass ("GCControllerAxisInput");
	__xamarin_class_map [1686].handle = objc_getClass ("GCControllerButtonInput");
	__xamarin_class_map [1687].handle = objc_getClass ("GCControllerDirectionPad");
	__xamarin_class_map [1688].handle = objc_getClass ("GCControllerTouchpad");
	__xamarin_class_map [1689].handle = objc_getClass ("GCDeviceBattery");
	__xamarin_class_map [1690].handle = objc_getClass ("GCDeviceCursor");
	__xamarin_class_map [1691].handle = objc_getClass ("GCDeviceHaptics");
	__xamarin_class_map [1692].handle = objc_getClass ("GCDeviceLight");
	__xamarin_class_map [1693].handle = objc_getClass ("GCDirectionalGamepad");
	__xamarin_class_map [1694].handle = objc_getClass ("GCDualSenseAdaptiveTrigger");
	__xamarin_class_map [1695].handle = objc_getClass ("GCDualSenseGamepad");
	__xamarin_class_map [1696].handle = objc_getClass ("GCDualShockGamepad");
	__xamarin_class_map [1697].handle = objc_getClass ("GCEventViewController");
	__xamarin_class_map [1698].handle = objc_getClass ("GCGearShifterElement");
	__xamarin_class_map [1699].handle = objc_getClass ("GCKeyboardInput");
	__xamarin_class_map [1700].handle = objc_getClass ("GCMotion");
	__xamarin_class_map [1701].handle = objc_getClass ("GCMouseInput");
	__xamarin_class_map [1702].handle = objc_getClass ("GCRacingWheelInputState");
	__xamarin_class_map [1703].handle = objc_getClass ("GCRacingWheelInput");
	__xamarin_class_map [1704].handle = objc_getClass ("GCSteeringWheelElement");
	__xamarin_class_map [1705].handle = objc_getClass ("GCXboxGamepad");
	__xamarin_class_map [1706].handle = objc_getClass ("GLKMesh");
	__xamarin_class_map [1707].handle = objc_getClass ("GLKBaseEffect");
	__xamarin_class_map [1708].handle = objc_getClass ("GLKEffectProperty");
	__xamarin_class_map [1709].handle = objc_getClass ("GLKEffectPropertyFog");
	__xamarin_class_map [1710].handle = objc_getClass ("GLKEffectPropertyLight");
	__xamarin_class_map [1711].handle = objc_getClass ("GLKEffectPropertyMaterial");
	__xamarin_class_map [1712].handle = objc_getClass ("GLKEffectPropertyTexture");
	__xamarin_class_map [1713].handle = objc_getClass ("GLKEffectPropertyTransform");
	__xamarin_class_map [1714].handle = objc_getClass ("GLKMeshBuffer");
	__xamarin_class_map [1715].handle = objc_getClass ("GLKMeshBufferAllocator");
	__xamarin_class_map [1716].handle = objc_getClass ("Microsoft_macOS__GLKit_GLKNamedEffect");
	__xamarin_class_map [1717].handle = objc_getClass ("GLKReflectionMapEffect");
	__xamarin_class_map [1718].handle = objc_getClass ("GLKSkyboxEffect");
	__xamarin_class_map [1719].handle = objc_getClass ("GLKSubmesh");
	__xamarin_class_map [1720].handle = objc_getClass ("GLKTextureInfo");
	__xamarin_class_map [1721].handle = objc_getClass ("WebScriptObject");
	__xamarin_class_map [1722].handle = objc_getClass ("DOMObject");
	__xamarin_class_map [1723].handle = objc_getClass ("DOMNode");
	__xamarin_class_map [1724].handle = objc_getClass ("DOMElement");
	__xamarin_class_map [1725].handle = objc_getClass ("DOMHTMLElement");
	__xamarin_class_map [1726].handle = objc_getClass ("DOMHTMLSelectElement");
	__xamarin_class_map [1727].handle = objc_getClass ("DOMHTMLOptionsCollection");
	__xamarin_class_map [1728].handle = objc_getClass ("DOMCSSRuleList");
	__xamarin_class_map [1729].handle = objc_getClass ("DOMCSSStyleDeclaration");
	__xamarin_class_map [1730].handle = objc_getClass ("DOMHTMLCollection");
	__xamarin_class_map [1731].handle = objc_getClass ("DOMMediaList");
	__xamarin_class_map [1732].handle = objc_getClass ("DOMNamedNodeMap");
	__xamarin_class_map [1733].handle = objc_getClass ("DOMNodeList");
	__xamarin_class_map [1734].handle = objc_getClass ("DOMStyleSheetList");
	__xamarin_class_map [1735].handle = objc_getClass ("WKPreferences");
	__xamarin_class_map [1736].handle = objc_getClass ("WKWindowFeatures");
	__xamarin_class_map [1737].handle = objc_getClass ("WebFrame");
	__xamarin_class_map [1738].handle = objc_getClass ("Microsoft_macOS__WebKit_WebPolicyDelegate");
	__xamarin_class_map [1739].handle = objc_getClass ("DOMAbstractView");
	__xamarin_class_map [1740].handle = objc_getClass ("DOMAttr");
	__xamarin_class_map [1741].handle = objc_getClass ("DOMBlob");
	__xamarin_class_map [1742].handle = objc_getClass ("DOMCharacterData");
	__xamarin_class_map [1743].handle = objc_getClass ("DOMText");
	__xamarin_class_map [1744].handle = objc_getClass ("DOMCDATASection");
	__xamarin_class_map [1745].handle = objc_getClass ("DOMComment");
	__xamarin_class_map [1746].handle = objc_getClass ("DOMCSSRule");
	__xamarin_class_map [1747].handle = objc_getClass ("DOMCSSCharsetRule");
	__xamarin_class_map [1748].handle = objc_getClass ("DOMCSSFontFaceRule");
	__xamarin_class_map [1749].handle = objc_getClass ("DOMCSSMediaRule");
	__xamarin_class_map [1750].handle = objc_getClass ("DOMCSSPageRule");
	__xamarin_class_map [1751].handle = objc_getClass ("DOMCSSStyleRule");
	__xamarin_class_map [1752].handle = objc_getClass ("DOMStyleSheet");
	__xamarin_class_map [1753].handle = objc_getClass ("DOMCSSStyleSheet");
	__xamarin_class_map [1754].handle = objc_getClass ("DOMCSSUnknownRule");
	__xamarin_class_map [1755].handle = objc_getClass ("DOMCSSValue");
	__xamarin_class_map [1756].handle = objc_getClass ("DOMDocument");
	__xamarin_class_map [1757].handle = objc_getClass ("DOMDocumentFragment");
	__xamarin_class_map [1758].handle = objc_getClass ("DOMDocumentType");
	__xamarin_class_map [1759].handle = objc_getClass ("DOMEntityReference");
	__xamarin_class_map [1760].handle = objc_getClass ("DOMEvent");
	__xamarin_class_map [1761].handle = objc_getClass ("Microsoft_macOS__WebKit_DomEventListener");
	__xamarin_class_map [1762].handle = objc_getClass ("Microsoft_macOS__WebKit_DomEventTarget");
	__xamarin_class_map [1763].handle = objc_getClass ("DOMFile");
	__xamarin_class_map [1764].handle = objc_getClass ("DOMFileList");
	__xamarin_class_map [1765].handle = objc_getClass ("DOMHTMLAnchorElement");
	__xamarin_class_map [1766].handle = objc_getClass ("DOMHTMLAppletElement");
	__xamarin_class_map [1767].handle = objc_getClass ("DOMHTMLAreaElement");
	__xamarin_class_map [1768].handle = objc_getClass ("DOMHTMLBaseElement");
	__xamarin_class_map [1769].handle = objc_getClass ("DOMHTMLBaseFontElement");
	__xamarin_class_map [1770].handle = objc_getClass ("DOMHTMLBodyElement");
	__xamarin_class_map [1771].handle = objc_getClass ("DOMHTMLBRElement");
	__xamarin_class_map [1772].handle = objc_getClass ("DOMHTMLButtonElement");
	__xamarin_class_map [1773].handle = objc_getClass ("DOMHTMLDirectoryElement");
	__xamarin_class_map [1774].handle = objc_getClass ("DOMHTMLDivElement");
	__xamarin_class_map [1775].handle = objc_getClass ("DOMHTMLDListElement");
	__xamarin_class_map [1776].handle = objc_getClass ("DOMHTMLDocument");
	__xamarin_class_map [1777].handle = objc_getClass ("DOMHTMLEmbedElement");
	__xamarin_class_map [1778].handle = objc_getClass ("DOMHTMLFieldSetElement");
	__xamarin_class_map [1779].handle = objc_getClass ("DOMHTMLFontElement");
	__xamarin_class_map [1780].handle = objc_getClass ("DOMHTMLFormElement");
	__xamarin_class_map [1781].handle = objc_getClass ("DOMHTMLFrameElement");
	__xamarin_class_map [1782].handle = objc_getClass ("DOMHTMLFrameSetElement");
	__xamarin_class_map [1783].handle = objc_getClass ("DOMHTMLHeadElement");
	__xamarin_class_map [1784].handle = objc_getClass ("DOMHTMLHeadingElement");
	__xamarin_class_map [1785].handle = objc_getClass ("DOMHTMLHRElement");
	__xamarin_class_map [1786].handle = objc_getClass ("DOMHTMLHtmlElement");
	__xamarin_class_map [1787].handle = objc_getClass ("DOMHTMLIFrameElement");
	__xamarin_class_map [1788].handle = objc_getClass ("DOMHTMLImageElement");
	__xamarin_class_map [1789].handle = objc_getClass ("DOMHTMLInputElement");
	__xamarin_class_map [1790].handle = objc_getClass ("DOMHTMLLabelElement");
	__xamarin_class_map [1791].handle = objc_getClass ("DOMHTMLLegendElement");
	__xamarin_class_map [1792].handle = objc_getClass ("DOMHTMLLIElement");
	__xamarin_class_map [1793].handle = objc_getClass ("DOMHTMLLinkElement");
	__xamarin_class_map [1794].handle = objc_getClass ("DOMHTMLMapElement");
	__xamarin_class_map [1795].handle = objc_getClass ("DOMHTMLMarqueeElement");
	__xamarin_class_map [1796].handle = objc_getClass ("DOMHTMLMenuElement");
	__xamarin_class_map [1797].handle = objc_getClass ("DOMHTMLMetaElement");
	__xamarin_class_map [1798].handle = objc_getClass ("DOMHTMLModElement");
	__xamarin_class_map [1799].handle = objc_getClass ("DOMHTMLObjectElement");
	__xamarin_class_map [1800].handle = objc_getClass ("DOMHTMLOListElement");
	__xamarin_class_map [1801].handle = objc_getClass ("DOMHTMLOptGroupElement");
	__xamarin_class_map [1802].handle = objc_getClass ("DOMHTMLOptionElement");
	__xamarin_class_map [1803].handle = objc_getClass ("DOMHTMLParagraphElement");
	__xamarin_class_map [1804].handle = objc_getClass ("DOMHTMLParamElement");
	__xamarin_class_map [1805].handle = objc_getClass ("DOMHTMLPreElement");
	__xamarin_class_map [1806].handle = objc_getClass ("DOMHTMLQuoteElement");
	__xamarin_class_map [1807].handle = objc_getClass ("DOMHTMLScriptElement");
	__xamarin_class_map [1808].handle = objc_getClass ("DOMHTMLStyleElement");
	__xamarin_class_map [1809].handle = objc_getClass ("DOMHTMLTableCaptionElement");
	__xamarin_class_map [1810].handle = objc_getClass ("DOMHTMLTableCellElement");
	__xamarin_class_map [1811].handle = objc_getClass ("DOMHTMLTableColElement");
	__xamarin_class_map [1812].handle = objc_getClass ("DOMHTMLTableElement");
	__xamarin_class_map [1813].handle = objc_getClass ("DOMHTMLTableRowElement");
	__xamarin_class_map [1814].handle = objc_getClass ("DOMHTMLTableSectionElement");
	__xamarin_class_map [1815].handle = objc_getClass ("DOMHTMLTextAreaElement");
	__xamarin_class_map [1816].handle = objc_getClass ("DOMImplementation");
	__xamarin_class_map [1817].handle = objc_getClass ("DOMCSSImportRule");
	__xamarin_class_map [1818].handle = objc_getClass ("DOMUIEvent");
	__xamarin_class_map [1819].handle = objc_getClass ("DOMKeyboardEvent");
	__xamarin_class_map [1820].handle = objc_getClass ("DOMMouseEvent");
	__xamarin_class_map [1821].handle = objc_getClass ("Microsoft_macOS__WebKit_DomNodeFilter");
	__xamarin_class_map [1822].handle = objc_getClass ("DOMNodeIterator");
	__xamarin_class_map [1823].handle = objc_getClass ("DOMOverflowEvent");
	__xamarin_class_map [1824].handle = objc_getClass ("DOMProcessingInstruction");
	__xamarin_class_map [1825].handle = objc_getClass ("DOMProgressEvent");
	__xamarin_class_map [1826].handle = objc_getClass ("DOMRange");
	__xamarin_class_map [1827].handle = objc_getClass ("DOMWheelEvent");
	__xamarin_class_map [1828].handle = objc_getClass ("WebArchive");
	__xamarin_class_map [1829].handle = objc_getClass ("WebBackForwardList");
	__xamarin_class_map [1830].handle = objc_getClass ("WebDataSource");
	__xamarin_class_map [1831].handle = objc_getClass ("Microsoft_macOS__WebKit_WebDocumentRepresentation");
	__xamarin_class_map [1832].handle = objc_getClass ("NSURLDownload");
	__xamarin_class_map [1833].handle = objc_getClass ("WebDownload");
	__xamarin_class_map [1834].handle = objc_getClass ("Microsoft_macOS__WebKit_WebDownloadDelegate");
	__xamarin_class_map [1835].handle = objc_getClass ("Microsoft_macOS__WebKit_WebFrameLoadDelegate");
	__xamarin_class_map [1836].handle = objc_getClass ("WebFrameView");
	__xamarin_class_map [1837].handle = objc_getClass ("WebHistory");
	__xamarin_class_map [1838].handle = objc_getClass ("Microsoft_macOS__WebKit_WebOpenPanelResultListener");
	__xamarin_class_map [1839].handle = objc_getClass ("Microsoft_macOS__WebKit_WebPolicyDecisionListener");
	__xamarin_class_map [1840].handle = objc_getClass ("WebPreferences");
	__xamarin_class_map [1841].handle = objc_getClass ("WebResource");
	__xamarin_class_map [1842].handle = objc_getClass ("Microsoft_macOS__WebKit_WebResourceLoadDelegate");
	__xamarin_class_map [1843].handle = objc_getClass ("Microsoft_macOS__WebKit_WebUIDelegate");
	__xamarin_class_map [1844].handle = objc_getClass ("WKBackForwardList");
	__xamarin_class_map [1845].handle = objc_getClass ("WKBackForwardListItem");
	__xamarin_class_map [1846].handle = objc_getClass ("WKContentRuleList");
	__xamarin_class_map [1847].handle = objc_getClass ("WKContentWorld");
	__xamarin_class_map [1848].handle = objc_getClass ("Microsoft_macOS__WebKit_WKDownloadDelegate");
	__xamarin_class_map [1849].handle = objc_getClass ("WKFindConfiguration");
	__xamarin_class_map [1850].handle = objc_getClass ("WKFindResult");
	__xamarin_class_map [1851].handle = objc_getClass ("WKFrameInfo");
	__xamarin_class_map [1852].handle = objc_getClass ("WKNavigation");
	__xamarin_class_map [1853].handle = objc_getClass ("WKNavigationAction");
	__xamarin_class_map [1854].handle = objc_getClass ("Microsoft_macOS__WebKit_WKNavigationDelegate");
	__xamarin_class_map [1855].handle = objc_getClass ("WKNavigationResponse");
	__xamarin_class_map [1856].handle = objc_getClass ("WKOpenPanelParameters");
	__xamarin_class_map [1857].handle = objc_getClass ("WKPDFConfiguration");
	__xamarin_class_map [1858].handle = objc_getClass ("WKProcessPool");
	__xamarin_class_map [1859].handle = objc_getClass ("WKScriptMessage");
	__xamarin_class_map [1860].handle = objc_getClass ("Microsoft_macOS__WebKit_WKScriptMessageHandler");
	__xamarin_class_map [1861].handle = objc_getClass ("WKSecurityOrigin");
	__xamarin_class_map [1862].handle = objc_getClass ("WKSnapshotConfiguration");
	__xamarin_class_map [1863].handle = objc_getClass ("Microsoft_macOS__WebKit_WKUIDelegate");
	__xamarin_class_map [1864].handle = objc_getClass ("WKUserContentController");
	__xamarin_class_map [1865].handle = objc_getClass ("WKUserScript");
	__xamarin_class_map [1866].handle = objc_getClass ("WKWebpagePreferences");
	__xamarin_class_map [1867].handle = objc_getClass ("WKWebsiteDataRecord");
	__xamarin_class_map [1868].handle = objc_getClass ("WKWebViewConfiguration");
	__xamarin_class_map [1869].handle = objc_getClass ("Foundation_NSDispatcher");
	__xamarin_class_map [1870].handle = objc_getClass ("__MonoMac_NSActionDispatcher");
	__xamarin_class_map [1871].handle = objc_getClass ("__MonoMac_NSSynchronizationContextDispatcher");
	__xamarin_class_map [1872].handle = objc_getClass ("__Xamarin_NSTimerActionDispatcher");
	__xamarin_class_map [1873].handle = objc_getClass ("Foundation_NSAsyncDispatcher");
	__xamarin_class_map [1874].handle = objc_getClass ("__MonoMac_NSAsyncActionDispatcher");
	__xamarin_class_map [1875].handle = objc_getClass ("__MonoMac_NSAsyncSynchronizationContextDispatcher");
	__xamarin_class_map [1876].handle = objc_getClass ("NSAppleEventDescriptor");
	__xamarin_class_map [1877].handle = objc_getClass ("NSBundle");
	__xamarin_class_map [1878].handle = objc_getClass ("NSConnection");
	__xamarin_class_map [1879].handle = objc_getClass ("NSDate");
	__xamarin_class_map [1880].handle = objc_getClass ("NSDateComponents");
	__xamarin_class_map [1881].handle = objc_getClass ("NSUnit");
	__xamarin_class_map [1882].handle = objc_getClass ("NSDimension");
	__xamarin_class_map [1883].handle = objc_getClass ("NSDirectoryEnumerator");
	__xamarin_class_map [1884].handle = objc_getClass ("NSError");
	__xamarin_class_map [1885].handle = objc_getClass ("NSExpression");
	__xamarin_class_map [1886].handle = objc_getClass ("Microsoft_macOS__Foundation_NSFileManagerDelegate");
	__xamarin_class_map [1887].handle = objc_getClass ("NSHTTPCookie");
	__xamarin_class_map [1888].handle = objc_getClass ("NSStream");
	__xamarin_class_map [1889].handle = objc_getClass ("NSInputStream");
	__xamarin_class_map [1890].handle = objc_getClass ("NSMetadataItem");
	__xamarin_class_map [1891].handle = objc_getClass ("NSAttributedString");
	__xamarin_class_map [1892].handle = objc_getClass ("NSMutableAttributedString");
	__xamarin_class_map [1893].handle = objc_getClass ("NSOrderedSet");
	__xamarin_class_map [1894].handle = objc_getClass ("NSMutableOrderedSet");
	__xamarin_class_map [1895].handle = objc_getClass ("NSSet");
	__xamarin_class_map [1896].handle = objc_getClass ("NSMutableSet");
	__xamarin_class_map [1897].handle = objc_getClass ("NSString");
	__xamarin_class_map [1898].handle = objc_getClass ("NSMutableString");
	__xamarin_class_map [1899].handle = objc_getClass ("NSURLRequest");
	__xamarin_class_map [1900].handle = objc_getClass ("NSMutableURLRequest");
	__xamarin_class_map [1901].handle = objc_getClass ("Foundation_InternalNSNotificationHandler");
	__xamarin_class_map [1902].handle = objc_getClass ("NSNull");
	__xamarin_class_map [1903].handle = objc_getClass ("NSValue");
	__xamarin_class_map [1904].handle = objc_getClass ("NSNumber");
	__xamarin_class_map [1905].handle = objc_getClass ("NSOutputStream");
	__xamarin_class_map [1906].handle = objc_getClass ("NSPredicate");
	__xamarin_class_map [1907].handle = objc_getClass ("NSPropertyListSerialization");
	__xamarin_class_map [1908].handle = objc_getClass ("NSProxy");
	__xamarin_class_map [1909].handle = objc_getClass ("NSRunLoop");
	__xamarin_class_map [1910].handle = objc_getClass ("NSScriptCommandDescription");
	__xamarin_class_map [1911].handle = objc_getClass ("NSTimeZone");
	__xamarin_class_map [1912].handle = objc_getClass ("NSTimer");
	__xamarin_class_map [1913].handle = objc_getClass ("NSURLComponents");
	__xamarin_class_map [1914].handle = objc_getClass ("NSURLCredential");
	__xamarin_class_map [1915].handle = objc_getClass ("NSURLProtectionSpace");
	__xamarin_class_map [1916].handle = objc_getClass ("NSURLProtocol");
	__xamarin_class_map [1917].handle = objc_getClass ("NSUUID");
	__xamarin_class_map [1918].handle = objc_getClass ("NSXPCConnection");
	__xamarin_class_map [1919].handle = objc_getClass ("NSXPCInterface");
	__xamarin_class_map [1920].handle = objc_getClass ("NSAffineTransform");
	__xamarin_class_map [1921].handle = objc_getClass ("NSAppleEventManager");
	__xamarin_class_map [1922].handle = objc_getClass ("NSAppleScript");
	__xamarin_class_map [1923].handle = objc_getClass ("NSAttributedStringMarkdownParsingOptions");
	__xamarin_class_map [1924].handle = objc_getClass ("NSAttributedStringMarkdownSourcePosition");
	__xamarin_class_map [1925].handle = objc_getClass ("NSAutoreleasePool");
	__xamarin_class_map [1926].handle = objc_getClass ("NSBackgroundActivityScheduler");
	__xamarin_class_map [1927].handle = objc_getClass ("NSBindingSelectionMarker");
	__xamarin_class_map [1928].handle = objc_getClass ("NSOperation");
	__xamarin_class_map [1929].handle = objc_getClass ("NSBlockOperation");
	__xamarin_class_map [1930].handle = objc_getClass ("NSByteCountFormatter");
	__xamarin_class_map [1931].handle = objc_getClass ("Microsoft_macOS__Foundation_NSCacheDelegate");
	__xamarin_class_map [1932].handle = objc_getClass ("NSCachedURLResponse");
	__xamarin_class_map [1933].handle = objc_getClass ("NSCalendarDate");
	__xamarin_class_map [1934].handle = objc_getClass ("NSCharacterSet");
	__xamarin_class_map [1935].handle = objc_getClass ("Microsoft_macOS__Foundation_NSCoding");
	__xamarin_class_map [1936].handle = objc_getClass ("NSComparisonPredicate");
	__xamarin_class_map [1937].handle = objc_getClass ("NSCompoundPredicate");
	__xamarin_class_map [1938].handle = objc_getClass ("NSCondition");
	__xamarin_class_map [1939].handle = objc_getClass ("NSConditionLock");
	__xamarin_class_map [1940].handle = objc_getClass ("Microsoft_macOS__Foundation_NSConnectionDelegate");
	__xamarin_class_map [1941].handle = objc_getClass ("Microsoft_macOS__Foundation_NSCopying");
	__xamarin_class_map [1942].handle = objc_getClass ("NSRegularExpression");
	__xamarin_class_map [1943].handle = objc_getClass ("NSDataDetector");
	__xamarin_class_map [1944].handle = objc_getClass ("NSDateComponentsFormatter");
	__xamarin_class_map [1945].handle = objc_getClass ("NSDateFormatter");
	__xamarin_class_map [1946].handle = objc_getClass ("NSDateInterval");
	__xamarin_class_map [1947].handle = objc_getClass ("NSDateIntervalFormatter");
	__xamarin_class_map [1948].handle = objc_getClass ("NSDecimalNumber");
	__xamarin_class_map [1949].handle = objc_getClass ("NSDistantObjectRequest");
	__xamarin_class_map [1950].handle = objc_getClass ("NSDistributedLock");
	__xamarin_class_map [1951].handle = objc_getClass ("NSNotificationCenter");
	__xamarin_class_map [1952].handle = objc_getClass ("NSDistributedNotificationCenter");
	__xamarin_class_map [1953].handle = objc_getClass ("NSEnergyFormatter");
	__xamarin_class_map [1954].handle = objc_getClass ("NSException");
	__xamarin_class_map [1955].handle = objc_getClass ("NSExtensionItem");
	__xamarin_class_map [1956].handle = objc_getClass ("Microsoft_macOS__Foundation_NSExtensionRequestHandling");
	__xamarin_class_map [1957].handle = objc_getClass ("NSFileAccessIntent");
	__xamarin_class_map [1958].handle = objc_getClass ("NSFileCoordinator");
	__xamarin_class_map [1959].handle = objc_getClass ("Microsoft_macOS__Foundation_NSFilePresenter");
	__xamarin_class_map [1960].handle = objc_getClass ("NSFileProviderService");
	__xamarin_class_map [1961].handle = objc_getClass ("NSFileWrapper");
	__xamarin_class_map [1962].handle = objc_getClass ("NSURLResponse");
	__xamarin_class_map [1963].handle = objc_getClass ("NSHTTPURLResponse");
	__xamarin_class_map [1964].handle = objc_getClass ("NSInflectionRule");
	__xamarin_class_map [1965].handle = objc_getClass ("NSInflectionRuleExplicit");
	__xamarin_class_map [1966].handle = objc_getClass ("NSInvocation");
	__xamarin_class_map [1967].handle = objc_getClass ("NSISO8601DateFormatter");
	__xamarin_class_map [1968].handle = objc_getClass ("NSJSONSerialization");
	__xamarin_class_map [1969].handle = objc_getClass ("Microsoft_macOS__Foundation_NSKeyedArchiverDelegate");
	__xamarin_class_map [1970].handle = objc_getClass ("Microsoft_macOS__Foundation_NSKeyedUnarchiverDelegate");
	__xamarin_class_map [1971].handle = objc_getClass ("NSLengthFormatter");
	__xamarin_class_map [1972].handle = objc_getClass ("NSLinguisticTagger");
	__xamarin_class_map [1973].handle = objc_getClass ("NSListFormatter");
	__xamarin_class_map [1974].handle = objc_getClass ("NSLock");
	__xamarin_class_map [1975].handle = objc_getClass ("NSPort");
	__xamarin_class_map [1976].handle = objc_getClass ("NSMachPort");
	__xamarin_class_map [1977].handle = objc_getClass ("Microsoft_macOS__Foundation_NSPortDelegate");
	__xamarin_class_map [1978].handle = objc_getClass ("Microsoft_macOS__Foundation_NSMachPortDelegate");
	__xamarin_class_map [1979].handle = objc_getClass ("NSMassFormatter");
	__xamarin_class_map [1980].handle = objc_getClass ("NSMeasurement");
	__xamarin_class_map [1981].handle = objc_getClass ("NSMeasurementFormatter");
	__xamarin_class_map [1982].handle = objc_getClass ("NSMetadataQueryAttributeValueTuple");
	__xamarin_class_map [1983].handle = objc_getClass ("Microsoft_macOS__Foundation_NSMetadataQueryDelegate");
	__xamarin_class_map [1984].handle = objc_getClass ("NSMetadataQueryResultGroup");
	__xamarin_class_map [1985].handle = objc_getClass ("NSMethodSignature");
	__xamarin_class_map [1986].handle = objc_getClass ("NSMorphology");
	__xamarin_class_map [1987].handle = objc_getClass ("NSMorphologyCustomPronoun");
	__xamarin_class_map [1988].handle = objc_getClass ("NSMutableCharacterSet");
	__xamarin_class_map [1989].handle = objc_getClass ("Microsoft_macOS__Foundation_NSMutableCopying");
	__xamarin_class_map [1990].handle = objc_getClass ("NSIndexSet");
	__xamarin_class_map [1991].handle = objc_getClass ("NSMutableIndexSet");
	__xamarin_class_map [1992].handle = objc_getClass ("Microsoft_macOS__Foundation_NSNetServiceBrowserDelegate");
	__xamarin_class_map [1993].handle = objc_getClass ("Microsoft_macOS__Foundation_NSNetServiceDelegate");
	__xamarin_class_map [1994].handle = objc_getClass ("NSNotification");
	__xamarin_class_map [1995].handle = objc_getClass ("NSNotificationQueue");
	__xamarin_class_map [1996].handle = objc_getClass ("NSNumberFormatter");
	__xamarin_class_map [1997].handle = objc_getClass ("NSOperationQueue");
	__xamarin_class_map [1998].handle = objc_getClass ("NSOrthography");
	__xamarin_class_map [1999].handle = objc_getClass ("NSPersonNameComponents");
	__xamarin_class_map [2000].handle = objc_getClass ("NSPersonNameComponentsFormatter");
	__xamarin_class_map [2001].handle = objc_getClass ("NSPipe");
	__xamarin_class_map [2002].handle = objc_getClass ("NSPortMessage");
	__xamarin_class_map [2003].handle = objc_getClass ("NSPortNameServer");
	__xamarin_class_map [2004].handle = objc_getClass ("NSPresentationIntent");
	__xamarin_class_map [2005].handle = objc_getClass ("NSData");
	__xamarin_class_map [2006].handle = objc_getClass ("NSMutableData");
	__xamarin_class_map [2007].handle = objc_getClass ("NSPurgeableData");
	__xamarin_class_map [2008].handle = objc_getClass ("NSRecursiveLock");
	__xamarin_class_map [2009].handle = objc_getClass ("NSRelativeDateTimeFormatter");
	__xamarin_class_map [2010].handle = objc_getClass ("NSScriptCommand");
	__xamarin_class_map [2011].handle = objc_getClass ("NSSortDescriptor");
	__xamarin_class_map [2012].handle = objc_getClass ("Microsoft_macOS__Foundation_NSStreamDelegate");
	__xamarin_class_map [2013].handle = objc_getClass ("NSTextCheckingResult");
	__xamarin_class_map [2014].handle = objc_getClass ("NSUnitAcceleration");
	__xamarin_class_map [2015].handle = objc_getClass ("NSUnitAngle");
	__xamarin_class_map [2016].handle = objc_getClass ("NSUnitArea");
	__xamarin_class_map [2017].handle = objc_getClass ("NSUnitConcentrationMass");
	__xamarin_class_map [2018].handle = objc_getClass ("NSUnitConverter");
	__xamarin_class_map [2019].handle = objc_getClass ("NSUnitConverterLinear");
	__xamarin_class_map [2020].handle = objc_getClass ("NSUnitDispersion");
	__xamarin_class_map [2021].handle = objc_getClass ("NSUnitDuration");
	__xamarin_class_map [2022].handle = objc_getClass ("NSUnitElectricCharge");
	__xamarin_class_map [2023].handle = objc_getClass ("NSUnitElectricCurrent");
	__xamarin_class_map [2024].handle = objc_getClass ("NSUnitElectricPotentialDifference");
	__xamarin_class_map [2025].handle = objc_getClass ("NSUnitElectricResistance");
	__xamarin_class_map [2026].handle = objc_getClass ("NSUnitEnergy");
	__xamarin_class_map [2027].handle = objc_getClass ("NSUnitFrequency");
	__xamarin_class_map [2028].handle = objc_getClass ("NSUnitFuelEfficiency");
	__xamarin_class_map [2029].handle = objc_getClass ("NSUnitIlluminance");
	__xamarin_class_map [2030].handle = objc_getClass ("NSUnitInformationStorage");
	__xamarin_class_map [2031].handle = objc_getClass ("NSUnitLength");
	__xamarin_class_map [2032].handle = objc_getClass ("NSUnitMass");
	__xamarin_class_map [2033].handle = objc_getClass ("NSUnitPower");
	__xamarin_class_map [2034].handle = objc_getClass ("NSUnitPressure");
	__xamarin_class_map [2035].handle = objc_getClass ("NSUnitSpeed");
	__xamarin_class_map [2036].handle = objc_getClass ("NSUnitTemperature");
	__xamarin_class_map [2037].handle = objc_getClass ("NSUnitVolume");
	__xamarin_class_map [2038].handle = objc_getClass ("NSURLAuthenticationChallenge");
	__xamarin_class_map [2039].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUrlConnectionDelegate");
	__xamarin_class_map [2040].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUrlConnectionDataDelegate");
	__xamarin_class_map [2041].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUrlConnectionDownloadDelegate");
	__xamarin_class_map [2042].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUrlDownloadDelegate");
	__xamarin_class_map [2043].handle = objc_getClass ("NSURLQueryItem");
	__xamarin_class_map [2044].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUrlSessionDelegate");
	__xamarin_class_map [2045].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUrlSessionTaskDelegate");
	__xamarin_class_map [2046].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUrlSessionDataDelegate");
	__xamarin_class_map [2047].handle = objc_getClass ("NSURLSessionTask");
	__xamarin_class_map [2048].handle = objc_getClass ("NSURLSessionDataTask");
	__xamarin_class_map [2049].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUrlSessionDownloadDelegate");
	__xamarin_class_map [2050].handle = objc_getClass ("NSURLSessionDownloadTask");
	__xamarin_class_map [2051].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUrlSessionStreamDelegate");
	__xamarin_class_map [2052].handle = objc_getClass ("NSURLSessionTaskMetrics");
	__xamarin_class_map [2053].handle = objc_getClass ("NSURLSessionTaskTransactionMetrics");
	__xamarin_class_map [2054].handle = objc_getClass ("NSURLSessionUploadTask");
	__xamarin_class_map [2055].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUrlSessionWebSocketDelegate");
	__xamarin_class_map [2056].handle = objc_getClass ("NSURLSessionWebSocketMessage");
	__xamarin_class_map [2057].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUserActivityDelegate");
	__xamarin_class_map [2058].handle = objc_getClass ("NSUserNotification");
	__xamarin_class_map [2059].handle = objc_getClass ("NSUserNotificationAction");
	__xamarin_class_map [2060].handle = objc_getClass ("Microsoft_macOS__Foundation_NSUserNotificationCenterDelegate");
	__xamarin_class_map [2061].handle = objc_getClass ("NSValueTransformer");
	__xamarin_class_map [2062].handle = objc_getClass ("NSXPCListener");
	__xamarin_class_map [2063].handle = objc_getClass ("Microsoft_macOS__Foundation_NSXpcListenerDelegate");
	__xamarin_class_map [2064].handle = objc_getClass ("NSXPCListenerEndpoint");
	__xamarin_class_map [2065].handle = objc_getClass ("NSFileProviderDomainVersion");
	__xamarin_class_map [2066].handle = objc_getClass ("NSFileProviderItemVersion");
	__xamarin_class_map [2067].handle = objc_getClass ("NSFileProviderRequest");
	__xamarin_class_map [2068].handle = objc_getClass ("EKObject");
	__xamarin_class_map [2069].handle = objc_getClass ("EKAlarm");
	__xamarin_class_map [2070].handle = objc_getClass ("EKCalendarItem");
	__xamarin_class_map [2071].handle = objc_getClass ("EKReminder");
	__xamarin_class_map [2072].handle = objc_getClass ("EKCalendar");
	__xamarin_class_map [2073].handle = objc_getClass ("EKEvent");
	__xamarin_class_map [2074].handle = objc_getClass ("EKParticipant");
	__xamarin_class_map [2075].handle = objc_getClass ("EKRecurrenceDayOfWeek");
	__xamarin_class_map [2076].handle = objc_getClass ("EKRecurrenceEnd");
	__xamarin_class_map [2077].handle = objc_getClass ("EKRecurrenceRule");
	__xamarin_class_map [2078].handle = objc_getClass ("EKSource");
	__xamarin_class_map [2079].handle = objc_getClass ("EKStructuredLocation");
	__xamarin_class_map [2080].handle = objc_getClass ("EKVirtualConferenceDescriptor");
	__xamarin_class_map [2081].handle = objc_getClass ("EKVirtualConferenceRoomTypeDescriptor");
	__xamarin_class_map [2082].handle = objc_getClass ("EKVirtualConferenceURLDescriptor");
	__xamarin_class_map [2083].handle = objc_getClass ("CWConfiguration");
	__xamarin_class_map [2084].handle = objc_getClass ("CWChannel");
	__xamarin_class_map [2085].handle = objc_getClass ("Microsoft_macOS__CoreWlan_CWEventDelegate");
	__xamarin_class_map [2086].handle = objc_getClass ("CWMutableConfiguration");
	__xamarin_class_map [2087].handle = objc_getClass ("CWNetworkProfile");
	__xamarin_class_map [2088].handle = objc_getClass ("CWMutableNetworkProfile");
	__xamarin_class_map [2089].handle = objc_getClass ("CWNetwork");
	__xamarin_class_map [2090].handle = objc_getClass ("CWWiFiClient");
	__xamarin_class_map [2091].handle = objc_getClass ("CSSearchQueryContext");
	__xamarin_class_map [2092].handle = objc_getClass ("CSSearchableItemAttributeSet");
	__xamarin_class_map [2093].handle = objc_getClass ("CSCustomAttributeKey");
	__xamarin_class_map [2094].handle = objc_getClass ("CSImportExtension");
	__xamarin_class_map [2095].handle = objc_getClass ("CSIndexExtensionRequestHandler");
	__xamarin_class_map [2096].handle = objc_getClass ("CSLocalizedString");
	__xamarin_class_map [2097].handle = objc_getClass ("CSPerson");
	__xamarin_class_map [2098].handle = objc_getClass ("Microsoft_macOS__CoreSpotlight_CSSearchableIndexDelegate");
	__xamarin_class_map [2099].handle = objc_getClass ("CSSearchableItem");
	__xamarin_class_map [2100].handle = objc_getClass ("CSSearchQuery");
	__xamarin_class_map [2101].handle = objc_getClass ("CSSuggestion");
	__xamarin_class_map [2102].handle = objc_getClass ("CSUserQuery");
	__xamarin_class_map [2103].handle = objc_getClass ("CSUserQueryContext");
	__xamarin_class_map [2104].handle = objc_getClass ("CMLogItem");
	__xamarin_class_map [2105].handle = objc_getClass ("CMAccelerometerData");
	__xamarin_class_map [2106].handle = objc_getClass ("CMAttitude");
	__xamarin_class_map [2107].handle = objc_getClass ("CMDeviceMotion");
	__xamarin_class_map [2108].handle = objc_getClass ("CMGyroData");
	__xamarin_class_map [2109].handle = objc_getClass ("CMMagnetometerData");
	__xamarin_class_map [2110].handle = objc_getClass ("CMPedometerData");
	__xamarin_class_map [2111].handle = objc_getClass ("CMPedometerEvent");
	__xamarin_class_map [2112].handle = objc_getClass ("MIDICIDeviceInfo");
	__xamarin_class_map [2113].handle = objc_getClass ("MIDICIDiscoveredNode");
	__xamarin_class_map [2114].handle = objc_getClass ("MIDICIDiscoveryManager");
	__xamarin_class_map [2115].handle = objc_getClass ("MIDICIProfile");
	__xamarin_class_map [2116].handle = objc_getClass ("Microsoft_macOS__CoreMidi_MidiCIProfileResponderDelegate");
	__xamarin_class_map [2117].handle = objc_getClass ("MIDICIProfileState");
	__xamarin_class_map [2118].handle = objc_getClass ("MIDICISession");
	__xamarin_class_map [2119].handle = objc_getClass ("MIDINetworkConnection");
	__xamarin_class_map [2120].handle = objc_getClass ("MIDINetworkHost");
	__xamarin_class_map [2121].handle = objc_getClass ("MIDINetworkSession");
	__xamarin_class_map [2122].handle = objc_getClass ("MLDictionaryFeatureProvider");
	__xamarin_class_map [2123].handle = objc_getClass ("MLMultiArrayConstraint");
	__xamarin_class_map [2124].handle = objc_getClass ("MLArrayBatchProvider");
	__xamarin_class_map [2125].handle = objc_getClass ("Microsoft_macOS__CoreML_MLCustomModel");
	__xamarin_class_map [2126].handle = objc_getClass ("MLDictionaryConstraint");
	__xamarin_class_map [2127].handle = objc_getClass ("MLFeatureDescription");
	__xamarin_class_map [2128].handle = objc_getClass ("MLFeatureValue");
	__xamarin_class_map [2129].handle = objc_getClass ("MLImageConstraint");
	__xamarin_class_map [2130].handle = objc_getClass ("MLImageSize");
	__xamarin_class_map [2131].handle = objc_getClass ("MLImageSizeConstraint");
	__xamarin_class_map [2132].handle = objc_getClass ("MLKey");
	__xamarin_class_map [2133].handle = objc_getClass ("MLMetricKey");
	__xamarin_class_map [2134].handle = objc_getClass ("MLModelAsset");
	__xamarin_class_map [2135].handle = objc_getClass ("MLModelCollectionEntry");
	__xamarin_class_map [2136].handle = objc_getClass ("MLModelConfiguration");
	__xamarin_class_map [2137].handle = objc_getClass ("MLModelDescription");
	__xamarin_class_map [2138].handle = objc_getClass ("MLMultiArrayShapeConstraint");
	__xamarin_class_map [2139].handle = objc_getClass ("MLNumericConstraint");
	__xamarin_class_map [2140].handle = objc_getClass ("MLParameterDescription");
	__xamarin_class_map [2141].handle = objc_getClass ("MLParameterKey");
	__xamarin_class_map [2142].handle = objc_getClass ("MLPredictionOptions");
	__xamarin_class_map [2143].handle = objc_getClass ("MLSequence");
	__xamarin_class_map [2144].handle = objc_getClass ("MLSequenceConstraint");
	__xamarin_class_map [2145].handle = objc_getClass ("MLTask");
	__xamarin_class_map [2146].handle = objc_getClass ("MLUpdateContext");
	__xamarin_class_map [2147].handle = objc_getClass ("MLUpdateProgressHandlers");
	__xamarin_class_map [2148].handle = objc_getClass ("MLUpdateTask");
	__xamarin_class_map [2149].handle = objc_getClass ("CLBeacon");
	__xamarin_class_map [2150].handle = objc_getClass ("CLBeaconIdentityConstraint");
	__xamarin_class_map [2151].handle = objc_getClass ("CLRegion");
	__xamarin_class_map [2152].handle = objc_getClass ("CLBeaconRegion");
	__xamarin_class_map [2153].handle = objc_getClass ("CLCircularRegion");
	__xamarin_class_map [2154].handle = objc_getClass ("CLFloor");
	__xamarin_class_map [2155].handle = objc_getClass ("CLHeading");
	__xamarin_class_map [2156].handle = objc_getClass ("CLLocation");
	__xamarin_class_map [2157].handle = objc_getClass ("Microsoft_macOS__CoreLocation_CLLocationManagerDelegate");
	__xamarin_class_map [2158].handle = objc_getClass ("CLLocationSourceInformation");
	__xamarin_class_map [2159].handle = objc_getClass ("CLVisit");
	__xamarin_class_map [2160].handle = objc_getClass ("CIColor");
	__xamarin_class_map [2161].handle = objc_getClass ("CIContext");
	__xamarin_class_map [2162].handle = objc_getClass ("CIDetector");
	__xamarin_class_map [2163].handle = objc_getClass ("CIFilter");
	__xamarin_class_map [2164].handle = objc_getClass ("CIImage");
	__xamarin_class_map [2165].handle = objc_getClass ("CISampler");
	__xamarin_class_map [2166].handle = objc_getClass ("CIVector");
	__xamarin_class_map [2167].handle = objc_getClass ("CoreImage_CIAccordionFoldTransition");
	__xamarin_class_map [2168].handle = objc_getClass ("CoreImage_CICompositingFilter");
	__xamarin_class_map [2169].handle = objc_getClass ("CoreImage_CIAdditionCompositing");
	__xamarin_class_map [2170].handle = objc_getClass ("CoreImage_CIAffineFilter");
	__xamarin_class_map [2171].handle = objc_getClass ("CoreImage_CIAffineClamp");
	__xamarin_class_map [2172].handle = objc_getClass ("CoreImage_CIAffineTile");
	__xamarin_class_map [2173].handle = objc_getClass ("CoreImage_CIAffineTransform");
	__xamarin_class_map [2174].handle = objc_getClass ("CoreImage_CIReductionFilter");
	__xamarin_class_map [2175].handle = objc_getClass ("CoreImage_CIAreaAverage");
	__xamarin_class_map [2176].handle = objc_getClass ("CoreImage_CIAreaHistogram");
	__xamarin_class_map [2177].handle = objc_getClass ("CoreImage_CIAreaLogarithmicHistogram");
	__xamarin_class_map [2178].handle = objc_getClass ("CoreImage_CIAreaMaximum");
	__xamarin_class_map [2179].handle = objc_getClass ("CoreImage_CIAreaMaximumAlpha");
	__xamarin_class_map [2180].handle = objc_getClass ("CoreImage_CIAreaMinimum");
	__xamarin_class_map [2181].handle = objc_getClass ("CoreImage_CIAreaMinimumAlpha");
	__xamarin_class_map [2182].handle = objc_getClass ("CoreImage_CIAreaMinMax");
	__xamarin_class_map [2183].handle = objc_getClass ("CoreImage_CIAreaMinMaxRed");
	__xamarin_class_map [2184].handle = objc_getClass ("CoreImage_CIImageGenerator");
	__xamarin_class_map [2185].handle = objc_getClass ("CoreImage_CIAttributedTextImageGenerator");
	__xamarin_class_map [2186].handle = objc_getClass ("CIBarcodeDescriptor");
	__xamarin_class_map [2187].handle = objc_getClass ("CIAztecCodeDescriptor");
	__xamarin_class_map [2188].handle = objc_getClass ("CoreImage_CICodeGenerator");
	__xamarin_class_map [2189].handle = objc_getClass ("CoreImage_CIAztecCodeGenerator");
	__xamarin_class_map [2190].handle = objc_getClass ("CoreImage_CIBarcodeGenerator");
	__xamarin_class_map [2191].handle = objc_getClass ("CoreImage_CITransitionFilter");
	__xamarin_class_map [2192].handle = objc_getClass ("CoreImage_CIBarsSwipeTransition");
	__xamarin_class_map [2193].handle = objc_getClass ("CoreImage_CIBicubicScaleTransform");
	__xamarin_class_map [2194].handle = objc_getClass ("CoreImage_CIBlendFilter");
	__xamarin_class_map [2195].handle = objc_getClass ("CIKernel");
	__xamarin_class_map [2196].handle = objc_getClass ("CIColorKernel");
	__xamarin_class_map [2197].handle = objc_getClass ("CIBlendKernel");
	__xamarin_class_map [2198].handle = objc_getClass ("CoreImage_CIBlendWithMask");
	__xamarin_class_map [2199].handle = objc_getClass ("CoreImage_CIBlendWithAlphaMask");
	__xamarin_class_map [2200].handle = objc_getClass ("CoreImage_CIBlendWithBlueMask");
	__xamarin_class_map [2201].handle = objc_getClass ("CoreImage_CIBlendWithRedMask");
	__xamarin_class_map [2202].handle = objc_getClass ("CoreImage_CIBloom");
	__xamarin_class_map [2203].handle = objc_getClass ("CoreImage_CILinearBlur");
	__xamarin_class_map [2204].handle = objc_getClass ("CoreImage_CIBokehBlur");
	__xamarin_class_map [2205].handle = objc_getClass ("CoreImage_CIBoxBlur");
	__xamarin_class_map [2206].handle = objc_getClass ("CoreImage_CIDistortionFilter");
	__xamarin_class_map [2207].handle = objc_getClass ("CoreImage_CIBumpDistortion");
	__xamarin_class_map [2208].handle = objc_getClass ("CoreImage_CIBumpDistortionLinear");
	__xamarin_class_map [2209].handle = objc_getClass ("CoreImage_CICameraCalibrationLensCorrection");
	__xamarin_class_map [2210].handle = objc_getClass ("CoreImage_CICheckerboardGenerator");
	__xamarin_class_map [2211].handle = objc_getClass ("CoreImage_CICircleSplashDistortion");
	__xamarin_class_map [2212].handle = objc_getClass ("CoreImage_CIScreenFilter");
	__xamarin_class_map [2213].handle = objc_getClass ("CoreImage_CICircularScreen");
	__xamarin_class_map [2214].handle = objc_getClass ("CoreImage_CICircularWrap");
	__xamarin_class_map [2215].handle = objc_getClass ("CoreImage_CIClamp");
	__xamarin_class_map [2216].handle = objc_getClass ("CoreImage_CICmykHalftone");
	__xamarin_class_map [2217].handle = objc_getClass ("CoreImage_CICode128BarcodeGenerator");
	__xamarin_class_map [2218].handle = objc_getClass ("CoreImage_CIColorAbsoluteDifference");
	__xamarin_class_map [2219].handle = objc_getClass ("CoreImage_CIColorBlendMode");
	__xamarin_class_map [2220].handle = objc_getClass ("CoreImage_CIColorBurnBlendMode");
	__xamarin_class_map [2221].handle = objc_getClass ("CoreImage_CIColorClamp");
	__xamarin_class_map [2222].handle = objc_getClass ("CoreImage_CIColorControls");
	__xamarin_class_map [2223].handle = objc_getClass ("CoreImage_CIColorCrossPolynomial");
	__xamarin_class_map [2224].handle = objc_getClass ("CoreImage_CIColorCube");
	__xamarin_class_map [2225].handle = objc_getClass ("CoreImage_CIColorCubesMixedWithMask");
	__xamarin_class_map [2226].handle = objc_getClass ("CoreImage_CIColorCubeWithColorSpace");
	__xamarin_class_map [2227].handle = objc_getClass ("CoreImage_CIColorCurves");
	__xamarin_class_map [2228].handle = objc_getClass ("CoreImage_CIColorDodgeBlendMode");
	__xamarin_class_map [2229].handle = objc_getClass ("CoreImage_CIColorInvert");
	__xamarin_class_map [2230].handle = objc_getClass ("CoreImage_CIColorMap");
	__xamarin_class_map [2231].handle = objc_getClass ("CoreImage_CIColorMatrix");
	__xamarin_class_map [2232].handle = objc_getClass ("CoreImage_CIColorMonochrome");
	__xamarin_class_map [2233].handle = objc_getClass ("CoreImage_CIColorPolynomial");
	__xamarin_class_map [2234].handle = objc_getClass ("CoreImage_CIColorPosterize");
	__xamarin_class_map [2235].handle = objc_getClass ("CoreImage_CIColorThreshold");
	__xamarin_class_map [2236].handle = objc_getClass ("CoreImage_CIColorThresholdOtsu");
	__xamarin_class_map [2237].handle = objc_getClass ("CoreImage_CIColumnAverage");
	__xamarin_class_map [2238].handle = objc_getClass ("CoreImage_CIComicEffect");
	__xamarin_class_map [2239].handle = objc_getClass ("CoreImage_CIConstantColorGenerator");
	__xamarin_class_map [2240].handle = objc_getClass ("CoreImage_CIConvolutionCore");
	__xamarin_class_map [2241].handle = objc_getClass ("CoreImage_CIConvolution3X3");
	__xamarin_class_map [2242].handle = objc_getClass ("CoreImage_CIConvolution5X5");
	__xamarin_class_map [2243].handle = objc_getClass ("CoreImage_CIConvolution7X7");
	__xamarin_class_map [2244].handle = objc_getClass ("CoreImage_CIConvolution9Horizontal");
	__xamarin_class_map [2245].handle = objc_getClass ("CoreImage_CIConvolution9Vertical");
	__xamarin_class_map [2246].handle = objc_getClass ("CoreImage_CIConvolutionRGB3X3");
	__xamarin_class_map [2247].handle = objc_getClass ("CoreImage_CIConvolutionRGB5X5");
	__xamarin_class_map [2248].handle = objc_getClass ("CoreImage_CIConvolutionRGB7X7");
	__xamarin_class_map [2249].handle = objc_getClass ("CoreImage_CIConvolutionRGB9Horizontal");
	__xamarin_class_map [2250].handle = objc_getClass ("CoreImage_CIConvolutionRGB9Vertical");
	__xamarin_class_map [2251].handle = objc_getClass ("CoreImage_CICopyMachineTransition");
	__xamarin_class_map [2252].handle = objc_getClass ("CoreImage_CICoreMLModelFilter");
	__xamarin_class_map [2253].handle = objc_getClass ("CoreImage_CICrop");
	__xamarin_class_map [2254].handle = objc_getClass ("CoreImage_CICrystallize");
	__xamarin_class_map [2255].handle = objc_getClass ("CoreImage_CIDarkenBlendMode");
	__xamarin_class_map [2256].handle = objc_getClass ("CIDataMatrixCodeDescriptor");
	__xamarin_class_map [2257].handle = objc_getClass ("CoreImage_CIDepthBlurEffect");
	__xamarin_class_map [2258].handle = objc_getClass ("CoreImage_CIDepthDisparityConverter");
	__xamarin_class_map [2259].handle = objc_getClass ("CoreImage_CIDepthOfField");
	__xamarin_class_map [2260].handle = objc_getClass ("CoreImage_CIDepthToDisparity");
	__xamarin_class_map [2261].handle = objc_getClass ("CoreImage_CIDifferenceBlendMode");
	__xamarin_class_map [2262].handle = objc_getClass ("CoreImage_CIDiscBlur");
	__xamarin_class_map [2263].handle = objc_getClass ("CoreImage_CIDisintegrateWithMaskTransition");
	__xamarin_class_map [2264].handle = objc_getClass ("CoreImage_CIDisparityToDepth");
	__xamarin_class_map [2265].handle = objc_getClass ("CoreImage_CIDisplacementDistortion");
	__xamarin_class_map [2266].handle = objc_getClass ("CoreImage_CIDissolveTransition");
	__xamarin_class_map [2267].handle = objc_getClass ("CoreImage_CIDither");
	__xamarin_class_map [2268].handle = objc_getClass ("CoreImage_CIDivideBlendMode");
	__xamarin_class_map [2269].handle = objc_getClass ("CoreImage_CIDocumentEnhancer");
	__xamarin_class_map [2270].handle = objc_getClass ("CoreImage_CIDotScreen");
	__xamarin_class_map [2271].handle = objc_getClass ("CoreImage_CIDroste");
	__xamarin_class_map [2272].handle = objc_getClass ("CoreImage_CIEdgePreserveUpsampleFilter");
	__xamarin_class_map [2273].handle = objc_getClass ("CoreImage_CIEdges");
	__xamarin_class_map [2274].handle = objc_getClass ("CoreImage_CIEdgeWork");
	__xamarin_class_map [2275].handle = objc_getClass ("CoreImage_CITileFilter");
	__xamarin_class_map [2276].handle = objc_getClass ("CoreImage_CIEightfoldReflectedTile");
	__xamarin_class_map [2277].handle = objc_getClass ("CoreImage_CIExclusionBlendMode");
	__xamarin_class_map [2278].handle = objc_getClass ("CoreImage_CIExposureAdjust");
	__xamarin_class_map [2279].handle = objc_getClass ("CoreImage_CIFaceBalance");
	__xamarin_class_map [2280].handle = objc_getClass ("CIFeature");
	__xamarin_class_map [2281].handle = objc_getClass ("CIFaceFeature");
	__xamarin_class_map [2282].handle = objc_getClass ("CoreImage_CIFalseColor");
	__xamarin_class_map [2283].handle = objc_getClass ("CIFilterGenerator");
	__xamarin_class_map [2284].handle = objc_getClass ("CIFilterShape");
	__xamarin_class_map [2285].handle = objc_getClass ("CoreImage_CIFlashTransition");
	__xamarin_class_map [2286].handle = objc_getClass ("CoreImage_CIFourfoldReflectedTile");
	__xamarin_class_map [2287].handle = objc_getClass ("CoreImage_CIFourfoldRotatedTile");
	__xamarin_class_map [2288].handle = objc_getClass ("CoreImage_CIFourfoldTranslatedTile");
	__xamarin_class_map [2289].handle = objc_getClass ("CoreImage_CIGaborGradients");
	__xamarin_class_map [2290].handle = objc_getClass ("CoreImage_CIGammaAdjust");
	__xamarin_class_map [2291].handle = objc_getClass ("CoreImage_CIGaussianBlur");
	__xamarin_class_map [2292].handle = objc_getClass ("CoreImage_CIGaussianGradient");
	__xamarin_class_map [2293].handle = objc_getClass ("CoreImage_CIGlassDistortion");
	__xamarin_class_map [2294].handle = objc_getClass ("CoreImage_CIGlassLozenge");
	__xamarin_class_map [2295].handle = objc_getClass ("CoreImage_CIGlideReflectedTile");
	__xamarin_class_map [2296].handle = objc_getClass ("CoreImage_CIGloom");
	__xamarin_class_map [2297].handle = objc_getClass ("CoreImage_CIGuidedFilter");
	__xamarin_class_map [2298].handle = objc_getClass ("CoreImage_CIHardLightBlendMode");
	__xamarin_class_map [2299].handle = objc_getClass ("CoreImage_CIHatchedScreen");
	__xamarin_class_map [2300].handle = objc_getClass ("CoreImage_CIHeightFieldFromMask");
	__xamarin_class_map [2301].handle = objc_getClass ("CoreImage_CIHexagonalPixellate");
	__xamarin_class_map [2302].handle = objc_getClass ("CoreImage_CIHighlightShadowAdjust");
	__xamarin_class_map [2303].handle = objc_getClass ("CoreImage_CIHistogramDisplayFilter");
	__xamarin_class_map [2304].handle = objc_getClass ("CoreImage_CIHoleDistortion");
	__xamarin_class_map [2305].handle = objc_getClass ("CoreImage_CIHueAdjust");
	__xamarin_class_map [2306].handle = objc_getClass ("CoreImage_CIHueBlendMode");
	__xamarin_class_map [2307].handle = objc_getClass ("CoreImage_CIHueSaturationValueGradient");
	__xamarin_class_map [2308].handle = objc_getClass ("CIImageAccumulator");
	__xamarin_class_map [2309].handle = objc_getClass ("CIImageProcessorKernel");
	__xamarin_class_map [2310].handle = objc_getClass ("CoreImage_CIKaleidoscope");
	__xamarin_class_map [2311].handle = objc_getClass ("CoreImage_CIKeystoneCorrection");
	__xamarin_class_map [2312].handle = objc_getClass ("CoreImage_CIKeystoneCorrectionCombined");
	__xamarin_class_map [2313].handle = objc_getClass ("CoreImage_CIKeystoneCorrectionHorizontal");
	__xamarin_class_map [2314].handle = objc_getClass ("CoreImage_CIKeystoneCorrectionVertical");
	__xamarin_class_map [2315].handle = objc_getClass ("CoreImage_CIKMeans");
	__xamarin_class_map [2316].handle = objc_getClass ("CoreImage_CILabDeltaE");
	__xamarin_class_map [2317].handle = objc_getClass ("CoreImage_CILanczosScaleTransform");
	__xamarin_class_map [2318].handle = objc_getClass ("CoreImage_CILenticularHaloGenerator");
	__xamarin_class_map [2319].handle = objc_getClass ("CoreImage_CILightenBlendMode");
	__xamarin_class_map [2320].handle = objc_getClass ("CoreImage_CILightTunnel");
	__xamarin_class_map [2321].handle = objc_getClass ("CoreImage_CILinearBurnBlendMode");
	__xamarin_class_map [2322].handle = objc_getClass ("CoreImage_CILinearDodgeBlendMode");
	__xamarin_class_map [2323].handle = objc_getClass ("CoreImage_CILinearGradient");
	__xamarin_class_map [2324].handle = objc_getClass ("CoreImage_CILinearLightBlendMode");
	__xamarin_class_map [2325].handle = objc_getClass ("CoreImage_CILinearToSRGBToneCurve");
	__xamarin_class_map [2326].handle = objc_getClass ("CoreImage_CILineOverlay");
	__xamarin_class_map [2327].handle = objc_getClass ("CoreImage_CILineScreen");
	__xamarin_class_map [2328].handle = objc_getClass ("CoreImage_CILuminosityBlendMode");
	__xamarin_class_map [2329].handle = objc_getClass ("CoreImage_CIMaskedVariableBlur");
	__xamarin_class_map [2330].handle = objc_getClass ("CoreImage_CIMaskToAlpha");
	__xamarin_class_map [2331].handle = objc_getClass ("CoreImage_CIMaximumComponent");
	__xamarin_class_map [2332].handle = objc_getClass ("CoreImage_CIMaximumCompositing");
	__xamarin_class_map [2333].handle = objc_getClass ("CoreImage_CIMedianFilter");
	__xamarin_class_map [2334].handle = objc_getClass ("CoreImage_CIMeshGenerator");
	__xamarin_class_map [2335].handle = objc_getClass ("CoreImage_CIMinimumComponent");
	__xamarin_class_map [2336].handle = objc_getClass ("CoreImage_CIMinimumCompositing");
	__xamarin_class_map [2337].handle = objc_getClass ("CoreImage_CIMix");
	__xamarin_class_map [2338].handle = objc_getClass ("CoreImage_CIModTransition");
	__xamarin_class_map [2339].handle = objc_getClass ("CoreImage_CIMorphology");
	__xamarin_class_map [2340].handle = objc_getClass ("CoreImage_CIMorphologyGradient");
	__xamarin_class_map [2341].handle = objc_getClass ("CoreImage_CIMorphologyMaximum");
	__xamarin_class_map [2342].handle = objc_getClass ("CoreImage_CIMorphologyMinimum");
	__xamarin_class_map [2343].handle = objc_getClass ("CoreImage_CIMorphologyRectangle");
	__xamarin_class_map [2344].handle = objc_getClass ("CoreImage_CIMorphologyRectangleMaximum");
	__xamarin_class_map [2345].handle = objc_getClass ("CoreImage_CIMorphologyRectangleMinimum");
	__xamarin_class_map [2346].handle = objc_getClass ("CoreImage_CIMotionBlur");
	__xamarin_class_map [2347].handle = objc_getClass ("CoreImage_CIMultiplyBlendMode");
	__xamarin_class_map [2348].handle = objc_getClass ("CoreImage_CIMultiplyCompositing");
	__xamarin_class_map [2349].handle = objc_getClass ("CoreImage_CINinePartStretched");
	__xamarin_class_map [2350].handle = objc_getClass ("CoreImage_CINinePartTiled");
	__xamarin_class_map [2351].handle = objc_getClass ("CoreImage_CINoiseReduction");
	__xamarin_class_map [2352].handle = objc_getClass ("CoreImage_CIOpTile");
	__xamarin_class_map [2353].handle = objc_getClass ("CoreImage_CIOverlayBlendMode");
	__xamarin_class_map [2354].handle = objc_getClass ("CoreImage_CIPageCurlTransition");
	__xamarin_class_map [2355].handle = objc_getClass ("CoreImage_CIPageCurlWithShadowTransition");
	__xamarin_class_map [2356].handle = objc_getClass ("CoreImage_CIPaletteCentroid");
	__xamarin_class_map [2357].handle = objc_getClass ("CoreImage_CIPalettize");
	__xamarin_class_map [2358].handle = objc_getClass ("CoreImage_CIParallelogramTile");
	__xamarin_class_map [2359].handle = objc_getClass ("CoreImage_CIPdf417BarcodeGenerator");
	__xamarin_class_map [2360].handle = objc_getClass ("CIPDF417CodeDescriptor");
	__xamarin_class_map [2361].handle = objc_getClass ("CoreImage_CIPersonSegmentation");
	__xamarin_class_map [2362].handle = objc_getClass ("CoreImage_CIPerspectiveTransform");
	__xamarin_class_map [2363].handle = objc_getClass ("CoreImage_CIPerspectiveCorrection");
	__xamarin_class_map [2364].handle = objc_getClass ("CoreImage_CIPerspectiveRotate");
	__xamarin_class_map [2365].handle = objc_getClass ("CoreImage_CIPerspectiveTile");
	__xamarin_class_map [2366].handle = objc_getClass ("CoreImage_CIPerspectiveTransformWithExtent");
	__xamarin_class_map [2367].handle = objc_getClass ("CoreImage_CIPhotoEffect");
	__xamarin_class_map [2368].handle = objc_getClass ("CoreImage_CIPhotoEffectChrome");
	__xamarin_class_map [2369].handle = objc_getClass ("CoreImage_CIPhotoEffectFade");
	__xamarin_class_map [2370].handle = objc_getClass ("CoreImage_CIPhotoEffectInstant");
	__xamarin_class_map [2371].handle = objc_getClass ("CoreImage_CIPhotoEffectMono");
	__xamarin_class_map [2372].handle = objc_getClass ("CoreImage_CIPhotoEffectNoir");
	__xamarin_class_map [2373].handle = objc_getClass ("CoreImage_CIPhotoEffectProcess");
	__xamarin_class_map [2374].handle = objc_getClass ("CoreImage_CIPhotoEffectTonal");
	__xamarin_class_map [2375].handle = objc_getClass ("CoreImage_CIPhotoEffectTransfer");
	__xamarin_class_map [2376].handle = objc_getClass ("CoreImage_CIPinchDistortion");
	__xamarin_class_map [2377].handle = objc_getClass ("CoreImage_CIPinLightBlendMode");
	__xamarin_class_map [2378].handle = objc_getClass ("CoreImage_CIPixellate");
	__xamarin_class_map [2379].handle = objc_getClass ("CIPlugIn");
	__xamarin_class_map [2380].handle = objc_getClass ("CoreImage_CIPointillize");
	__xamarin_class_map [2381].handle = objc_getClass ("CIQRCodeDescriptor");
	__xamarin_class_map [2382].handle = objc_getClass ("CIQRCodeFeature");
	__xamarin_class_map [2383].handle = objc_getClass ("CoreImage_CIQRCodeGenerator");
	__xamarin_class_map [2384].handle = objc_getClass ("CoreImage_CIRadialGradient");
	__xamarin_class_map [2385].handle = objc_getClass ("CoreImage_CIRandomGenerator");
	__xamarin_class_map [2386].handle = objc_getClass ("CIRAWFilter");
	__xamarin_class_map [2387].handle = objc_getClass ("CIRectangleFeature");
	__xamarin_class_map [2388].handle = objc_getClass ("CIRenderDestination");
	__xamarin_class_map [2389].handle = objc_getClass ("CIRenderInfo");
	__xamarin_class_map [2390].handle = objc_getClass ("CIRenderTask");
	__xamarin_class_map [2391].handle = objc_getClass ("CoreImage_CIRippleTransition");
	__xamarin_class_map [2392].handle = objc_getClass ("CoreImage_CIRoundedRectangleGenerator");
	__xamarin_class_map [2393].handle = objc_getClass ("CoreImage_CIRowAverage");
	__xamarin_class_map [2394].handle = objc_getClass ("CoreImage_CISaliencyMapFilter");
	__xamarin_class_map [2395].handle = objc_getClass ("CoreImage_CISampleNearest");
	__xamarin_class_map [2396].handle = objc_getClass ("CoreImage_CISaturationBlendMode");
	__xamarin_class_map [2397].handle = objc_getClass ("CoreImage_CIScreenBlendMode");
	__xamarin_class_map [2398].handle = objc_getClass ("CoreImage_CISepiaTone");
	__xamarin_class_map [2399].handle = objc_getClass ("CoreImage_CIShadedMaterial");
	__xamarin_class_map [2400].handle = objc_getClass ("CoreImage_CISharpenLuminance");
	__xamarin_class_map [2401].handle = objc_getClass ("CoreImage_CISixfoldReflectedTile");
	__xamarin_class_map [2402].handle = objc_getClass ("CoreImage_CISixfoldRotatedTile");
	__xamarin_class_map [2403].handle = objc_getClass ("CoreImage_CISmoothLinearGradient");
	__xamarin_class_map [2404].handle = objc_getClass ("CoreImage_CISoftLightBlendMode");
	__xamarin_class_map [2405].handle = objc_getClass ("CoreImage_CISourceAtopCompositing");
	__xamarin_class_map [2406].handle = objc_getClass ("CoreImage_CISourceInCompositing");
	__xamarin_class_map [2407].handle = objc_getClass ("CoreImage_CISourceOutCompositing");
	__xamarin_class_map [2408].handle = objc_getClass ("CoreImage_CISourceOverCompositing");
	__xamarin_class_map [2409].handle = objc_getClass ("CoreImage_CISpotColor");
	__xamarin_class_map [2410].handle = objc_getClass ("CoreImage_CISpotLight");
	__xamarin_class_map [2411].handle = objc_getClass ("CoreImage_CISRGBToneCurveToLinear");
	__xamarin_class_map [2412].handle = objc_getClass ("CoreImage_CIStarShineGenerator");
	__xamarin_class_map [2413].handle = objc_getClass ("CoreImage_CIStraightenFilter");
	__xamarin_class_map [2414].handle = objc_getClass ("CoreImage_CIStretchCrop");
	__xamarin_class_map [2415].handle = objc_getClass ("CoreImage_CIStripesGenerator");
	__xamarin_class_map [2416].handle = objc_getClass ("CoreImage_CISubtractBlendMode");
	__xamarin_class_map [2417].handle = objc_getClass ("CoreImage_CISunbeamsGenerator");
	__xamarin_class_map [2418].handle = objc_getClass ("CoreImage_CISwipeTransition");
	__xamarin_class_map [2419].handle = objc_getClass ("CoreImage_CITemperatureAndTint");
	__xamarin_class_map [2420].handle = objc_getClass ("CITextFeature");
	__xamarin_class_map [2421].handle = objc_getClass ("CoreImage_CITextImageGenerator");
	__xamarin_class_map [2422].handle = objc_getClass ("CoreImage_CIThermal");
	__xamarin_class_map [2423].handle = objc_getClass ("CoreImage_CIToneCurve");
	__xamarin_class_map [2424].handle = objc_getClass ("CoreImage_CITorusLensDistortion");
	__xamarin_class_map [2425].handle = objc_getClass ("CoreImage_CITriangleKaleidoscope");
	__xamarin_class_map [2426].handle = objc_getClass ("CoreImage_CITriangleTile");
	__xamarin_class_map [2427].handle = objc_getClass ("CoreImage_CITwelvefoldReflectedTile");
	__xamarin_class_map [2428].handle = objc_getClass ("CoreImage_CITwirlDistortion");
	__xamarin_class_map [2429].handle = objc_getClass ("CoreImage_CIUnsharpMask");
	__xamarin_class_map [2430].handle = objc_getClass ("CoreImage_CIVibrance");
	__xamarin_class_map [2431].handle = objc_getClass ("CoreImage_CIVignette");
	__xamarin_class_map [2432].handle = objc_getClass ("CoreImage_CIVignetteEffect");
	__xamarin_class_map [2433].handle = objc_getClass ("CoreImage_CIVividLightBlendMode");
	__xamarin_class_map [2434].handle = objc_getClass ("CoreImage_CIVortexDistortion");
	__xamarin_class_map [2435].handle = objc_getClass ("CIWarpKernel");
	__xamarin_class_map [2436].handle = objc_getClass ("CoreImage_CIWhitePointAdjust");
	__xamarin_class_map [2437].handle = objc_getClass ("CoreImage_CIXRay");
	__xamarin_class_map [2438].handle = objc_getClass ("CoreImage_CIZoomBlur");
	__xamarin_class_map [2439].handle = objc_getClass ("NSEntityDescription");
	__xamarin_class_map [2440].handle = objc_getClass ("NSPersistentStoreRequest");
	__xamarin_class_map [2441].handle = objc_getClass ("NSAsynchronousFetchRequest");
	__xamarin_class_map [2442].handle = objc_getClass ("NSPersistentStoreResult");
	__xamarin_class_map [2443].handle = objc_getClass ("NSPersistentStoreAsynchronousResult");
	__xamarin_class_map [2444].handle = objc_getClass ("NSAsynchronousFetchResult");
	__xamarin_class_map [2445].handle = objc_getClass ("NSPersistentStore");
	__xamarin_class_map [2446].handle = objc_getClass ("NSAtomicStore");
	__xamarin_class_map [2447].handle = objc_getClass ("NSAtomicStoreCacheNode");
	__xamarin_class_map [2448].handle = objc_getClass ("NSPropertyDescription");
	__xamarin_class_map [2449].handle = objc_getClass ("NSAttributeDescription");
	__xamarin_class_map [2450].handle = objc_getClass ("NSBatchDeleteRequest");
	__xamarin_class_map [2451].handle = objc_getClass ("NSBatchDeleteResult");
	__xamarin_class_map [2452].handle = objc_getClass ("NSBatchInsertRequest");
	__xamarin_class_map [2453].handle = objc_getClass ("NSBatchInsertResult");
	__xamarin_class_map [2454].handle = objc_getClass ("NSBatchUpdateRequest");
	__xamarin_class_map [2455].handle = objc_getClass ("NSBatchUpdateResult");
	__xamarin_class_map [2456].handle = objc_getClass ("NSConstraintConflict");
	__xamarin_class_map [2457].handle = objc_getClass ("NSDerivedAttributeDescription");
	__xamarin_class_map [2458].handle = objc_getClass ("NSEntityMapping");
	__xamarin_class_map [2459].handle = objc_getClass ("NSEntityMigrationPolicy");
	__xamarin_class_map [2460].handle = objc_getClass ("NSExpressionDescription");
	__xamarin_class_map [2461].handle = objc_getClass ("NSFetchedPropertyDescription");
	__xamarin_class_map [2462].handle = objc_getClass ("NSFetchIndexDescription");
	__xamarin_class_map [2463].handle = objc_getClass ("NSFetchIndexElementDescription");
	__xamarin_class_map [2464].handle = objc_getClass ("NSFetchRequest");
	__xamarin_class_map [2465].handle = objc_getClass ("NSFetchRequestExpression");
	__xamarin_class_map [2466].handle = objc_getClass ("NSIncrementalStore");
	__xamarin_class_map [2467].handle = objc_getClass ("NSIncrementalStoreNode");
	__xamarin_class_map [2468].handle = objc_getClass ("NSManagedObject");
	__xamarin_class_map [2469].handle = objc_getClass ("NSManagedObjectID");
	__xamarin_class_map [2470].handle = objc_getClass ("NSManagedObjectModel");
	__xamarin_class_map [2471].handle = objc_getClass ("NSMappingModel");
	__xamarin_class_map [2472].handle = objc_getClass ("NSMergeConflict");
	__xamarin_class_map [2473].handle = objc_getClass ("NSMergePolicy");
	__xamarin_class_map [2474].handle = objc_getClass ("NSMigrationManager");
	__xamarin_class_map [2475].handle = objc_getClass ("NSPersistentCloudKitContainerEventRequest");
	__xamarin_class_map [2476].handle = objc_getClass ("NSPersistentCloudKitContainerEventResult");
	__xamarin_class_map [2477].handle = objc_getClass ("NSPersistentCloudKitContainerOptions");
	__xamarin_class_map [2478].handle = objc_getClass ("NSPersistentHistoryChange");
	__xamarin_class_map [2479].handle = objc_getClass ("NSPersistentHistoryChangeRequest");
	__xamarin_class_map [2480].handle = objc_getClass ("NSPersistentHistoryResult");
	__xamarin_class_map [2481].handle = objc_getClass ("NSPersistentHistoryToken");
	__xamarin_class_map [2482].handle = objc_getClass ("NSPersistentHistoryTransaction");
	__xamarin_class_map [2483].handle = objc_getClass ("NSPersistentStoreDescription");
	__xamarin_class_map [2484].handle = objc_getClass ("NSPropertyMapping");
	__xamarin_class_map [2485].handle = objc_getClass ("NSQueryGenerationToken");
	__xamarin_class_map [2486].handle = objc_getClass ("NSRelationshipDescription");
	__xamarin_class_map [2487].handle = objc_getClass ("NSSaveChangesRequest");
	__xamarin_class_map [2488].handle = objc_getClass ("CBUUID");
	__xamarin_class_map [2489].handle = objc_getClass ("CBATTRequest");
	__xamarin_class_map [2490].handle = objc_getClass ("CBAttribute");
	__xamarin_class_map [2491].handle = objc_getClass ("CBPeer");
	__xamarin_class_map [2492].handle = objc_getClass ("CBCentral");
	__xamarin_class_map [2493].handle = objc_getClass ("Microsoft_macOS__CoreBluetooth_CBCentralManagerDelegate");
	__xamarin_class_map [2494].handle = objc_getClass ("CBCharacteristic");
	__xamarin_class_map [2495].handle = objc_getClass ("CBDescriptor");
	__xamarin_class_map [2496].handle = objc_getClass ("CBL2CAPChannel");
	__xamarin_class_map [2497].handle = objc_getClass ("CBManager");
	__xamarin_class_map [2498].handle = objc_getClass ("CBMutableCharacteristic");
	__xamarin_class_map [2499].handle = objc_getClass ("CBMutableDescriptor");
	__xamarin_class_map [2500].handle = objc_getClass ("CBService");
	__xamarin_class_map [2501].handle = objc_getClass ("CBMutableService");
	__xamarin_class_map [2502].handle = objc_getClass ("Microsoft_macOS__CoreBluetooth_CBPeripheralDelegate");
	__xamarin_class_map [2503].handle = objc_getClass ("Microsoft_macOS__CoreBluetooth_CBPeripheralManagerDelegate");
	__xamarin_class_map [2504].handle = objc_getClass ("CAAnimation");
	__xamarin_class_map [2505].handle = objc_getClass ("CAPropertyAnimation");
	__xamarin_class_map [2506].handle = objc_getClass ("CABasicAnimation");
	__xamarin_class_map [2507].handle = objc_getClass ("CAGradientLayer");
	__xamarin_class_map [2508].handle = objc_getClass ("CAKeyframeAnimation");
	__xamarin_class_map [2509].handle = objc_getClass ("Microsoft_macOS__CoreAnimation_CALayerDelegate");
	__xamarin_class_map [2510].handle = objc_getClass ("CAMediaTimingFunction");
	__xamarin_class_map [2511].handle = objc_getClass ("CATextLayer");
	__xamarin_class_map [2512].handle = objc_getClass ("Microsoft_macOS__CoreAnimation_CAAction");
	__xamarin_class_map [2513].handle = objc_getClass ("Microsoft_macOS__CoreAnimation_CAAnimationDelegate");
	__xamarin_class_map [2514].handle = objc_getClass ("CAAnimationGroup");
	__xamarin_class_map [2515].handle = objc_getClass ("CAConstraint");
	__xamarin_class_map [2516].handle = objc_getClass ("CAConstraintLayoutManager");
	__xamarin_class_map [2517].handle = objc_getClass ("CAEDRMetadata");
	__xamarin_class_map [2518].handle = objc_getClass ("CAEmitterCell");
	__xamarin_class_map [2519].handle = objc_getClass ("CAEmitterLayer");
	__xamarin_class_map [2520].handle = objc_getClass ("Microsoft_macOS__CoreAnimation_CAMediaTiming");
	__xamarin_class_map [2521].handle = objc_getClass ("CAMetalLayer");
	__xamarin_class_map [2522].handle = objc_getClass ("CARenderer");
	__xamarin_class_map [2523].handle = objc_getClass ("CAReplicatorLayer");
	__xamarin_class_map [2524].handle = objc_getClass ("CAScrollLayer");
	__xamarin_class_map [2525].handle = objc_getClass ("CAShapeLayer");
	__xamarin_class_map [2526].handle = objc_getClass ("CASpringAnimation");
	__xamarin_class_map [2527].handle = objc_getClass ("CATiledLayer");
	__xamarin_class_map [2528].handle = objc_getClass ("CATransaction");
	__xamarin_class_map [2529].handle = objc_getClass ("CATransformLayer");
	__xamarin_class_map [2530].handle = objc_getClass ("CATransition");
	__xamarin_class_map [2531].handle = objc_getClass ("CAValueFunction");
	__xamarin_class_map [2532].handle = objc_getClass ("CNFetchRequest");
	__xamarin_class_map [2533].handle = objc_getClass ("CNContactFetchRequest");
	__xamarin_class_map [2534].handle = objc_getClass ("CNInstantMessageAddress");
	__xamarin_class_map [2535].handle = objc_getClass ("CNSocialProfile");
	__xamarin_class_map [2536].handle = objc_getClass ("CNChangeHistoryEvent");
	__xamarin_class_map [2537].handle = objc_getClass ("CNChangeHistoryAddContactEvent");
	__xamarin_class_map [2538].handle = objc_getClass ("CNChangeHistoryAddGroupEvent");
	__xamarin_class_map [2539].handle = objc_getClass ("CNChangeHistoryAddMemberToGroupEvent");
	__xamarin_class_map [2540].handle = objc_getClass ("CNChangeHistoryAddSubgroupToGroupEvent");
	__xamarin_class_map [2541].handle = objc_getClass ("CNChangeHistoryDeleteContactEvent");
	__xamarin_class_map [2542].handle = objc_getClass ("CNChangeHistoryDeleteGroupEvent");
	__xamarin_class_map [2543].handle = objc_getClass ("CNChangeHistoryDropEverythingEvent");
	__xamarin_class_map [2544].handle = objc_getClass ("CNChangeHistoryFetchRequest");
	__xamarin_class_map [2545].handle = objc_getClass ("CNChangeHistoryRemoveMemberFromGroupEvent");
	__xamarin_class_map [2546].handle = objc_getClass ("CNChangeHistoryRemoveSubgroupFromGroupEvent");
	__xamarin_class_map [2547].handle = objc_getClass ("CNChangeHistoryUpdateContactEvent");
	__xamarin_class_map [2548].handle = objc_getClass ("CNChangeHistoryUpdateGroupEvent");
	__xamarin_class_map [2549].handle = objc_getClass ("CNContactFormatter");
	__xamarin_class_map [2550].handle = objc_getClass ("CNContactProperty");
	__xamarin_class_map [2551].handle = objc_getClass ("CNContactRelation");
	__xamarin_class_map [2552].handle = objc_getClass ("CNContactsUserDefaults");
	__xamarin_class_map [2553].handle = objc_getClass ("CNContactVCardSerialization");
	__xamarin_class_map [2554].handle = objc_getClass ("CNContainer");
	__xamarin_class_map [2555].handle = objc_getClass ("CNFetchResult");
	__xamarin_class_map [2556].handle = objc_getClass ("CNGroup");
	__xamarin_class_map [2557].handle = objc_getClass ("CNLabeledValue");
	__xamarin_class_map [2558].handle = objc_getClass ("CNContact");
	__xamarin_class_map [2559].handle = objc_getClass ("CNMutableContact");
	__xamarin_class_map [2560].handle = objc_getClass ("CNMutableGroup");
	__xamarin_class_map [2561].handle = objc_getClass ("CNPostalAddress");
	__xamarin_class_map [2562].handle = objc_getClass ("CNMutablePostalAddress");
	__xamarin_class_map [2563].handle = objc_getClass ("CNPhoneNumber");
	__xamarin_class_map [2564].handle = objc_getClass ("CNPostalAddressFormatter");
	__xamarin_class_map [2565].handle = objc_getClass ("CNSaveRequest");
	__xamarin_class_map [2566].handle = objc_getClass ("CKRecord");
	__xamarin_class_map [2567].handle = objc_getClass ("CKRecordID");
	__xamarin_class_map [2568].handle = objc_getClass ("CKRecordZoneID");
	__xamarin_class_map [2569].handle = objc_getClass ("CKUserIdentityLookupInfo");
	__xamarin_class_map [2570].handle = objc_getClass ("CKOperation");
	__xamarin_class_map [2571].handle = objc_getClass ("CKAcceptSharesOperation");
	__xamarin_class_map [2572].handle = objc_getClass ("CKAllowedSharingOptions");
	__xamarin_class_map [2573].handle = objc_getClass ("CKAsset");
	__xamarin_class_map [2574].handle = objc_getClass ("CKNotification");
	__xamarin_class_map [2575].handle = objc_getClass ("CKDatabaseNotification");
	__xamarin_class_map [2576].handle = objc_getClass ("CKDatabaseOperation");
	__xamarin_class_map [2577].handle = objc_getClass ("CKSubscription");
	__xamarin_class_map [2578].handle = objc_getClass ("CKDatabaseSubscription");
	__xamarin_class_map [2579].handle = objc_getClass ("CKDiscoverAllUserIdentitiesOperation");
	__xamarin_class_map [2580].handle = objc_getClass ("CKDiscoverUserIdentitiesOperation");
	__xamarin_class_map [2581].handle = objc_getClass ("CKFetchDatabaseChangesOperation");
	__xamarin_class_map [2582].handle = objc_getClass ("CKFetchNotificationChangesOperation");
	__xamarin_class_map [2583].handle = objc_getClass ("CKFetchRecordChangesOperation");
	__xamarin_class_map [2584].handle = objc_getClass ("CKFetchRecordsOperation");
	__xamarin_class_map [2585].handle = objc_getClass ("CKFetchRecordZoneChangesConfiguration");
	__xamarin_class_map [2586].handle = objc_getClass ("CKFetchRecordZoneChangesOperation");
	__xamarin_class_map [2587].handle = objc_getClass ("CKFetchRecordZoneChangesOptions");
	__xamarin_class_map [2588].handle = objc_getClass ("CKFetchRecordZonesOperation");
	__xamarin_class_map [2589].handle = objc_getClass ("CKFetchShareMetadataOperation");
	__xamarin_class_map [2590].handle = objc_getClass ("CKFetchShareParticipantsOperation");
	__xamarin_class_map [2591].handle = objc_getClass ("CKFetchSubscriptionsOperation");
	__xamarin_class_map [2592].handle = objc_getClass ("CKFetchWebAuthTokenOperation");
	__xamarin_class_map [2593].handle = objc_getClass ("CKLocationSortDescriptor");
	__xamarin_class_map [2594].handle = objc_getClass ("CKMarkNotificationsReadOperation");
	__xamarin_class_map [2595].handle = objc_getClass ("CKModifyBadgeOperation");
	__xamarin_class_map [2596].handle = objc_getClass ("CKModifyRecordsOperation");
	__xamarin_class_map [2597].handle = objc_getClass ("CKModifyRecordZonesOperation");
	__xamarin_class_map [2598].handle = objc_getClass ("CKModifySubscriptionsOperation");
	__xamarin_class_map [2599].handle = objc_getClass ("CKNotificationID");
	__xamarin_class_map [2600].handle = objc_getClass ("CKNotificationInfo");
	__xamarin_class_map [2601].handle = objc_getClass ("CKOperationConfiguration");
	__xamarin_class_map [2602].handle = objc_getClass ("CKOperationGroup");
	__xamarin_class_map [2603].handle = objc_getClass ("CKQuery");
	__xamarin_class_map [2604].handle = objc_getClass ("CKQueryCursor");
	__xamarin_class_map [2605].handle = objc_getClass ("CKQueryNotification");
	__xamarin_class_map [2606].handle = objc_getClass ("CKQueryOperation");
	__xamarin_class_map [2607].handle = objc_getClass ("CKQuerySubscription");
	__xamarin_class_map [2608].handle = objc_getClass ("Microsoft_macOS__CloudKit_CKRecordValue");
	__xamarin_class_map [2609].handle = objc_getClass ("CKRecordZone");
	__xamarin_class_map [2610].handle = objc_getClass ("CKRecordZoneNotification");
	__xamarin_class_map [2611].handle = objc_getClass ("CKRecordZoneSubscription");
	__xamarin_class_map [2612].handle = objc_getClass ("CKReference");
	__xamarin_class_map [2613].handle = objc_getClass ("CKServerChangeToken");
	__xamarin_class_map [2614].handle = objc_getClass ("CKShare");
	__xamarin_class_map [2615].handle = objc_getClass ("CKShareMetadata");
	__xamarin_class_map [2616].handle = objc_getClass ("CKShareParticipant");
	__xamarin_class_map [2617].handle = objc_getClass ("CKSystemSharingUIObserver");
	__xamarin_class_map [2618].handle = objc_getClass ("CKUserIdentity");
	__xamarin_class_map [2619].handle = objc_getClass ("CLSObject");
	__xamarin_class_map [2620].handle = objc_getClass ("CLSActivity");
	__xamarin_class_map [2621].handle = objc_getClass ("CLSActivityItem");
	__xamarin_class_map [2622].handle = objc_getClass ("CLSBinaryItem");
	__xamarin_class_map [2623].handle = objc_getClass ("Microsoft_macOS__ClassKit_CLSDataStoreDelegate");
	__xamarin_class_map [2624].handle = objc_getClass ("CLSProgressReportingCapability");
	__xamarin_class_map [2625].handle = objc_getClass ("CLSQuantityItem");
	__xamarin_class_map [2626].handle = objc_getClass ("CLSScoreItem");
	__xamarin_class_map [2627].handle = objc_getClass ("BCChatAction");
	__xamarin_class_map [2628].handle = objc_getClass ("BCChatButton");
	__xamarin_class_map [2629].handle = objc_getClass ("BAAppExtensionInfo");
	__xamarin_class_map [2630].handle = objc_getClass ("BADownload");
	__xamarin_class_map [2631].handle = objc_getClass ("Microsoft_macOS__BackgroundAssets_BADownloadManagerDelegate");
	__xamarin_class_map [2632].handle = objc_getClass ("BAURLDownload");
	__xamarin_class_map [2633].handle = objc_getClass ("ASAuthorization");
	__xamarin_class_map [2634].handle = objc_getClass ("ASAuthorizationRequest");
	__xamarin_class_map [2635].handle = objc_getClass ("Microsoft_macOS__AuthenticationServices_ASAuthorizationProviderExtensionRegistrationHandler");
	__xamarin_class_map [2636].handle = objc_getClass ("ASAuthorizationAppleIDButton");
	__xamarin_class_map [2637].handle = objc_getClass ("ASAuthorizationOpenIDRequest");
	__xamarin_class_map [2638].handle = objc_getClass ("ASAuthorizationAppleIDRequest");
	__xamarin_class_map [2639].handle = objc_getClass ("ASAuthorizationController");
	__xamarin_class_map [2640].handle = objc_getClass ("Microsoft_macOS__AuthenticationServices_ASAuthorizationControllerDelegate");
	__xamarin_class_map [2641].handle = objc_getClass ("ASAuthorizationPasswordProvider");
	__xamarin_class_map [2642].handle = objc_getClass ("ASAuthorizationPasswordRequest");
	__xamarin_class_map [2643].handle = objc_getClass ("ASAuthorizationPlatformPublicKeyCredentialAssertion");
	__xamarin_class_map [2644].handle = objc_getClass ("ASAuthorizationPlatformPublicKeyCredentialAssertionRequest");
	__xamarin_class_map [2645].handle = objc_getClass ("ASAuthorizationPlatformPublicKeyCredentialDescriptor");
	__xamarin_class_map [2646].handle = objc_getClass ("ASAuthorizationPlatformPublicKeyCredentialProvider");
	__xamarin_class_map [2647].handle = objc_getClass ("ASAuthorizationPlatformPublicKeyCredentialRegistration");
	__xamarin_class_map [2648].handle = objc_getClass ("ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest");
	__xamarin_class_map [2649].handle = objc_getClass ("ASAuthorizationProviderExtensionAuthorizationResult");
	__xamarin_class_map [2650].handle = objc_getClass ("ASAuthorizationProviderExtensionKerberosMapping");
	__xamarin_class_map [2651].handle = objc_getClass ("ASAuthorizationPublicKeyCredentialParameters");
	__xamarin_class_map [2652].handle = objc_getClass ("ASAuthorizationSecurityKeyPublicKeyCredentialAssertion");
	__xamarin_class_map [2653].handle = objc_getClass ("ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest");
	__xamarin_class_map [2654].handle = objc_getClass ("ASAuthorizationSecurityKeyPublicKeyCredentialProvider");
	__xamarin_class_map [2655].handle = objc_getClass ("ASAuthorizationSecurityKeyPublicKeyCredentialRegistration");
	__xamarin_class_map [2656].handle = objc_getClass ("ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest");
	__xamarin_class_map [2657].handle = objc_getClass ("ASAuthorizationSingleSignOnProvider");
	__xamarin_class_map [2658].handle = objc_getClass ("ASAuthorizationSingleSignOnRequest");
	__xamarin_class_map [2659].handle = objc_getClass ("ASAuthorizationWebBrowserPlatformPublicKeyCredential");
	__xamarin_class_map [2660].handle = objc_getClass ("ASCredentialIdentityStoreState");
	__xamarin_class_map [2661].handle = objc_getClass ("ASCredentialProviderExtensionContext");
	__xamarin_class_map [2662].handle = objc_getClass ("ASCredentialProviderViewController");
	__xamarin_class_map [2663].handle = objc_getClass ("ASCredentialServiceIdentifier");
	__xamarin_class_map [2664].handle = objc_getClass ("ASPasswordCredential");
	__xamarin_class_map [2665].handle = objc_getClass ("ASPasswordCredentialIdentity");
	__xamarin_class_map [2666].handle = objc_getClass ("ASWebAuthenticationSession");
	__xamarin_class_map [2667].handle = objc_getClass ("ASWebAuthenticationSessionRequest");
	__xamarin_class_map [2668].handle = objc_getClass ("Microsoft_macOS__AuthenticationServices_ASWebAuthenticationSessionRequestDelegate");
	__xamarin_class_map [2669].handle = objc_getClass ("ASWebAuthenticationSessionWebBrowserSessionManager");
	__xamarin_class_map [2670].handle = objc_getClass ("AUParameterNode");
	__xamarin_class_map [2671].handle = objc_getClass ("AUParameter");
	__xamarin_class_map [2672].handle = objc_getClass ("AUAudioUnitBus");
	__xamarin_class_map [2673].handle = objc_getClass ("AUAudioUnitBusArray");
	__xamarin_class_map [2674].handle = objc_getClass ("AUAudioUnitPreset");
	__xamarin_class_map [2675].handle = objc_getClass ("AUParameterGroup");
	__xamarin_class_map [2676].handle = objc_getClass ("AUParameterTree");
	__xamarin_class_map [2677].handle = objc_getClass ("__monomac_internal_ActionDispatcher");
	__xamarin_class_map [2678].handle = objc_getClass ("NSSavePanel");
	__xamarin_class_map [2679].handle = objc_getClass ("NSOpenPanel");
	__xamarin_class_map [2680].handle = objc_getClass ("NSPageLayout");
	__xamarin_class_map [2681].handle = objc_getClass ("NSPathControl");
	__xamarin_class_map [2682].handle = objc_getClass ("NSStatusItem");
	__xamarin_class_map [2683].handle = objc_getClass ("NSCell");
	__xamarin_class_map [2684].handle = objc_getClass ("NSActionCell");
	__xamarin_class_map [2685].handle = objc_getClass ("__MonoMac_NSAlertDidEndDispatcher");
	__xamarin_class_map [2686].handle = objc_getClass ("NSController");
	__xamarin_class_map [2687].handle = objc_getClass ("NSObjectController");
	__xamarin_class_map [2688].handle = objc_getClass ("NSArrayController");
	__xamarin_class_map [2689].handle = objc_getClass ("NSBezierPath");
	__xamarin_class_map [2690].handle = objc_getClass ("NSImageRep");
	__xamarin_class_map [2691].handle = objc_getClass ("NSBitmapImageRep");
	__xamarin_class_map [2692].handle = objc_getClass ("NSCollectionLayoutAnchor");
	__xamarin_class_map [2693].handle = objc_getClass ("NSCollectionView");
	__xamarin_class_map [2694].handle = objc_getClass ("NSCollectionViewLayout");
	__xamarin_class_map [2695].handle = objc_getClass ("NSTouchBarItem");
	__xamarin_class_map [2696].handle = objc_getClass ("NSColorPickerTouchBarItem");
	__xamarin_class_map [2697].handle = objc_getClass ("NSDraggingSession");
	__xamarin_class_map [2698].handle = objc_getClass ("NSGraphicsContext");
	__xamarin_class_map [2699].handle = objc_getClass ("NSLayoutManager");
	__xamarin_class_map [2700].handle = objc_getClass ("NSLevelIndicator");
	__xamarin_class_map [2701].handle = objc_getClass ("NSOpenGLContext");
	__xamarin_class_map [2702].handle = objc_getClass ("NSOpenGLPixelFormat");
	__xamarin_class_map [2703].handle = objc_getClass ("NSPasteboard");
	__xamarin_class_map [2704].handle = objc_getClass ("NSPathControlItem");
	__xamarin_class_map [2705].handle = objc_getClass ("NSPrintInfo");
	__xamarin_class_map [2706].handle = objc_getClass ("NSSegmentedControl");
	__xamarin_class_map [2707].handle = objc_getClass ("NSSlider");
	__xamarin_class_map [2708].handle = objc_getClass ("NSSliderTouchBarItem");
	__xamarin_class_map [2709].handle = objc_getClass ("NSSpeechSynthesizer");
	__xamarin_class_map [2710].handle = objc_getClass ("NSStatusBar");
	__xamarin_class_map [2711].handle = objc_getClass ("NSTextContainer");
	__xamarin_class_map [2712].handle = objc_getClass ("NSToolbarItem");
	__xamarin_class_map [2713].handle = objc_getClass ("NSTouch");
	__xamarin_class_map [2714].handle = objc_getClass ("NSTreeController");
	__xamarin_class_map [2715].handle = objc_getClass ("NSLayoutConstraint");
	__xamarin_class_map [2716].handle = objc_getClass ("NSAccessibilityCustomAction");
	__xamarin_class_map [2717].handle = objc_getClass ("NSAccessibilityCustomRotor");
	__xamarin_class_map [2718].handle = objc_getClass ("NSAccessibilityCustomRotorItemResult");
	__xamarin_class_map [2719].handle = objc_getClass ("Microsoft_macOS__AppKit_NSAccessibilityCustomRotorItemSearchDelegate");
	__xamarin_class_map [2720].handle = objc_getClass ("NSAccessibilityCustomRotorSearchParameters");
	__xamarin_class_map [2721].handle = objc_getClass ("Microsoft_macOS__AppKit_NSAlertDelegate");
	__xamarin_class_map [2722].handle = objc_getClass ("NSAlignmentFeedbackFilter");
	__xamarin_class_map [2723].handle = objc_getClass ("Microsoft_macOS__AppKit_NSAlignmentFeedbackToken");
	__xamarin_class_map [2724].handle = objc_getClass ("NSAnimationContext");
	__xamarin_class_map [2725].handle = objc_getClass ("Microsoft_macOS__AppKit_NSAnimationDelegate");
	__xamarin_class_map [2726].handle = objc_getClass ("NSAppearance");
	__xamarin_class_map [2727].handle = objc_getClass ("Microsoft_macOS__AppKit_NSAppearanceCustomization");
	__xamarin_class_map [2728].handle = objc_getClass ("NSTypesetter");
	__xamarin_class_map [2729].handle = objc_getClass ("NSATSTypesetter");
	__xamarin_class_map [2730].handle = objc_getClass ("NSBox");
	__xamarin_class_map [2731].handle = objc_getClass ("NSBrowserCell");
	__xamarin_class_map [2732].handle = objc_getClass ("Microsoft_macOS__AppKit_NSBrowserDelegate");
	__xamarin_class_map [2733].handle = objc_getClass ("NSButtonCell");
	__xamarin_class_map [2734].handle = objc_getClass ("NSButtonTouchBarItem");
	__xamarin_class_map [2735].handle = objc_getClass ("NSCachedImageRep");
	__xamarin_class_map [2736].handle = objc_getClass ("NSCandidateListTouchBarItem");
	__xamarin_class_map [2737].handle = objc_getClass ("Microsoft_macOS__AppKit_NSCandidateListTouchBarItemDelegate");
	__xamarin_class_map [2738].handle = objc_getClass ("NSCIImageRep");
	__xamarin_class_map [2739].handle = objc_getClass ("NSClipView");
	__xamarin_class_map [2740].handle = objc_getClass ("Microsoft_macOS__AppKit_NSSharingServiceDelegate");
	__xamarin_class_map [2741].handle = objc_getClass ("Microsoft_macOS__AppKit_NSCloudSharingServiceDelegate");
	__xamarin_class_map [2742].handle = objc_getClass ("NSCollectionLayoutItem");
	__xamarin_class_map [2743].handle = objc_getClass ("NSCollectionLayoutSupplementaryItem");
	__xamarin_class_map [2744].handle = objc_getClass ("NSCollectionLayoutBoundarySupplementaryItem");
	__xamarin_class_map [2745].handle = objc_getClass ("NSCollectionLayoutDecorationItem");
	__xamarin_class_map [2746].handle = objc_getClass ("NSCollectionLayoutDimension");
	__xamarin_class_map [2747].handle = objc_getClass ("NSCollectionLayoutEdgeSpacing");
	__xamarin_class_map [2748].handle = objc_getClass ("NSCollectionLayoutGroup");
	__xamarin_class_map [2749].handle = objc_getClass ("NSCollectionLayoutGroupCustomItem");
	__xamarin_class_map [2750].handle = objc_getClass ("NSCollectionLayoutSection");
	__xamarin_class_map [2751].handle = objc_getClass ("NSCollectionLayoutSize");
	__xamarin_class_map [2752].handle = objc_getClass ("NSCollectionLayoutSpacing");
	__xamarin_class_map [2753].handle = objc_getClass ("NSCollectionViewCompositionalLayout");
	__xamarin_class_map [2754].handle = objc_getClass ("NSCollectionViewCompositionalLayoutConfiguration");
	__xamarin_class_map [2755].handle = objc_getClass ("Microsoft_macOS__AppKit_NSCollectionViewDataSource");
	__xamarin_class_map [2756].handle = objc_getClass ("Microsoft_macOS__AppKit_NSCollectionViewDelegate");
	__xamarin_class_map [2757].handle = objc_getClass ("Microsoft_macOS__AppKit_NSCollectionViewDelegateFlowLayout");
	__xamarin_class_map [2758].handle = objc_getClass ("NSCollectionViewDiffableDataSource");
	__xamarin_class_map [2759].handle = objc_getClass ("Microsoft_macOS__AppKit_NSCollectionViewElement");
	__xamarin_class_map [2760].handle = objc_getClass ("NSCollectionViewFlowLayout");
	__xamarin_class_map [2761].handle = objc_getClass ("NSCollectionViewLayoutInvalidationContext");
	__xamarin_class_map [2762].handle = objc_getClass ("NSCollectionViewFlowLayoutInvalidationContext");
	__xamarin_class_map [2763].handle = objc_getClass ("NSCollectionViewGridLayout");
	__xamarin_class_map [2764].handle = objc_getClass ("NSCollectionViewItem");
	__xamarin_class_map [2765].handle = objc_getClass ("NSCollectionViewLayoutAttributes");
	__xamarin_class_map [2766].handle = objc_getClass ("NSCollectionViewTransitionLayout");
	__xamarin_class_map [2767].handle = objc_getClass ("NSCollectionViewUpdateItem");
	__xamarin_class_map [2768].handle = objc_getClass ("NSColorList");
	__xamarin_class_map [2769].handle = objc_getClass ("NSColorPicker");
	__xamarin_class_map [2770].handle = objc_getClass ("NSColorSampler");
	__xamarin_class_map [2771].handle = objc_getClass ("NSColorSpace");
	__xamarin_class_map [2772].handle = objc_getClass ("NSColorWell");
	__xamarin_class_map [2773].handle = objc_getClass ("NSTextFieldCell");
	__xamarin_class_map [2774].handle = objc_getClass ("NSComboBoxCell");
	__xamarin_class_map [2775].handle = objc_getClass ("Microsoft_macOS__AppKit_NSComboBoxCellDataSource");
	__xamarin_class_map [2776].handle = objc_getClass ("Microsoft_macOS__AppKit_NSComboBoxDataSource");
	__xamarin_class_map [2777].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextFieldDelegate");
	__xamarin_class_map [2778].handle = objc_getClass ("Microsoft_macOS__AppKit_NSComboBoxDelegate");
	__xamarin_class_map [2779].handle = objc_getClass ("NSComboButton");
	__xamarin_class_map [2780].handle = objc_getClass ("Microsoft_macOS__AppKit_NSControlTextEditingDelegate");
	__xamarin_class_map [2781].handle = objc_getClass ("NSCursor");
	__xamarin_class_map [2782].handle = objc_getClass ("NSCustomImageRep");
	__xamarin_class_map [2783].handle = objc_getClass ("NSCustomTouchBarItem");
	__xamarin_class_map [2784].handle = objc_getClass ("NSDataAsset");
	__xamarin_class_map [2785].handle = objc_getClass ("Microsoft_macOS__AppKit_NSDatePickerCellDelegate");
	__xamarin_class_map [2786].handle = objc_getClass ("NSDictionaryController");
	__xamarin_class_map [2787].handle = objc_getClass ("NSDictionaryControllerKeyValuePair");
	__xamarin_class_map [2788].handle = objc_getClass ("NSDiffableDataSourceSnapshot");
	__xamarin_class_map [2789].handle = objc_getClass ("NSDockTile");
	__xamarin_class_map [2790].handle = objc_getClass ("Microsoft_macOS__AppKit_NSDockTilePlugIn");
	__xamarin_class_map [2791].handle = objc_getClass ("NSDocumentController");
	__xamarin_class_map [2792].handle = objc_getClass ("Microsoft_macOS__AppKit_NSDraggingDestination");
	__xamarin_class_map [2793].handle = objc_getClass ("NSDraggingImageComponent");
	__xamarin_class_map [2794].handle = objc_getClass ("NSDraggingItem");
	__xamarin_class_map [2795].handle = objc_getClass ("Microsoft_macOS__AppKit_NSDraggingSource");
	__xamarin_class_map [2796].handle = objc_getClass ("Microsoft_macOS__AppKit_NSDrawerDelegate");
	__xamarin_class_map [2797].handle = objc_getClass ("NSEPSImageRep");
	__xamarin_class_map [2798].handle = objc_getClass ("NSFilePromiseProvider");
	__xamarin_class_map [2799].handle = objc_getClass ("Microsoft_macOS__AppKit_NSFilePromiseProviderDelegate");
	__xamarin_class_map [2800].handle = objc_getClass ("NSFilePromiseReceiver");
	__xamarin_class_map [2801].handle = objc_getClass ("NSFontAssetRequest");
	__xamarin_class_map [2802].handle = objc_getClass ("NSFontDescriptor");
	__xamarin_class_map [2803].handle = objc_getClass ("NSFontManager");
	__xamarin_class_map [2804].handle = objc_getClass ("NSFontPanel");
	__xamarin_class_map [2805].handle = objc_getClass ("NSMatrix");
	__xamarin_class_map [2806].handle = objc_getClass ("NSForm");
	__xamarin_class_map [2807].handle = objc_getClass ("NSFormCell");
	__xamarin_class_map [2808].handle = objc_getClass ("Microsoft_macOS__AppKit_NSGestureRecognizerDelegate");
	__xamarin_class_map [2809].handle = objc_getClass ("NSGlyphGenerator");
	__xamarin_class_map [2810].handle = objc_getClass ("NSGlyphInfo");
	__xamarin_class_map [2811].handle = objc_getClass ("NSGridCell");
	__xamarin_class_map [2812].handle = objc_getClass ("NSGridColumn");
	__xamarin_class_map [2813].handle = objc_getClass ("NSGridRow");
	__xamarin_class_map [2814].handle = objc_getClass ("NSGridView");
	__xamarin_class_map [2815].handle = objc_getClass ("NSGroupTouchBarItem");
	__xamarin_class_map [2816].handle = objc_getClass ("NSHapticFeedbackManager");
	__xamarin_class_map [2817].handle = objc_getClass ("Microsoft_macOS__AppKit_NSHapticFeedbackPerformer");
	__xamarin_class_map [2818].handle = objc_getClass ("NSImageCell");
	__xamarin_class_map [2819].handle = objc_getClass ("Microsoft_macOS__AppKit_NSImageDelegate");
	__xamarin_class_map [2820].handle = objc_getClass ("NSImageSymbolConfiguration");
	__xamarin_class_map [2821].handle = objc_getClass ("NSImageView");
	__xamarin_class_map [2822].handle = objc_getClass ("NSLayoutAnchor");
	__xamarin_class_map [2823].handle = objc_getClass ("NSLayoutDimension");
	__xamarin_class_map [2824].handle = objc_getClass ("NSLayoutGuide");
	__xamarin_class_map [2825].handle = objc_getClass ("Microsoft_macOS__AppKit_NSLayoutManagerDelegate");
	__xamarin_class_map [2826].handle = objc_getClass ("NSLayoutXAxisAnchor");
	__xamarin_class_map [2827].handle = objc_getClass ("NSLayoutYAxisAnchor");
	__xamarin_class_map [2828].handle = objc_getClass ("NSLevelIndicatorCell");
	__xamarin_class_map [2829].handle = objc_getClass ("Microsoft_macOS__AppKit_NSMatrixDelegate");
	__xamarin_class_map [2830].handle = objc_getClass ("Microsoft_macOS__AppKit_NSMenuDelegate");
	__xamarin_class_map [2831].handle = objc_getClass ("NSMenuItemCell");
	__xamarin_class_map [2832].handle = objc_getClass ("NSMenuToolbarItem");
	__xamarin_class_map [2833].handle = objc_getClass ("NSFontCollection");
	__xamarin_class_map [2834].handle = objc_getClass ("NSMutableFontCollection");
	__xamarin_class_map [2835].handle = objc_getClass ("NSParagraphStyle");
	__xamarin_class_map [2836].handle = objc_getClass ("NSMutableParagraphStyle");
	__xamarin_class_map [2837].handle = objc_getClass ("NSNib");
	__xamarin_class_map [2838].handle = objc_getClass ("NSOpenGLLayer");
	__xamarin_class_map [2839].handle = objc_getClass ("NSOpenGLPixelBuffer");
	__xamarin_class_map [2840].handle = objc_getClass ("NSOpenGLView");
	__xamarin_class_map [2841].handle = objc_getClass ("Microsoft_macOS__AppKit_NSOpenSavePanelDelegate");
	__xamarin_class_map [2842].handle = objc_getClass ("Microsoft_macOS__AppKit_NSOutlineViewDataSource");
	__xamarin_class_map [2843].handle = objc_getClass ("Microsoft_macOS__AppKit_NSOutlineViewDelegate");
	__xamarin_class_map [2844].handle = objc_getClass ("Microsoft_macOS__AppKit_NSPageControllerDelegate");
	__xamarin_class_map [2845].handle = objc_getClass ("NSPasteboardItem");
	__xamarin_class_map [2846].handle = objc_getClass ("Microsoft_macOS__AppKit_NSPasteboardItemDataProvider");
	__xamarin_class_map [2847].handle = objc_getClass ("Microsoft_macOS__AppKit_NSPathCellDelegate");
	__xamarin_class_map [2848].handle = objc_getClass ("NSPathComponentCell");
	__xamarin_class_map [2849].handle = objc_getClass ("Microsoft_macOS__AppKit_NSPathControlDelegate");
	__xamarin_class_map [2850].handle = objc_getClass ("NSPDFImageRep");
	__xamarin_class_map [2851].handle = objc_getClass ("NSPickerTouchBarItem");
	__xamarin_class_map [2852].handle = objc_getClass ("Microsoft_macOS__AppKit_NSPopoverDelegate");
	__xamarin_class_map [2853].handle = objc_getClass ("NSPopoverTouchBarItem");
	__xamarin_class_map [2854].handle = objc_getClass ("NSRuleEditor");
	__xamarin_class_map [2855].handle = objc_getClass ("NSPredicateEditor");
	__xamarin_class_map [2856].handle = objc_getClass ("NSPressureConfiguration");
	__xamarin_class_map [2857].handle = objc_getClass ("NSPreviewRepresentingActivityItem");
	__xamarin_class_map [2858].handle = objc_getClass ("NSPrinter");
	__xamarin_class_map [2859].handle = objc_getClass ("NSPrintOperation");
	__xamarin_class_map [2860].handle = objc_getClass ("NSPrintPanel");
	__xamarin_class_map [2861].handle = objc_getClass ("Microsoft_macOS__AppKit_NSPrintPanelAccessorizing");
	__xamarin_class_map [2862].handle = objc_getClass ("NSPrintPreviewGraphicsContext");
	__xamarin_class_map [2863].handle = objc_getClass ("NSProgressIndicator");
	__xamarin_class_map [2864].handle = objc_getClass ("Microsoft_macOS__AppKit_NSRuleEditorDelegate");
	__xamarin_class_map [2865].handle = objc_getClass ("NSRulerMarker");
	__xamarin_class_map [2866].handle = objc_getClass ("NSRulerView");
	__xamarin_class_map [2867].handle = objc_getClass ("NSRunningApplication");
	__xamarin_class_map [2868].handle = objc_getClass ("NSScrubber");
	__xamarin_class_map [2869].handle = objc_getClass ("NSScrubberArrangedView");
	__xamarin_class_map [2870].handle = objc_getClass ("Microsoft_macOS__AppKit_NSScrubberDataSource");
	__xamarin_class_map [2871].handle = objc_getClass ("Microsoft_macOS__AppKit_NSScrubberDelegate");
	__xamarin_class_map [2872].handle = objc_getClass ("NSScrubberLayout");
	__xamarin_class_map [2873].handle = objc_getClass ("NSScrubberFlowLayout");
	__xamarin_class_map [2874].handle = objc_getClass ("Microsoft_macOS__AppKit_NSScrubberFlowLayoutDelegate");
	__xamarin_class_map [2875].handle = objc_getClass ("NSScrubberItemView");
	__xamarin_class_map [2876].handle = objc_getClass ("NSScrubberImageItemView");
	__xamarin_class_map [2877].handle = objc_getClass ("NSScrubberLayoutAttributes");
	__xamarin_class_map [2878].handle = objc_getClass ("NSScrubberProportionalLayout");
	__xamarin_class_map [2879].handle = objc_getClass ("NSScrubberSelectionStyle");
	__xamarin_class_map [2880].handle = objc_getClass ("NSScrubberSelectionView");
	__xamarin_class_map [2881].handle = objc_getClass ("NSScrubberTextItemView");
	__xamarin_class_map [2882].handle = objc_getClass ("NSSearchFieldCell");
	__xamarin_class_map [2883].handle = objc_getClass ("Microsoft_macOS__AppKit_NSSearchFieldDelegate");
	__xamarin_class_map [2884].handle = objc_getClass ("NSSearchToolbarItem");
	__xamarin_class_map [2885].handle = objc_getClass ("NSTextField");
	__xamarin_class_map [2886].handle = objc_getClass ("NSSecureTextField");
	__xamarin_class_map [2887].handle = objc_getClass ("NSSecureTextFieldCell");
	__xamarin_class_map [2888].handle = objc_getClass ("NSSegmentedCell");
	__xamarin_class_map [2889].handle = objc_getClass ("Microsoft_macOS__AppKit_NSSeguePerforming");
	__xamarin_class_map [2890].handle = objc_getClass ("NSShadow");
	__xamarin_class_map [2891].handle = objc_getClass ("Microsoft_macOS__AppKit_NSSharingServicePickerDelegate");
	__xamarin_class_map [2892].handle = objc_getClass ("NSSharingServicePickerToolbarItem");
	__xamarin_class_map [2893].handle = objc_getClass ("Microsoft_macOS__AppKit_NSSharingServicePickerToolbarItemDelegate");
	__xamarin_class_map [2894].handle = objc_getClass ("NSSharingServicePickerTouchBarItem");
	__xamarin_class_map [2895].handle = objc_getClass ("Microsoft_macOS__AppKit_NSSharingServicePickerTouchBarItemDelegate");
	__xamarin_class_map [2896].handle = objc_getClass ("NSSliderAccessoryBehavior");
	__xamarin_class_map [2897].handle = objc_getClass ("NSSliderCell");
	__xamarin_class_map [2898].handle = objc_getClass ("Microsoft_macOS__AppKit_NSSoundDelegate");
	__xamarin_class_map [2899].handle = objc_getClass ("NSSpeechRecognizer");
	__xamarin_class_map [2900].handle = objc_getClass ("Microsoft_macOS__AppKit_NSSpeechRecognizerDelegate");
	__xamarin_class_map [2901].handle = objc_getClass ("Microsoft_macOS__AppKit_NSSpeechSynthesizerDelegate");
	__xamarin_class_map [2902].handle = objc_getClass ("NSSplitViewController");
	__xamarin_class_map [2903].handle = objc_getClass ("Microsoft_macOS__AppKit_NSSplitViewDelegate");
	__xamarin_class_map [2904].handle = objc_getClass ("NSSplitViewItem");
	__xamarin_class_map [2905].handle = objc_getClass ("Microsoft_macOS__AppKit_NSSpringLoadingDestination");
	__xamarin_class_map [2906].handle = objc_getClass ("NSStackView");
	__xamarin_class_map [2907].handle = objc_getClass ("Microsoft_macOS__AppKit_NSStackViewDelegate");
	__xamarin_class_map [2908].handle = objc_getClass ("NSStatusBarButton");
	__xamarin_class_map [2909].handle = objc_getClass ("NSStepper");
	__xamarin_class_map [2910].handle = objc_getClass ("NSStepperCell");
	__xamarin_class_map [2911].handle = objc_getClass ("NSStepperTouchBarItem");
	__xamarin_class_map [2912].handle = objc_getClass ("NSStoryboard");
	__xamarin_class_map [2913].handle = objc_getClass ("NSStoryboardSegue");
	__xamarin_class_map [2914].handle = objc_getClass ("NSStringDrawingContext");
	__xamarin_class_map [2915].handle = objc_getClass ("NSSwitch");
	__xamarin_class_map [2916].handle = objc_getClass ("NSTableCellView");
	__xamarin_class_map [2917].handle = objc_getClass ("NSTableColumn");
	__xamarin_class_map [2918].handle = objc_getClass ("NSTableHeaderCell");
	__xamarin_class_map [2919].handle = objc_getClass ("NSTableHeaderView");
	__xamarin_class_map [2920].handle = objc_getClass ("NSTableRowView");
	__xamarin_class_map [2921].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTableViewDataSource");
	__xamarin_class_map [2922].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTableViewDelegate");
	__xamarin_class_map [2923].handle = objc_getClass ("NSTableViewRowAction");
	__xamarin_class_map [2924].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTableViewSource");
	__xamarin_class_map [2925].handle = objc_getClass ("NSTabViewController");
	__xamarin_class_map [2926].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTabViewDelegate");
	__xamarin_class_map [2927].handle = objc_getClass ("NSTabViewItem");
	__xamarin_class_map [2928].handle = objc_getClass ("NSTextAttachment");
	__xamarin_class_map [2929].handle = objc_getClass ("NSTextAttachmentCell");
	__xamarin_class_map [2930].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextAttachmentContainer");
	__xamarin_class_map [2931].handle = objc_getClass ("NSTextAttachmentViewProvider");
	__xamarin_class_map [2932].handle = objc_getClass ("NSTextBlock");
	__xamarin_class_map [2933].handle = objc_getClass ("NSTextCheckingController");
	__xamarin_class_map [2934].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextContentManagerDelegate");
	__xamarin_class_map [2935].handle = objc_getClass ("NSTextContentManager");
	__xamarin_class_map [2936].handle = objc_getClass ("NSTextContentStorage");
	__xamarin_class_map [2937].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextContentStorageDelegate");
	__xamarin_class_map [2938].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextDelegate");
	__xamarin_class_map [2939].handle = objc_getClass ("NSTextElement");
	__xamarin_class_map [2940].handle = objc_getClass ("NSTextFinder");
	__xamarin_class_map [2941].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextFinderBarContainer");
	__xamarin_class_map [2942].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextInputClient");
	__xamarin_class_map [2943].handle = objc_getClass ("NSTextLayoutFragment");
	__xamarin_class_map [2944].handle = objc_getClass ("NSTextLayoutManager");
	__xamarin_class_map [2945].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextLayoutManagerDelegate");
	__xamarin_class_map [2946].handle = objc_getClass ("NSTextLineFragment");
	__xamarin_class_map [2947].handle = objc_getClass ("NSTextList");
	__xamarin_class_map [2948].handle = objc_getClass ("NSTextParagraph");
	__xamarin_class_map [2949].handle = objc_getClass ("NSTextListElement");
	__xamarin_class_map [2950].handle = objc_getClass ("NSTextRange");
	__xamarin_class_map [2951].handle = objc_getClass ("NSTextSelection");
	__xamarin_class_map [2952].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextSelectionDataSource");
	__xamarin_class_map [2953].handle = objc_getClass ("NSTextSelectionNavigation");
	__xamarin_class_map [2954].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextStorageDelegate");
	__xamarin_class_map [2955].handle = objc_getClass ("NSTextTab");
	__xamarin_class_map [2956].handle = objc_getClass ("NSTextTable");
	__xamarin_class_map [2957].handle = objc_getClass ("NSTextTableBlock");
	__xamarin_class_map [2958].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextViewDelegate");
	__xamarin_class_map [2959].handle = objc_getClass ("NSTextViewportLayoutController");
	__xamarin_class_map [2960].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTextViewportLayoutControllerDelegate");
	__xamarin_class_map [2961].handle = objc_getClass ("NSTintConfiguration");
	__xamarin_class_map [2962].handle = objc_getClass ("NSTitlebarAccessoryViewController");
	__xamarin_class_map [2963].handle = objc_getClass ("NSTokenField");
	__xamarin_class_map [2964].handle = objc_getClass ("NSTokenFieldCell");
	__xamarin_class_map [2965].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTokenFieldCellDelegate");
	__xamarin_class_map [2966].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTokenFieldDelegate");
	__xamarin_class_map [2967].handle = objc_getClass ("Microsoft_macOS__AppKit_NSToolbarDelegate");
	__xamarin_class_map [2968].handle = objc_getClass ("NSToolbarItemGroup");
	__xamarin_class_map [2969].handle = objc_getClass ("Microsoft_macOS__AppKit_NSTouchBarDelegate");
	__xamarin_class_map [2970].handle = objc_getClass ("NSTrackingArea");
	__xamarin_class_map [2971].handle = objc_getClass ("NSTrackingSeparatorToolbarItem");
	__xamarin_class_map [2972].handle = objc_getClass ("NSTreeNode");
	__xamarin_class_map [2973].handle = objc_getClass ("NSUserDefaultsController");
	__xamarin_class_map [2974].handle = objc_getClass ("NSUserInterfaceCompressionOptions");
	__xamarin_class_map [2975].handle = objc_getClass ("NSAnimation");
	__xamarin_class_map [2976].handle = objc_getClass ("NSViewAnimation");
	__xamarin_class_map [2977].handle = objc_getClass ("Microsoft_macOS__AppKit_NSViewControllerPresentationAnimator");
	__xamarin_class_map [2978].handle = objc_getClass ("NSVisualEffectView");
	__xamarin_class_map [2979].handle = objc_getClass ("Microsoft_macOS__AppKit_NSWindowDelegate");
	__xamarin_class_map [2980].handle = objc_getClass ("Microsoft_macOS__AppKit_NSWindowRestoration");
	__xamarin_class_map [2981].handle = objc_getClass ("NSWindowTab");
	__xamarin_class_map [2982].handle = objc_getClass ("NSWindowTabGroup");
	__xamarin_class_map [2983].handle = objc_getClass ("NSWorkspaceAuthorization");
	__xamarin_class_map [2984].handle = objc_getClass ("NSWorkspaceOpenConfiguration");
	__xamarin_class_map [2985].handle = objc_getClass ("ACAccount");
	__xamarin_class_map [2986].handle = objc_getClass ("ACAccountCredential");
	__xamarin_class_map [2987].handle = objc_getClass ("ACAccountType");
	__xamarin_class_map [2988].handle = objc_getClass ("AVCaptureView");
	__xamarin_class_map [2989].handle = objc_getClass ("Microsoft_macOS__AVKit_AVCaptureViewDelegate");
	__xamarin_class_map [2990].handle = objc_getClass ("AVPictureInPictureController");
	__xamarin_class_map [2991].handle = objc_getClass ("AVPictureInPictureControllerContentSource");
	__xamarin_class_map [2992].handle = objc_getClass ("Microsoft_macOS__AVKit_AVPictureInPictureControllerDelegate");
	__xamarin_class_map [2993].handle = objc_getClass ("Microsoft_macOS__AVKit_AVPictureInPictureSampleBufferPlaybackDelegate");
	__xamarin_class_map [2994].handle = objc_getClass ("AVPlaybackSpeed");
	__xamarin_class_map [2995].handle = objc_getClass ("AVPlayerView");
	__xamarin_class_map [2996].handle = objc_getClass ("Microsoft_macOS__AVKit_AVPlayerViewDelegate");
	__xamarin_class_map [2997].handle = objc_getClass ("Microsoft_macOS__AVKit_AVPlayerViewPictureInPictureDelegate");
	__xamarin_class_map [2998].handle = objc_getClass ("AVRoutePickerView");
	__xamarin_class_map [2999].handle = objc_getClass ("Microsoft_macOS__AVKit_AVRoutePickerViewDelegate");
	__xamarin_class_map [3000].handle = objc_getClass ("AVAssetResourceLoadingDataRequest");
	__xamarin_class_map [3001].handle = objc_getClass ("AVAudioBuffer");
	__xamarin_class_map [3002].handle = objc_getClass ("AVAudioChannelLayout");
	__xamarin_class_map [3003].handle = objc_getClass ("AVAudioFormat");
	__xamarin_class_map [3004].handle = objc_getClass ("AVAudioPlayer");
	__xamarin_class_map [3005].handle = objc_getClass ("AVAudioRecorder");
	__xamarin_class_map [3006].handle = objc_getClass ("AVCaptureInput");
	__xamarin_class_map [3007].handle = objc_getClass ("AVCaptureDeviceInput");
	__xamarin_class_map [3008].handle = objc_getClass ("AVCaptureSynchronizedDataCollection");
	__xamarin_class_map [3009].handle = objc_getClass ("AVContentKeyResponse");
	__xamarin_class_map [3010].handle = objc_getClass ("AVDepthData");
	__xamarin_class_map [3011].handle = objc_getClass ("AVPlayerLayer");
	__xamarin_class_map [3012].handle = objc_getClass ("AVPlayerLooper");
	__xamarin_class_map [3013].handle = objc_getClass ("AVTextStyleRule");
	__xamarin_class_map [3014].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVAudioPlayerDelegate");
	__xamarin_class_map [3015].handle = objc_getClass ("AVFoundation_InternalAVAudioPlayerDelegate");
	__xamarin_class_map [3016].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVAudioRecorderDelegate");
	__xamarin_class_map [3017].handle = objc_getClass ("AVFoundation_InternalAVAudioRecorderDelegate");
	__xamarin_class_map [3018].handle = objc_getClass ("AVAggregateAssetDownloadTask");
	__xamarin_class_map [3019].handle = objc_getClass ("AVAssetCache");
	__xamarin_class_map [3020].handle = objc_getClass ("AVAssetDownloadConfiguration");
	__xamarin_class_map [3021].handle = objc_getClass ("AVAssetDownloadContentConfiguration");
	__xamarin_class_map [3022].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVAssetDownloadDelegate");
	__xamarin_class_map [3023].handle = objc_getClass ("AVAssetDownloadStorageManagementPolicy");
	__xamarin_class_map [3024].handle = objc_getClass ("AVAssetDownloadStorageManager");
	__xamarin_class_map [3025].handle = objc_getClass ("AVAssetDownloadTask");
	__xamarin_class_map [3026].handle = objc_getClass ("NSURLSession");
	__xamarin_class_map [3027].handle = objc_getClass ("AVAssetDownloadURLSession");
	__xamarin_class_map [3028].handle = objc_getClass ("AVAssetImageGenerator");
	__xamarin_class_map [3029].handle = objc_getClass ("AVAssetReader");
	__xamarin_class_map [3030].handle = objc_getClass ("AVAssetReaderOutput");
	__xamarin_class_map [3031].handle = objc_getClass ("AVAssetReaderAudioMixOutput");
	__xamarin_class_map [3032].handle = objc_getClass ("AVAssetReaderOutputCaptionAdaptor");
	__xamarin_class_map [3033].handle = objc_getClass ("AVAssetReaderOutputMetadataAdaptor");
	__xamarin_class_map [3034].handle = objc_getClass ("AVAssetReaderSampleReferenceOutput");
	__xamarin_class_map [3035].handle = objc_getClass ("AVAssetReaderTrackOutput");
	__xamarin_class_map [3036].handle = objc_getClass ("AVAssetReaderVideoCompositionOutput");
	__xamarin_class_map [3037].handle = objc_getClass ("AVAssetResourceLoader");
	__xamarin_class_map [3038].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVAssetResourceLoaderDelegate");
	__xamarin_class_map [3039].handle = objc_getClass ("AVAssetResourceLoadingContentInformationRequest");
	__xamarin_class_map [3040].handle = objc_getClass ("AVAssetResourceLoadingRequest");
	__xamarin_class_map [3041].handle = objc_getClass ("AVAssetResourceLoadingRequestor");
	__xamarin_class_map [3042].handle = objc_getClass ("AVAssetResourceRenewalRequest");
	__xamarin_class_map [3043].handle = objc_getClass ("AVAssetSegmentReport");
	__xamarin_class_map [3044].handle = objc_getClass ("AVAssetSegmentReportSampleInformation");
	__xamarin_class_map [3045].handle = objc_getClass ("AVAssetSegmentTrackReport");
	__xamarin_class_map [3046].handle = objc_getClass ("AVAssetTrackGroup");
	__xamarin_class_map [3047].handle = objc_getClass ("AVAssetTrackSegment");
	__xamarin_class_map [3048].handle = objc_getClass ("AVAssetVariant");
	__xamarin_class_map [3049].handle = objc_getClass ("AVAssetVariantAudioAttributes");
	__xamarin_class_map [3050].handle = objc_getClass ("AVAssetVariantAudioRenditionSpecificAttributes");
	__xamarin_class_map [3051].handle = objc_getClass ("AVAssetVariantQualifier");
	__xamarin_class_map [3052].handle = objc_getClass ("AVAssetVariantVideoAttributes");
	__xamarin_class_map [3053].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVAssetWriterDelegate");
	__xamarin_class_map [3054].handle = objc_getClass ("AVAssetWriterInput");
	__xamarin_class_map [3055].handle = objc_getClass ("AVAssetWriterInputCaptionAdaptor");
	__xamarin_class_map [3056].handle = objc_getClass ("AVMediaSelectionGroup");
	__xamarin_class_map [3057].handle = objc_getClass ("AVAssetWriterInputGroup");
	__xamarin_class_map [3058].handle = objc_getClass ("AVAssetWriterInputMetadataAdaptor");
	__xamarin_class_map [3059].handle = objc_getClass ("AVAssetWriterInputPassDescription");
	__xamarin_class_map [3060].handle = objc_getClass ("AVAssetWriterInputPixelBufferAdaptor");
	__xamarin_class_map [3061].handle = objc_getClass ("AVAsynchronousCIImageFilteringRequest");
	__xamarin_class_map [3062].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVAsynchronousKeyValueLoading");
	__xamarin_class_map [3063].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVAudio3DMixing");
	__xamarin_class_map [3064].handle = objc_getClass ("AVAudioCompressedBuffer");
	__xamarin_class_map [3065].handle = objc_getClass ("AVAudioConnectionPoint");
	__xamarin_class_map [3066].handle = objc_getClass ("AVAudioConverter");
	__xamarin_class_map [3067].handle = objc_getClass ("AVAudioEnvironmentDistanceAttenuationParameters");
	__xamarin_class_map [3068].handle = objc_getClass ("AVAudioNode");
	__xamarin_class_map [3069].handle = objc_getClass ("AVAudioEnvironmentNode");
	__xamarin_class_map [3070].handle = objc_getClass ("AVAudioEnvironmentReverbParameters");
	__xamarin_class_map [3071].handle = objc_getClass ("AVAudioFile");
	__xamarin_class_map [3072].handle = objc_getClass ("AVAudioIONode");
	__xamarin_class_map [3073].handle = objc_getClass ("AVAudioInputNode");
	__xamarin_class_map [3074].handle = objc_getClass ("AVAudioMix");
	__xamarin_class_map [3075].handle = objc_getClass ("AVAudioMixerNode");
	__xamarin_class_map [3076].handle = objc_getClass ("AVAudioMixingDestination");
	__xamarin_class_map [3077].handle = objc_getClass ("AVAudioMixInputParameters");
	__xamarin_class_map [3078].handle = objc_getClass ("AVAudioOutputNode");
	__xamarin_class_map [3079].handle = objc_getClass ("AVAudioPCMBuffer");
	__xamarin_class_map [3080].handle = objc_getClass ("AVAudioRoutingArbiter");
	__xamarin_class_map [3081].handle = objc_getClass ("AVAudioSequencer");
	__xamarin_class_map [3082].handle = objc_getClass ("AVAudioSinkNode");
	__xamarin_class_map [3083].handle = objc_getClass ("AVAudioSourceNode");
	__xamarin_class_map [3084].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVAudioStereoMixing");
	__xamarin_class_map [3085].handle = objc_getClass ("AVAudioTime");
	__xamarin_class_map [3086].handle = objc_getClass ("AVAudioUnit");
	__xamarin_class_map [3087].handle = objc_getClass ("AVAudioUnitEffect");
	__xamarin_class_map [3088].handle = objc_getClass ("AVAudioUnitDelay");
	__xamarin_class_map [3089].handle = objc_getClass ("AVAudioUnitDistortion");
	__xamarin_class_map [3090].handle = objc_getClass ("AVAudioUnitEQ");
	__xamarin_class_map [3091].handle = objc_getClass ("AVAudioUnitEQFilterParameters");
	__xamarin_class_map [3092].handle = objc_getClass ("AVAudioUnitGenerator");
	__xamarin_class_map [3093].handle = objc_getClass ("AVAudioUnitMIDIInstrument");
	__xamarin_class_map [3094].handle = objc_getClass ("AVAudioUnitReverb");
	__xamarin_class_map [3095].handle = objc_getClass ("AVAudioUnitSampler");
	__xamarin_class_map [3096].handle = objc_getClass ("AVAudioUnitTimeEffect");
	__xamarin_class_map [3097].handle = objc_getClass ("AVAudioUnitTimePitch");
	__xamarin_class_map [3098].handle = objc_getClass ("AVAudioUnitVarispeed");
	__xamarin_class_map [3099].handle = objc_getClass ("AVCameraCalibrationData");
	__xamarin_class_map [3100].handle = objc_getClass ("AVCaption");
	__xamarin_class_map [3101].handle = objc_getClass ("AVCaptionConversionAdjustment");
	__xamarin_class_map [3102].handle = objc_getClass ("AVCaptionConversionTimeRangeAdjustment");
	__xamarin_class_map [3103].handle = objc_getClass ("AVCaptionConversionValidator");
	__xamarin_class_map [3104].handle = objc_getClass ("AVCaptionConversionWarning");
	__xamarin_class_map [3105].handle = objc_getClass ("AVCaptionFormatConformer");
	__xamarin_class_map [3106].handle = objc_getClass ("AVCaptionGroup");
	__xamarin_class_map [3107].handle = objc_getClass ("AVCaptionGrouper");
	__xamarin_class_map [3108].handle = objc_getClass ("AVCaptionRegion");
	__xamarin_class_map [3109].handle = objc_getClass ("AVCaptionRenderer");
	__xamarin_class_map [3110].handle = objc_getClass ("AVCaptionRendererScene");
	__xamarin_class_map [3111].handle = objc_getClass ("AVCaptionRuby");
	__xamarin_class_map [3112].handle = objc_getClass ("AVCaptureAudioChannel");
	__xamarin_class_map [3113].handle = objc_getClass ("AVCaptureOutput");
	__xamarin_class_map [3114].handle = objc_getClass ("AVCaptureAudioDataOutput");
	__xamarin_class_map [3115].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVCaptureAudioDataOutputSampleBufferDelegate");
	__xamarin_class_map [3116].handle = objc_getClass ("AVCaptureFileOutput");
	__xamarin_class_map [3117].handle = objc_getClass ("AVCaptureAudioFileOutput");
	__xamarin_class_map [3118].handle = objc_getClass ("AVCaptureAudioPreviewOutput");
	__xamarin_class_map [3119].handle = objc_getClass ("AVCaptureConnection");
	__xamarin_class_map [3120].handle = objc_getClass ("AVCaptureDeviceInputSource");
	__xamarin_class_map [3121].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVCaptureFileOutputDelegate");
	__xamarin_class_map [3122].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVCaptureFileOutputRecordingDelegate");
	__xamarin_class_map [3123].handle = objc_getClass ("AVCaptureInputPort");
	__xamarin_class_map [3124].handle = objc_getClass ("AVCaptureMovieFileOutput");
	__xamarin_class_map [3125].handle = objc_getClass ("AVCapturePhoto");
	__xamarin_class_map [3126].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVCapturePhotoCaptureDelegate");
	__xamarin_class_map [3127].handle = objc_getClass ("AVCaptureResolvedPhotoSettings");
	__xamarin_class_map [3128].handle = objc_getClass ("AVCaptureScreenInput");
	__xamarin_class_map [3129].handle = objc_getClass ("AVCaptureSynchronizedData");
	__xamarin_class_map [3130].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVCaptureVideoDataOutputSampleBufferDelegate");
	__xamarin_class_map [3131].handle = objc_getClass ("AVAsset");
	__xamarin_class_map [3132].handle = objc_getClass ("AVComposition");
	__xamarin_class_map [3133].handle = objc_getClass ("AVAssetTrack");
	__xamarin_class_map [3134].handle = objc_getClass ("AVCompositionTrack");
	__xamarin_class_map [3135].handle = objc_getClass ("AVCompositionTrackFormatDescriptionReplacement");
	__xamarin_class_map [3136].handle = objc_getClass ("AVCompositionTrackSegment");
	__xamarin_class_map [3137].handle = objc_getClass ("AVContentKey");
	__xamarin_class_map [3138].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVContentKeySessionDelegate");
	__xamarin_class_map [3139].handle = objc_getClass ("AVContentKeySpecifier");
	__xamarin_class_map [3140].handle = objc_getClass ("AVCoordinatedPlaybackParticipant");
	__xamarin_class_map [3141].handle = objc_getClass ("AVCoordinatedPlaybackSuspension");
	__xamarin_class_map [3142].handle = objc_getClass ("AVMetadataGroup");
	__xamarin_class_map [3143].handle = objc_getClass ("AVDateRangeMetadataGroup");
	__xamarin_class_map [3144].handle = objc_getClass ("AVPlaybackCoordinator");
	__xamarin_class_map [3145].handle = objc_getClass ("AVDelegatingPlaybackCoordinator");
	__xamarin_class_map [3146].handle = objc_getClass ("AVDelegatingPlaybackCoordinatorPlaybackControlCommand");
	__xamarin_class_map [3147].handle = objc_getClass ("AVDelegatingPlaybackCoordinatorBufferingCommand");
	__xamarin_class_map [3148].handle = objc_getClass ("AVDelegatingPlaybackCoordinatorPauseCommand");
	__xamarin_class_map [3149].handle = objc_getClass ("AVDelegatingPlaybackCoordinatorPlayCommand");
	__xamarin_class_map [3150].handle = objc_getClass ("AVDelegatingPlaybackCoordinatorSeekCommand");
	__xamarin_class_map [3151].handle = objc_getClass ("AVURLAsset");
	__xamarin_class_map [3152].handle = objc_getClass ("AVFragmentedAsset");
	__xamarin_class_map [3153].handle = objc_getClass ("AVFragmentedAssetMinder");
	__xamarin_class_map [3154].handle = objc_getClass ("AVFragmentedAssetTrack");
	__xamarin_class_map [3155].handle = objc_getClass ("AVFragmentedMovieMinder");
	__xamarin_class_map [3156].handle = objc_getClass ("AVFrameRateRange");
	__xamarin_class_map [3157].handle = objc_getClass ("AVMediaDataStorage");
	__xamarin_class_map [3158].handle = objc_getClass ("AVMediaSelection");
	__xamarin_class_map [3159].handle = objc_getClass ("AVMediaSelectionOption");
	__xamarin_class_map [3160].handle = objc_getClass ("AVMetadataObject");
	__xamarin_class_map [3161].handle = objc_getClass ("AVMetadataBodyObject");
	__xamarin_class_map [3162].handle = objc_getClass ("AVMetadataCatBodyObject");
	__xamarin_class_map [3163].handle = objc_getClass ("AVMetadataDogBodyObject");
	__xamarin_class_map [3164].handle = objc_getClass ("AVMetadataFaceObject");
	__xamarin_class_map [3165].handle = objc_getClass ("AVMetadataHumanBodyObject");
	__xamarin_class_map [3166].handle = objc_getClass ("AVMetadataItemFilter");
	__xamarin_class_map [3167].handle = objc_getClass ("AVMetadataItemValueRequest");
	__xamarin_class_map [3168].handle = objc_getClass ("AVMetadataMachineReadableCodeObject");
	__xamarin_class_map [3169].handle = objc_getClass ("AVMetadataSalientObject");
	__xamarin_class_map [3170].handle = objc_getClass ("AVMovie");
	__xamarin_class_map [3171].handle = objc_getClass ("AVMovieTrack");
	__xamarin_class_map [3172].handle = objc_getClass ("AVMusicTrack");
	__xamarin_class_map [3173].handle = objc_getClass ("AVMutableAssetDownloadStorageManagementPolicy");
	__xamarin_class_map [3174].handle = objc_getClass ("AVMutableAudioMix");
	__xamarin_class_map [3175].handle = objc_getClass ("AVMutableAudioMixInputParameters");
	__xamarin_class_map [3176].handle = objc_getClass ("AVMutableCaption");
	__xamarin_class_map [3177].handle = objc_getClass ("AVMutableCaptionRegion");
	__xamarin_class_map [3178].handle = objc_getClass ("AVMutableComposition");
	__xamarin_class_map [3179].handle = objc_getClass ("AVMutableCompositionTrack");
	__xamarin_class_map [3180].handle = objc_getClass ("AVMutableDateRangeMetadataGroup");
	__xamarin_class_map [3181].handle = objc_getClass ("AVMutableMediaSelection");
	__xamarin_class_map [3182].handle = objc_getClass ("AVMetadataItem");
	__xamarin_class_map [3183].handle = objc_getClass ("AVMutableMetadataItem");
	__xamarin_class_map [3184].handle = objc_getClass ("AVMutableMovieTrack");
	__xamarin_class_map [3185].handle = objc_getClass ("AVTimedMetadataGroup");
	__xamarin_class_map [3186].handle = objc_getClass ("AVMutableTimedMetadataGroup");
	__xamarin_class_map [3187].handle = objc_getClass ("AVVideoCompositionLayerInstruction");
	__xamarin_class_map [3188].handle = objc_getClass ("AVMutableVideoCompositionLayerInstruction");
	__xamarin_class_map [3189].handle = objc_getClass ("AVOutputSettingsAssistant");
	__xamarin_class_map [3190].handle = objc_getClass ("AVContentKeyRequest");
	__xamarin_class_map [3191].handle = objc_getClass ("AVPersistableContentKeyRequest");
	__xamarin_class_map [3192].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVPlaybackCoordinatorPlaybackControlDelegate");
	__xamarin_class_map [3193].handle = objc_getClass ("AVPlayerInterstitialEvent");
	__xamarin_class_map [3194].handle = objc_getClass ("AVPlayerInterstitialEventMonitor");
	__xamarin_class_map [3195].handle = objc_getClass ("AVPlayerInterstitialEventController");
	__xamarin_class_map [3196].handle = objc_getClass ("AVPlayerItemAccessLog");
	__xamarin_class_map [3197].handle = objc_getClass ("AVPlayerItemAccessLogEvent");
	__xamarin_class_map [3198].handle = objc_getClass ("AVPlayerItemErrorLog");
	__xamarin_class_map [3199].handle = objc_getClass ("AVPlayerItemErrorLogEvent");
	__xamarin_class_map [3200].handle = objc_getClass ("AVPlayerItemOutput");
	__xamarin_class_map [3201].handle = objc_getClass ("AVPlayerItemLegibleOutput");
	__xamarin_class_map [3202].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVPlayerItemOutputPushDelegate");
	__xamarin_class_map [3203].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVPlayerItemLegibleOutputPushDelegate");
	__xamarin_class_map [3204].handle = objc_getClass ("AVPlayerItemMediaDataCollector");
	__xamarin_class_map [3205].handle = objc_getClass ("AVPlayerItemMetadataCollector");
	__xamarin_class_map [3206].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVPlayerItemMetadataCollectorPushDelegate");
	__xamarin_class_map [3207].handle = objc_getClass ("AVPlayerItemMetadataOutput");
	__xamarin_class_map [3208].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVPlayerItemMetadataOutputPushDelegate");
	__xamarin_class_map [3209].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVPlayerItemOutputPullDelegate");
	__xamarin_class_map [3210].handle = objc_getClass ("AVPlayerItemTrack");
	__xamarin_class_map [3211].handle = objc_getClass ("AVPlayerPlaybackCoordinator");
	__xamarin_class_map [3212].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVPlayerPlaybackCoordinatorDelegate");
	__xamarin_class_map [3213].handle = objc_getClass ("AVPortraitEffectsMatte");
	__xamarin_class_map [3214].handle = objc_getClass ("AVPlayer");
	__xamarin_class_map [3215].handle = objc_getClass ("AVQueuePlayer");
	__xamarin_class_map [3216].handle = objc_getClass ("AVSampleBufferRequest");
	__xamarin_class_map [3217].handle = objc_getClass ("AVSampleCursor");
	__xamarin_class_map [3218].handle = objc_getClass ("AVSemanticSegmentationMatte");
	__xamarin_class_map [3219].handle = objc_getClass ("AVSpeechSynthesisVoice");
	__xamarin_class_map [3220].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVSpeechSynthesizerDelegate");
	__xamarin_class_map [3221].handle = objc_getClass ("AVSpeechUtterance");
	__xamarin_class_map [3222].handle = objc_getClass ("AVSynchronizedLayer");
	__xamarin_class_map [3223].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVVideoCompositing");
	__xamarin_class_map [3224].handle = objc_getClass ("AVVideoCompositionCoreAnimationTool");
	__xamarin_class_map [3225].handle = objc_getClass ("AVVideoCompositionRenderContext");
	__xamarin_class_map [3226].handle = objc_getClass ("AVVideoCompositionRenderHint");
	__xamarin_class_map [3227].handle = objc_getClass ("Microsoft_macOS__AVFoundation_AVVideoCompositionValidationHandling");
	__xamarin_class_map [3228].handle = objc_getClass ("THClient");
	__xamarin_class_map [3229].handle = objc_getClass ("SNAudioFileAnalyzer");
	__xamarin_class_map [3230].handle = objc_getClass ("SNTimeDurationConstraint");
	__xamarin_class_map [3231].handle = objc_getClass ("SHMediaLibrary");
	__xamarin_class_map [3232].handle = objc_getClass ("SHSignatureGenerator");
	__xamarin_class_map [3233].handle = objc_getClass ("SWHighlightCenter");
	__xamarin_class_map [3234].handle = objc_getClass ("SFContentBlockerManager");
	__xamarin_class_map [3235].handle = objc_getClass ("SFSafariApplication");
	__xamarin_class_map [3236].handle = objc_getClass ("SFSafariExtension");
	__xamarin_class_map [3237].handle = objc_getClass ("SFSafariExtensionHandler");
	__xamarin_class_map [3238].handle = objc_getClass ("SFSafariPage");
	__xamarin_class_map [3239].handle = objc_getClass ("SFSafariTab");
	__xamarin_class_map [3240].handle = objc_getClass ("SFSafariWindow");
	__xamarin_class_map [3241].handle = objc_getClass ("RPBroadcastController");
	__xamarin_class_map [3242].handle = objc_getClass ("RPScreenRecorder");
	__xamarin_class_map [3243].handle = objc_getClass ("QLThumbnailGenerator");
	__xamarin_class_map [3244].handle = objc_getClass ("PHASEAssetRegistry");
	__xamarin_class_map [3245].handle = objc_getClass ("PHASEPushStreamNode");
	__xamarin_class_map [3246].handle = objc_getClass ("PHASESoundEvent");
	__xamarin_class_map [3247].handle = objc_getClass ("NotificationCenter_NCWidgetListViewController__NCWidgetListViewDelegate");
	__xamarin_class_map [3248].handle = objc_getClass ("NCWidgetListViewController");
	__xamarin_class_map [3249].handle = objc_getClass ("NotificationCenter_NCWidgetSearchViewController__NCWidgetSearchViewDelegate");
	__xamarin_class_map [3250].handle = objc_getClass ("NCWidgetSearchViewController");
	__xamarin_class_map [3251].handle = objc_getClass ("LAContext");
	__xamarin_class_map [3252].handle = objc_getClass ("LAPrivateKey");
	__xamarin_class_map [3253].handle = objc_getClass ("LAPublicKey");
	__xamarin_class_map [3254].handle = objc_getClass ("LARightStore");
	__xamarin_class_map [3255].handle = objc_getClass ("LASecret");
	__xamarin_class_map [3256].handle = objc_getClass ("LPMetadataProvider");
	__xamarin_class_map [3257].handle = objc_getClass ("ExternalAccessory_EAAccessory__EAAccessoryDelegate");
	__xamarin_class_map [3258].handle = objc_getClass ("EAAccessory");
	__xamarin_class_map [3259].handle = objc_getClass ("EAAccessoryManager");
	__xamarin_class_map [3260].handle = objc_getClass ("DCAppAttestService");
	__xamarin_class_map [3261].handle = objc_getClass ("DCDevice");
	__xamarin_class_map [3262].handle = objc_getClass ("ATTrackingManager");
	__xamarin_class_map [3263].handle = objc_getClass ("VNFaceLandmarkRegion2D");
	__xamarin_class_map [3264].handle = objc_getClass ("VNRecognizedPointsObservation");
	__xamarin_class_map [3265].handle = objc_getClass ("VNDetectHumanBodyPoseRequest");
	__xamarin_class_map [3266].handle = objc_getClass ("VNDetectHumanHandPoseRequest");
	__xamarin_class_map [3267].handle = objc_getClass ("VNHumanBodyPoseObservation");
	__xamarin_class_map [3268].handle = objc_getClass ("VNHumanHandPoseObservation");
	__xamarin_class_map [3269].handle = objc_getClass ("VNRecognizeAnimalsRequest");
	__xamarin_class_map [3270].handle = objc_getClass ("VSUserAccountManager");
	__xamarin_class_map [3271].handle = objc_getClass ("UNUserNotificationCenter");
	__xamarin_class_map [3272].handle = objc_getClass ("SKCloudServiceController");
	__xamarin_class_map [3273].handle = objc_getClass ("StoreKit_SKRequest__SKRequestDelegate");
	__xamarin_class_map [3274].handle = objc_getClass ("StoreKit_SKProductsRequest__SKProductsRequestDelegate");
	__xamarin_class_map [3275].handle = objc_getClass ("SKProductsRequest");
	__xamarin_class_map [3276].handle = objc_getClass ("SKProductStorePromotionController");
	__xamarin_class_map [3277].handle = objc_getClass ("StoreKit_SKStoreProductViewController__SKStoreProductViewControllerDelegate");
	__xamarin_class_map [3278].handle = objc_getClass ("SKStoreProductViewController");
	__xamarin_class_map [3279].handle = objc_getClass ("SpriteKit_SKPhysicsWorld__SKPhysicsContactDelegate");
	__xamarin_class_map [3280].handle = objc_getClass ("SKPhysicsWorld");
	__xamarin_class_map [3281].handle = objc_getClass ("SKTextureAtlas");
	__xamarin_class_map [3282].handle = objc_getClass ("SLRequest");
	__xamarin_class_map [3283].handle = objc_getClass ("SWCollaborationMetadata");
	__xamarin_class_map [3284].handle = objc_getClass ("ScriptingBridge_SBApplication__SBApplicationDelegate");
	__xamarin_class_map [3285].handle = objc_getClass ("SBApplication");
	__xamarin_class_map [3286].handle = objc_getClass ("SCShareableContent");
	__xamarin_class_map [3287].handle = objc_getClass ("SCStream");
	__xamarin_class_map [3288].handle = objc_getClass ("SCNLayer");
	__xamarin_class_map [3289].handle = objc_getClass ("SceneKit_SCNPhysicsWorld__SCNPhysicsContactDelegate");
	__xamarin_class_map [3290].handle = objc_getClass ("SCNPhysicsWorld");
	__xamarin_class_map [3291].handle = objc_getClass ("SCNRenderer");
	__xamarin_class_map [3292].handle = objc_getClass ("SCNView");
	__xamarin_class_map [3293].handle = objc_getClass ("PHFetchResult");
	__xamarin_class_map [3294].handle = objc_getClass ("Photos_PHPhotoLibrary___phlib_observer");
	__xamarin_class_map [3295].handle = objc_getClass ("PHPhotoLibrary");
	__xamarin_class_map [3296].handle = objc_getClass ("PHAssetResourceManager");
	__xamarin_class_map [3297].handle = objc_getClass ("PHLivePhotoEditingContext");
	__xamarin_class_map [3298].handle = objc_getClass ("PdfKit_PdfDocument__PdfDocumentDelegate");
	__xamarin_class_map [3299].handle = objc_getClass ("PDFDocument");
	__xamarin_class_map [3300].handle = objc_getClass ("PDFThumbnailView");
	__xamarin_class_map [3301].handle = objc_getClass ("PdfKit_PdfView__PdfViewDelegate");
	__xamarin_class_map [3302].handle = objc_getClass ("PDFView");
	__xamarin_class_map [3303].handle = objc_getClass ("PKShareablePassMetadata");
	__xamarin_class_map [3304].handle = objc_getClass ("PKAddShareablePassConfiguration");
	__xamarin_class_map [3305].handle = objc_getClass ("PKPassLibrary");
	__xamarin_class_map [3306].handle = objc_getClass ("PKPaymentAuthorizationController");
	__xamarin_class_map [3307].handle = objc_getClass ("PassKit_PKPaymentAuthorizationViewController__PKPaymentAuthorizationViewControllerDelegate");
	__xamarin_class_map [3308].handle = objc_getClass ("PKPaymentAuthorizationViewController");
	__xamarin_class_map [3309].handle = objc_getClass ("PKVehicleConnectionSession");
	__xamarin_class_map [3310].handle = objc_getClass ("NEVPNManager");
	__xamarin_class_map [3311].handle = objc_getClass ("NEAppProxyFlow");
	__xamarin_class_map [3312].handle = objc_getClass ("NETunnelProviderManager");
	__xamarin_class_map [3313].handle = objc_getClass ("NEAppProxyProviderManager");
	__xamarin_class_map [3314].handle = objc_getClass ("NEAppProxyTCPFlow");
	__xamarin_class_map [3315].handle = objc_getClass ("NEAppProxyUDPFlow");
	__xamarin_class_map [3316].handle = objc_getClass ("NEDNSProxyManager");
	__xamarin_class_map [3317].handle = objc_getClass ("NEDNSProxyProvider");
	__xamarin_class_map [3318].handle = objc_getClass ("NEDNSSettingsManager");
	__xamarin_class_map [3319].handle = objc_getClass ("NEFilterDataProvider");
	__xamarin_class_map [3320].handle = objc_getClass ("NEFilterManager");
	__xamarin_class_map [3321].handle = objc_getClass ("NEPacketTunnelFlow");
	__xamarin_class_map [3322].handle = objc_getClass ("NETransparentProxyManager");
	__xamarin_class_map [3323].handle = objc_getClass ("NWTCPConnection");
	__xamarin_class_map [3324].handle = objc_getClass ("NWUDPSession");
	__xamarin_class_map [3325].handle = objc_getClass ("NLEmbedding");
	__xamarin_class_map [3326].handle = objc_getClass ("NLLanguageRecognizer");
	__xamarin_class_map [3327].handle = objc_getClass ("NLTagger");
	__xamarin_class_map [3328].handle = objc_getClass ("MCSession");
	__xamarin_class_map [3329].handle = objc_getClass ("MDLMesh");
	__xamarin_class_map [3330].handle = objc_getClass ("MPSGraphTensorData");
	__xamarin_class_map [3331].handle = objc_getClass ("MPSGraphDepthwiseConvolution3DOpDescriptor");
	__xamarin_class_map [3332].handle = objc_getClass ("MPSGraphPooling4DOpDescriptor");
	__xamarin_class_map [3333].handle = objc_getClass ("MPSGraphShapedType");
	__xamarin_class_map [3334].handle = objc_getClass ("MPSGraphStencilOpDescriptor");
	__xamarin_class_map [3335].handle = objc_getClass ("MPSGraphTensor");
	__xamarin_class_map [3336].handle = objc_getClass ("MPSGraphVariableOp");
	__xamarin_class_map [3337].handle = objc_getClass ("MPSNNGraph");
	__xamarin_class_map [3338].handle = objc_getClass ("MPSNDArrayDescriptor");
	__xamarin_class_map [3339].handle = objc_getClass ("MTKTextureLoader");
	__xamarin_class_map [3340].handle = objc_getClass ("MPSkipIntervalCommand");
	__xamarin_class_map [3341].handle = objc_getClass ("MKLocalSearch");
	__xamarin_class_map [3342].handle = objc_getClass ("MKDirections");
	__xamarin_class_map [3343].handle = objc_getClass ("MKGradientPolylineRenderer");
	__xamarin_class_map [3344].handle = objc_getClass ("MKLookAroundSceneRequest");
	__xamarin_class_map [3345].handle = objc_getClass ("MKLookAroundSnapshotter");
	__xamarin_class_map [3346].handle = objc_getClass ("MKMapSnapshotter");
	__xamarin_class_map [3347].handle = objc_getClass ("MapKit_MKMapView__MKMapViewDelegate");
	__xamarin_class_map [3348].handle = objc_getClass ("MKMapView");
	__xamarin_class_map [3349].handle = objc_getClass ("MKPointOfInterestFilter");
	__xamarin_class_map [3350].handle = objc_getClass ("MLCConvolutionDescriptor");
	__xamarin_class_map [3351].handle = objc_getClass ("MLCGraph");
	__xamarin_class_map [3352].handle = objc_getClass ("MLCInferenceGraph");
	__xamarin_class_map [3353].handle = objc_getClass ("MLCLayerNormalizationLayer");
	__xamarin_class_map [3354].handle = objc_getClass ("MLCPaddingLayer");
	__xamarin_class_map [3355].handle = objc_getClass ("MLCPoolingDescriptor");
	__xamarin_class_map [3356].handle = objc_getClass ("MLCReductionLayer");
	__xamarin_class_map [3357].handle = objc_getClass ("MLCReshapeLayer");
	__xamarin_class_map [3358].handle = objc_getClass ("MLCSliceLayer");
	__xamarin_class_map [3359].handle = objc_getClass ("MLCSplitLayer");
	__xamarin_class_map [3360].handle = objc_getClass ("MLCTensor");
	__xamarin_class_map [3361].handle = objc_getClass ("MLCTensorDescriptor");
	__xamarin_class_map [3362].handle = objc_getClass ("MLCTrainingGraph");
	__xamarin_class_map [3363].handle = objc_getClass ("MLCTransposeLayer");
	__xamarin_class_map [3364].handle = objc_getClass ("MLCUpsampleLayer");
	__xamarin_class_map [3365].handle = objc_getClass ("INPerson");
	__xamarin_class_map [3366].handle = objc_getClass ("INFocusStatusCenter");
	__xamarin_class_map [3367].handle = objc_getClass ("INInteraction");
	__xamarin_class_map [3368].handle = objc_getClass ("INVoiceShortcutCenter");
	__xamarin_class_map [3369].handle = objc_getClass ("ImageKit_IKCameraDeviceView__IKCameraDeviceViewDelegate");
	__xamarin_class_map [3370].handle = objc_getClass ("IKCameraDeviceView");
	__xamarin_class_map [3371].handle = objc_getClass ("ImageKit_IKDeviceBrowserView__IKDeviceBrowserViewDelegate");
	__xamarin_class_map [3372].handle = objc_getClass ("IKDeviceBrowserView");
	__xamarin_class_map [3373].handle = objc_getClass ("IKFilterBrowserPanel");
	__xamarin_class_map [3374].handle = objc_getClass ("ImageKit_IKImageBrowserView__IKImageBrowserDelegate");
	__xamarin_class_map [3375].handle = objc_getClass ("IKImageBrowserView");
	__xamarin_class_map [3376].handle = objc_getClass ("ImageKit_IKSaveOptions__IKSaveOptionsDelegate");
	__xamarin_class_map [3377].handle = objc_getClass ("IKSaveOptions");
	__xamarin_class_map [3378].handle = objc_getClass ("ImageKit_IKScannerDeviceView__IKScannerDeviceViewDelegate");
	__xamarin_class_map [3379].handle = objc_getClass ("IKScannerDeviceView");
	__xamarin_class_map [3380].handle = objc_getClass ("ImageCaptureCore_ICCameraDevice_DidReadDataFromFileAction");
	__xamarin_class_map [3381].handle = objc_getClass ("ImageCaptureCore_ICCameraDevice_DidDownloadDataFromFileAction");
	__xamarin_class_map [3382].handle = objc_getClass ("ImageCaptureCore_ICCameraDevice_DidSendPtpAction");
	__xamarin_class_map [3383].handle = objc_getClass ("ICCameraDevice");
	__xamarin_class_map [3384].handle = objc_getClass ("HKAttachmentStore");
	__xamarin_class_map [3385].handle = objc_getClass ("HKHealthStore");
	__xamarin_class_map [3386].handle = objc_getClass ("HKHeartbeatSeriesBuilder");
	__xamarin_class_map [3387].handle = objc_getClass ("HKQuantitySeriesSampleBuilder");
	__xamarin_class_map [3388].handle = objc_getClass ("HKVerifiableClinicalRecordQuery");
	__xamarin_class_map [3389].handle = objc_getClass ("HKWorkoutRouteBuilder");
	__xamarin_class_map [3390].handle = objc_getClass ("GKTurnBasedExchange");
	__xamarin_class_map [3391].handle = objc_getClass ("GameKit_GKMatch__GKMatchDelegate");
	__xamarin_class_map [3392].handle = objc_getClass ("GKMatch");
	__xamarin_class_map [3393].handle = objc_getClass ("GKAchievement");
	__xamarin_class_map [3394].handle = objc_getClass ("GKAchievementDescription");
	__xamarin_class_map [3395].handle = objc_getClass ("GameKit_GKGameCenterViewController__GKGameCenterControllerDelegate");
	__xamarin_class_map [3396].handle = objc_getClass ("GameKit_GKAchievementViewController__GKAchievementViewControllerDelegate");
	__xamarin_class_map [3397].handle = objc_getClass ("GKGameCenterViewController");
	__xamarin_class_map [3398].handle = objc_getClass ("GKAchievementViewController");
	__xamarin_class_map [3399].handle = objc_getClass ("GameKit_GKChallengeEventHandler__GKChallengeEventHandlerDelegate");
	__xamarin_class_map [3400].handle = objc_getClass ("GKChallengeEventHandler");
	__xamarin_class_map [3401].handle = objc_getClass ("GameKit_GKFriendRequestComposeViewController__GKFriendRequestComposeViewControllerDelegate");
	__xamarin_class_map [3402].handle = objc_getClass ("GKFriendRequestComposeViewController");
	__xamarin_class_map [3403].handle = objc_getClass ("GKGameSession");
	__xamarin_class_map [3404].handle = objc_getClass ("GKLeaderboard");
	__xamarin_class_map [3405].handle = objc_getClass ("GKLeaderboardEntry");
	__xamarin_class_map [3406].handle = objc_getClass ("GKLeaderboardSet");
	__xamarin_class_map [3407].handle = objc_getClass ("GameKit_GKLeaderboardViewController__GKLeaderboardViewControllerDelegate");
	__xamarin_class_map [3408].handle = objc_getClass ("GKLeaderboardViewController");
	__xamarin_class_map [3409].handle = objc_getClass ("GKPlayer");
	__xamarin_class_map [3410].handle = objc_getClass ("GKLocalPlayer");
	__xamarin_class_map [3411].handle = objc_getClass ("GKMatchmaker");
	__xamarin_class_map [3412].handle = objc_getClass ("GameKit_GKMatchmakerViewController__GKMatchmakerViewControllerDelegate");
	__xamarin_class_map [3413].handle = objc_getClass ("GKMatchmakerViewController");
	__xamarin_class_map [3414].handle = objc_getClass ("GKNotificationBanner");
	__xamarin_class_map [3415].handle = objc_getClass ("GKSavedGame");
	__xamarin_class_map [3416].handle = objc_getClass ("GKScore");
	__xamarin_class_map [3417].handle = objc_getClass ("GKTurnBasedMatch");
	__xamarin_class_map [3418].handle = objc_getClass ("GCController");
	__xamarin_class_map [3419].handle = objc_getClass ("GCKeyboard");
	__xamarin_class_map [3420].handle = objc_getClass ("GCMouse");
	__xamarin_class_map [3421].handle = objc_getClass ("GCRacingWheel");
	__xamarin_class_map [3422].handle = objc_getClass ("GLKTextureLoader");
	__xamarin_class_map [3423].handle = objc_getClass ("WKWebView");
	__xamarin_class_map [3424].handle = objc_getClass ("WebKit_DomNode_DomNodeEventProxy");
	__xamarin_class_map [3425].handle = objc_getClass ("WebKit_DomNode_DomNodeEventProxy2");
	__xamarin_class_map [3426].handle = objc_getClass ("WebKit_WebView__WebFrameLoadDelegate");
	__xamarin_class_map [3427].handle = objc_getClass ("WebKit_WebView__WebDownloadDelegate");
	__xamarin_class_map [3428].handle = objc_getClass ("WebKit_WebView__WebResourceLoadDelegate");
	__xamarin_class_map [3429].handle = objc_getClass ("WebKit_WebView__WebUIDelegate");
	__xamarin_class_map [3430].handle = objc_getClass ("WebKit_WebView__WebPolicyDelegate");
	__xamarin_class_map [3431].handle = objc_getClass ("WebView");
	__xamarin_class_map [3432].handle = objc_getClass ("WebHistoryItem");
	__xamarin_class_map [3433].handle = objc_getClass ("WKContentRuleListStore");
	__xamarin_class_map [3434].handle = objc_getClass ("WKDownload");
	__xamarin_class_map [3435].handle = objc_getClass ("WKHTTPCookieStore");
	__xamarin_class_map [3436].handle = objc_getClass ("WKWebsiteDataStore");
	__xamarin_class_map [3437].handle = objc_getClass ("NSCalendar");
	__xamarin_class_map [3438].handle = objc_getClass ("NSDictionary");
	__xamarin_class_map [3439].handle = objc_getClass ("NSFileManager");
	__xamarin_class_map [3440].handle = objc_getClass ("NSHost");
	__xamarin_class_map [3441].handle = objc_getClass ("NSIndexPath");
	__xamarin_class_map [3442].handle = objc_getClass ("NSItemProvider");
	__xamarin_class_map [3443].handle = objc_getClass ("Foundation_NSKeyedArchiver__NSKeyedArchiverDelegate");
	__xamarin_class_map [3444].handle = objc_getClass ("NSKeyedArchiver");
	__xamarin_class_map [3445].handle = objc_getClass ("Foundation_NSKeyedUnarchiver__NSKeyedUnarchiverDelegate");
	__xamarin_class_map [3446].handle = objc_getClass ("NSLocale");
	__xamarin_class_map [3447].handle = objc_getClass ("NSMutableDictionary");
	__xamarin_class_map [3448].handle = objc_getClass ("Foundation_NSNetService__NSNetServiceDelegate");
	__xamarin_class_map [3449].handle = objc_getClass ("NSNetService");
	__xamarin_class_map [3450].handle = objc_getClass ("__NSObject_Disposer");
	__xamarin_class_map [3451].handle = objc_getClass ("__XamarinObjectObserver");
	__xamarin_class_map [3452].handle = objc_getClass ("NSProgress");
	__xamarin_class_map [3453].handle = objc_getClass ("Foundation_NSStream__NSStreamDelegate");
	__xamarin_class_map [3454].handle = objc_getClass ("NSThread");
	__xamarin_class_map [3455].handle = objc_getClass ("Foundation_NSThread_ActionThread");
	__xamarin_class_map [3456].handle = objc_getClass ("NSUbiquitousKeyValueStore");
	__xamarin_class_map [3457].handle = objc_getClass ("NSUndoManager");
	__xamarin_class_map [3458].handle = objc_getClass ("NSURL");
	__xamarin_class_map [3459].handle = objc_getClass ("NSURLConnection");
	__xamarin_class_map [3460].handle = objc_getClass ("NSURLSessionConfiguration");
	__xamarin_class_map [3461].handle = objc_getClass ("NSUserDefaults");
	__xamarin_class_map [3462].handle = objc_getClass ("Foundation_NSUrlSessionHandler_WrappedNSInputStream");
	__xamarin_class_map [3463].handle = objc_getClass ("Foundation_NSCache__NSCacheDelegate");
	__xamarin_class_map [3464].handle = objc_getClass ("NSCache");
	__xamarin_class_map [3465].handle = objc_getClass ("NSFileHandle");
	__xamarin_class_map [3466].handle = objc_getClass ("NSFileVersion");
	__xamarin_class_map [3467].handle = objc_getClass ("NSHTTPCookieStorage");
	__xamarin_class_map [3468].handle = objc_getClass ("Foundation_NSMetadataQuery__NSMetadataQueryDelegate");
	__xamarin_class_map [3469].handle = objc_getClass ("NSMetadataQuery");
	__xamarin_class_map [3470].handle = objc_getClass ("Foundation_NSNetServiceBrowser__NSNetServiceBrowserDelegate");
	__xamarin_class_map [3471].handle = objc_getClass ("NSNetServiceBrowser");
	__xamarin_class_map [3472].handle = objc_getClass ("NSProcessInfo");
	__xamarin_class_map [3473].handle = objc_getClass ("NSSecureUnarchiveFromDataTransformer");
	__xamarin_class_map [3474].handle = objc_getClass ("NSTask");
	__xamarin_class_map [3475].handle = objc_getClass ("NSURLCache");
	__xamarin_class_map [3476].handle = objc_getClass ("NSURLCredentialStorage");
	__xamarin_class_map [3477].handle = objc_getClass ("NSURLSessionStreamTask");
	__xamarin_class_map [3478].handle = objc_getClass ("NSURLSessionWebSocketTask");
	__xamarin_class_map [3479].handle = objc_getClass ("NSUserActivity");
	__xamarin_class_map [3480].handle = objc_getClass ("Foundation_NSUserNotificationCenter__NSUserNotificationCenterDelegate");
	__xamarin_class_map [3481].handle = objc_getClass ("NSUserNotificationCenter");
	__xamarin_class_map [3482].handle = objc_getClass ("FIFinderSync");
	__xamarin_class_map [3483].handle = objc_getClass ("FIFinderSyncController");
	__xamarin_class_map [3484].handle = objc_getClass ("NSFileProviderDomain");
	__xamarin_class_map [3485].handle = objc_getClass ("NSFileProviderManager");
	__xamarin_class_map [3486].handle = objc_getClass ("EKEventStore");
	__xamarin_class_map [3487].handle = objc_getClass ("EKVirtualConferenceProvider");
	__xamarin_class_map [3488].handle = objc_getClass ("CWInterface");
	__xamarin_class_map [3489].handle = objc_getClass ("CSSearchableIndex");
	__xamarin_class_map [3490].handle = objc_getClass ("CMPedometer");
	__xamarin_class_map [3491].handle = objc_getClass ("MIDICIResponder");
	__xamarin_class_map [3492].handle = objc_getClass ("MLMultiArray");
	__xamarin_class_map [3493].handle = objc_getClass ("MLModel");
	__xamarin_class_map [3494].handle = objc_getClass ("MLModelCollection");
	__xamarin_class_map [3495].handle = objc_getClass ("CoreLocation_CLLocationManager__CLLocationManagerDelegate");
	__xamarin_class_map [3496].handle = objc_getClass ("CLLocationManager");
	__xamarin_class_map [3497].handle = objc_getClass ("CLGeocoder");
	__xamarin_class_map [3498].handle = objc_getClass ("NSCoreDataCoreSpotlightDelegate");
	__xamarin_class_map [3499].handle = objc_getClass ("NSManagedObjectContext");
	__xamarin_class_map [3500].handle = objc_getClass ("NSPersistentContainer");
	__xamarin_class_map [3501].handle = objc_getClass ("NSPersistentCloudKitContainer");
	__xamarin_class_map [3502].handle = objc_getClass ("NSPersistentCloudKitContainerEvent");
	__xamarin_class_map [3503].handle = objc_getClass ("NSPersistentStoreCoordinator");
	__xamarin_class_map [3504].handle = objc_getClass ("CoreBluetooth_CBCentralManager__CBCentralManagerDelegate");
	__xamarin_class_map [3505].handle = objc_getClass ("CBCentralManager");
	__xamarin_class_map [3506].handle = objc_getClass ("CoreBluetooth_CBPeripheral__CBPeripheralDelegate");
	__xamarin_class_map [3507].handle = objc_getClass ("CBPeripheral");
	__xamarin_class_map [3508].handle = objc_getClass ("CoreBluetooth_CBPeripheralManager__CBPeripheralManagerDelegate");
	__xamarin_class_map [3509].handle = objc_getClass ("CBPeripheralManager");
	__xamarin_class_map [3510].handle = objc_getClass ("CoreAnimation_CAAnimation__CAAnimationDelegate");
	__xamarin_class_map [3511].handle = objc_getClass ("CNContactStore");
	__xamarin_class_map [3512].handle = objc_getClass ("CKContainer");
	__xamarin_class_map [3513].handle = objc_getClass ("CKDatabase");
	__xamarin_class_map [3514].handle = objc_getClass ("CLSContext");
	__xamarin_class_map [3515].handle = objc_getClass ("CLSDataStore");
	__xamarin_class_map [3516].handle = objc_getClass ("BADownloadManager");
	__xamarin_class_map [3517].handle = objc_getClass ("ASAuthorizationAppleIDCredential");
	__xamarin_class_map [3518].handle = objc_getClass ("ASAuthorizationAppleIDProvider");
	__xamarin_class_map [3519].handle = objc_getClass ("ASAuthorizationProviderExtensionAuthorizationRequest");
	__xamarin_class_map [3520].handle = objc_getClass ("ASAuthorizationProviderExtensionLoginConfiguration");
	__xamarin_class_map [3521].handle = objc_getClass ("ASAuthorizationProviderExtensionLoginManager");
	__xamarin_class_map [3522].handle = objc_getClass ("ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor");
	__xamarin_class_map [3523].handle = objc_getClass ("ASAuthorizationSingleSignOnCredential");
	__xamarin_class_map [3524].handle = objc_getClass ("ASAuthorizationWebBrowserPublicKeyCredentialManager");
	__xamarin_class_map [3525].handle = objc_getClass ("ASCredentialIdentityStore");
	__xamarin_class_map [3526].handle = objc_getClass ("AUAudioUnit");
	__xamarin_class_map [3527].handle = objc_getClass ("AppKit_NSApplication__NSApplicationDelegate");
	__xamarin_class_map [3528].handle = objc_getClass ("NSApplication");
	__xamarin_class_map [3529].handle = objc_getClass ("NSBrowser");
	__xamarin_class_map [3530].handle = objc_getClass ("AppKit_NSMatrix__NSMatrixDelegate");
	__xamarin_class_map [3531].handle = objc_getClass ("AppKit_NSPathCell__NSPathCellDelegate");
	__xamarin_class_map [3532].handle = objc_getClass ("NSPathCell");
	__xamarin_class_map [3533].handle = objc_getClass ("AppKit_NSTableView__NSTableViewDelegate");
	__xamarin_class_map [3534].handle = objc_getClass ("NSTableView");
	__xamarin_class_map [3535].handle = objc_getClass ("AppKit_NSAlert__NSAlertDelegate");
	__xamarin_class_map [3536].handle = objc_getClass ("NSAlert");
	__xamarin_class_map [3537].handle = objc_getClass ("NSColor");
	__xamarin_class_map [3538].handle = objc_getClass ("AppKit_NSTextField__NSTextFieldDelegate");
	__xamarin_class_map [3539].handle = objc_getClass ("AppKit_NSComboBox__NSComboBoxDelegate");
	__xamarin_class_map [3540].handle = objc_getClass ("NSComboBox");
	__xamarin_class_map [3541].handle = objc_getClass ("__NSDocumentDuplicateCallback");
	__xamarin_class_map [3542].handle = objc_getClass ("NSDocument");
	__xamarin_class_map [3543].handle = objc_getClass ("NSEvent");
	__xamarin_class_map [3544].handle = objc_getClass ("NSFont");
	__xamarin_class_map [3545].handle = objc_getClass ("__NSGestureRecognizerToken");
	__xamarin_class_map [3546].handle = objc_getClass ("__NSGestureRecognizerParameterlessToken");
	__xamarin_class_map [3547].handle = objc_getClass ("__NSGestureRecognizerParametrizedToken");
	__xamarin_class_map [3548].handle = objc_getClass ("AppKit_NSGestureRecognizer__NSGestureRecognizerDelegate");
	__xamarin_class_map [3549].handle = objc_getClass ("NSGestureRecognizer");
	__xamarin_class_map [3550].handle = objc_getClass ("__NSClickGestureRecognizer");
	__xamarin_class_map [3551].handle = objc_getClass ("NSClickGestureRecognizer");
	__xamarin_class_map [3552].handle = objc_getClass ("__NSMagnificationGestureRecognizer");
	__xamarin_class_map [3553].handle = objc_getClass ("NSMagnificationGestureRecognizer");
	__xamarin_class_map [3554].handle = objc_getClass ("__NSPanGestureRecognizer");
	__xamarin_class_map [3555].handle = objc_getClass ("NSPanGestureRecognizer");
	__xamarin_class_map [3556].handle = objc_getClass ("__NSPressGestureRecognizer");
	__xamarin_class_map [3557].handle = objc_getClass ("NSPressGestureRecognizer");
	__xamarin_class_map [3558].handle = objc_getClass ("__NSRotationGestureRecognizer");
	__xamarin_class_map [3559].handle = objc_getClass ("NSRotationGestureRecognizer");
	__xamarin_class_map [3560].handle = objc_getClass ("NSGradient");
	__xamarin_class_map [3561].handle = objc_getClass ("AppKit_NSImage__NSImageDelegate");
	__xamarin_class_map [3562].handle = objc_getClass ("NSImage");
	__xamarin_class_map [3563].handle = objc_getClass ("NSMenuItem");
	__xamarin_class_map [3564].handle = objc_getClass ("NSPopUpButton");
	__xamarin_class_map [3565].handle = objc_getClass ("NSPopUpButtonCell");
	__xamarin_class_map [3566].handle = objc_getClass ("NSPredicateEditorRowTemplate");
	__xamarin_class_map [3567].handle = objc_getClass ("NSScreen");
	__xamarin_class_map [3568].handle = objc_getClass ("AppKit_NSSharingService__NSSharingServiceDelegate");
	__xamarin_class_map [3569].handle = objc_getClass ("NSSharingService");
	__xamarin_class_map [3570].handle = objc_getClass ("AppKit_NSSound__NSSoundDelegate");
	__xamarin_class_map [3571].handle = objc_getClass ("NSSound");
	__xamarin_class_map [3572].handle = objc_getClass ("NSSpellChecker");
	__xamarin_class_map [3573].handle = objc_getClass ("AppKit_NSTextStorage__NSTextStorageDelegate");
	__xamarin_class_map [3574].handle = objc_getClass ("NSTextStorage");
	__xamarin_class_map [3575].handle = objc_getClass ("AppKit_NSWindow__NSWindowDelegate");
	__xamarin_class_map [3576].handle = objc_getClass ("NSWorkspace");
	__xamarin_class_map [3577].handle = objc_getClass ("NSAccessibilityElement");
	__xamarin_class_map [3578].handle = objc_getClass ("AppKit_NSAnimation__NSAnimationDelegate");
	__xamarin_class_map [3579].handle = objc_getClass ("NSColorPanel");
	__xamarin_class_map [3580].handle = objc_getClass ("AppKit_NSDatePicker__NSDatePickerCellDelegate");
	__xamarin_class_map [3581].handle = objc_getClass ("NSDatePicker");
	__xamarin_class_map [3582].handle = objc_getClass ("AppKit_NSDatePickerCell__NSDatePickerCellDelegate");
	__xamarin_class_map [3583].handle = objc_getClass ("NSDatePickerCell");
	__xamarin_class_map [3584].handle = objc_getClass ("AppKit_NSDrawer__NSDrawerDelegate");
	__xamarin_class_map [3585].handle = objc_getClass ("NSDrawer");
	__xamarin_class_map [3586].handle = objc_getClass ("NSHelpManager");
	__xamarin_class_map [3587].handle = objc_getClass ("NSMenu");
	__xamarin_class_map [3588].handle = objc_getClass ("NSOutlineView");
	__xamarin_class_map [3589].handle = objc_getClass ("AppKit_NSPageController__NSPageControllerDelegate");
	__xamarin_class_map [3590].handle = objc_getClass ("NSPageController");
	__xamarin_class_map [3591].handle = objc_getClass ("NSPopover");
	__xamarin_class_map [3592].handle = objc_getClass ("AppKit_NSRuleEditor__NSRuleEditorDelegate");
	__xamarin_class_map [3593].handle = objc_getClass ("AppKit_NSSavePanel__NSOpenSavePanelDelegate");
	__xamarin_class_map [3594].handle = objc_getClass ("NSScroller");
	__xamarin_class_map [3595].handle = objc_getClass ("NSScrollView");
	__xamarin_class_map [3596].handle = objc_getClass ("AppKit_NSSearchField__NSSearchFieldDelegate");
	__xamarin_class_map [3597].handle = objc_getClass ("NSSearchField");
	__xamarin_class_map [3598].handle = objc_getClass ("AppKit_NSSharingServicePicker__NSSharingServicePickerDelegate");
	__xamarin_class_map [3599].handle = objc_getClass ("NSSharingServicePicker");
	__xamarin_class_map [3600].handle = objc_getClass ("NSSliderAccessory");
	__xamarin_class_map [3601].handle = objc_getClass ("NSSplitView");
	__xamarin_class_map [3602].handle = objc_getClass ("NSTableViewDiffableDataSource");
	__xamarin_class_map [3603].handle = objc_getClass ("AppKit_NSTabView__NSTabViewDelegate");
	__xamarin_class_map [3604].handle = objc_getClass ("NSTabView");
	__xamarin_class_map [3605].handle = objc_getClass ("AppKit_NSText__NSTextDelegate");
	__xamarin_class_map [3606].handle = objc_getClass ("NSText");
	__xamarin_class_map [3607].handle = objc_getClass ("NSTextAlternatives");
	__xamarin_class_map [3608].handle = objc_getClass ("NSTextInputContext");
	__xamarin_class_map [3609].handle = objc_getClass ("AppKit_NSTextView__NSTextViewDelegate");
	__xamarin_class_map [3610].handle = objc_getClass ("NSTextView");
	__xamarin_class_map [3611].handle = objc_getClass ("AppKit_NSToolbar__NSToolbarDelegate");
	__xamarin_class_map [3612].handle = objc_getClass ("NSToolbar");
	__xamarin_class_map [3613].handle = objc_getClass ("AppKit_NSTouchBar__NSTouchBarDelegate");
	__xamarin_class_map [3614].handle = objc_getClass ("NSTouchBar");
	__xamarin_class_map [3615].handle = objc_getClass ("ACAccountStore");
	__xamarin_class_map [3616].handle = objc_getClass ("AVFoundation_AVCaptureFileOutput_recordingProxy");
	__xamarin_class_map [3617].handle = objc_getClass ("AVCaptureVideoPreviewLayer");
	__xamarin_class_map [3618].handle = objc_getClass ("AVPlayerItem");
	__xamarin_class_map [3619].handle = objc_getClass ("AVPlayerItemVideoOutput");
	__xamarin_class_map [3620].handle = objc_getClass ("AVAssetExportSession");
	__xamarin_class_map [3621].handle = objc_getClass ("AVAssetWriter");
	__xamarin_class_map [3622].handle = objc_getClass ("AVAsynchronousVideoCompositionRequest");
	__xamarin_class_map [3623].handle = objc_getClass ("AVAudioEngine");
	__xamarin_class_map [3624].handle = objc_getClass ("AVAudioPlayerNode");
	__xamarin_class_map [3625].handle = objc_getClass ("AVAudioUnitComponent");
	__xamarin_class_map [3626].handle = objc_getClass ("AVAudioUnitComponentManager");
	__xamarin_class_map [3627].handle = objc_getClass ("AVCaptureDevice");
	__xamarin_class_map [3628].handle = objc_getClass ("AVCaptureDeviceDiscoverySession");
	__xamarin_class_map [3629].handle = objc_getClass ("AVCaptureDeviceFormat");
	__xamarin_class_map [3630].handle = objc_getClass ("AVCapturePhotoOutput");
	__xamarin_class_map [3631].handle = objc_getClass ("AVCapturePhotoSettings");
	__xamarin_class_map [3632].handle = objc_getClass ("AVCaptureSession");
	__xamarin_class_map [3633].handle = objc_getClass ("AVCaptureStillImageOutput");
	__xamarin_class_map [3634].handle = objc_getClass ("AVCaptureVideoDataOutput");
	__xamarin_class_map [3635].handle = objc_getClass ("AVContentKeySession");
	__xamarin_class_map [3636].handle = objc_getClass ("AVFragmentedMovie");
	__xamarin_class_map [3637].handle = objc_getClass ("AVFragmentedMovieTrack");
	__xamarin_class_map [3638].handle = objc_getClass ("AVMIDIPlayer");
	__xamarin_class_map [3639].handle = objc_getClass ("AVMutableMovie");
	__xamarin_class_map [3640].handle = objc_getClass ("AVVideoComposition");
	__xamarin_class_map [3641].handle = objc_getClass ("AVMutableVideoComposition");
	__xamarin_class_map [3642].handle = objc_getClass ("AVVideoCompositionInstruction");
	__xamarin_class_map [3643].handle = objc_getClass ("AVMutableVideoCompositionInstruction");
	__xamarin_class_map [3644].handle = objc_getClass ("AVPlayerMediaSelectionCriteria");
	__xamarin_class_map [3645].handle = objc_getClass ("AVRouteDetector");
	__xamarin_class_map [3646].handle = objc_getClass ("AVSampleBufferAudioRenderer");
	__xamarin_class_map [3647].handle = objc_getClass ("AVSampleBufferDisplayLayer");
	__xamarin_class_map [3648].handle = objc_getClass ("AVSampleBufferGenerator");
	__xamarin_class_map [3649].handle = objc_getClass ("AVSampleBufferRenderSynchronizer");
	__xamarin_class_map [3650].handle = objc_getClass ("AVFoundation_AVSpeechSynthesizer__AVSpeechSynthesizerDelegate");
	__xamarin_class_map [3651].handle = objc_getClass ("AVSpeechSynthesizer");
	__xamarin_class_map [3652].handle = objc_getClass ("Foundation_NSUrlSessionHandler_NSUrlSessionHandlerDelegate");
	xamarin_add_registration_map (&__xamarin_registration_map, false);
}


} /* extern "C" */
